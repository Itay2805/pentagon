
out/bin/pentagon.elf:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80000000 <common_exception_stub>:
ffffffff80000000:	fc                   	cld    
ffffffff80000001:	50                   	push   %rax
ffffffff80000002:	53                   	push   %rbx
ffffffff80000003:	51                   	push   %rcx
ffffffff80000004:	52                   	push   %rdx
ffffffff80000005:	56                   	push   %rsi
ffffffff80000006:	57                   	push   %rdi
ffffffff80000007:	55                   	push   %rbp
ffffffff80000008:	41 50                	push   %r8
ffffffff8000000a:	41 51                	push   %r9
ffffffff8000000c:	41 52                	push   %r10
ffffffff8000000e:	41 53                	push   %r11
ffffffff80000010:	41 54                	push   %r12
ffffffff80000012:	41 55                	push   %r13
ffffffff80000014:	41 56                	push   %r14
ffffffff80000016:	41 57                	push   %r15
ffffffff80000018:	48 89 e7             	mov    %rsp,%rdi
ffffffff8000001b:	e8 40 6f 00 00       	call   ffffffff80006f60 <common_exception_handler>
ffffffff80000020:	41 5f                	pop    %r15
ffffffff80000022:	41 5e                	pop    %r14
ffffffff80000024:	41 5d                	pop    %r13
ffffffff80000026:	41 5c                	pop    %r12
ffffffff80000028:	41 5b                	pop    %r11
ffffffff8000002a:	41 5a                	pop    %r10
ffffffff8000002c:	41 59                	pop    %r9
ffffffff8000002e:	41 58                	pop    %r8
ffffffff80000030:	5d                   	pop    %rbp
ffffffff80000031:	5f                   	pop    %rdi
ffffffff80000032:	5e                   	pop    %rsi
ffffffff80000033:	5a                   	pop    %rdx
ffffffff80000034:	59                   	pop    %rcx
ffffffff80000035:	5b                   	pop    %rbx
ffffffff80000036:	58                   	pop    %rax
ffffffff80000037:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000003b:	48 cf                	iretq  

ffffffff8000003d <common_interrupt_stub>:
ffffffff8000003d:	fc                   	cld    
ffffffff8000003e:	50                   	push   %rax
ffffffff8000003f:	53                   	push   %rbx
ffffffff80000040:	51                   	push   %rcx
ffffffff80000041:	52                   	push   %rdx
ffffffff80000042:	56                   	push   %rsi
ffffffff80000043:	57                   	push   %rdi
ffffffff80000044:	55                   	push   %rbp
ffffffff80000045:	41 50                	push   %r8
ffffffff80000047:	41 51                	push   %r9
ffffffff80000049:	41 52                	push   %r10
ffffffff8000004b:	41 53                	push   %r11
ffffffff8000004d:	41 54                	push   %r12
ffffffff8000004f:	41 55                	push   %r13
ffffffff80000051:	41 56                	push   %r14
ffffffff80000053:	41 57                	push   %r15
ffffffff80000055:	48 89 e7             	mov    %rsp,%rdi
ffffffff80000058:	e8 d3 6f 00 00       	call   ffffffff80007030 <common_interrupt_handler>
ffffffff8000005d:	41 5f                	pop    %r15
ffffffff8000005f:	41 5e                	pop    %r14
ffffffff80000061:	41 5d                	pop    %r13
ffffffff80000063:	41 5c                	pop    %r12
ffffffff80000065:	41 5b                	pop    %r11
ffffffff80000067:	41 5a                	pop    %r10
ffffffff80000069:	41 59                	pop    %r9
ffffffff8000006b:	41 58                	pop    %r8
ffffffff8000006d:	5d                   	pop    %rbp
ffffffff8000006e:	5f                   	pop    %rdi
ffffffff8000006f:	5e                   	pop    %rsi
ffffffff80000070:	5a                   	pop    %rdx
ffffffff80000071:	59                   	pop    %rcx
ffffffff80000072:	5b                   	pop    %rbx
ffffffff80000073:	58                   	pop    %rax
ffffffff80000074:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80000078:	48 cf                	iretq  
ffffffff8000007a:	cc                   	int3   
ffffffff8000007b:	cc                   	int3   
ffffffff8000007c:	cc                   	int3   
ffffffff8000007d:	cc                   	int3   
ffffffff8000007e:	cc                   	int3   
ffffffff8000007f:	cc                   	int3   

ffffffff80000080 <notify_list_add>:
ffffffff80000080:	55                   	push   %rbp
ffffffff80000081:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000084:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80000088:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000008c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000090:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff80000097:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff8000009a:	f0 0f c1 08          	lock xadd %ecx,(%rax)
ffffffff8000009e:	89 4d fc             	mov    %ecx,-0x4(%rbp)
ffffffff800000a1:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800000a4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800000a8:	5d                   	pop    %rbp
ffffffff800000a9:	c3                   	ret    
ffffffff800000aa:	cc                   	int3   
ffffffff800000ab:	cc                   	int3   
ffffffff800000ac:	cc                   	int3   
ffffffff800000ad:	cc                   	int3   
ffffffff800000ae:	cc                   	int3   
ffffffff800000af:	cc                   	int3   

ffffffff800000b0 <notify_list_wait>:
ffffffff800000b0:	55                   	push   %rbp
ffffffff800000b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800000b4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800000b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800000bc:	89 75 ec             	mov    %esi,-0x14(%rbp)
ffffffff800000bf:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800000c3:	48 83 c7 08          	add    $0x8,%rdi
ffffffff800000c7:	e8 84 09 00 00       	call   ffffffff80000a50 <spinlock_lock>
ffffffff800000cc:	8b 7d ec             	mov    -0x14(%rbp),%edi
ffffffff800000cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800000d3:	8b 70 04             	mov    0x4(%rax),%esi
ffffffff800000d6:	e8 a5 00 00 00       	call   ffffffff80000180 <less>
ffffffff800000db:	a8 01                	test   $0x1,%al
ffffffff800000dd:	75 02                	jne    ffffffff800000e1 <notify_list_wait+0x31>
ffffffff800000df:	eb 0f                	jmp    ffffffff800000f0 <notify_list_wait+0x40>
ffffffff800000e1:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800000e5:	48 83 c7 08          	add    $0x8,%rdi
ffffffff800000e9:	e8 52 0a 00 00       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff800000ee:	eb 7e                	jmp    ffffffff8000016e <notify_list_wait+0xbe>
ffffffff800000f0:	31 c0                	xor    %eax,%eax
ffffffff800000f2:	e8 99 51 01 00       	call   ffffffff80015290 <acquire_waiting_thread>
ffffffff800000f7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800000fb:	31 c0                	xor    %eax,%eax
ffffffff800000fd:	e8 0e 42 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff80000102:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000106:	48 89 01             	mov    %rax,(%rcx)
ffffffff80000109:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff8000010c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000110:	89 41 10             	mov    %eax,0x10(%rcx)
ffffffff80000113:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000117:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
ffffffff8000011c:	75 0e                	jne    ffffffff8000012c <notify_list_wait+0x7c>
ffffffff8000011e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000122:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80000126:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff8000012a:	eb 10                	jmp    ffffffff8000013c <notify_list_wait+0x8c>
ffffffff8000012c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000130:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80000134:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff80000138:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff8000013c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000140:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80000144:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff80000148:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000014c:	48 83 c0 08          	add    $0x8,%rax
ffffffff80000150:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000154:	48 8b 09             	mov    (%rcx),%rcx
ffffffff80000157:	48 89 81 e8 02 00 00 	mov    %rax,0x2e8(%rcx)
ffffffff8000015e:	31 c0                	xor    %eax,%eax
ffffffff80000160:	e8 2b 4e 01 00       	call   ffffffff80014f90 <scheduler_park>
ffffffff80000165:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80000169:	e8 52 52 01 00       	call   ffffffff800153c0 <release_waiting_thread>
ffffffff8000016e:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80000172:	5d                   	pop    %rbp
ffffffff80000173:	c3                   	ret    
ffffffff80000174:	cc                   	int3   
ffffffff80000175:	cc                   	int3   
ffffffff80000176:	cc                   	int3   
ffffffff80000177:	cc                   	int3   
ffffffff80000178:	cc                   	int3   
ffffffff80000179:	cc                   	int3   
ffffffff8000017a:	cc                   	int3   
ffffffff8000017b:	cc                   	int3   
ffffffff8000017c:	cc                   	int3   
ffffffff8000017d:	cc                   	int3   
ffffffff8000017e:	cc                   	int3   
ffffffff8000017f:	cc                   	int3   

ffffffff80000180 <less>:
ffffffff80000180:	55                   	push   %rbp
ffffffff80000181:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000184:	50                   	push   %rax
ffffffff80000185:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff80000188:	89 75 fc             	mov    %esi,-0x4(%rbp)
ffffffff8000018b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000018e:	2b 45 fc             	sub    -0x4(%rbp),%eax
ffffffff80000191:	83 f8 00             	cmp    $0x0,%eax
ffffffff80000194:	0f 9c c0             	setl   %al
ffffffff80000197:	24 01                	and    $0x1,%al
ffffffff80000199:	0f b6 c0             	movzbl %al,%eax
ffffffff8000019c:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800001a0:	5d                   	pop    %rbp
ffffffff800001a1:	c3                   	ret    
ffffffff800001a2:	cc                   	int3   
ffffffff800001a3:	cc                   	int3   
ffffffff800001a4:	cc                   	int3   
ffffffff800001a5:	cc                   	int3   
ffffffff800001a6:	cc                   	int3   
ffffffff800001a7:	cc                   	int3   
ffffffff800001a8:	cc                   	int3   
ffffffff800001a9:	cc                   	int3   
ffffffff800001aa:	cc                   	int3   
ffffffff800001ab:	cc                   	int3   
ffffffff800001ac:	cc                   	int3   
ffffffff800001ad:	cc                   	int3   
ffffffff800001ae:	cc                   	int3   
ffffffff800001af:	cc                   	int3   

ffffffff800001b0 <notify_list_notify_all>:
ffffffff800001b0:	55                   	push   %rbp
ffffffff800001b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800001b4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff800001b8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800001bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800001c0:	8b 00                	mov    (%rax),%eax
ffffffff800001c2:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff800001c5:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff800001c8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800001cc:	8b 49 04             	mov    0x4(%rcx),%ecx
ffffffff800001cf:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff800001d2:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff800001d5:	75 05                	jne    ffffffff800001dc <notify_list_notify_all+0x2c>
ffffffff800001d7:	e9 8a 00 00 00       	jmp    ffffffff80000266 <notify_list_notify_all+0xb6>
ffffffff800001dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800001e0:	48 83 c7 08          	add    $0x8,%rdi
ffffffff800001e4:	e8 67 08 00 00       	call   ffffffff80000a50 <spinlock_lock>
ffffffff800001e9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800001ed:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800001f1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800001f5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800001f9:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80000200:	00 
ffffffff80000201:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000205:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8000020c:	00 
ffffffff8000020d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000211:	8b 08                	mov    (%rax),%ecx
ffffffff80000213:	89 4d ec             	mov    %ecx,-0x14(%rbp)
ffffffff80000216:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff80000219:	89 4d e8             	mov    %ecx,-0x18(%rbp)
ffffffff8000021c:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff8000021f:	87 48 04             	xchg   %ecx,0x4(%rax)
ffffffff80000222:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80000226:	48 83 c7 08          	add    $0x8,%rdi
ffffffff8000022a:	e8 11 09 00 00       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000022f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80000234:	74 2e                	je     ffffffff80000264 <notify_list_notify_all+0xb4>
ffffffff80000236:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000023a:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000023e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80000242:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000246:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8000024d:	00 
ffffffff8000024e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000252:	48 8b 38             	mov    (%rax),%rdi
ffffffff80000255:	e8 d6 36 01 00       	call   ffffffff80013930 <scheduler_ready_thread>
ffffffff8000025a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000025e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000262:	eb cb                	jmp    ffffffff8000022f <notify_list_notify_all+0x7f>
ffffffff80000264:	eb 00                	jmp    ffffffff80000266 <notify_list_notify_all+0xb6>
ffffffff80000266:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000026a:	5d                   	pop    %rbp
ffffffff8000026b:	c3                   	ret    
ffffffff8000026c:	cc                   	int3   
ffffffff8000026d:	cc                   	int3   
ffffffff8000026e:	cc                   	int3   
ffffffff8000026f:	cc                   	int3   

ffffffff80000270 <conditional_wait>:
ffffffff80000270:	55                   	push   %rbp
ffffffff80000271:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000274:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000278:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000027c:	48 c7 45 f0 48 c0 21 	movq   $0xffffffff8021c048,-0x10(%rbp)
ffffffff80000283:	80 
ffffffff80000284:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000288:	e8 f3 fd ff ff       	call   ffffffff80000080 <notify_list_add>
ffffffff8000028d:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80000290:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80000294:	e8 87 06 00 00       	call   ffffffff80000920 <mutex_unlock>
ffffffff80000299:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000029d:	8b 75 fc             	mov    -0x4(%rbp),%esi
ffffffff800002a0:	e8 0b fe ff ff       	call   ffffffff800000b0 <notify_list_wait>
ffffffff800002a5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800002a9:	e8 12 04 00 00       	call   ffffffff800006c0 <mutex_lock>
ffffffff800002ae:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800002b2:	5d                   	pop    %rbp
ffffffff800002b3:	c3                   	ret    
ffffffff800002b4:	cc                   	int3   
ffffffff800002b5:	cc                   	int3   
ffffffff800002b6:	cc                   	int3   
ffffffff800002b7:	cc                   	int3   
ffffffff800002b8:	cc                   	int3   
ffffffff800002b9:	cc                   	int3   
ffffffff800002ba:	cc                   	int3   
ffffffff800002bb:	cc                   	int3   
ffffffff800002bc:	cc                   	int3   
ffffffff800002bd:	cc                   	int3   
ffffffff800002be:	cc                   	int3   
ffffffff800002bf:	cc                   	int3   

ffffffff800002c0 <conditional_broadcast>:
ffffffff800002c0:	55                   	push   %rbp
ffffffff800002c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800002c4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800002c8:	48 c7 45 f8 88 c0 21 	movq   $0xffffffff8021c088,-0x8(%rbp)
ffffffff800002cf:	80 
ffffffff800002d0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800002d4:	e8 d7 fe ff ff       	call   ffffffff800001b0 <notify_list_notify_all>
ffffffff800002d9:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800002dd:	5d                   	pop    %rbp
ffffffff800002de:	c3                   	ret    
ffffffff800002df:	cc                   	int3   

ffffffff800002e0 <semaphore_queue>:
ffffffff800002e0:	55                   	push   %rbp
ffffffff800002e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800002e4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800002e8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff800002ec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff800002f0:	80 e2 01             	and    $0x1,%dl
ffffffff800002f3:	88 55 ff             	mov    %dl,-0x1(%rbp)
ffffffff800002f6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800002fa:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff800002fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000302:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80000306:	74 5b                	je     ffffffff80000363 <semaphore_queue+0x83>
ffffffff80000308:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000030c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80000310:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80000314:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000318:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8000031b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000031f:	89 41 10             	mov    %eax,0x10(%rcx)
ffffffff80000322:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000326:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000032a:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000032e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000332:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80000336:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000033a:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff8000033e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000342:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
ffffffff80000347:	75 0c                	jne    ffffffff80000355 <semaphore_queue+0x75>
ffffffff80000349:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000034d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80000351:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff80000355:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000359:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000360:	00 
ffffffff80000361:	eb 41                	jmp    ffffffff800003a4 <semaphore_queue+0xc4>
ffffffff80000363:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000367:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
ffffffff8000036c:	75 0e                	jne    ffffffff8000037c <semaphore_queue+0x9c>
ffffffff8000036e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000372:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000376:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000037a:	eb 10                	jmp    ffffffff8000038c <semaphore_queue+0xac>
ffffffff8000037c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000380:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000384:	48 8b 49 20          	mov    0x20(%rcx),%rcx
ffffffff80000388:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000038c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000390:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000394:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff80000398:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000039c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff800003a3:	00 
ffffffff800003a4:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800003a8:	5d                   	pop    %rbp
ffffffff800003a9:	c3                   	ret    
ffffffff800003aa:	cc                   	int3   
ffffffff800003ab:	cc                   	int3   
ffffffff800003ac:	cc                   	int3   
ffffffff800003ad:	cc                   	int3   
ffffffff800003ae:	cc                   	int3   
ffffffff800003af:	cc                   	int3   

ffffffff800003b0 <semaphore_dequeue>:
ffffffff800003b0:	55                   	push   %rbp
ffffffff800003b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800003b4:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800003b8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800003bc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800003c0:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff800003c4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800003c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800003cc:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
ffffffff800003d1:	74 69                	je     ffffffff8000043c <semaphore_dequeue+0x8c>
ffffffff800003d3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800003d7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800003db:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800003df:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800003e3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800003e7:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff800003eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800003ef:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff800003f2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800003f6:	89 41 10             	mov    %eax,0x10(%rcx)
ffffffff800003f9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800003fd:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
ffffffff80000402:	74 12                	je     ffffffff80000416 <semaphore_dequeue+0x66>
ffffffff80000404:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000408:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8000040c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000410:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff80000414:	eb 0c                	jmp    ffffffff80000422 <semaphore_dequeue+0x72>
ffffffff80000416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000041a:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000421:	00 
ffffffff80000422:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000426:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8000042d:	00 
ffffffff8000042e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000432:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff80000439:	00 
ffffffff8000043a:	eb 0c                	jmp    ffffffff80000448 <semaphore_dequeue+0x98>
ffffffff8000043c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000440:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80000447:	00 
ffffffff80000448:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000044c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
ffffffff80000453:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000457:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000045b:	5d                   	pop    %rbp
ffffffff8000045c:	c3                   	ret    
ffffffff8000045d:	cc                   	int3   
ffffffff8000045e:	cc                   	int3   
ffffffff8000045f:	cc                   	int3   

ffffffff80000460 <semaphore_acquire>:
ffffffff80000460:	55                   	push   %rbp
ffffffff80000461:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000464:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80000468:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000046c:	40 80 e6 01          	and    $0x1,%sil
ffffffff80000470:	40 88 75 ff          	mov    %sil,-0x1(%rbp)
ffffffff80000474:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80000478:	e8 e3 00 00 00       	call   ffffffff80000560 <semaphore_can_acquire>
ffffffff8000047d:	a8 01                	test   $0x1,%al
ffffffff8000047f:	75 02                	jne    ffffffff80000483 <semaphore_acquire+0x23>
ffffffff80000481:	eb 05                	jmp    ffffffff80000488 <semaphore_acquire+0x28>
ffffffff80000483:	e9 ce 00 00 00       	jmp    ffffffff80000556 <semaphore_acquire+0xf6>
ffffffff80000488:	31 c0                	xor    %eax,%eax
ffffffff8000048a:	e8 01 4e 01 00       	call   ffffffff80015290 <acquire_waiting_thread>
ffffffff8000048f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80000493:	31 c0                	xor    %eax,%eax
ffffffff80000495:	e8 76 3e 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff8000049a:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000049e:	48 89 01             	mov    %rax,(%rcx)
ffffffff800004a1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800004a5:	48 83 c7 04          	add    $0x4,%rdi
ffffffff800004a9:	e8 a2 05 00 00       	call   ffffffff80000a50 <spinlock_lock>
ffffffff800004ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800004b2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%rbp)
ffffffff800004b9:	8b 4d e0             	mov    -0x20(%rbp),%ecx
ffffffff800004bc:	f0 0f c1 48 10       	lock xadd %ecx,0x10(%rax)
ffffffff800004c1:	89 4d d8             	mov    %ecx,-0x28(%rbp)
ffffffff800004c4:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800004c8:	e8 93 00 00 00       	call   ffffffff80000560 <semaphore_can_acquire>
ffffffff800004cd:	a8 01                	test   $0x1,%al
ffffffff800004cf:	75 02                	jne    ffffffff800004d3 <semaphore_acquire+0x73>
ffffffff800004d1:	eb 27                	jmp    ffffffff800004fa <semaphore_acquire+0x9a>
ffffffff800004d3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800004d7:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
ffffffff800004de:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff800004e1:	f7 d9                	neg    %ecx
ffffffff800004e3:	f0 0f c1 48 10       	lock xadd %ecx,0x10(%rax)
ffffffff800004e8:	89 4d dc             	mov    %ecx,-0x24(%rbp)
ffffffff800004eb:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800004ef:	48 83 c7 04          	add    $0x4,%rdi
ffffffff800004f3:	e8 48 06 00 00       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff800004f8:	eb 53                	jmp    ffffffff8000054d <semaphore_acquire+0xed>
ffffffff800004fa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800004fe:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80000502:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80000505:	0f b6 d0             	movzbl %al,%edx
ffffffff80000508:	83 e2 01             	and    $0x1,%edx
ffffffff8000050b:	e8 d0 fd ff ff       	call   ffffffff800002e0 <semaphore_queue>
ffffffff80000510:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000514:	48 83 c0 04          	add    $0x4,%rax
ffffffff80000518:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000051c:	48 8b 09             	mov    (%rcx),%rcx
ffffffff8000051f:	48 89 81 e8 02 00 00 	mov    %rax,0x2e8(%rcx)
ffffffff80000526:	31 c0                	xor    %eax,%eax
ffffffff80000528:	e8 63 4a 01 00       	call   ffffffff80014f90 <scheduler_park>
ffffffff8000052d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000531:	83 78 10 00          	cmpl   $0x0,0x10(%rax)
ffffffff80000535:	75 0f                	jne    ffffffff80000546 <semaphore_acquire+0xe6>
ffffffff80000537:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000053b:	e8 20 00 00 00       	call   ffffffff80000560 <semaphore_can_acquire>
ffffffff80000540:	a8 01                	test   $0x1,%al
ffffffff80000542:	75 02                	jne    ffffffff80000546 <semaphore_acquire+0xe6>
ffffffff80000544:	eb 02                	jmp    ffffffff80000548 <semaphore_acquire+0xe8>
ffffffff80000546:	eb 05                	jmp    ffffffff8000054d <semaphore_acquire+0xed>
ffffffff80000548:	e9 54 ff ff ff       	jmp    ffffffff800004a1 <semaphore_acquire+0x41>
ffffffff8000054d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000551:	e8 6a 4e 01 00       	call   ffffffff800153c0 <release_waiting_thread>
ffffffff80000556:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000055a:	5d                   	pop    %rbp
ffffffff8000055b:	c3                   	ret    
ffffffff8000055c:	cc                   	int3   
ffffffff8000055d:	cc                   	int3   
ffffffff8000055e:	cc                   	int3   
ffffffff8000055f:	cc                   	int3   

ffffffff80000560 <semaphore_can_acquire>:
ffffffff80000560:	55                   	push   %rbp
ffffffff80000561:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000564:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000568:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000056c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000570:	8b 00                	mov    (%rax),%eax
ffffffff80000572:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80000575:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80000578:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000057b:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000057f:	75 06                	jne    ffffffff80000587 <semaphore_can_acquire+0x27>
ffffffff80000581:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80000585:	eb 35                	jmp    ffffffff800005bc <semaphore_can_acquire+0x5c>
ffffffff80000587:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000058b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000058e:	ff c8                	dec    %eax
ffffffff80000590:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80000593:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000596:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80000599:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff8000059d:	0f 94 c1             	sete   %cl
ffffffff800005a0:	f6 c1 01             	test   $0x1,%cl
ffffffff800005a3:	75 03                	jne    ffffffff800005a8 <semaphore_can_acquire+0x48>
ffffffff800005a5:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800005a8:	80 e1 01             	and    $0x1,%cl
ffffffff800005ab:	88 4d fe             	mov    %cl,-0x2(%rbp)
ffffffff800005ae:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff800005b2:	74 06                	je     ffffffff800005ba <semaphore_can_acquire+0x5a>
ffffffff800005b4:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff800005b8:	eb 02                	jmp    ffffffff800005bc <semaphore_can_acquire+0x5c>
ffffffff800005ba:	eb b0                	jmp    ffffffff8000056c <semaphore_can_acquire+0xc>
ffffffff800005bc:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff800005bf:	24 01                	and    $0x1,%al
ffffffff800005c1:	0f b6 c0             	movzbl %al,%eax
ffffffff800005c4:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800005c8:	5d                   	pop    %rbp
ffffffff800005c9:	c3                   	ret    
ffffffff800005ca:	cc                   	int3   
ffffffff800005cb:	cc                   	int3   
ffffffff800005cc:	cc                   	int3   
ffffffff800005cd:	cc                   	int3   
ffffffff800005ce:	cc                   	int3   
ffffffff800005cf:	cc                   	int3   

ffffffff800005d0 <semaphore_release>:
ffffffff800005d0:	55                   	push   %rbp
ffffffff800005d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800005d4:	53                   	push   %rbx
ffffffff800005d5:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff800005d9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800005dd:	40 80 e6 01          	and    $0x1,%sil
ffffffff800005e1:	40 88 75 f7          	mov    %sil,-0x9(%rbp)
ffffffff800005e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800005e9:	c7 45 d0 01 00 00 00 	movl   $0x1,-0x30(%rbp)
ffffffff800005f0:	8b 4d d0             	mov    -0x30(%rbp),%ecx
ffffffff800005f3:	f0 0f c1 08          	lock xadd %ecx,(%rax)
ffffffff800005f7:	89 4d c8             	mov    %ecx,-0x38(%rbp)
ffffffff800005fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800005fe:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80000601:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80000604:	83 7d d4 00          	cmpl   $0x0,-0x2c(%rbp)
ffffffff80000608:	75 05                	jne    ffffffff8000060f <semaphore_release+0x3f>
ffffffff8000060a:	e9 a3 00 00 00       	jmp    ffffffff800006b2 <semaphore_release+0xe2>
ffffffff8000060f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000613:	48 83 c7 04          	add    $0x4,%rdi
ffffffff80000617:	e8 34 04 00 00       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000061c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000620:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80000623:	89 45 d8             	mov    %eax,-0x28(%rbp)
ffffffff80000626:	83 7d d8 00          	cmpl   $0x0,-0x28(%rbp)
ffffffff8000062a:	75 0f                	jne    ffffffff8000063b <semaphore_release+0x6b>
ffffffff8000062c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000630:	48 83 c7 04          	add    $0x4,%rdi
ffffffff80000634:	e8 07 05 00 00       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff80000639:	eb 77                	jmp    ffffffff800006b2 <semaphore_release+0xe2>
ffffffff8000063b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000063f:	e8 6c fd ff ff       	call   ffffffff800003b0 <semaphore_dequeue>
ffffffff80000644:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80000648:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000064c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
ffffffff80000653:	8b 4d dc             	mov    -0x24(%rbp),%ecx
ffffffff80000656:	f7 d9                	neg    %ecx
ffffffff80000658:	f0 0f c1 48 10       	lock xadd %ecx,0x10(%rax)
ffffffff8000065d:	89 4d cc             	mov    %ecx,-0x34(%rbp)
ffffffff80000660:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000664:	48 83 c7 04          	add    $0x4,%rdi
ffffffff80000668:	e8 d3 04 00 00       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000066d:	8a 45 f7             	mov    -0x9(%rbp),%al
ffffffff80000670:	24 01                	and    $0x1,%al
ffffffff80000672:	0f b6 d8             	movzbl %al,%ebx
ffffffff80000675:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000679:	e8 e2 fe ff ff       	call   ffffffff80000560 <semaphore_can_acquire>
ffffffff8000067e:	24 01                	and    $0x1,%al
ffffffff80000680:	0f b6 c0             	movzbl %al,%eax
ffffffff80000683:	21 c3                	and    %eax,%ebx
ffffffff80000685:	83 fb 00             	cmp    $0x0,%ebx
ffffffff80000688:	74 0b                	je     ffffffff80000695 <semaphore_release+0xc5>
ffffffff8000068a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000068e:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%rax)
ffffffff80000695:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80000699:	48 8b 38             	mov    (%rax),%rdi
ffffffff8000069c:	e8 8f 32 01 00       	call   ffffffff80013930 <scheduler_ready_thread>
ffffffff800006a1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800006a5:	83 78 10 01          	cmpl   $0x1,0x10(%rax)
ffffffff800006a9:	75 07                	jne    ffffffff800006b2 <semaphore_release+0xe2>
ffffffff800006ab:	31 c0                	xor    %eax,%eax
ffffffff800006ad:	e8 ce 48 01 00       	call   ffffffff80014f80 <scheduler_yield>
ffffffff800006b2:	48 83 c4 38          	add    $0x38,%rsp
ffffffff800006b6:	5b                   	pop    %rbx
ffffffff800006b7:	5d                   	pop    %rbp
ffffffff800006b8:	c3                   	ret    
ffffffff800006b9:	cc                   	int3   
ffffffff800006ba:	cc                   	int3   
ffffffff800006bb:	cc                   	int3   
ffffffff800006bc:	cc                   	int3   
ffffffff800006bd:	cc                   	int3   
ffffffff800006be:	cc                   	int3   
ffffffff800006bf:	cc                   	int3   

ffffffff800006c0 <mutex_lock>:
ffffffff800006c0:	55                   	push   %rbp
ffffffff800006c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800006c4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800006c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800006cc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff800006d3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800006d7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800006de:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800006e1:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800006e4:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff800006e8:	0f 94 c1             	sete   %cl
ffffffff800006eb:	f6 c1 01             	test   $0x1,%cl
ffffffff800006ee:	75 03                	jne    ffffffff800006f3 <mutex_lock+0x33>
ffffffff800006f0:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800006f3:	80 e1 01             	and    $0x1,%cl
ffffffff800006f6:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff800006f9:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff800006fd:	74 02                	je     ffffffff80000701 <mutex_lock+0x41>
ffffffff800006ff:	eb 09                	jmp    ffffffff8000070a <mutex_lock+0x4a>
ffffffff80000701:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000705:	e8 06 00 00 00       	call   ffffffff80000710 <mutex_lock_slow>
ffffffff8000070a:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000070e:	5d                   	pop    %rbp
ffffffff8000070f:	c3                   	ret    

ffffffff80000710 <mutex_lock_slow>:
ffffffff80000710:	55                   	push   %rbp
ffffffff80000711:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000714:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80000718:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000071c:	c6 45 fe 00          	movb   $0x0,-0x2(%rbp)
ffffffff80000720:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80000724:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff8000072b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000072f:	8b 00                	mov    (%rax),%eax
ffffffff80000731:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80000734:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000737:	83 e0 05             	and    $0x5,%eax
ffffffff8000073a:	83 f8 01             	cmp    $0x1,%eax
ffffffff8000073d:	0f 85 84 00 00 00    	jne    ffffffff800007c7 <mutex_lock_slow+0xb7>
ffffffff80000743:	8b 7d ec             	mov    -0x14(%rbp),%edi
ffffffff80000746:	e8 d5 30 01 00       	call   ffffffff80013820 <scheduler_can_spin>
ffffffff8000074b:	a8 01                	test   $0x1,%al
ffffffff8000074d:	75 02                	jne    ffffffff80000751 <mutex_lock_slow+0x41>
ffffffff8000074f:	eb 76                	jmp    ffffffff800007c7 <mutex_lock_slow+0xb7>
ffffffff80000751:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80000755:	75 48                	jne    ffffffff8000079f <mutex_lock_slow+0x8f>
ffffffff80000757:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000075a:	83 e0 02             	and    $0x2,%eax
ffffffff8000075d:	83 f8 00             	cmp    $0x0,%eax
ffffffff80000760:	75 3d                	jne    ffffffff8000079f <mutex_lock_slow+0x8f>
ffffffff80000762:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000765:	c1 f8 03             	sar    $0x3,%eax
ffffffff80000768:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000076b:	74 32                	je     ffffffff8000079f <mutex_lock_slow+0x8f>
ffffffff8000076d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80000771:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000774:	83 c8 02             	or     $0x2,%eax
ffffffff80000777:	89 45 bc             	mov    %eax,-0x44(%rbp)
ffffffff8000077a:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000077d:	8b 55 bc             	mov    -0x44(%rbp),%edx
ffffffff80000780:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff80000784:	0f 94 c1             	sete   %cl
ffffffff80000787:	f6 c1 01             	test   $0x1,%cl
ffffffff8000078a:	75 03                	jne    ffffffff8000078f <mutex_lock_slow+0x7f>
ffffffff8000078c:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000078f:	80 e1 01             	and    $0x1,%cl
ffffffff80000792:	88 4d f1             	mov    %cl,-0xf(%rbp)
ffffffff80000795:	f6 45 f1 01          	testb  $0x1,-0xf(%rbp)
ffffffff80000799:	74 04                	je     ffffffff8000079f <mutex_lock_slow+0x8f>
ffffffff8000079b:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff8000079f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
ffffffff800007a6:	83 7d e4 1e          	cmpl   $0x1e,-0x1c(%rbp)
ffffffff800007aa:	7d 0d                	jge    ffffffff800007b9 <mutex_lock_slow+0xa9>
ffffffff800007ac:	f3 90                	pause  
ffffffff800007ae:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800007b1:	83 c0 01             	add    $0x1,%eax
ffffffff800007b4:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff800007b7:	eb ed                	jmp    ffffffff800007a6 <mutex_lock_slow+0x96>
ffffffff800007b9:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800007bc:	83 c0 01             	add    $0x1,%eax
ffffffff800007bf:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff800007c2:	e9 6d ff ff ff       	jmp    ffffffff80000734 <mutex_lock_slow+0x24>
ffffffff800007c7:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800007ca:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800007cd:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800007d0:	83 e0 04             	and    $0x4,%eax
ffffffff800007d3:	83 f8 00             	cmp    $0x0,%eax
ffffffff800007d6:	75 09                	jne    ffffffff800007e1 <mutex_lock_slow+0xd1>
ffffffff800007d8:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800007db:	83 c8 01             	or     $0x1,%eax
ffffffff800007de:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800007e1:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800007e4:	83 e0 05             	and    $0x5,%eax
ffffffff800007e7:	83 f8 00             	cmp    $0x0,%eax
ffffffff800007ea:	74 09                	je     ffffffff800007f5 <mutex_lock_slow+0xe5>
ffffffff800007ec:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800007ef:	83 c0 08             	add    $0x8,%eax
ffffffff800007f2:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800007f5:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff800007f9:	74 14                	je     ffffffff8000080f <mutex_lock_slow+0xff>
ffffffff800007fb:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800007fe:	83 e0 01             	and    $0x1,%eax
ffffffff80000801:	83 f8 00             	cmp    $0x0,%eax
ffffffff80000804:	74 09                	je     ffffffff8000080f <mutex_lock_slow+0xff>
ffffffff80000806:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80000809:	83 c8 04             	or     $0x4,%eax
ffffffff8000080c:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000080f:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80000813:	74 09                	je     ffffffff8000081e <mutex_lock_slow+0x10e>
ffffffff80000815:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80000818:	83 e0 fd             	and    $0xfffffffd,%eax
ffffffff8000081b:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000081e:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000821:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80000824:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80000828:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000082b:	89 45 c0             	mov    %eax,-0x40(%rbp)
ffffffff8000082e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80000831:	8b 55 c0             	mov    -0x40(%rbp),%edx
ffffffff80000834:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff80000838:	0f 94 c1             	sete   %cl
ffffffff8000083b:	f6 c1 01             	test   $0x1,%cl
ffffffff8000083e:	75 03                	jne    ffffffff80000843 <mutex_lock_slow+0x133>
ffffffff80000840:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80000843:	80 e1 01             	and    $0x1,%cl
ffffffff80000846:	88 4d f2             	mov    %cl,-0xe(%rbp)
ffffffff80000849:	f6 45 f2 01          	testb  $0x1,-0xe(%rbp)
ffffffff8000084d:	0f 84 bc 00 00 00    	je     ffffffff8000090f <mutex_lock_slow+0x1ff>
ffffffff80000853:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000856:	83 e0 05             	and    $0x5,%eax
ffffffff80000859:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000085c:	75 05                	jne    ffffffff80000863 <mutex_lock_slow+0x153>
ffffffff8000085e:	e9 b1 00 00 00       	jmp    ffffffff80000914 <mutex_lock_slow+0x204>
ffffffff80000863:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80000868:	0f 95 c0             	setne  %al
ffffffff8000086b:	24 01                	and    $0x1,%al
ffffffff8000086d:	88 45 f3             	mov    %al,-0xd(%rbp)
ffffffff80000870:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80000875:	75 0b                	jne    ffffffff80000882 <mutex_lock_slow+0x172>
ffffffff80000877:	31 c0                	xor    %eax,%eax
ffffffff80000879:	e8 92 5a 01 00       	call   ffffffff80016310 <microtime>
ffffffff8000087e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80000882:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80000886:	48 83 c7 08          	add    $0x8,%rdi
ffffffff8000088a:	8a 45 f3             	mov    -0xd(%rbp),%al
ffffffff8000088d:	0f b6 f0             	movzbl %al,%esi
ffffffff80000890:	83 e6 01             	and    $0x1,%esi
ffffffff80000893:	e8 c8 fb ff ff       	call   ffffffff80000460 <semaphore_acquire>
ffffffff80000898:	b0 01                	mov    $0x1,%al
ffffffff8000089a:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff8000089e:	75 14                	jne    ffffffff800008b4 <mutex_lock_slow+0x1a4>
ffffffff800008a0:	31 c0                	xor    %eax,%eax
ffffffff800008a2:	e8 69 5a 01 00       	call   ffffffff80016310 <microtime>
ffffffff800008a7:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
ffffffff800008ab:	48 3d e8 03 00 00    	cmp    $0x3e8,%rax
ffffffff800008b1:	0f 97 c0             	seta   %al
ffffffff800008b4:	24 01                	and    $0x1,%al
ffffffff800008b6:	88 45 fe             	mov    %al,-0x2(%rbp)
ffffffff800008b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800008bd:	8b 00                	mov    (%rax),%eax
ffffffff800008bf:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800008c2:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800008c5:	83 e0 04             	and    $0x4,%eax
ffffffff800008c8:	83 f8 00             	cmp    $0x0,%eax
ffffffff800008cb:	74 37                	je     ffffffff80000904 <mutex_lock_slow+0x1f4>
ffffffff800008cd:	c7 45 e8 f9 ff ff ff 	movl   $0xfffffff9,-0x18(%rbp)
ffffffff800008d4:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff800008d8:	74 0b                	je     ffffffff800008e5 <mutex_lock_slow+0x1d5>
ffffffff800008da:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800008dd:	c1 f8 03             	sar    $0x3,%eax
ffffffff800008e0:	83 f8 01             	cmp    $0x1,%eax
ffffffff800008e3:	75 09                	jne    ffffffff800008ee <mutex_lock_slow+0x1de>
ffffffff800008e5:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800008e8:	83 e8 04             	sub    $0x4,%eax
ffffffff800008eb:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff800008ee:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800008f2:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff800008f5:	89 4d c4             	mov    %ecx,-0x3c(%rbp)
ffffffff800008f8:	8b 4d c4             	mov    -0x3c(%rbp),%ecx
ffffffff800008fb:	f0 0f c1 08          	lock xadd %ecx,(%rax)
ffffffff800008ff:	89 4d b8             	mov    %ecx,-0x48(%rbp)
ffffffff80000902:	eb 10                	jmp    ffffffff80000914 <mutex_lock_slow+0x204>
ffffffff80000904:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff80000908:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff8000090f:	e9 ae fe ff ff       	jmp    ffffffff800007c2 <mutex_lock_slow+0xb2>
ffffffff80000914:	48 83 c4 50          	add    $0x50,%rsp
ffffffff80000918:	5d                   	pop    %rbp
ffffffff80000919:	c3                   	ret    
ffffffff8000091a:	cc                   	int3   
ffffffff8000091b:	cc                   	int3   
ffffffff8000091c:	cc                   	int3   
ffffffff8000091d:	cc                   	int3   
ffffffff8000091e:	cc                   	int3   
ffffffff8000091f:	cc                   	int3   

ffffffff80000920 <mutex_unlock>:
ffffffff80000920:	55                   	push   %rbp
ffffffff80000921:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000924:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000928:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000092c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000930:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80000937:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff8000093a:	f7 d9                	neg    %ecx
ffffffff8000093c:	f0 0f c1 08          	lock xadd %ecx,(%rax)
ffffffff80000940:	89 4d f8             	mov    %ecx,-0x8(%rbp)
ffffffff80000943:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80000946:	83 e8 01             	sub    $0x1,%eax
ffffffff80000949:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000094c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80000950:	74 0c                	je     ffffffff8000095e <mutex_unlock+0x3e>
ffffffff80000952:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000956:	8b 75 fc             	mov    -0x4(%rbp),%esi
ffffffff80000959:	e8 12 00 00 00       	call   ffffffff80000970 <mutex_unlock_slow>
ffffffff8000095e:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80000962:	5d                   	pop    %rbp
ffffffff80000963:	c3                   	ret    
ffffffff80000964:	cc                   	int3   
ffffffff80000965:	cc                   	int3   
ffffffff80000966:	cc                   	int3   
ffffffff80000967:	cc                   	int3   
ffffffff80000968:	cc                   	int3   
ffffffff80000969:	cc                   	int3   
ffffffff8000096a:	cc                   	int3   
ffffffff8000096b:	cc                   	int3   
ffffffff8000096c:	cc                   	int3   
ffffffff8000096d:	cc                   	int3   
ffffffff8000096e:	cc                   	int3   
ffffffff8000096f:	cc                   	int3   

ffffffff80000970 <mutex_unlock_slow>:
ffffffff80000970:	55                   	push   %rbp
ffffffff80000971:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000974:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000978:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000097c:	89 75 f4             	mov    %esi,-0xc(%rbp)
ffffffff8000097f:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80000982:	83 c0 01             	add    $0x1,%eax
ffffffff80000985:	83 e0 01             	and    $0x1,%eax
ffffffff80000988:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000098b:	75 2e                	jne    ffffffff800009bb <mutex_unlock_slow+0x4b>
ffffffff8000098d:	31 c0                	xor    %eax,%eax
ffffffff8000098f:	e8 5c 8f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000994:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000099b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000099e:	48 c7 c2 73 95 01 80 	mov    $0xffffffff80019573,%rdx
ffffffff800009a5:	48 c7 c1 07 94 01 80 	mov    $0xffffffff80019407,%rcx
ffffffff800009ac:	41 b8 a5 00 00 00    	mov    $0xa5,%r8d
ffffffff800009b2:	31 c0                	xor    %eax,%eax
ffffffff800009b4:	e8 87 0f 01 00       	call   ffffffff80011940 <printf_>
ffffffff800009b9:	0f 0b                	ud2    
ffffffff800009bb:	eb 00                	jmp    ffffffff800009bd <mutex_unlock_slow+0x4d>
ffffffff800009bd:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800009c0:	83 e0 04             	and    $0x4,%eax
ffffffff800009c3:	83 f8 00             	cmp    $0x0,%eax
ffffffff800009c6:	75 6a                	jne    ffffffff80000a32 <mutex_unlock_slow+0xc2>
ffffffff800009c8:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800009cb:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800009ce:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800009d1:	c1 f8 03             	sar    $0x3,%eax
ffffffff800009d4:	83 f8 00             	cmp    $0x0,%eax
ffffffff800009d7:	74 0b                	je     ffffffff800009e4 <mutex_unlock_slow+0x74>
ffffffff800009d9:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800009dc:	83 e0 07             	and    $0x7,%eax
ffffffff800009df:	83 f8 00             	cmp    $0x0,%eax
ffffffff800009e2:	74 02                	je     ffffffff800009e6 <mutex_unlock_slow+0x76>
ffffffff800009e4:	eb 5e                	jmp    ffffffff80000a44 <mutex_unlock_slow+0xd4>
ffffffff800009e6:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800009e9:	83 c0 f8             	add    $0xfffffff8,%eax
ffffffff800009ec:	83 c8 02             	or     $0x2,%eax
ffffffff800009ef:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800009f2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800009f6:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800009f9:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff800009fc:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800009ff:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff80000a02:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff80000a06:	0f 94 c1             	sete   %cl
ffffffff80000a09:	f6 c1 01             	test   $0x1,%cl
ffffffff80000a0c:	75 03                	jne    ffffffff80000a11 <mutex_unlock_slow+0xa1>
ffffffff80000a0e:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80000a11:	80 e1 01             	and    $0x1,%cl
ffffffff80000a14:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff80000a17:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80000a1b:	74 13                	je     ffffffff80000a30 <mutex_unlock_slow+0xc0>
ffffffff80000a1d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000a21:	48 83 c7 08          	add    $0x8,%rdi
ffffffff80000a25:	31 c0                	xor    %eax,%eax
ffffffff80000a27:	31 f6                	xor    %esi,%esi
ffffffff80000a29:	e8 a2 fb ff ff       	call   ffffffff800005d0 <semaphore_release>
ffffffff80000a2e:	eb 14                	jmp    ffffffff80000a44 <mutex_unlock_slow+0xd4>
ffffffff80000a30:	eb 9c                	jmp    ffffffff800009ce <mutex_unlock_slow+0x5e>
ffffffff80000a32:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80000a36:	48 83 c7 08          	add    $0x8,%rdi
ffffffff80000a3a:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80000a3f:	e8 8c fb ff ff       	call   ffffffff800005d0 <semaphore_release>
ffffffff80000a44:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80000a48:	5d                   	pop    %rbp
ffffffff80000a49:	c3                   	ret    
ffffffff80000a4a:	cc                   	int3   
ffffffff80000a4b:	cc                   	int3   
ffffffff80000a4c:	cc                   	int3   
ffffffff80000a4d:	cc                   	int3   
ffffffff80000a4e:	cc                   	int3   
ffffffff80000a4f:	cc                   	int3   

ffffffff80000a50 <spinlock_lock>:
ffffffff80000a50:	55                   	push   %rbp
ffffffff80000a51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000a54:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80000a58:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80000a5c:	9c                   	pushf  
ffffffff80000a5d:	58                   	pop    %rax
ffffffff80000a5e:	48 25 00 02 00 00    	and    $0x200,%rax
ffffffff80000a64:	31 c9                	xor    %ecx,%ecx
ffffffff80000a66:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80000a6b:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80000a6f:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80000a72:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80000a75:	0f 95 c0             	setne  %al
ffffffff80000a78:	24 01                	and    $0x1,%al
ffffffff80000a7a:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80000a7d:	fa                   	cli    
ffffffff80000a7e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80000a82:	e8 39 00 00 00       	call   ffffffff80000ac0 <spinlock_try_lock_weak>
ffffffff80000a87:	34 ff                	xor    $0xff,%al
ffffffff80000a89:	a8 01                	test   $0x1,%al
ffffffff80000a8b:	75 02                	jne    ffffffff80000a8f <spinlock_lock+0x3f>
ffffffff80000a8d:	eb 17                	jmp    ffffffff80000aa6 <spinlock_lock+0x56>
ffffffff80000a8f:	fb                   	sti    
ffffffff80000a90:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80000a94:	e8 77 00 00 00       	call   ffffffff80000b10 <spinlock_is_locked>
ffffffff80000a99:	a8 01                	test   $0x1,%al
ffffffff80000a9b:	75 02                	jne    ffffffff80000a9f <spinlock_lock+0x4f>
ffffffff80000a9d:	eb 04                	jmp    ffffffff80000aa3 <spinlock_lock+0x53>
ffffffff80000a9f:	f3 90                	pause  
ffffffff80000aa1:	eb ed                	jmp    ffffffff80000a90 <spinlock_lock+0x40>
ffffffff80000aa3:	fa                   	cli    
ffffffff80000aa4:	eb d8                	jmp    ffffffff80000a7e <spinlock_lock+0x2e>
ffffffff80000aa6:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80000aa9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000aad:	24 01                	and    $0x1,%al
ffffffff80000aaf:	88 41 01             	mov    %al,0x1(%rcx)
ffffffff80000ab2:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000ab6:	5d                   	pop    %rbp
ffffffff80000ab7:	c3                   	ret    
ffffffff80000ab8:	cc                   	int3   
ffffffff80000ab9:	cc                   	int3   
ffffffff80000aba:	cc                   	int3   
ffffffff80000abb:	cc                   	int3   
ffffffff80000abc:	cc                   	int3   
ffffffff80000abd:	cc                   	int3   
ffffffff80000abe:	cc                   	int3   
ffffffff80000abf:	cc                   	int3   

ffffffff80000ac0 <spinlock_try_lock_weak>:
ffffffff80000ac0:	55                   	push   %rbp
ffffffff80000ac1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000ac4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80000ac8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80000acc:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80000ad0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80000ad4:	c6 45 fd 01          	movb   $0x1,-0x3(%rbp)
ffffffff80000ad8:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80000adb:	8a 55 fd             	mov    -0x3(%rbp),%dl
ffffffff80000ade:	f0 0f b0 11          	lock cmpxchg %dl,(%rcx)
ffffffff80000ae2:	0f 94 c1             	sete   %cl
ffffffff80000ae5:	f6 c1 01             	test   $0x1,%cl
ffffffff80000ae8:	75 03                	jne    ffffffff80000aed <spinlock_try_lock_weak+0x2d>
ffffffff80000aea:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80000aed:	80 e1 01             	and    $0x1,%cl
ffffffff80000af0:	88 4d fe             	mov    %cl,-0x2(%rbp)
ffffffff80000af3:	8a 45 fe             	mov    -0x2(%rbp),%al
ffffffff80000af6:	24 01                	and    $0x1,%al
ffffffff80000af8:	0f b6 c0             	movzbl %al,%eax
ffffffff80000afb:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000aff:	5d                   	pop    %rbp
ffffffff80000b00:	c3                   	ret    
ffffffff80000b01:	cc                   	int3   
ffffffff80000b02:	cc                   	int3   
ffffffff80000b03:	cc                   	int3   
ffffffff80000b04:	cc                   	int3   
ffffffff80000b05:	cc                   	int3   
ffffffff80000b06:	cc                   	int3   
ffffffff80000b07:	cc                   	int3   
ffffffff80000b08:	cc                   	int3   
ffffffff80000b09:	cc                   	int3   
ffffffff80000b0a:	cc                   	int3   
ffffffff80000b0b:	cc                   	int3   
ffffffff80000b0c:	cc                   	int3   
ffffffff80000b0d:	cc                   	int3   
ffffffff80000b0e:	cc                   	int3   
ffffffff80000b0f:	cc                   	int3   

ffffffff80000b10 <spinlock_is_locked>:
ffffffff80000b10:	55                   	push   %rbp
ffffffff80000b11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000b14:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80000b18:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80000b1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000b20:	8a 00                	mov    (%rax),%al
ffffffff80000b22:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80000b25:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80000b28:	24 01                	and    $0x1,%al
ffffffff80000b2a:	0f b6 c0             	movzbl %al,%eax
ffffffff80000b2d:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000b31:	5d                   	pop    %rbp
ffffffff80000b32:	c3                   	ret    
ffffffff80000b33:	cc                   	int3   
ffffffff80000b34:	cc                   	int3   
ffffffff80000b35:	cc                   	int3   
ffffffff80000b36:	cc                   	int3   
ffffffff80000b37:	cc                   	int3   
ffffffff80000b38:	cc                   	int3   
ffffffff80000b39:	cc                   	int3   
ffffffff80000b3a:	cc                   	int3   
ffffffff80000b3b:	cc                   	int3   
ffffffff80000b3c:	cc                   	int3   
ffffffff80000b3d:	cc                   	int3   
ffffffff80000b3e:	cc                   	int3   
ffffffff80000b3f:	cc                   	int3   

ffffffff80000b40 <spinlock_unlock>:
ffffffff80000b40:	55                   	push   %rbp
ffffffff80000b41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000b44:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80000b48:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80000b4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000b50:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80000b54:	8a 4d ff             	mov    -0x1(%rbp),%cl
ffffffff80000b57:	88 08                	mov    %cl,(%rax)
ffffffff80000b59:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000b5d:	f6 40 01 01          	testb  $0x1,0x1(%rax)
ffffffff80000b61:	74 03                	je     ffffffff80000b66 <spinlock_unlock+0x26>
ffffffff80000b63:	fb                   	sti    
ffffffff80000b64:	eb 01                	jmp    ffffffff80000b67 <spinlock_unlock+0x27>
ffffffff80000b66:	fa                   	cli    
ffffffff80000b67:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000b6b:	5d                   	pop    %rbp
ffffffff80000b6c:	c3                   	ret    
ffffffff80000b6d:	cc                   	int3   
ffffffff80000b6e:	cc                   	int3   
ffffffff80000b6f:	cc                   	int3   

ffffffff80000b70 <get_stivale2_tag>:
ffffffff80000b70:	55                   	push   %rbp
ffffffff80000b71:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000b74:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80000b78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80000b7c:	48 8b 05 7d b4 21 00 	mov    0x21b47d(%rip),%rax        # ffffffff8021c000 <m_stivale2>
ffffffff80000b83:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80000b8a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000b8e:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80000b93:	74 27                	je     ffffffff80000bbc <get_stivale2_tag+0x4c>
ffffffff80000b95:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000b99:	48 8b 00             	mov    (%rax),%rax
ffffffff80000b9c:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80000ba0:	75 0a                	jne    ffffffff80000bac <get_stivale2_tag+0x3c>
ffffffff80000ba2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000ba6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000baa:	eb 18                	jmp    ffffffff80000bc4 <get_stivale2_tag+0x54>
ffffffff80000bac:	eb 00                	jmp    ffffffff80000bae <get_stivale2_tag+0x3e>
ffffffff80000bae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000bb2:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80000bb6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000bba:	eb d2                	jmp    ffffffff80000b8e <get_stivale2_tag+0x1e>
ffffffff80000bbc:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80000bc3:	00 
ffffffff80000bc4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000bc8:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80000bcc:	5d                   	pop    %rbp
ffffffff80000bcd:	c3                   	ret    
ffffffff80000bce:	cc                   	int3   
ffffffff80000bcf:	cc                   	int3   

ffffffff80000bd0 <get_stivale2_module>:
ffffffff80000bd0:	55                   	push   %rbp
ffffffff80000bd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000bd4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80000bd8:	48 c7 45 e0 0e 8b 01 	movq   $0xffffffff80018b0e,-0x20(%rbp)
ffffffff80000bdf:	80 
ffffffff80000be0:	48 8b 05 21 b4 21 00 	mov    0x21b421(%rip),%rax        # ffffffff8021c008 <get_stivale2_module.modules>
ffffffff80000be7:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80000beb:	75 16                	jne    ffffffff80000c03 <get_stivale2_module+0x33>
ffffffff80000bed:	48 bf ce 04 de aa 66 	movabs $0x4b6fe466aade04ce,%rdi
ffffffff80000bf4:	e4 6f 4b 
ffffffff80000bf7:	e8 74 ff ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff80000bfc:	48 89 05 05 b4 21 00 	mov    %rax,0x21b405(%rip)        # ffffffff8021c008 <get_stivale2_module.modules>
ffffffff80000c03:	48 8b 05 fe b3 21 00 	mov    0x21b3fe(%rip),%rax        # ffffffff8021c008 <get_stivale2_module.modules>
ffffffff80000c0a:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80000c0e:	74 64                	je     ffffffff80000c74 <get_stivale2_module+0xa4>
ffffffff80000c10:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80000c17:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff80000c1b:	48 8b 0d e6 b3 21 00 	mov    0x21b3e6(%rip),%rcx        # ffffffff8021c008 <get_stivale2_module.modules>
ffffffff80000c22:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff80000c26:	73 4a                	jae    ffffffff80000c72 <get_stivale2_module+0xa2>
ffffffff80000c28:	48 8b 05 d9 b3 21 00 	mov    0x21b3d9(%rip),%rax        # ffffffff8021c008 <get_stivale2_module.modules>
ffffffff80000c2f:	48 83 c0 18          	add    $0x18,%rax
ffffffff80000c33:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80000c37:	48 69 c9 90 00 00 00 	imul   $0x90,%rcx,%rcx
ffffffff80000c3e:	48 01 c8             	add    %rcx,%rax
ffffffff80000c41:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000c45:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80000c49:	48 83 c7 10          	add    $0x10,%rdi
ffffffff80000c4d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff80000c51:	e8 fa f1 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff80000c56:	83 f8 00             	cmp    $0x0,%eax
ffffffff80000c59:	75 0a                	jne    ffffffff80000c65 <get_stivale2_module+0x95>
ffffffff80000c5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000c5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80000c63:	eb 17                	jmp    ffffffff80000c7c <get_stivale2_module+0xac>
ffffffff80000c65:	eb 00                	jmp    ffffffff80000c67 <get_stivale2_module+0x97>
ffffffff80000c67:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80000c6a:	83 c0 01             	add    $0x1,%eax
ffffffff80000c6d:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80000c70:	eb a5                	jmp    ffffffff80000c17 <get_stivale2_module+0x47>
ffffffff80000c72:	eb 00                	jmp    ffffffff80000c74 <get_stivale2_module+0xa4>
ffffffff80000c74:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80000c7b:	00 
ffffffff80000c7c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80000c80:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80000c84:	5d                   	pop    %rbp
ffffffff80000c85:	c3                   	ret    
ffffffff80000c86:	cc                   	int3   
ffffffff80000c87:	cc                   	int3   
ffffffff80000c88:	cc                   	int3   
ffffffff80000c89:	cc                   	int3   
ffffffff80000c8a:	cc                   	int3   
ffffffff80000c8b:	cc                   	int3   
ffffffff80000c8c:	cc                   	int3   
ffffffff80000c8d:	cc                   	int3   
ffffffff80000c8e:	cc                   	int3   
ffffffff80000c8f:	cc                   	int3   

ffffffff80000c90 <get_kernel_file>:
ffffffff80000c90:	55                   	push   %rbp
ffffffff80000c91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000c94:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80000c98:	48 8b 05 71 b3 21 00 	mov    0x21b371(%rip),%rax        # ffffffff8021c010 <get_kernel_file.kernel>
ffffffff80000c9f:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80000ca3:	75 56                	jne    ffffffff80000cfb <get_kernel_file+0x6b>
ffffffff80000ca5:	48 bf 4a 58 75 29 0c 	movabs $0xe599d90c2975584a,%rdi
ffffffff80000cac:	d9 99 e5 
ffffffff80000caf:	e8 bc fe ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff80000cb4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80000cb8:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80000cbd:	75 2b                	jne    ffffffff80000cea <get_kernel_file+0x5a>
ffffffff80000cbf:	48 bf a2 6e 2c a0 18 	movabs $0x37c13018a02c6ea2,%rdi
ffffffff80000cc6:	30 c1 37 
ffffffff80000cc9:	e8 a2 fe ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff80000cce:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80000cd2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80000cd7:	74 0f                	je     ffffffff80000ce8 <get_kernel_file+0x58>
ffffffff80000cd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80000cdd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80000ce1:	48 89 05 28 b3 21 00 	mov    %rax,0x21b328(%rip)        # ffffffff8021c010 <get_kernel_file.kernel>
ffffffff80000ce8:	eb 0f                	jmp    ffffffff80000cf9 <get_kernel_file+0x69>
ffffffff80000cea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80000cee:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80000cf2:	48 89 05 17 b3 21 00 	mov    %rax,0x21b317(%rip)        # ffffffff8021c010 <get_kernel_file.kernel>
ffffffff80000cf9:	eb 00                	jmp    ffffffff80000cfb <get_kernel_file+0x6b>
ffffffff80000cfb:	48 8b 05 0e b3 21 00 	mov    0x21b30e(%rip),%rax        # ffffffff8021c010 <get_kernel_file.kernel>
ffffffff80000d02:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80000d06:	5d                   	pop    %rbp
ffffffff80000d07:	c3                   	ret    
ffffffff80000d08:	cc                   	int3   
ffffffff80000d09:	cc                   	int3   
ffffffff80000d0a:	cc                   	int3   
ffffffff80000d0b:	cc                   	int3   
ffffffff80000d0c:	cc                   	int3   
ffffffff80000d0d:	cc                   	int3   
ffffffff80000d0e:	cc                   	int3   
ffffffff80000d0f:	cc                   	int3   

ffffffff80000d10 <get_cpu_count>:
ffffffff80000d10:	55                   	push   %rbp
ffffffff80000d11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000d14:	48 8b 05 fd a2 01 00 	mov    0x1a2fd(%rip),%rax        # ffffffff8001b018 <m_cpu_count>
ffffffff80000d1b:	5d                   	pop    %rbp
ffffffff80000d1c:	c3                   	ret    
ffffffff80000d1d:	cc                   	int3   
ffffffff80000d1e:	cc                   	int3   
ffffffff80000d1f:	cc                   	int3   

ffffffff80000d20 <_start>:
ffffffff80000d20:	55                   	push   %rbp
ffffffff80000d21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80000d24:	53                   	push   %rbx
ffffffff80000d25:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80000d29:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80000d2d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80000d34:	e8 f7 08 00 00       	call   ffffffff80001630 <enable_cpu_features>
ffffffff80000d39:	31 c0                	xor    %eax,%eax
ffffffff80000d3b:	e8 b0 61 00 00       	call   ffffffff80006ef0 <init_gdt>
ffffffff80000d40:	31 c0                	xor    %eax,%eax
ffffffff80000d42:	e8 09 68 00 00       	call   ffffffff80007550 <init_idt>
ffffffff80000d47:	31 c0                	xor    %eax,%eax
ffffffff80000d49:	e8 b2 8a 00 00       	call   ffffffff80009800 <early_init_apic>
ffffffff80000d4e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80000d52:	48 89 05 a7 b2 21 00 	mov    %rax,0x21b2a7(%rip)        # ffffffff8021c000 <m_stivale2>
ffffffff80000d59:	31 c0                	xor    %eax,%eax
ffffffff80000d5b:	e8 20 e4 00 00       	call   ffffffff8000f180 <trace_init>
ffffffff80000d60:	31 c0                	xor    %eax,%eax
ffffffff80000d62:	e8 89 8b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000d67:	48 c7 c7 c0 92 01 80 	mov    $0xffffffff800192c0,%rdi
ffffffff80000d6e:	48 89 c6             	mov    %rax,%rsi
ffffffff80000d71:	31 c0                	xor    %eax,%eax
ffffffff80000d73:	e8 c8 0b 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000d78:	31 c0                	xor    %eax,%eax
ffffffff80000d7a:	e8 71 8b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000d7f:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80000d83:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80000d87:	48 83 c1 40          	add    $0x40,%rcx
ffffffff80000d8b:	48 c7 c7 e0 8c 01 80 	mov    $0xffffffff80018ce0,%rdi
ffffffff80000d92:	48 89 c6             	mov    %rax,%rsi
ffffffff80000d95:	31 c0                	xor    %eax,%eax
ffffffff80000d97:	e8 a4 0b 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000d9c:	31 c0                	xor    %eax,%eax
ffffffff80000d9e:	e8 4d 8b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000da3:	48 c7 c7 9a 96 01 80 	mov    $0xffffffff8001969a,%rdi
ffffffff80000daa:	48 89 c6             	mov    %rax,%rsi
ffffffff80000dad:	31 c0                	xor    %eax,%eax
ffffffff80000daf:	e8 8c 0b 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000db4:	31 c0                	xor    %eax,%eax
ffffffff80000db6:	e8 35 8b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000dbb:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff80000dc2:	80 ff ff 
ffffffff80000dc5:	48 b9 00 00 00 00 80 	movabs $0xffff808000000000,%rcx
ffffffff80000dcc:	80 ff ff 
ffffffff80000dcf:	49 b8 00 00 00 00 80 	movabs $0x8000000000,%r8
ffffffff80000dd6:	00 00 00 
ffffffff80000dd9:	48 c7 c7 6a 8f 01 80 	mov    $0xffffffff80018f6a,%rdi
ffffffff80000de0:	48 89 c6             	mov    %rax,%rsi
ffffffff80000de3:	31 c0                	xor    %eax,%eax
ffffffff80000de5:	e8 56 0b 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000dea:	31 c0                	xor    %eax,%eax
ffffffff80000dec:	e8 ff 8a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000df1:	48 ba 00 00 00 40 80 	movabs $0xffff808040000000,%rdx
ffffffff80000df8:	80 ff ff 
ffffffff80000dfb:	48 b9 00 00 00 40 82 	movabs $0xffff808240000000,%rcx
ffffffff80000e02:	80 ff ff 
ffffffff80000e05:	49 b8 00 00 00 00 02 	movabs $0x200000000,%r8
ffffffff80000e0c:	00 00 00 
ffffffff80000e0f:	48 c7 c7 85 95 01 80 	mov    $0xffffffff80019585,%rdi
ffffffff80000e16:	48 89 c6             	mov    %rax,%rsi
ffffffff80000e19:	31 c0                	xor    %eax,%eax
ffffffff80000e1b:	e8 20 0b 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000e20:	31 c0                	xor    %eax,%eax
ffffffff80000e22:	e8 c9 8a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000e27:	48 ba 00 00 00 00 00 	movabs $0xffffff0000000000,%rdx
ffffffff80000e2e:	ff ff ff 
ffffffff80000e31:	48 b9 00 00 00 00 80 	movabs $0xffffff8000000000,%rcx
ffffffff80000e38:	ff ff ff 
ffffffff80000e3b:	49 b8 00 00 00 00 80 	movabs $0x8000000000,%r8
ffffffff80000e42:	00 00 00 
ffffffff80000e45:	48 c7 c7 1b 94 01 80 	mov    $0xffffffff8001941b,%rdi
ffffffff80000e4c:	48 89 c6             	mov    %rax,%rsi
ffffffff80000e4f:	31 c0                	xor    %eax,%eax
ffffffff80000e51:	e8 ea 0a 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000e56:	31 c0                	xor    %eax,%eax
ffffffff80000e58:	e8 93 8a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000e5d:	48 ba 00 00 00 40 80 	movabs $0xffffff8040000000,%rdx
ffffffff80000e64:	ff ff ff 
ffffffff80000e67:	48 b9 00 00 00 40 b0 	movabs $0xffffffb040000000,%rcx
ffffffff80000e6e:	ff ff ff 
ffffffff80000e71:	49 b8 00 00 00 00 30 	movabs $0x3000000000,%r8
ffffffff80000e78:	00 00 00 
ffffffff80000e7b:	48 c7 c7 50 89 01 80 	mov    $0xffffffff80018950,%rdi
ffffffff80000e82:	48 89 c6             	mov    %rax,%rsi
ffffffff80000e85:	31 c0                	xor    %eax,%eax
ffffffff80000e87:	e8 b4 0a 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000e8c:	31 c0                	xor    %eax,%eax
ffffffff80000e8e:	e8 5d 8a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000e93:	48 ba 00 00 00 80 b0 	movabs $0xffffffb080000000,%rdx
ffffffff80000e9a:	ff ff ff 
ffffffff80000e9d:	48 b9 00 00 00 80 b1 	movabs $0xffffffb180000000,%rcx
ffffffff80000ea4:	ff ff ff 
ffffffff80000ea7:	49 b8 00 00 00 00 01 	movabs $0x100000000,%r8
ffffffff80000eae:	00 00 00 
ffffffff80000eb1:	48 c7 c7 19 8e 01 80 	mov    $0xffffffff80018e19,%rdi
ffffffff80000eb8:	48 89 c6             	mov    %rax,%rsi
ffffffff80000ebb:	31 c0                	xor    %eax,%eax
ffffffff80000ebd:	e8 7e 0a 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000ec2:	31 c0                	xor    %eax,%eax
ffffffff80000ec4:	e8 87 8e 00 00       	call   ffffffff80009d50 <init_vmm>
ffffffff80000ec9:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80000ecc:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80000ed0:	74 31                	je     ffffffff80000f03 <_start+0x1e3>
ffffffff80000ed2:	31 c0                	xor    %eax,%eax
ffffffff80000ed4:	e8 17 8a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000ed9:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80000ee0:	48 89 c6             	mov    %rax,%rsi
ffffffff80000ee3:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff80000eea:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80000ef1:	41 b8 fc 00 00 00    	mov    $0xfc,%r8d
ffffffff80000ef7:	31 c0                	xor    %eax,%eax
ffffffff80000ef9:	e8 42 0a 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000efe:	e9 e9 06 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80000f03:	eb 00                	jmp    ffffffff80000f05 <_start+0x1e5>
ffffffff80000f05:	eb 00                	jmp    ffffffff80000f07 <_start+0x1e7>
ffffffff80000f07:	31 c0                	xor    %eax,%eax
ffffffff80000f09:	e8 c2 c5 00 00       	call   ffffffff8000d4d0 <init_palloc>
ffffffff80000f0e:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80000f11:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80000f15:	74 31                	je     ffffffff80000f48 <_start+0x228>
ffffffff80000f17:	31 c0                	xor    %eax,%eax
ffffffff80000f19:	e8 d2 89 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000f1e:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80000f25:	48 89 c6             	mov    %rax,%rsi
ffffffff80000f28:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff80000f2f:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80000f36:	41 b8 fd 00 00 00    	mov    $0xfd,%r8d
ffffffff80000f3c:	31 c0                	xor    %eax,%eax
ffffffff80000f3e:	e8 fd 09 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000f43:	e9 a4 06 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80000f48:	eb 00                	jmp    ffffffff80000f4a <_start+0x22a>
ffffffff80000f4a:	31 c0                	xor    %eax,%eax
ffffffff80000f4c:	e8 2f a2 00 00       	call   ffffffff8000b180 <vmm_switch_allocator>
ffffffff80000f51:	31 c0                	xor    %eax,%eax
ffffffff80000f53:	e8 a8 c1 00 00       	call   ffffffff8000d100 <init_malloc>
ffffffff80000f58:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80000f5b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80000f5f:	74 31                	je     ffffffff80000f92 <_start+0x272>
ffffffff80000f61:	31 c0                	xor    %eax,%eax
ffffffff80000f63:	e8 88 89 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000f68:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80000f6f:	48 89 c6             	mov    %rax,%rsi
ffffffff80000f72:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff80000f79:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80000f80:	41 b8 ff 00 00 00    	mov    $0xff,%r8d
ffffffff80000f86:	31 c0                	xor    %eax,%eax
ffffffff80000f88:	e8 b3 09 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000f8d:	e9 5a 06 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80000f92:	eb 00                	jmp    ffffffff80000f94 <_start+0x274>
ffffffff80000f94:	e8 f7 fc ff ff       	call   ffffffff80000c90 <get_kernel_file>
ffffffff80000f99:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80000f9d:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80000fa2:	75 3b                	jne    ffffffff80000fdf <_start+0x2bf>
ffffffff80000fa4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80000fab:	31 c0                	xor    %eax,%eax
ffffffff80000fad:	e8 3e 89 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80000fb2:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80000fb5:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80000fbc:	48 89 c6             	mov    %rax,%rsi
ffffffff80000fbf:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff80000fc6:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff80000fcd:	41 b9 04 01 00 00    	mov    $0x104,%r9d
ffffffff80000fd3:	31 c0                	xor    %eax,%eax
ffffffff80000fd5:	e8 66 09 01 00       	call   ffffffff80011940 <printf_>
ffffffff80000fda:	e9 0d 06 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80000fdf:	eb 00                	jmp    ffffffff80000fe1 <_start+0x2c1>
ffffffff80000fe1:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff80000fe5:	e8 16 0a 00 00       	call   ffffffff80001a00 <debug_load_symbols>
ffffffff80000fea:	31 c0                	xor    %eax,%eax
ffffffff80000fec:	e8 4f 56 01 00       	call   ffffffff80016640 <init_acpi>
ffffffff80000ff1:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80000ff4:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80000ff8:	74 31                	je     ffffffff8000102b <_start+0x30b>
ffffffff80000ffa:	31 c0                	xor    %eax,%eax
ffffffff80000ffc:	e8 ef 88 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001001:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001008:	48 89 c6             	mov    %rax,%rsi
ffffffff8000100b:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff80001012:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80001019:	41 b8 08 01 00 00    	mov    $0x108,%r8d
ffffffff8000101f:	31 c0                	xor    %eax,%eax
ffffffff80001021:	e8 1a 09 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001026:	e9 c1 05 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff8000102b:	eb 00                	jmp    ffffffff8000102d <_start+0x30d>
ffffffff8000102d:	eb 00                	jmp    ffffffff8000102f <_start+0x30f>
ffffffff8000102f:	31 c0                	xor    %eax,%eax
ffffffff80001031:	e8 0a 53 01 00       	call   ffffffff80016340 <init_delay>
ffffffff80001036:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80001039:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff8000103d:	74 31                	je     ffffffff80001070 <_start+0x350>
ffffffff8000103f:	31 c0                	xor    %eax,%eax
ffffffff80001041:	e8 aa 88 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001046:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000104d:	48 89 c6             	mov    %rax,%rsi
ffffffff80001050:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff80001057:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff8000105e:	41 b8 09 01 00 00    	mov    $0x109,%r8d
ffffffff80001064:	31 c0                	xor    %eax,%eax
ffffffff80001066:	e8 d5 08 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000106b:	e9 7c 05 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001070:	eb 00                	jmp    ffffffff80001072 <_start+0x352>
ffffffff80001072:	eb 00                	jmp    ffffffff80001074 <_start+0x354>
ffffffff80001074:	31 c0                	xor    %eax,%eax
ffffffff80001076:	e8 e5 50 01 00       	call   ffffffff80016160 <init_timer>
ffffffff8000107b:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000107e:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80001082:	74 31                	je     ffffffff800010b5 <_start+0x395>
ffffffff80001084:	31 c0                	xor    %eax,%eax
ffffffff80001086:	e8 65 88 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000108b:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001092:	48 89 c6             	mov    %rax,%rsi
ffffffff80001095:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff8000109c:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff800010a3:	41 b8 0a 01 00 00    	mov    $0x10a,%r8d
ffffffff800010a9:	31 c0                	xor    %eax,%eax
ffffffff800010ab:	e8 90 08 01 00       	call   ffffffff80011940 <printf_>
ffffffff800010b0:	e9 37 05 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff800010b5:	eb 00                	jmp    ffffffff800010b7 <_start+0x397>
ffffffff800010b7:	48 bf 25 70 64 39 63 	movabs $0x34d1d96339647025,%rdi
ffffffff800010be:	d9 d1 34 
ffffffff800010c1:	e8 aa fa ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff800010c6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800010ca:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff800010cf:	74 0f                	je     ffffffff800010e0 <_start+0x3c0>
ffffffff800010d1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800010d5:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff800010d9:	48 87 05 38 9f 01 00 	xchg   %rax,0x19f38(%rip)        # ffffffff8001b018 <m_cpu_count>
ffffffff800010e0:	eb 00                	jmp    ffffffff800010e2 <_start+0x3c2>
ffffffff800010e2:	31 c0                	xor    %eax,%eax
ffffffff800010e4:	e8 77 40 01 00       	call   ffffffff80015160 <init_cpu_locals>
ffffffff800010e9:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800010ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff800010f0:	74 31                	je     ffffffff80001123 <_start+0x403>
ffffffff800010f2:	31 c0                	xor    %eax,%eax
ffffffff800010f4:	e8 f7 87 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800010f9:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001100:	48 89 c6             	mov    %rax,%rsi
ffffffff80001103:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff8000110a:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80001111:	41 b8 19 01 00 00    	mov    $0x119,%r8d
ffffffff80001117:	31 c0                	xor    %eax,%eax
ffffffff80001119:	e8 22 08 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000111e:	e9 c9 04 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001123:	eb 00                	jmp    ffffffff80001125 <_start+0x405>
ffffffff80001125:	eb 00                	jmp    ffffffff80001127 <_start+0x407>
ffffffff80001127:	31 c0                	xor    %eax,%eax
ffffffff80001129:	e8 b2 3e 01 00       	call   ffffffff80014fe0 <init_scheduler>
ffffffff8000112e:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80001131:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80001135:	74 31                	je     ffffffff80001168 <_start+0x448>
ffffffff80001137:	31 c0                	xor    %eax,%eax
ffffffff80001139:	e8 b2 87 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000113e:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001145:	48 89 c6             	mov    %rax,%rsi
ffffffff80001148:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff8000114f:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80001156:	41 b8 1a 01 00 00    	mov    $0x11a,%r8d
ffffffff8000115c:	31 c0                	xor    %eax,%eax
ffffffff8000115e:	e8 dd 07 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001163:	e9 84 04 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001168:	eb 00                	jmp    ffffffff8000116a <_start+0x44a>
ffffffff8000116a:	eb 00                	jmp    ffffffff8000116c <_start+0x44c>
ffffffff8000116c:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff80001170:	e8 db 48 01 00       	call   ffffffff80015a50 <init_tls>
ffffffff80001175:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80001178:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff8000117c:	74 31                	je     ffffffff800011af <_start+0x48f>
ffffffff8000117e:	31 c0                	xor    %eax,%eax
ffffffff80001180:	e8 6b 87 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001185:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000118c:	48 89 c6             	mov    %rax,%rsi
ffffffff8000118f:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff80001196:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff8000119d:	41 b8 1b 01 00 00    	mov    $0x11b,%r8d
ffffffff800011a3:	31 c0                	xor    %eax,%eax
ffffffff800011a5:	e8 96 07 01 00       	call   ffffffff80011940 <printf_>
ffffffff800011aa:	e9 3d 04 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff800011af:	eb 00                	jmp    ffffffff800011b1 <_start+0x491>
ffffffff800011b1:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff800011b6:	0f 84 f5 01 00 00    	je     ffffffff800013b1 <_start+0x691>
ffffffff800011bc:	31 c0                	xor    %eax,%eax
ffffffff800011be:	e8 2d 87 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800011c3:	48 c7 c7 d5 9a 01 80 	mov    $0xffffffff80019ad5,%rdi
ffffffff800011ca:	48 89 c6             	mov    %rax,%rsi
ffffffff800011cd:	31 c0                	xor    %eax,%eax
ffffffff800011cf:	e8 6c 07 01 00       	call   ffffffff80011940 <printf_>
ffffffff800011d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff800011db:	48 63 45 f0          	movslq -0x10(%rbp),%rax
ffffffff800011df:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800011e3:	48 3b 41 20          	cmp    0x20(%rcx),%rax
ffffffff800011e7:	0f 83 38 01 00 00    	jae    ffffffff80001325 <_start+0x605>
ffffffff800011ed:	eb 00                	jmp    ffffffff800011ef <_start+0x4cf>
ffffffff800011ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800011f3:	48 83 c0 28          	add    $0x28,%rax
ffffffff800011f7:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff800011fb:	48 c1 e1 05          	shl    $0x5,%rcx
ffffffff800011ff:	48 01 c8             	add    %rcx,%rax
ffffffff80001202:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80001205:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001209:	48 3b 41 20          	cmp    0x20(%rcx),%rax
ffffffff8000120d:	72 3b                	jb     ffffffff8000124a <_start+0x52a>
ffffffff8000120f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80001216:	31 c0                	xor    %eax,%eax
ffffffff80001218:	e8 d3 86 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000121d:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80001220:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80001227:	48 89 c6             	mov    %rax,%rsi
ffffffff8000122a:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff80001231:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff80001238:	41 b9 23 01 00 00    	mov    $0x123,%r9d
ffffffff8000123e:	31 c0                	xor    %eax,%eax
ffffffff80001240:	e8 fb 06 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001245:	e9 a2 03 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff8000124a:	eb 00                	jmp    ffffffff8000124c <_start+0x52c>
ffffffff8000124c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001250:	48 83 c0 28          	add    $0x28,%rax
ffffffff80001254:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff80001258:	48 c1 e1 05          	shl    $0x5,%rcx
ffffffff8000125c:	48 01 c8             	add    %rcx,%rax
ffffffff8000125f:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80001262:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001266:	3b 41 18             	cmp    0x18(%rcx),%eax
ffffffff80001269:	75 71                	jne    ffffffff800012dc <_start+0x5bc>
ffffffff8000126b:	31 c0                	xor    %eax,%eax
ffffffff8000126d:	e8 7e 86 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001272:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001276:	8b 51 18             	mov    0x18(%rcx),%edx
ffffffff80001279:	48 c7 c7 3c 97 01 80 	mov    $0xffffffff8001973c,%rdi
ffffffff80001280:	48 89 c6             	mov    %rax,%rsi
ffffffff80001283:	31 c0                	xor    %eax,%eax
ffffffff80001285:	e8 b6 06 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000128a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000128e:	8b 58 18             	mov    0x18(%rax),%ebx
ffffffff80001291:	31 c0                	xor    %eax,%eax
ffffffff80001293:	e8 58 86 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001298:	48 39 c3             	cmp    %rax,%rbx
ffffffff8000129b:	74 3b                	je     ffffffff800012d8 <_start+0x5b8>
ffffffff8000129d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800012a4:	31 c0                	xor    %eax,%eax
ffffffff800012a6:	e8 45 86 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800012ab:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800012ae:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800012b5:	48 89 c6             	mov    %rax,%rsi
ffffffff800012b8:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff800012bf:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff800012c6:	41 b9 27 01 00 00    	mov    $0x127,%r9d
ffffffff800012cc:	31 c0                	xor    %eax,%eax
ffffffff800012ce:	e8 6d 06 01 00       	call   ffffffff80011940 <printf_>
ffffffff800012d3:	e9 14 03 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff800012d8:	eb 00                	jmp    ffffffff800012da <_start+0x5ba>
ffffffff800012da:	eb 3b                	jmp    ffffffff80001317 <_start+0x5f7>
ffffffff800012dc:	bf 00 10 00 00       	mov    $0x1000,%edi
ffffffff800012e1:	e8 6a da 00 00       	call   ffffffff8000ed50 <palloc>
ffffffff800012e6:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff800012ec:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800012f0:	48 63 55 f0          	movslq -0x10(%rbp),%rdx
ffffffff800012f4:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff800012f8:	48 89 44 11 30       	mov    %rax,0x30(%rcx,%rdx,1)
ffffffff800012fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001301:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff80001305:	48 c1 e1 05          	shl    $0x5,%rcx
ffffffff80001309:	48 8d 54 08 28       	lea    0x28(%rax,%rcx,1),%rdx
ffffffff8000130e:	48 c7 44 08 38 b0 16 	movq   $0xffffffff800016b0,0x38(%rax,%rcx,1)
ffffffff80001315:	00 80 
ffffffff80001317:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff8000131a:	83 c0 01             	add    $0x1,%eax
ffffffff8000131d:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80001320:	e9 b6 fe ff ff       	jmp    ffffffff800011db <_start+0x4bb>
ffffffff80001325:	eb 00                	jmp    ffffffff80001327 <_start+0x607>
ffffffff80001327:	8b 05 eb ac 21 00    	mov    0x21aceb(%rip),%eax        # ffffffff8021c018 <m_startup_count>
ffffffff8000132d:	89 45 c4             	mov    %eax,-0x3c(%rbp)
ffffffff80001330:	48 63 45 c4          	movslq -0x3c(%rbp),%rax
ffffffff80001334:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001338:	48 8b 49 20          	mov    0x20(%rcx),%rcx
ffffffff8000133c:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff80001340:	48 39 c8             	cmp    %rcx,%rax
ffffffff80001343:	74 04                	je     ffffffff80001349 <_start+0x629>
ffffffff80001345:	f3 90                	pause  
ffffffff80001347:	eb de                	jmp    ffffffff80001327 <_start+0x607>
ffffffff80001349:	eb 00                	jmp    ffffffff8000134b <_start+0x62b>
ffffffff8000134b:	8a 05 cb ac 21 00    	mov    0x21accb(%rip),%al        # ffffffff8021c01c <m_smp_error>
ffffffff80001351:	88 45 ee             	mov    %al,-0x12(%rbp)
ffffffff80001354:	f6 45 ee 01          	testb  $0x1,-0x12(%rbp)
ffffffff80001358:	74 3b                	je     ffffffff80001395 <_start+0x675>
ffffffff8000135a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80001361:	31 c0                	xor    %eax,%eax
ffffffff80001363:	e8 88 85 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001368:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff8000136b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80001372:	48 89 c6             	mov    %rax,%rsi
ffffffff80001375:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff8000137c:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff80001383:	41 b9 36 01 00 00    	mov    $0x136,%r9d
ffffffff80001389:	31 c0                	xor    %eax,%eax
ffffffff8000138b:	e8 b0 05 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001390:	e9 57 02 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001395:	eb 00                	jmp    ffffffff80001397 <_start+0x677>
ffffffff80001397:	31 c0                	xor    %eax,%eax
ffffffff80001399:	e8 52 85 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000139e:	48 c7 c7 86 8c 01 80 	mov    $0xffffffff80018c86,%rdi
ffffffff800013a5:	48 89 c6             	mov    %rax,%rsi
ffffffff800013a8:	31 c0                	xor    %eax,%eax
ffffffff800013aa:	e8 91 05 01 00       	call   ffffffff80011940 <printf_>
ffffffff800013af:	eb 64                	jmp    ffffffff80001415 <_start+0x6f5>
ffffffff800013b1:	31 c0                	xor    %eax,%eax
ffffffff800013b3:	e8 38 85 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800013b8:	48 c7 c7 ac 95 01 80 	mov    $0xffffffff800195ac,%rdi
ffffffff800013bf:	48 89 c6             	mov    %rax,%rsi
ffffffff800013c2:	31 c0                	xor    %eax,%eax
ffffffff800013c4:	e8 77 05 01 00       	call   ffffffff80011940 <printf_>
ffffffff800013c9:	31 c0                	xor    %eax,%eax
ffffffff800013cb:	e8 20 85 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800013d0:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800013d4:	74 3b                	je     ffffffff80001411 <_start+0x6f1>
ffffffff800013d6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800013dd:	31 c0                	xor    %eax,%eax
ffffffff800013df:	e8 0c 85 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800013e4:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800013e7:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800013ee:	48 89 c6             	mov    %rax,%rsi
ffffffff800013f1:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff800013f8:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff800013ff:	41 b9 3b 01 00 00    	mov    $0x13b,%r9d
ffffffff80001405:	31 c0                	xor    %eax,%eax
ffffffff80001407:	e8 34 05 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000140c:	e9 db 01 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001411:	eb 00                	jmp    ffffffff80001413 <_start+0x6f3>
ffffffff80001413:	eb 00                	jmp    ffffffff80001415 <_start+0x6f5>
ffffffff80001415:	e8 b6 f7 ff ff       	call   ffffffff80000bd0 <get_stivale2_module>
ffffffff8000141a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000141e:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80001423:	75 3b                	jne    ffffffff80001460 <_start+0x740>
ffffffff80001425:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%rbp)
ffffffff8000142c:	31 c0                	xor    %eax,%eax
ffffffff8000142e:	e8 bd 84 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001433:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80001436:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000143d:	48 89 c6             	mov    %rax,%rsi
ffffffff80001440:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff80001447:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff8000144e:	41 b9 40 01 00 00    	mov    $0x140,%r9d
ffffffff80001454:	31 c0                	xor    %eax,%eax
ffffffff80001456:	e8 e5 04 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000145b:	e9 8c 01 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001460:	eb 00                	jmp    ffffffff80001462 <_start+0x742>
ffffffff80001462:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001466:	48 8b 08             	mov    (%rax),%rcx
ffffffff80001469:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000146d:	48 29 c8             	sub    %rcx,%rax
ffffffff80001470:	48 89 05 a9 ab 21 00 	mov    %rax,0x21aba9(%rip)        # ffffffff8021c020 <m_corelib_module_size>
ffffffff80001477:	48 8b 3d a2 ab 21 00 	mov    0x21aba2(%rip),%rdi        # ffffffff8021c020 <m_corelib_module_size>
ffffffff8000147e:	e8 ed bc 00 00       	call   ffffffff8000d170 <malloc>
ffffffff80001483:	48 89 05 9e ab 21 00 	mov    %rax,0x21ab9e(%rip)        # ffffffff8021c028 <m_corelib_module>
ffffffff8000148a:	48 8b 3d 97 ab 21 00 	mov    0x21ab97(%rip),%rdi        # ffffffff8021c028 <m_corelib_module>
ffffffff80001491:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001495:	48 8b 30             	mov    (%rax),%rsi
ffffffff80001498:	48 8b 15 81 ab 21 00 	mov    0x21ab81(%rip),%rdx        # ffffffff8021c020 <m_corelib_module_size>
ffffffff8000149f:	e8 bc dd 00 00       	call   ffffffff8000f260 <memcpy>
ffffffff800014a4:	31 c0                	xor    %eax,%eax
ffffffff800014a6:	e8 45 84 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800014ab:	48 8b 15 6e ab 21 00 	mov    0x21ab6e(%rip),%rdx        # ffffffff8021c020 <m_corelib_module_size>
ffffffff800014b2:	48 c7 c7 04 8d 01 80 	mov    $0xffffffff80018d04,%rdi
ffffffff800014b9:	48 89 c6             	mov    %rax,%rsi
ffffffff800014bc:	31 c0                	xor    %eax,%eax
ffffffff800014be:	e8 7d 04 01 00       	call   ffffffff80011940 <printf_>
ffffffff800014c3:	31 c0                	xor    %eax,%eax
ffffffff800014c5:	e8 e6 d2 00 00       	call   ffffffff8000e7b0 <palloc_reclaim>
ffffffff800014ca:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800014cd:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff800014d1:	74 31                	je     ffffffff80001504 <_start+0x7e4>
ffffffff800014d3:	31 c0                	xor    %eax,%eax
ffffffff800014d5:	e8 16 84 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800014da:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff800014e1:	48 89 c6             	mov    %rax,%rsi
ffffffff800014e4:	48 c7 c2 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rdx
ffffffff800014eb:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff800014f2:	41 b8 47 01 00 00    	mov    $0x147,%r8d
ffffffff800014f8:	31 c0                	xor    %eax,%eax
ffffffff800014fa:	e8 41 04 01 00       	call   ffffffff80011940 <printf_>
ffffffff800014ff:	e9 e8 00 00 00       	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001504:	eb 00                	jmp    ffffffff80001506 <_start+0x7e6>
ffffffff80001506:	31 c0                	xor    %eax,%eax
ffffffff80001508:	e8 e3 83 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000150d:	48 c7 c7 3b 9f 01 80 	mov    $0xffffffff80019f3b,%rdi
ffffffff80001514:	48 89 c6             	mov    %rax,%rsi
ffffffff80001517:	31 c0                	xor    %eax,%eax
ffffffff80001519:	e8 22 04 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000151e:	48 c7 45 b0 05 00 00 	movq   $0x5,-0x50(%rbp)
ffffffff80001525:	00 
ffffffff80001526:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff8000152d:	00 00 00 
ffffffff80001530:	48 23 45 b0          	and    -0x50(%rbp),%rax
ffffffff80001534:	44 0f 22 c0          	mov    %rax,%cr8
ffffffff80001538:	48 c7 c7 d0 18 00 80 	mov    $0xffffffff800018d0,%rdi
ffffffff8000153f:	48 c7 c2 a6 9c 01 80 	mov    $0xffffffff80019ca6,%rdx
ffffffff80001546:	31 c0                	xor    %eax,%eax
ffffffff80001548:	e8 83 46 01 00       	call   ffffffff80015bd0 <create_thread>
ffffffff8000154d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80001551:	48 83 7d b8 00       	cmpq   $0x0,-0x48(%rbp)
ffffffff80001556:	75 38                	jne    ffffffff80001590 <_start+0x870>
ffffffff80001558:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff8000155f:	31 c0                	xor    %eax,%eax
ffffffff80001561:	e8 8a 83 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001566:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80001569:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80001570:	48 89 c6             	mov    %rax,%rsi
ffffffff80001573:	48 c7 c1 9f 9c 01 80 	mov    $0xffffffff80019c9f,%rcx
ffffffff8000157a:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff80001581:	41 b9 51 01 00 00    	mov    $0x151,%r9d
ffffffff80001587:	31 c0                	xor    %eax,%eax
ffffffff80001589:	e8 b2 03 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000158e:	eb 5c                	jmp    ffffffff800015ec <_start+0x8cc>
ffffffff80001590:	eb 00                	jmp    ffffffff80001592 <_start+0x872>
ffffffff80001592:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80001596:	e8 95 23 01 00       	call   ffffffff80013930 <scheduler_ready_thread>
ffffffff8000159b:	31 c0                	xor    %eax,%eax
ffffffff8000159d:	e8 4e 83 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800015a2:	48 c7 c7 f0 9a 01 80 	mov    $0xffffffff80019af0,%rdi
ffffffff800015a9:	48 89 c6             	mov    %rax,%rsi
ffffffff800015ac:	31 c0                	xor    %eax,%eax
ffffffff800015ae:	e8 8d 03 01 00       	call   ffffffff80011940 <printf_>
ffffffff800015b3:	c6 45 ef 01          	movb   $0x1,-0x11(%rbp)
ffffffff800015b7:	8a 45 ef             	mov    -0x11(%rbp),%al
ffffffff800015ba:	88 05 70 aa 21 00    	mov    %al,0x21aa70(%rip)        # ffffffff8021c030 <m_start_scheduler>
ffffffff800015c0:	31 c0                	xor    %eax,%eax
ffffffff800015c2:	e8 29 83 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800015c7:	48 89 c3             	mov    %rax,%rbx
ffffffff800015ca:	31 c0                	xor    %eax,%eax
ffffffff800015cc:	e8 1f 83 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800015d1:	48 c7 c7 3c 97 01 80 	mov    $0xffffffff8001973c,%rdi
ffffffff800015d8:	48 89 de             	mov    %rbx,%rsi
ffffffff800015db:	48 89 c2             	mov    %rax,%rdx
ffffffff800015de:	31 c0                	xor    %eax,%eax
ffffffff800015e0:	e8 5b 03 01 00       	call   ffffffff80011940 <printf_>
ffffffff800015e5:	31 c0                	xor    %eax,%eax
ffffffff800015e7:	e8 c4 39 01 00       	call   ffffffff80014fb0 <scheduler_startup>
ffffffff800015ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff800015f0:	74 1a                	je     ffffffff8000160c <_start+0x8ec>
ffffffff800015f2:	31 c0                	xor    %eax,%eax
ffffffff800015f4:	e8 f7 82 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800015f9:	48 c7 c7 9d 90 01 80 	mov    $0xffffffff8001909d,%rdi
ffffffff80001600:	48 89 c6             	mov    %rax,%rsi
ffffffff80001603:	31 c0                	xor    %eax,%eax
ffffffff80001605:	e8 36 03 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000160a:	eb 18                	jmp    ffffffff80001624 <_start+0x904>
ffffffff8000160c:	31 c0                	xor    %eax,%eax
ffffffff8000160e:	e8 dd 82 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001613:	48 c7 c7 48 94 01 80 	mov    $0xffffffff80019448,%rdi
ffffffff8000161a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000161d:	31 c0                	xor    %eax,%eax
ffffffff8000161f:	e8 1c 03 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001624:	fa                   	cli    
ffffffff80001625:	f4                   	hlt    
ffffffff80001626:	eb fd                	jmp    ffffffff80001625 <_start+0x905>
ffffffff80001628:	cc                   	int3   
ffffffff80001629:	cc                   	int3   
ffffffff8000162a:	cc                   	int3   
ffffffff8000162b:	cc                   	int3   
ffffffff8000162c:	cc                   	int3   
ffffffff8000162d:	cc                   	int3   
ffffffff8000162e:	cc                   	int3   
ffffffff8000162f:	cc                   	int3   

ffffffff80001630 <enable_cpu_features>:
ffffffff80001630:	55                   	push   %rbp
ffffffff80001631:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001634:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80001638:	0f 20 c0             	mov    %cr0,%rax
ffffffff8000163b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000163f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001643:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80001646:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80001649:	25 ff ff fe ff       	and    $0xfffeffff,%eax
ffffffff8000164e:	0d 00 00 01 00       	or     $0x10000,%eax
ffffffff80001653:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80001656:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80001659:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000165d:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff80001664:	00 00 00 
ffffffff80001667:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff8000166b:	0f 22 c0             	mov    %rax,%cr0
ffffffff8000166e:	0f 20 e0             	mov    %cr4,%rax
ffffffff80001671:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80001675:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001679:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000167c:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000167f:	25 ff fd ff ff       	and    $0xfffffdff,%eax
ffffffff80001684:	0d 00 02 00 00       	or     $0x200,%eax
ffffffff80001689:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000168c:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000168f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80001693:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff8000169a:	00 00 00 
ffffffff8000169d:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff800016a1:	0f 22 e0             	mov    %rax,%cr4
ffffffff800016a4:	48 83 c4 30          	add    $0x30,%rsp
ffffffff800016a8:	5d                   	pop    %rbp
ffffffff800016a9:	c3                   	ret    
ffffffff800016aa:	cc                   	int3   
ffffffff800016ab:	cc                   	int3   
ffffffff800016ac:	cc                   	int3   
ffffffff800016ad:	cc                   	int3   
ffffffff800016ae:	cc                   	int3   
ffffffff800016af:	cc                   	int3   

ffffffff800016b0 <per_cpu_start>:
ffffffff800016b0:	55                   	push   %rbp
ffffffff800016b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800016b4:	53                   	push   %rbx
ffffffff800016b5:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff800016b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800016bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff800016c4:	e8 67 ff ff ff       	call   ffffffff80001630 <enable_cpu_features>
ffffffff800016c9:	31 c0                	xor    %eax,%eax
ffffffff800016cb:	e8 20 58 00 00       	call   ffffffff80006ef0 <init_gdt>
ffffffff800016d0:	31 c0                	xor    %eax,%eax
ffffffff800016d2:	e8 79 5e 00 00       	call   ffffffff80007550 <init_idt>
ffffffff800016d7:	31 c0                	xor    %eax,%eax
ffffffff800016d9:	e8 82 95 00 00       	call   ffffffff8000ac60 <init_vmm_per_cpu>
ffffffff800016de:	31 c0                	xor    %eax,%eax
ffffffff800016e0:	e8 4b 82 00 00       	call   ffffffff80009930 <init_apic>
ffffffff800016e5:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800016e8:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff800016ec:	74 31                	je     ffffffff8000171f <per_cpu_start+0x6f>
ffffffff800016ee:	31 c0                	xor    %eax,%eax
ffffffff800016f0:	e8 fb 81 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800016f5:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff800016fc:	48 89 c6             	mov    %rax,%rsi
ffffffff800016ff:	48 c7 c2 cc 9e 01 80 	mov    $0xffffffff80019ecc,%rdx
ffffffff80001706:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff8000170d:	41 b8 a4 00 00 00    	mov    $0xa4,%r8d
ffffffff80001713:	31 c0                	xor    %eax,%eax
ffffffff80001715:	e8 26 02 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000171a:	e9 15 01 00 00       	jmp    ffffffff80001834 <per_cpu_start+0x184>
ffffffff8000171f:	eb 00                	jmp    ffffffff80001721 <per_cpu_start+0x71>
ffffffff80001721:	eb 00                	jmp    ffffffff80001723 <per_cpu_start+0x73>
ffffffff80001723:	31 c0                	xor    %eax,%eax
ffffffff80001725:	e8 36 3a 01 00       	call   ffffffff80015160 <init_cpu_locals>
ffffffff8000172a:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000172d:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80001731:	74 31                	je     ffffffff80001764 <per_cpu_start+0xb4>
ffffffff80001733:	31 c0                	xor    %eax,%eax
ffffffff80001735:	e8 b6 81 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000173a:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001741:	48 89 c6             	mov    %rax,%rsi
ffffffff80001744:	48 c7 c2 cc 9e 01 80 	mov    $0xffffffff80019ecc,%rdx
ffffffff8000174b:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80001752:	41 b8 a5 00 00 00    	mov    $0xa5,%r8d
ffffffff80001758:	31 c0                	xor    %eax,%eax
ffffffff8000175a:	e8 e1 01 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000175f:	e9 d0 00 00 00       	jmp    ffffffff80001834 <per_cpu_start+0x184>
ffffffff80001764:	eb 00                	jmp    ffffffff80001766 <per_cpu_start+0xb6>
ffffffff80001766:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000176a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000176e:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff80001775:	00 00 00 
ffffffff80001778:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8000177c:	76 2e                	jbe    ffffffff800017ac <per_cpu_start+0xfc>
ffffffff8000177e:	31 c0                	xor    %eax,%eax
ffffffff80001780:	e8 6b 81 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001785:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000178c:	48 89 c6             	mov    %rax,%rsi
ffffffff8000178f:	48 c7 c2 cc 9e 01 80 	mov    $0xffffffff80019ecc,%rdx
ffffffff80001796:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff8000179d:	41 b8 a8 00 00 00    	mov    $0xa8,%r8d
ffffffff800017a3:	31 c0                	xor    %eax,%eax
ffffffff800017a5:	e8 96 01 01 00       	call   ffffffff80011940 <printf_>
ffffffff800017aa:	0f 0b                	ud2    
ffffffff800017ac:	eb 00                	jmp    ffffffff800017ae <per_cpu_start+0xfe>
ffffffff800017ae:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff800017b5:	80 ff ff 
ffffffff800017b8:	48 03 45 d8          	add    -0x28(%rbp),%rax
ffffffff800017bc:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800017c0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800017c4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800017c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800017cc:	8b 58 04             	mov    0x4(%rax),%ebx
ffffffff800017cf:	31 c0                	xor    %eax,%eax
ffffffff800017d1:	e8 1a 81 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800017d6:	48 39 c3             	cmp    %rax,%rbx
ffffffff800017d9:	74 38                	je     ffffffff80001813 <per_cpu_start+0x163>
ffffffff800017db:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800017e2:	31 c0                	xor    %eax,%eax
ffffffff800017e4:	e8 07 81 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800017e9:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800017ec:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800017f3:	48 89 c6             	mov    %rax,%rsi
ffffffff800017f6:	48 c7 c1 cc 9e 01 80 	mov    $0xffffffff80019ecc,%rcx
ffffffff800017fd:	49 c7 c0 18 a1 01 80 	mov    $0xffffffff8001a118,%r8
ffffffff80001804:	41 b9 ab 00 00 00    	mov    $0xab,%r9d
ffffffff8000180a:	31 c0                	xor    %eax,%eax
ffffffff8000180c:	e8 2f 01 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001811:	eb 21                	jmp    ffffffff80001834 <per_cpu_start+0x184>
ffffffff80001813:	eb 00                	jmp    ffffffff80001815 <per_cpu_start+0x165>
ffffffff80001815:	31 c0                	xor    %eax,%eax
ffffffff80001817:	e8 d4 80 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000181c:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80001820:	8b 51 04             	mov    0x4(%rcx),%edx
ffffffff80001823:	48 c7 c7 ee 98 01 80 	mov    $0xffffffff800198ee,%rdi
ffffffff8000182a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000182d:	31 c0                	xor    %eax,%eax
ffffffff8000182f:	e8 0c 01 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001834:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80001838:	74 25                	je     ffffffff8000185f <per_cpu_start+0x1af>
ffffffff8000183a:	c6 45 f2 01          	movb   $0x1,-0xe(%rbp)
ffffffff8000183e:	8a 45 f2             	mov    -0xe(%rbp),%al
ffffffff80001841:	86 05 d5 a7 21 00    	xchg   %al,0x21a7d5(%rip)        # ffffffff8021c01c <m_smp_error>
ffffffff80001847:	31 c0                	xor    %eax,%eax
ffffffff80001849:	e8 a2 80 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000184e:	48 c7 c7 ba 9c 01 80 	mov    $0xffffffff80019cba,%rdi
ffffffff80001855:	48 89 c6             	mov    %rax,%rsi
ffffffff80001858:	31 c0                	xor    %eax,%eax
ffffffff8000185a:	e8 e1 00 01 00       	call   ffffffff80011940 <printf_>
ffffffff8000185f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%rbp)
ffffffff80001866:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80001869:	f0 0f c1 05 a7 a7 21 	lock xadd %eax,0x21a7a7(%rip)        # ffffffff8021c018 <m_startup_count>
ffffffff80001870:	00 
ffffffff80001871:	89 45 cc             	mov    %eax,-0x34(%rbp)
ffffffff80001874:	8a 05 b6 a7 21 00    	mov    0x21a7b6(%rip),%al        # ffffffff8021c030 <m_start_scheduler>
ffffffff8000187a:	88 45 f3             	mov    %al,-0xd(%rbp)
ffffffff8000187d:	8a 45 f3             	mov    -0xd(%rbp),%al
ffffffff80001880:	34 ff                	xor    $0xff,%al
ffffffff80001882:	a8 01                	test   $0x1,%al
ffffffff80001884:	75 02                	jne    ffffffff80001888 <per_cpu_start+0x1d8>
ffffffff80001886:	eb 04                	jmp    ffffffff8000188c <per_cpu_start+0x1dc>
ffffffff80001888:	f3 90                	pause  
ffffffff8000188a:	eb e8                	jmp    ffffffff80001874 <per_cpu_start+0x1c4>
ffffffff8000188c:	31 c0                	xor    %eax,%eax
ffffffff8000188e:	e8 5d 80 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001893:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80001897:	8b 51 04             	mov    0x4(%rcx),%edx
ffffffff8000189a:	48 c7 c7 ee 98 01 80 	mov    $0xffffffff800198ee,%rdi
ffffffff800018a1:	48 89 c6             	mov    %rax,%rsi
ffffffff800018a4:	31 c0                	xor    %eax,%eax
ffffffff800018a6:	e8 95 00 01 00       	call   ffffffff80011940 <printf_>
ffffffff800018ab:	31 c0                	xor    %eax,%eax
ffffffff800018ad:	e8 fe 36 01 00       	call   ffffffff80014fb0 <scheduler_startup>
ffffffff800018b2:	31 c0                	xor    %eax,%eax
ffffffff800018b4:	e8 37 80 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800018b9:	48 c7 c7 48 94 01 80 	mov    $0xffffffff80019448,%rdi
ffffffff800018c0:	48 89 c6             	mov    %rax,%rsi
ffffffff800018c3:	31 c0                	xor    %eax,%eax
ffffffff800018c5:	e8 76 00 01 00       	call   ffffffff80011940 <printf_>
ffffffff800018ca:	fa                   	cli    
ffffffff800018cb:	f4                   	hlt    
ffffffff800018cc:	eb fd                	jmp    ffffffff800018cb <per_cpu_start+0x21b>
ffffffff800018ce:	cc                   	int3   
ffffffff800018cf:	cc                   	int3   

ffffffff800018d0 <start_thread>:
ffffffff800018d0:	55                   	push   %rbp
ffffffff800018d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800018d4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800018d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff800018df:	31 c0                	xor    %eax,%eax
ffffffff800018e1:	e8 0a 80 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800018e6:	48 c7 c7 41 8e 01 80 	mov    $0xffffffff80018e41,%rdi
ffffffff800018ed:	48 89 c6             	mov    %rax,%rsi
ffffffff800018f0:	31 c0                	xor    %eax,%eax
ffffffff800018f2:	e8 49 00 01 00       	call   ffffffff80011940 <printf_>
ffffffff800018f7:	31 c0                	xor    %eax,%eax
ffffffff800018f9:	e8 62 08 00 00       	call   ffffffff80002160 <init_gc>
ffffffff800018fe:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80001901:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80001905:	74 2e                	je     ffffffff80001935 <start_thread+0x65>
ffffffff80001907:	31 c0                	xor    %eax,%eax
ffffffff80001909:	e8 e2 7f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000190e:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001915:	48 89 c6             	mov    %rax,%rsi
ffffffff80001918:	48 c7 c2 1f 8d 01 80 	mov    $0xffffffff80018d1f,%rdx
ffffffff8000191f:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80001926:	41 b8 d6 00 00 00    	mov    $0xd6,%r8d
ffffffff8000192c:	31 c0                	xor    %eax,%eax
ffffffff8000192e:	e8 0d 00 01 00       	call   ffffffff80011940 <printf_>
ffffffff80001933:	eb 52                	jmp    ffffffff80001987 <start_thread+0xb7>
ffffffff80001935:	eb 00                	jmp    ffffffff80001937 <start_thread+0x67>
ffffffff80001937:	eb 00                	jmp    ffffffff80001939 <start_thread+0x69>
ffffffff80001939:	48 8b 3d e8 a6 21 00 	mov    0x21a6e8(%rip),%rdi        # ffffffff8021c028 <m_corelib_module>
ffffffff80001940:	48 8b 35 d9 a6 21 00 	mov    0x21a6d9(%rip),%rsi        # ffffffff8021c020 <m_corelib_module_size>
ffffffff80001947:	e8 d4 19 00 00       	call   ffffffff80003320 <loader_load_corelib>
ffffffff8000194c:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000194f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80001953:	74 2e                	je     ffffffff80001983 <start_thread+0xb3>
ffffffff80001955:	31 c0                	xor    %eax,%eax
ffffffff80001957:	e8 94 7f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000195c:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80001963:	48 89 c6             	mov    %rax,%rsi
ffffffff80001966:	48 c7 c2 1f 8d 01 80 	mov    $0xffffffff80018d1f,%rdx
ffffffff8000196d:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff80001974:	41 b8 d7 00 00 00    	mov    $0xd7,%r8d
ffffffff8000197a:	31 c0                	xor    %eax,%eax
ffffffff8000197c:	e8 bf ff 00 00       	call   ffffffff80011940 <printf_>
ffffffff80001981:	eb 04                	jmp    ffffffff80001987 <start_thread+0xb7>
ffffffff80001983:	eb 00                	jmp    ffffffff80001985 <start_thread+0xb5>
ffffffff80001985:	eb 00                	jmp    ffffffff80001987 <start_thread+0xb7>
ffffffff80001987:	eb 00                	jmp    ffffffff80001989 <start_thread+0xb9>
ffffffff80001989:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000198d:	74 2e                	je     ffffffff800019bd <start_thread+0xed>
ffffffff8000198f:	31 c0                	xor    %eax,%eax
ffffffff80001991:	e8 5a 7f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001996:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000199d:	48 89 c6             	mov    %rax,%rsi
ffffffff800019a0:	48 c7 c2 1f 8d 01 80 	mov    $0xffffffff80018d1f,%rdx
ffffffff800019a7:	48 c7 c1 18 a1 01 80 	mov    $0xffffffff8001a118,%rcx
ffffffff800019ae:	41 b8 da 00 00 00    	mov    $0xda,%r8d
ffffffff800019b4:	31 c0                	xor    %eax,%eax
ffffffff800019b6:	e8 85 ff 00 00       	call   ffffffff80011940 <printf_>
ffffffff800019bb:	0f 0b                	ud2    
ffffffff800019bd:	eb 00                	jmp    ffffffff800019bf <start_thread+0xef>
ffffffff800019bf:	31 c0                	xor    %eax,%eax
ffffffff800019c1:	e8 2a 7f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800019c6:	48 c7 c7 df 9f 01 80 	mov    $0xffffffff80019fdf,%rdi
ffffffff800019cd:	48 89 c6             	mov    %rax,%rsi
ffffffff800019d0:	31 c0                	xor    %eax,%eax
ffffffff800019d2:	e8 69 ff 00 00       	call   ffffffff80011940 <printf_>
ffffffff800019d7:	eb fe                	jmp    ffffffff800019d7 <start_thread+0x107>
ffffffff800019d9:	cc                   	int3   
ffffffff800019da:	cc                   	int3   
ffffffff800019db:	cc                   	int3   
ffffffff800019dc:	cc                   	int3   
ffffffff800019dd:	cc                   	int3   
ffffffff800019de:	cc                   	int3   
ffffffff800019df:	cc                   	int3   

ffffffff800019e0 <debug_disasm_at>:
ffffffff800019e0:	55                   	push   %rbp
ffffffff800019e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800019e4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800019e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff800019ec:	c7 45 fc 05 00 00 00 	movl   $0x5,-0x4(%rbp)
ffffffff800019f3:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800019f7:	5d                   	pop    %rbp
ffffffff800019f8:	c3                   	ret    
ffffffff800019f9:	cc                   	int3   
ffffffff800019fa:	cc                   	int3   
ffffffff800019fb:	cc                   	int3   
ffffffff800019fc:	cc                   	int3   
ffffffff800019fd:	cc                   	int3   
ffffffff800019fe:	cc                   	int3   
ffffffff800019ff:	cc                   	int3   

ffffffff80001a00 <debug_load_symbols>:
ffffffff80001a00:	55                   	push   %rbp
ffffffff80001a01:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001a04:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80001a08:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80001a0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001a10:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80001a14:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80001a1b:	00 
ffffffff80001a1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80001a20:	48 83 78 28 00       	cmpq   $0x0,0x28(%rax)
ffffffff80001a25:	75 1d                	jne    ffffffff80001a44 <debug_load_symbols+0x44>
ffffffff80001a27:	31 c0                	xor    %eax,%eax
ffffffff80001a29:	e8 c2 7e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001a2e:	48 c7 c7 67 8e 01 80 	mov    $0xffffffff80018e67,%rdi
ffffffff80001a35:	48 89 c6             	mov    %rax,%rsi
ffffffff80001a38:	31 c0                	xor    %eax,%eax
ffffffff80001a3a:	e8 01 ff 00 00       	call   ffffffff80011940 <printf_>
ffffffff80001a3f:	e9 77 01 00 00       	jmp    ffffffff80001bbb <debug_load_symbols+0x1bb>
ffffffff80001a44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001a48:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80001a4c:	48 03 41 28          	add    0x28(%rcx),%rax
ffffffff80001a50:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80001a54:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff80001a5b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80001a5e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80001a62:	0f b7 49 3c          	movzwl 0x3c(%rcx),%ecx
ffffffff80001a66:	39 c8                	cmp    %ecx,%eax
ffffffff80001a68:	7d 37                	jge    ffffffff80001aa1 <debug_load_symbols+0xa1>
ffffffff80001a6a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001a6e:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff80001a72:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80001a76:	48 01 c8             	add    %rcx,%rax
ffffffff80001a79:	83 78 04 02          	cmpl   $0x2,0x4(%rax)
ffffffff80001a7d:	75 15                	jne    ffffffff80001a94 <debug_load_symbols+0x94>
ffffffff80001a7f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80001a83:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff80001a87:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80001a8b:	48 01 c8             	add    %rcx,%rax
ffffffff80001a8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80001a92:	eb 0f                	jmp    ffffffff80001aa3 <debug_load_symbols+0xa3>
ffffffff80001a94:	eb 00                	jmp    ffffffff80001a96 <debug_load_symbols+0x96>
ffffffff80001a96:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80001a99:	83 c0 01             	add    $0x1,%eax
ffffffff80001a9c:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80001a9f:	eb ba                	jmp    ffffffff80001a5b <debug_load_symbols+0x5b>
ffffffff80001aa1:	eb 00                	jmp    ffffffff80001aa3 <debug_load_symbols+0xa3>
ffffffff80001aa3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80001aa8:	75 1d                	jne    ffffffff80001ac7 <debug_load_symbols+0xc7>
ffffffff80001aaa:	31 c0                	xor    %eax,%eax
ffffffff80001aac:	e8 3f 7e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001ab1:	48 c7 c7 19 9b 01 80 	mov    $0xffffffff80019b19,%rdi
ffffffff80001ab8:	48 89 c6             	mov    %rax,%rsi
ffffffff80001abb:	31 c0                	xor    %eax,%eax
ffffffff80001abd:	e8 7e fe 00 00       	call   ffffffff80011940 <printf_>
ffffffff80001ac2:	e9 f4 00 00 00       	jmp    ffffffff80001bbb <debug_load_symbols+0x1bb>
ffffffff80001ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001acb:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80001acf:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80001ad3:	8b 52 28             	mov    0x28(%rdx),%edx
ffffffff80001ad6:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80001ada:	48 01 d1             	add    %rdx,%rcx
ffffffff80001add:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80001ae1:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80001ae5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001ae9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80001aed:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80001af1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80001af5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80001afc:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001b00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001b04:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80001b08:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80001b0d:	31 d2                	xor    %edx,%edx
ffffffff80001b0f:	48 f7 f6             	div    %rsi
ffffffff80001b12:	48 39 c1             	cmp    %rax,%rcx
ffffffff80001b15:	73 6e                	jae    ffffffff80001b85 <debug_load_symbols+0x185>
ffffffff80001b17:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001b1b:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001b1f:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001b23:	48 01 c8             	add    %rcx,%rax
ffffffff80001b26:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80001b2a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80001b2e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001b32:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001b36:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001b3a:	48 01 c8             	add    %rcx,%rax
ffffffff80001b3d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80001b41:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80001b45:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff80001b49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001b4d:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001b51:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001b55:	48 01 c8             	add    %rcx,%rax
ffffffff80001b58:	8b 00                	mov    (%rax),%eax
ffffffff80001b5a:	48 01 c7             	add    %rax,%rdi
ffffffff80001b5d:	e8 6e 00 00 00       	call   ffffffff80001bd0 <strdup>
ffffffff80001b62:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80001b66:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80001b6a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80001b6e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80001b72:	e8 a9 00 00 00       	call   ffffffff80001c20 <insert_symbol>
ffffffff80001b77:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80001b7a:	83 c0 01             	add    $0x1,%eax
ffffffff80001b7d:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80001b80:	e9 77 ff ff ff       	jmp    ffffffff80001afc <debug_load_symbols+0xfc>
ffffffff80001b85:	31 c0                	xor    %eax,%eax
ffffffff80001b87:	e8 64 7d 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80001b8c:	48 8b 0d a5 a4 21 00 	mov    0x21a4a5(%rip),%rcx        # ffffffff8021c038 <m_symbols>
ffffffff80001b93:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff80001b97:	74 0d                	je     ffffffff80001ba6 <debug_load_symbols+0x1a6>
ffffffff80001b99:	48 8b 0d 98 a4 21 00 	mov    0x21a498(%rip),%rcx        # ffffffff8021c038 <m_symbols>
ffffffff80001ba0:	48 8b 51 e0          	mov    -0x20(%rcx),%rdx
ffffffff80001ba4:	eb 04                	jmp    ffffffff80001baa <debug_load_symbols+0x1aa>
ffffffff80001ba6:	31 d2                	xor    %edx,%edx
ffffffff80001ba8:	eb 00                	jmp    ffffffff80001baa <debug_load_symbols+0x1aa>
ffffffff80001baa:	48 c7 c7 f7 9f 01 80 	mov    $0xffffffff80019ff7,%rdi
ffffffff80001bb1:	48 89 c6             	mov    %rax,%rsi
ffffffff80001bb4:	31 c0                	xor    %eax,%eax
ffffffff80001bb6:	e8 85 fd 00 00       	call   ffffffff80011940 <printf_>
ffffffff80001bbb:	48 83 c4 50          	add    $0x50,%rsp
ffffffff80001bbf:	5d                   	pop    %rbp
ffffffff80001bc0:	c3                   	ret    
ffffffff80001bc1:	cc                   	int3   
ffffffff80001bc2:	cc                   	int3   
ffffffff80001bc3:	cc                   	int3   
ffffffff80001bc4:	cc                   	int3   
ffffffff80001bc5:	cc                   	int3   
ffffffff80001bc6:	cc                   	int3   
ffffffff80001bc7:	cc                   	int3   
ffffffff80001bc8:	cc                   	int3   
ffffffff80001bc9:	cc                   	int3   
ffffffff80001bca:	cc                   	int3   
ffffffff80001bcb:	cc                   	int3   
ffffffff80001bcc:	cc                   	int3   
ffffffff80001bcd:	cc                   	int3   
ffffffff80001bce:	cc                   	int3   
ffffffff80001bcf:	cc                   	int3   

ffffffff80001bd0 <strdup>:
ffffffff80001bd0:	55                   	push   %rbp
ffffffff80001bd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001bd4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80001bd8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80001bdc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80001be0:	e8 fb e2 00 00       	call   ffffffff8000fee0 <strlen>
ffffffff80001be5:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80001be8:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80001beb:	83 c0 01             	add    $0x1,%eax
ffffffff80001bee:	48 63 f8             	movslq %eax,%rdi
ffffffff80001bf1:	e8 7a b5 00 00       	call   ffffffff8000d170 <malloc>
ffffffff80001bf6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80001bfa:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80001bfe:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80001c02:	e8 29 e3 00 00       	call   ffffffff8000ff30 <strcpy>
ffffffff80001c07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001c0b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80001c0f:	5d                   	pop    %rbp
ffffffff80001c10:	c3                   	ret    
ffffffff80001c11:	cc                   	int3   
ffffffff80001c12:	cc                   	int3   
ffffffff80001c13:	cc                   	int3   
ffffffff80001c14:	cc                   	int3   
ffffffff80001c15:	cc                   	int3   
ffffffff80001c16:	cc                   	int3   
ffffffff80001c17:	cc                   	int3   
ffffffff80001c18:	cc                   	int3   
ffffffff80001c19:	cc                   	int3   
ffffffff80001c1a:	cc                   	int3   
ffffffff80001c1b:	cc                   	int3   
ffffffff80001c1c:	cc                   	int3   
ffffffff80001c1d:	cc                   	int3   
ffffffff80001c1e:	cc                   	int3   
ffffffff80001c1f:	cc                   	int3   

ffffffff80001c20 <insert_symbol>:
ffffffff80001c20:	55                   	push   %rbp
ffffffff80001c21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001c24:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80001c28:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80001c2c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff80001c30:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80001c34:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80001c3b:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff80001c3f:	48 8b 0d f2 a3 21 00 	mov    0x21a3f2(%rip),%rcx        # ffffffff8021c038 <m_symbols>
ffffffff80001c46:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff80001c4a:	74 0d                	je     ffffffff80001c59 <insert_symbol+0x39>
ffffffff80001c4c:	48 8b 0d e5 a3 21 00 	mov    0x21a3e5(%rip),%rcx        # ffffffff8021c038 <m_symbols>
ffffffff80001c53:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff80001c57:	eb 04                	jmp    ffffffff80001c5d <insert_symbol+0x3d>
ffffffff80001c59:	31 c9                	xor    %ecx,%ecx
ffffffff80001c5b:	eb 00                	jmp    ffffffff80001c5d <insert_symbol+0x3d>
ffffffff80001c5d:	48 39 c8             	cmp    %rcx,%rax
ffffffff80001c60:	0f 8d ed 00 00 00    	jge    ffffffff80001d53 <insert_symbol+0x133>
ffffffff80001c66:	48 8b 05 cb a3 21 00 	mov    0x21a3cb(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001c6d:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001c71:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001c75:	48 01 c8             	add    %rcx,%rax
ffffffff80001c78:	48 8b 00             	mov    (%rax),%rax
ffffffff80001c7b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80001c7f:	0f 86 be 00 00 00    	jbe    ffffffff80001d43 <insert_symbol+0x123>
ffffffff80001c85:	48 8b 05 ac a3 21 00 	mov    0x21a3ac(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001c8c:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80001c90:	74 14                	je     ffffffff80001ca6 <insert_symbol+0x86>
ffffffff80001c92:	48 8b 05 9f a3 21 00 	mov    0x21a39f(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001c99:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80001c9d:	48 ff c1             	inc    %rcx
ffffffff80001ca0:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
ffffffff80001ca4:	76 21                	jbe    ffffffff80001cc7 <insert_symbol+0xa7>
ffffffff80001ca6:	48 8b 3d 8b a3 21 00 	mov    0x21a38b(%rip),%rdi        # ffffffff8021c038 <m_symbols>
ffffffff80001cad:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80001cb2:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001cb7:	31 c9                	xor    %ecx,%ecx
ffffffff80001cb9:	e8 c2 e2 00 00       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff80001cbe:	48 89 05 73 a3 21 00 	mov    %rax,0x21a373(%rip)        # ffffffff8021c038 <m_symbols>
ffffffff80001cc5:	eb 02                	jmp    ffffffff80001cc9 <insert_symbol+0xa9>
ffffffff80001cc7:	eb 00                	jmp    ffffffff80001cc9 <insert_symbol+0xa9>
ffffffff80001cc9:	48 8b 05 68 a3 21 00 	mov    0x21a368(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001cd0:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80001cd4:	48 ff c1             	inc    %rcx
ffffffff80001cd7:	48 89 48 e0          	mov    %rcx,-0x20(%rax)
ffffffff80001cdb:	48 8b 05 56 a3 21 00 	mov    0x21a356(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001ce2:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80001ce6:	48 63 55 fc          	movslq -0x4(%rbp),%rdx
ffffffff80001cea:	89 d6                	mov    %edx,%esi
ffffffff80001cec:	ff c6                	inc    %esi
ffffffff80001cee:	48 63 f6             	movslq %esi,%rsi
ffffffff80001cf1:	48 8d 34 76          	lea    (%rsi,%rsi,2),%rsi
ffffffff80001cf5:	48 8d 3c f0          	lea    (%rax,%rsi,8),%rdi
ffffffff80001cf9:	48 8d 34 52          	lea    (%rdx,%rdx,2),%rsi
ffffffff80001cfd:	48 8d 34 f0          	lea    (%rax,%rsi,8),%rsi
ffffffff80001d01:	48 29 d1             	sub    %rdx,%rcx
ffffffff80001d04:	48 8d 04 49          	lea    (%rcx,%rcx,2),%rax
ffffffff80001d08:	48 8d 14 c5 e8 ff ff 	lea    -0x18(,%rax,8),%rdx
ffffffff80001d0f:	ff 
ffffffff80001d10:	e8 eb df 00 00       	call   ffffffff8000fd00 <memmove>
ffffffff80001d15:	48 8b 05 1c a3 21 00 	mov    0x21a31c(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001d1c:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001d20:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001d24:	48 01 c8             	add    %rcx,%rax
ffffffff80001d27:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001d2b:	48 89 08             	mov    %rcx,(%rax)
ffffffff80001d2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80001d32:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80001d36:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80001d3a:	48 89 48 10          	mov    %rcx,0x10(%rax)
ffffffff80001d3e:	e9 88 00 00 00       	jmp    ffffffff80001dcb <insert_symbol+0x1ab>
ffffffff80001d43:	eb 00                	jmp    ffffffff80001d45 <insert_symbol+0x125>
ffffffff80001d45:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80001d48:	83 c0 01             	add    $0x1,%eax
ffffffff80001d4b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80001d4e:	e9 e8 fe ff ff       	jmp    ffffffff80001c3b <insert_symbol+0x1b>
ffffffff80001d53:	48 8b 05 de a2 21 00 	mov    0x21a2de(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001d5a:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80001d5e:	74 14                	je     ffffffff80001d74 <insert_symbol+0x154>
ffffffff80001d60:	48 8b 05 d1 a2 21 00 	mov    0x21a2d1(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001d67:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80001d6b:	48 ff c1             	inc    %rcx
ffffffff80001d6e:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
ffffffff80001d72:	76 21                	jbe    ffffffff80001d95 <insert_symbol+0x175>
ffffffff80001d74:	48 8b 3d bd a2 21 00 	mov    0x21a2bd(%rip),%rdi        # ffffffff8021c038 <m_symbols>
ffffffff80001d7b:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80001d80:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80001d85:	31 c9                	xor    %ecx,%ecx
ffffffff80001d87:	e8 f4 e1 00 00       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff80001d8c:	48 89 05 a5 a2 21 00 	mov    %rax,0x21a2a5(%rip)        # ffffffff8021c038 <m_symbols>
ffffffff80001d93:	eb 02                	jmp    ffffffff80001d97 <insert_symbol+0x177>
ffffffff80001d95:	eb 00                	jmp    ffffffff80001d97 <insert_symbol+0x177>
ffffffff80001d97:	48 8b 05 9a a2 21 00 	mov    0x21a29a(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001d9e:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80001da2:	48 89 ca             	mov    %rcx,%rdx
ffffffff80001da5:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80001da9:	48 89 50 e0          	mov    %rdx,-0x20(%rax)
ffffffff80001dad:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001db1:	48 01 c8             	add    %rcx,%rax
ffffffff80001db4:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80001db8:	48 89 08             	mov    %rcx,(%rax)
ffffffff80001dbb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80001dbf:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80001dc3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80001dc7:	48 89 48 10          	mov    %rcx,0x10(%rax)
ffffffff80001dcb:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80001dcf:	5d                   	pop    %rbp
ffffffff80001dd0:	c3                   	ret    
ffffffff80001dd1:	cc                   	int3   
ffffffff80001dd2:	cc                   	int3   
ffffffff80001dd3:	cc                   	int3   
ffffffff80001dd4:	cc                   	int3   
ffffffff80001dd5:	cc                   	int3   
ffffffff80001dd6:	cc                   	int3   
ffffffff80001dd7:	cc                   	int3   
ffffffff80001dd8:	cc                   	int3   
ffffffff80001dd9:	cc                   	int3   
ffffffff80001dda:	cc                   	int3   
ffffffff80001ddb:	cc                   	int3   
ffffffff80001ddc:	cc                   	int3   
ffffffff80001ddd:	cc                   	int3   
ffffffff80001dde:	cc                   	int3   
ffffffff80001ddf:	cc                   	int3   

ffffffff80001de0 <debug_lookup_symbol>:
ffffffff80001de0:	55                   	push   %rbp
ffffffff80001de1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001de4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80001de8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80001dec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80001df3:	48 8b 05 3e a2 21 00 	mov    0x21a23e(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001dfa:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80001dfe:	74 0d                	je     ffffffff80001e0d <debug_lookup_symbol+0x2d>
ffffffff80001e00:	48 8b 05 31 a2 21 00 	mov    0x21a231(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001e07:	48 8b 40 e0          	mov    -0x20(%rax),%rax
ffffffff80001e0b:	eb 04                	jmp    ffffffff80001e11 <debug_lookup_symbol+0x31>
ffffffff80001e0d:	31 c0                	xor    %eax,%eax
ffffffff80001e0f:	eb 00                	jmp    ffffffff80001e11 <debug_lookup_symbol+0x31>
ffffffff80001e11:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80001e14:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80001e17:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff80001e1a:	0f 8f a8 00 00 00    	jg     ffffffff80001ec8 <debug_lookup_symbol+0xe8>
ffffffff80001e20:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80001e23:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff80001e26:	29 c1                	sub    %eax,%ecx
ffffffff80001e28:	89 ca                	mov    %ecx,%edx
ffffffff80001e2a:	c1 ea 1f             	shr    $0x1f,%edx
ffffffff80001e2d:	01 d1                	add    %edx,%ecx
ffffffff80001e2f:	d1 f9                	sar    %ecx
ffffffff80001e31:	01 c8                	add    %ecx,%eax
ffffffff80001e33:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80001e36:	48 8b 05 fb a1 21 00 	mov    0x21a1fb(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001e3d:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001e41:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001e45:	48 01 c8             	add    %rcx,%rax
ffffffff80001e48:	48 8b 00             	mov    (%rax),%rax
ffffffff80001e4b:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80001e4f:	77 43                	ja     ffffffff80001e94 <debug_lookup_symbol+0xb4>
ffffffff80001e51:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001e55:	48 8b 0d dc a1 21 00 	mov    0x21a1dc(%rip),%rcx        # ffffffff8021c038 <m_symbols>
ffffffff80001e5c:	48 63 55 fc          	movslq -0x4(%rbp),%rdx
ffffffff80001e60:	48 8d 14 52          	lea    (%rdx,%rdx,2),%rdx
ffffffff80001e64:	48 8b 14 d1          	mov    (%rcx,%rdx,8),%rdx
ffffffff80001e68:	48 63 75 fc          	movslq -0x4(%rbp),%rsi
ffffffff80001e6c:	48 6b f6 18          	imul   $0x18,%rsi,%rsi
ffffffff80001e70:	48 01 f1             	add    %rsi,%rcx
ffffffff80001e73:	48 03 51 08          	add    0x8(%rcx),%rdx
ffffffff80001e77:	48 39 d0             	cmp    %rdx,%rax
ffffffff80001e7a:	73 18                	jae    ffffffff80001e94 <debug_lookup_symbol+0xb4>
ffffffff80001e7c:	48 8b 05 b5 a1 21 00 	mov    0x21a1b5(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001e83:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001e87:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001e8b:	48 01 c8             	add    %rcx,%rax
ffffffff80001e8e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80001e92:	eb 3c                	jmp    ffffffff80001ed0 <debug_lookup_symbol+0xf0>
ffffffff80001e94:	48 8b 05 9d a1 21 00 	mov    0x21a19d(%rip),%rax        # ffffffff8021c038 <m_symbols>
ffffffff80001e9b:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80001e9f:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff80001ea3:	48 01 c8             	add    %rcx,%rax
ffffffff80001ea6:	48 8b 00             	mov    (%rax),%rax
ffffffff80001ea9:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80001ead:	73 0b                	jae    ffffffff80001eba <debug_lookup_symbol+0xda>
ffffffff80001eaf:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80001eb2:	83 c0 01             	add    $0x1,%eax
ffffffff80001eb5:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80001eb8:	eb 09                	jmp    ffffffff80001ec3 <debug_lookup_symbol+0xe3>
ffffffff80001eba:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80001ebd:	83 e8 01             	sub    $0x1,%eax
ffffffff80001ec0:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80001ec3:	e9 4c ff ff ff       	jmp    ffffffff80001e14 <debug_lookup_symbol+0x34>
ffffffff80001ec8:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80001ecf:	00 
ffffffff80001ed0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001ed4:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80001ed8:	5d                   	pop    %rbp
ffffffff80001ed9:	c3                   	ret    
ffffffff80001eda:	cc                   	int3   
ffffffff80001edb:	cc                   	int3   
ffffffff80001edc:	cc                   	int3   
ffffffff80001edd:	cc                   	int3   
ffffffff80001ede:	cc                   	int3   
ffffffff80001edf:	cc                   	int3   

ffffffff80001ee0 <gc_new>:
ffffffff80001ee0:	55                   	push   %rbp
ffffffff80001ee1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001ee4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80001ee8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff80001eec:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff80001ef0:	e8 bb 1a 01 00       	call   ffffffff800139b0 <scheduler_preempt_disable>
ffffffff80001ef5:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80001ef9:	e8 12 0d 00 00       	call   ffffffff80002c10 <heap_alloc>
ffffffff80001efe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80001f02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001f06:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80001f0d:	00 
ffffffff80001f0e:	64 8a 04 25 0a 00 00 	mov    %fs:0xa,%al
ffffffff80001f15:	00 
ffffffff80001f16:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80001f1a:	88 41 10             	mov    %al,0x10(%rcx)
ffffffff80001f1d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80001f21:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80001f25:	48 89 01             	mov    %rax,(%rcx)
ffffffff80001f28:	48 8b 05 11 a1 21 00 	mov    0x21a111(%rip),%rax        # ffffffff8021c040 <m_all_objects>
ffffffff80001f2f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80001f33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001f37:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80001f3b:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff80001f3f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001f43:	48 89 c1             	mov    %rax,%rcx
ffffffff80001f46:	48 83 c1 18          	add    $0x18,%rcx
ffffffff80001f4a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80001f4e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80001f52:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80001f56:	f0 48 0f b1 15 e1 a0 	lock cmpxchg %rdx,0x21a0e1(%rip)        # ffffffff8021c040 <m_all_objects>
ffffffff80001f5d:	21 00 
ffffffff80001f5f:	0f 94 c2             	sete   %dl
ffffffff80001f62:	f6 c2 01             	test   $0x1,%dl
ffffffff80001f65:	75 03                	jne    ffffffff80001f6a <gc_new+0x8a>
ffffffff80001f67:	48 89 01             	mov    %rax,(%rcx)
ffffffff80001f6a:	80 e2 01             	and    $0x1,%dl
ffffffff80001f6d:	88 55 ff             	mov    %dl,-0x1(%rbp)
ffffffff80001f70:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80001f73:	34 ff                	xor    $0xff,%al
ffffffff80001f75:	a8 01                	test   $0x1,%al
ffffffff80001f77:	75 02                	jne    ffffffff80001f7b <gc_new+0x9b>
ffffffff80001f79:	eb 02                	jmp    ffffffff80001f7d <gc_new+0x9d>
ffffffff80001f7b:	eb c2                	jmp    ffffffff80001f3f <gc_new+0x5f>
ffffffff80001f7d:	e8 9e 1b 01 00       	call   ffffffff80013b20 <scheduler_preempt_enable>
ffffffff80001f82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80001f86:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80001f8a:	5d                   	pop    %rbp
ffffffff80001f8b:	c3                   	ret    
ffffffff80001f8c:	cc                   	int3   
ffffffff80001f8d:	cc                   	int3   
ffffffff80001f8e:	cc                   	int3   
ffffffff80001f8f:	cc                   	int3   

ffffffff80001f90 <gc_update>:
ffffffff80001f90:	55                   	push   %rbp
ffffffff80001f91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80001f94:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80001f98:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80001f9c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff80001fa0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80001fa4:	e8 07 1a 01 00       	call   ffffffff800139b0 <scheduler_preempt_disable>
ffffffff80001fa9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80001fad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80001fb1:	64 8a 04 25 08 00 00 	mov    %fs:0x8,%al
ffffffff80001fb8:	00 
ffffffff80001fb9:	a8 01                	test   $0x1,%al
ffffffff80001fbb:	0f 84 ee 00 00 00    	je     ffffffff800020af <gc_update+0x11f>
ffffffff80001fc1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001fc5:	0f b6 40 10          	movzbl 0x10(%rax),%eax
ffffffff80001fc9:	8b 0d 69 90 01 00    	mov    0x19069(%rip),%ecx        # ffffffff8001b038 <m_color_white>
ffffffff80001fcf:	39 c8                	cmp    %ecx,%eax
ffffffff80001fd1:	0f 85 d8 00 00 00    	jne    ffffffff800020af <gc_update+0x11f>
ffffffff80001fd7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80001fdb:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80001fe0:	0f 84 c7 00 00 00    	je     ffffffff800020ad <gc_update+0x11d>
ffffffff80001fe6:	64 48 8b 04 25 10 00 	mov    %fs:0x10,%rax
ffffffff80001fed:	00 00 
ffffffff80001fef:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80001ff3:	74 0f                	je     ffffffff80002004 <gc_update+0x74>
ffffffff80001ff5:	64 48 8b 04 25 10 00 	mov    %fs:0x10,%rax
ffffffff80001ffc:	00 00 
ffffffff80001ffe:	48 8b 40 e0          	mov    -0x20(%rax),%rax
ffffffff80002002:	eb 04                	jmp    ffffffff80002008 <gc_update+0x78>
ffffffff80002004:	31 c0                	xor    %eax,%eax
ffffffff80002006:	eb 00                	jmp    ffffffff80002008 <gc_update+0x78>
ffffffff80002008:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000200b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000200f:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80002014:	0f 85 91 00 00 00    	jne    ffffffff800020ab <gc_update+0x11b>
ffffffff8000201a:	64 48 8b 04 25 10 00 	mov    %fs:0x10,%rax
ffffffff80002021:	00 00 
ffffffff80002023:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80002027:	74 0f                	je     ffffffff80002038 <gc_update+0xa8>
ffffffff80002029:	64 48 8b 04 25 10 00 	mov    %fs:0x10,%rax
ffffffff80002030:	00 00 
ffffffff80002032:	48 8b 40 e8          	mov    -0x18(%rax),%rax
ffffffff80002036:	eb 04                	jmp    ffffffff8000203c <gc_update+0xac>
ffffffff80002038:	31 c0                	xor    %eax,%eax
ffffffff8000203a:	eb 00                	jmp    ffffffff8000203c <gc_update+0xac>
ffffffff8000203c:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80002040:	48 39 c8             	cmp    %rcx,%rax
ffffffff80002043:	73 24                	jae    ffffffff80002069 <gc_update+0xd9>
ffffffff80002045:	64 48 8b 3c 25 10 00 	mov    %fs:0x10,%rdi
ffffffff8000204c:	00 00 
ffffffff8000204e:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80002052:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff80002057:	31 d2                	xor    %edx,%edx
ffffffff80002059:	e8 22 df 00 00       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff8000205e:	64 48 89 04 25 10 00 	mov    %rax,%fs:0x10
ffffffff80002065:	00 00 
ffffffff80002067:	eb 02                	jmp    ffffffff8000206b <gc_update+0xdb>
ffffffff80002069:	eb 00                	jmp    ffffffff8000206b <gc_update+0xdb>
ffffffff8000206b:	64 48 8b 04 25 10 00 	mov    %fs:0x10,%rax
ffffffff80002072:	00 00 
ffffffff80002074:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80002078:	74 13                	je     ffffffff8000208d <gc_update+0xfd>
ffffffff8000207a:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff8000207e:	64 48 8b 0c 25 10 00 	mov    %fs:0x10,%rcx
ffffffff80002085:	00 00 
ffffffff80002087:	48 89 41 e0          	mov    %rax,-0x20(%rcx)
ffffffff8000208b:	eb 02                	jmp    ffffffff8000208f <gc_update+0xff>
ffffffff8000208d:	eb 00                	jmp    ffffffff8000208f <gc_update+0xff>
ffffffff8000208f:	64 48 8b 04 25 10 00 	mov    %fs:0x10,%rax
ffffffff80002096:	00 00 
ffffffff80002098:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000209c:	48 c1 e1 03          	shl    $0x3,%rcx
ffffffff800020a0:	48 01 c8             	add    %rcx,%rax
ffffffff800020a3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800020a7:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff800020ab:	eb 00                	jmp    ffffffff800020ad <gc_update+0x11d>
ffffffff800020ad:	eb 00                	jmp    ffffffff800020af <gc_update+0x11f>
ffffffff800020af:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff800020b3:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
ffffffff800020b7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff800020bb:	e8 70 00 00 00       	call   ffffffff80002130 <write_field>
ffffffff800020c0:	64 8a 04 25 09 00 00 	mov    %fs:0x9,%al
ffffffff800020c7:	00 
ffffffff800020c8:	a8 01                	test   $0x1,%al
ffffffff800020ca:	74 54                	je     ffffffff80002120 <gc_update+0x190>
ffffffff800020cc:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff800020d1:	74 4d                	je     ffffffff80002120 <gc_update+0x190>
ffffffff800020d3:	64 48 8b 3c 25 18 00 	mov    %fs:0x18,%rdi
ffffffff800020da:	00 00 
ffffffff800020dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800020e0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800020e4:	48 8d 75 d8          	lea    -0x28(%rbp),%rsi
ffffffff800020e8:	e8 b3 e9 00 00       	call   ffffffff80010aa0 <stbds_hmput_key>
ffffffff800020ed:	64 48 89 04 25 18 00 	mov    %rax,%fs:0x18
ffffffff800020f4:	00 00 
ffffffff800020f6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800020fa:	64 48 8b 0c 25 18 00 	mov    %fs:0x18,%rcx
ffffffff80002101:	00 00 
ffffffff80002103:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
ffffffff80002107:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff8000210b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000210f:	64 48 8b 0c 25 18 00 	mov    %fs:0x18,%rcx
ffffffff80002116:	00 00 
ffffffff80002118:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
ffffffff8000211c:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80002120:	e8 fb 19 01 00       	call   ffffffff80013b20 <scheduler_preempt_enable>
ffffffff80002125:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80002129:	5d                   	pop    %rbp
ffffffff8000212a:	c3                   	ret    
ffffffff8000212b:	cc                   	int3   
ffffffff8000212c:	cc                   	int3   
ffffffff8000212d:	cc                   	int3   
ffffffff8000212e:	cc                   	int3   
ffffffff8000212f:	cc                   	int3   

ffffffff80002130 <write_field>:
ffffffff80002130:	55                   	push   %rbp
ffffffff80002131:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002134:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80002138:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000213c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80002140:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80002144:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002148:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000214c:	48 03 4d f0          	add    -0x10(%rbp),%rcx
ffffffff80002150:	48 89 01             	mov    %rax,(%rcx)
ffffffff80002153:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80002157:	5d                   	pop    %rbp
ffffffff80002158:	c3                   	ret    
ffffffff80002159:	cc                   	int3   
ffffffff8000215a:	cc                   	int3   
ffffffff8000215b:	cc                   	int3   
ffffffff8000215c:	cc                   	int3   
ffffffff8000215d:	cc                   	int3   
ffffffff8000215e:	cc                   	int3   
ffffffff8000215f:	cc                   	int3   

ffffffff80002160 <init_gc>:
ffffffff80002160:	55                   	push   %rbp
ffffffff80002161:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002164:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80002168:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000216f:	48 c7 c7 00 22 00 80 	mov    $0xffffffff80002200,%rdi
ffffffff80002176:	48 c7 c2 15 9a 01 80 	mov    $0xffffffff80019a15,%rdx
ffffffff8000217d:	31 c0                	xor    %eax,%eax
ffffffff8000217f:	e8 4c 3a 01 00       	call   ffffffff80015bd0 <create_thread>
ffffffff80002184:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002188:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000218d:	75 38                	jne    ffffffff800021c7 <init_gc+0x67>
ffffffff8000218f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80002196:	31 c0                	xor    %eax,%eax
ffffffff80002198:	e8 53 77 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000219d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800021a0:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800021a7:	48 89 c6             	mov    %rax,%rsi
ffffffff800021aa:	48 c7 c1 6a 91 01 80 	mov    $0xffffffff8001916a,%rcx
ffffffff800021b1:	49 c7 c0 08 8c 01 80 	mov    $0xffffffff80018c08,%r8
ffffffff800021b8:	41 b9 97 01 00 00    	mov    $0x197,%r9d
ffffffff800021be:	31 c0                	xor    %eax,%eax
ffffffff800021c0:	e8 7b f7 00 00       	call   ffffffff80011940 <printf_>
ffffffff800021c5:	eb 28                	jmp    ffffffff800021ef <init_gc+0x8f>
ffffffff800021c7:	eb 00                	jmp    ffffffff800021c9 <init_gc+0x69>
ffffffff800021c9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800021cd:	e8 5e 17 01 00       	call   ffffffff80013930 <scheduler_ready_thread>
ffffffff800021d2:	48 c7 c7 48 c0 21 80 	mov    $0xffffffff8021c048,%rdi
ffffffff800021d9:	e8 e2 e4 ff ff       	call   ffffffff800006c0 <mutex_lock>
ffffffff800021de:	e8 9d 00 00 00       	call   ffffffff80002280 <gc_conductor_wait>
ffffffff800021e3:	48 c7 c7 48 c0 21 80 	mov    $0xffffffff8021c048,%rdi
ffffffff800021ea:	e8 31 e7 ff ff       	call   ffffffff80000920 <mutex_unlock>
ffffffff800021ef:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800021f2:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800021f6:	5d                   	pop    %rbp
ffffffff800021f7:	c3                   	ret    
ffffffff800021f8:	cc                   	int3   
ffffffff800021f9:	cc                   	int3   
ffffffff800021fa:	cc                   	int3   
ffffffff800021fb:	cc                   	int3   
ffffffff800021fc:	cc                   	int3   
ffffffff800021fd:	cc                   	int3   
ffffffff800021fe:	cc                   	int3   
ffffffff800021ff:	cc                   	int3   

ffffffff80002200 <gc_thread>:
ffffffff80002200:	55                   	push   %rbp
ffffffff80002201:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002204:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80002208:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000220c:	31 c0                	xor    %eax,%eax
ffffffff8000220e:	e8 dd 76 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80002213:	48 c7 c7 da 9e 01 80 	mov    $0xffffffff80019eda,%rdi
ffffffff8000221a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000221d:	31 c0                	xor    %eax,%eax
ffffffff8000221f:	e8 1c f7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80002224:	31 c0                	xor    %eax,%eax
ffffffff80002226:	e8 c5 76 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000222b:	48 c7 c7 4a 9b 01 80 	mov    $0xffffffff80019b4a,%rdi
ffffffff80002232:	48 89 c6             	mov    %rax,%rsi
ffffffff80002235:	31 c0                	xor    %eax,%eax
ffffffff80002237:	e8 04 f7 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000223c:	48 c7 c7 48 c0 21 80 	mov    $0xffffffff8021c048,%rdi
ffffffff80002243:	e8 78 e4 ff ff       	call   ffffffff800006c0 <mutex_lock>
ffffffff80002248:	e8 53 00 00 00       	call   ffffffff800022a0 <gc_conductor_next>
ffffffff8000224d:	48 c7 c7 48 c0 21 80 	mov    $0xffffffff8021c048,%rdi
ffffffff80002254:	e8 c7 e6 ff ff       	call   ffffffff80000920 <mutex_unlock>
ffffffff80002259:	31 c0                	xor    %eax,%eax
ffffffff8000225b:	e8 90 76 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80002260:	48 c7 c7 6c 9b 01 80 	mov    $0xffffffff80019b6c,%rdi
ffffffff80002267:	48 89 c6             	mov    %rax,%rsi
ffffffff8000226a:	31 c0                	xor    %eax,%eax
ffffffff8000226c:	e8 cf f6 00 00       	call   ffffffff80011940 <printf_>
ffffffff80002271:	e8 5a 00 00 00       	call   ffffffff800022d0 <gc_collection_cycle>
ffffffff80002276:	eb ac                	jmp    ffffffff80002224 <gc_thread+0x24>
ffffffff80002278:	cc                   	int3   
ffffffff80002279:	cc                   	int3   
ffffffff8000227a:	cc                   	int3   
ffffffff8000227b:	cc                   	int3   
ffffffff8000227c:	cc                   	int3   
ffffffff8000227d:	cc                   	int3   
ffffffff8000227e:	cc                   	int3   
ffffffff8000227f:	cc                   	int3   

ffffffff80002280 <gc_conductor_wait>:
ffffffff80002280:	55                   	push   %rbp
ffffffff80002281:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002284:	eb 00                	jmp    ffffffff80002286 <gc_conductor_wait+0x6>
ffffffff80002286:	48 c7 c7 88 c0 21 80 	mov    $0xffffffff8021c088,%rdi
ffffffff8000228d:	e8 de df ff ff       	call   ffffffff80000270 <conditional_wait>
ffffffff80002292:	8a 05 a4 8d 01 00    	mov    0x18da4(%rip),%al        # ffffffff8001b03c <m_gc_running>
ffffffff80002298:	a8 01                	test   $0x1,%al
ffffffff8000229a:	75 ea                	jne    ffffffff80002286 <gc_conductor_wait+0x6>
ffffffff8000229c:	5d                   	pop    %rbp
ffffffff8000229d:	c3                   	ret    
ffffffff8000229e:	cc                   	int3   
ffffffff8000229f:	cc                   	int3   

ffffffff800022a0 <gc_conductor_next>:
ffffffff800022a0:	55                   	push   %rbp
ffffffff800022a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800022a4:	31 c0                	xor    %eax,%eax
ffffffff800022a6:	86 05 90 8d 01 00    	xchg   %al,0x18d90(%rip)        # ffffffff8001b03c <m_gc_running>
ffffffff800022ac:	e8 0f e0 ff ff       	call   ffffffff800002c0 <conditional_broadcast>
ffffffff800022b1:	48 c7 c7 68 c0 21 80 	mov    $0xffffffff8021c068,%rdi
ffffffff800022b8:	e8 b3 df ff ff       	call   ffffffff80000270 <conditional_wait>
ffffffff800022bd:	8a 05 79 8d 01 00    	mov    0x18d79(%rip),%al        # ffffffff8001b03c <m_gc_running>
ffffffff800022c3:	34 ff                	xor    $0xff,%al
ffffffff800022c5:	a8 01                	test   $0x1,%al
ffffffff800022c7:	75 e8                	jne    ffffffff800022b1 <gc_conductor_next+0x11>
ffffffff800022c9:	5d                   	pop    %rbp
ffffffff800022ca:	c3                   	ret    
ffffffff800022cb:	cc                   	int3   
ffffffff800022cc:	cc                   	int3   
ffffffff800022cd:	cc                   	int3   
ffffffff800022ce:	cc                   	int3   
ffffffff800022cf:	cc                   	int3   

ffffffff800022d0 <gc_collection_cycle>:
ffffffff800022d0:	55                   	push   %rbp
ffffffff800022d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800022d4:	e8 17 00 00 00       	call   ffffffff800022f0 <initiate_collection_cycle>
ffffffff800022d9:	e8 72 01 00 00       	call   ffffffff80002450 <get_roots>
ffffffff800022de:	e8 dd 03 00 00       	call   ffffffff800026c0 <trace_heap>
ffffffff800022e3:	e8 f8 04 00 00       	call   ffffffff800027e0 <sweep>
ffffffff800022e8:	e8 c3 06 00 00       	call   ffffffff800029b0 <prepare_next_collection>
ffffffff800022ed:	5d                   	pop    %rbp
ffffffff800022ee:	c3                   	ret    
ffffffff800022ef:	cc                   	int3   

ffffffff800022f0 <initiate_collection_cycle>:
ffffffff800022f0:	55                   	push   %rbp
ffffffff800022f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800022f4:	53                   	push   %rbx
ffffffff800022f5:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff800022f9:	31 c0                	xor    %eax,%eax
ffffffff800022fb:	e8 80 3d 01 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff80002300:	c6 05 ca af 21 00 01 	movb   $0x1,0x21afca(%rip)        # ffffffff8021d2d1 <m_default_gc_thread_data+0x1>
ffffffff80002307:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff8000230e:	48 63 45 f0          	movslq -0x10(%rbp),%rax
ffffffff80002312:	48 8b 0d 7f af 21 00 	mov    0x21af7f(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002319:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff8000231d:	74 0d                	je     ffffffff8000232c <initiate_collection_cycle+0x3c>
ffffffff8000231f:	48 8b 0d 72 af 21 00 	mov    0x21af72(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002326:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff8000232a:	eb 04                	jmp    ffffffff80002330 <initiate_collection_cycle+0x40>
ffffffff8000232c:	31 c9                	xor    %ecx,%ecx
ffffffff8000232e:	eb 00                	jmp    ffffffff80002330 <initiate_collection_cycle+0x40>
ffffffff80002330:	48 39 c8             	cmp    %rcx,%rax
ffffffff80002333:	7d 60                	jge    ffffffff80002395 <initiate_collection_cycle+0xa5>
ffffffff80002335:	48 8b 05 5c af 21 00 	mov    0x21af5c(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff8000233c:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff80002340:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80002344:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80002348:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
ffffffff8000234c:	31 c0                	xor    %eax,%eax
ffffffff8000234e:	e8 bd 1f 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff80002353:	48 39 c3             	cmp    %rax,%rbx
ffffffff80002356:	75 02                	jne    ffffffff8000235a <initiate_collection_cycle+0x6a>
ffffffff80002358:	eb 2d                	jmp    ffffffff80002387 <initiate_collection_cycle+0x97>
ffffffff8000235a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000235e:	e8 bd 1a 01 00       	call   ffffffff80013e20 <scheduler_suspend_thread>
ffffffff80002363:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80002367:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8000236b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000236f:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002376:	c6 40 09 01          	movb   $0x1,0x9(%rax)
ffffffff8000237a:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000237e:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff80002382:	e8 99 1d 01 00       	call   ffffffff80014120 <scheduler_resume_thread>
ffffffff80002387:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff8000238a:	83 c0 01             	add    $0x1,%eax
ffffffff8000238d:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80002390:	e9 79 ff ff ff       	jmp    ffffffff8000230e <initiate_collection_cycle+0x1e>
ffffffff80002395:	31 c0                	xor    %eax,%eax
ffffffff80002397:	e8 04 3d 01 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff8000239c:	31 c0                	xor    %eax,%eax
ffffffff8000239e:	e8 dd 3c 01 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff800023a3:	c6 05 26 af 21 00 01 	movb   $0x1,0x21af26(%rip)        # ffffffff8021d2d0 <m_default_gc_thread_data>
ffffffff800023aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff800023b1:	48 63 45 f4          	movslq -0xc(%rbp),%rax
ffffffff800023b5:	48 8b 0d dc ae 21 00 	mov    0x21aedc(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff800023bc:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff800023c0:	74 0d                	je     ffffffff800023cf <initiate_collection_cycle+0xdf>
ffffffff800023c2:	48 8b 0d cf ae 21 00 	mov    0x21aecf(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff800023c9:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff800023cd:	eb 04                	jmp    ffffffff800023d3 <initiate_collection_cycle+0xe3>
ffffffff800023cf:	31 c9                	xor    %ecx,%ecx
ffffffff800023d1:	eb 00                	jmp    ffffffff800023d3 <initiate_collection_cycle+0xe3>
ffffffff800023d3:	48 39 c8             	cmp    %rcx,%rax
ffffffff800023d6:	7d 60                	jge    ffffffff80002438 <initiate_collection_cycle+0x148>
ffffffff800023d8:	48 8b 05 b9 ae 21 00 	mov    0x21aeb9(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff800023df:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff800023e3:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff800023e7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800023eb:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
ffffffff800023ef:	31 c0                	xor    %eax,%eax
ffffffff800023f1:	e8 1a 1f 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff800023f6:	48 39 c3             	cmp    %rax,%rbx
ffffffff800023f9:	75 02                	jne    ffffffff800023fd <initiate_collection_cycle+0x10d>
ffffffff800023fb:	eb 2d                	jmp    ffffffff8000242a <initiate_collection_cycle+0x13a>
ffffffff800023fd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80002401:	e8 1a 1a 01 00       	call   ffffffff80013e20 <scheduler_suspend_thread>
ffffffff80002406:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000240a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8000240e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002412:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002419:	c6 40 08 01          	movb   $0x1,0x8(%rax)
ffffffff8000241d:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff80002421:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80002425:	e8 f6 1c 01 00       	call   ffffffff80014120 <scheduler_resume_thread>
ffffffff8000242a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000242d:	83 c0 01             	add    $0x1,%eax
ffffffff80002430:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80002433:	e9 79 ff ff ff       	jmp    ffffffff800023b1 <initiate_collection_cycle+0xc1>
ffffffff80002438:	31 c0                	xor    %eax,%eax
ffffffff8000243a:	e8 61 3c 01 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff8000243f:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80002443:	5b                   	pop    %rbx
ffffffff80002444:	5d                   	pop    %rbp
ffffffff80002445:	c3                   	ret    
ffffffff80002446:	cc                   	int3   
ffffffff80002447:	cc                   	int3   
ffffffff80002448:	cc                   	int3   
ffffffff80002449:	cc                   	int3   
ffffffff8000244a:	cc                   	int3   
ffffffff8000244b:	cc                   	int3   
ffffffff8000244c:	cc                   	int3   
ffffffff8000244d:	cc                   	int3   
ffffffff8000244e:	cc                   	int3   
ffffffff8000244f:	cc                   	int3   

ffffffff80002450 <get_roots>:
ffffffff80002450:	55                   	push   %rbp
ffffffff80002451:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002454:	53                   	push   %rbx
ffffffff80002455:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80002459:	8b 05 49 9c 21 00    	mov    0x219c49(%rip),%eax        # ffffffff8021c0a8 <m_color_black>
ffffffff8000245f:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80002464:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002469:	29 c2                	sub    %eax,%edx
ffffffff8000246b:	89 15 37 9c 21 00    	mov    %edx,0x219c37(%rip)        # ffffffff8021c0a8 <m_color_black>
ffffffff80002471:	8b 05 c1 8b 01 00    	mov    0x18bc1(%rip),%eax        # ffffffff8001b038 <m_color_white>
ffffffff80002477:	29 c1                	sub    %eax,%ecx
ffffffff80002479:	89 0d b9 8b 01 00    	mov    %ecx,0x18bb9(%rip)        # ffffffff8001b038 <m_color_white>
ffffffff8000247f:	31 c0                	xor    %eax,%eax
ffffffff80002481:	e8 fa 3b 01 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff80002486:	8a 05 1c 9c 21 00    	mov    0x219c1c(%rip),%al        # ffffffff8021c0a8 <m_color_black>
ffffffff8000248c:	88 05 40 ae 21 00    	mov    %al,0x21ae40(%rip)        # ffffffff8021d2d2 <m_default_gc_thread_data+0x2>
ffffffff80002492:	c6 05 38 ae 21 00 00 	movb   $0x0,0x21ae38(%rip)        # ffffffff8021d2d1 <m_default_gc_thread_data+0x1>
ffffffff80002499:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff800024a0:	48 63 45 ec          	movslq -0x14(%rbp),%rax
ffffffff800024a4:	48 8b 0d ed ad 21 00 	mov    0x21aded(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff800024ab:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff800024af:	74 0d                	je     ffffffff800024be <get_roots+0x6e>
ffffffff800024b1:	48 8b 0d e0 ad 21 00 	mov    0x21ade0(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff800024b8:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff800024bc:	eb 04                	jmp    ffffffff800024c2 <get_roots+0x72>
ffffffff800024be:	31 c9                	xor    %ecx,%ecx
ffffffff800024c0:	eb 00                	jmp    ffffffff800024c2 <get_roots+0x72>
ffffffff800024c2:	48 39 c8             	cmp    %rcx,%rax
ffffffff800024c5:	7d 7c                	jge    ffffffff80002543 <get_roots+0xf3>
ffffffff800024c7:	48 8b 05 ca ad 21 00 	mov    0x21adca(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff800024ce:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff800024d2:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff800024d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800024da:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
ffffffff800024de:	31 c0                	xor    %eax,%eax
ffffffff800024e0:	e8 2b 1e 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff800024e5:	48 39 c3             	cmp    %rax,%rbx
ffffffff800024e8:	75 02                	jne    ffffffff800024ec <get_roots+0x9c>
ffffffff800024ea:	eb 49                	jmp    ffffffff80002535 <get_roots+0xe5>
ffffffff800024ec:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff800024f0:	e8 2b 19 01 00       	call   ffffffff80013e20 <scheduler_suspend_thread>
ffffffff800024f5:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff800024f9:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff800024fd:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80002501:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002508:	48 8b 00             	mov    (%rax),%rax
ffffffff8000250b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000250f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80002513:	8b 05 8f 9b 21 00    	mov    0x219b8f(%rip),%eax        # ffffffff8021c0a8 <m_color_black>
ffffffff80002519:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000251d:	88 41 02             	mov    %al,0x2(%rcx)
ffffffff80002520:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80002524:	c6 40 01 00          	movb   $0x0,0x1(%rax)
ffffffff80002528:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000252c:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80002530:	e8 eb 1b 01 00       	call   ffffffff80014120 <scheduler_resume_thread>
ffffffff80002535:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80002538:	83 c0 01             	add    $0x1,%eax
ffffffff8000253b:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff8000253e:	e9 5d ff ff ff       	jmp    ffffffff800024a0 <get_roots+0x50>
ffffffff80002543:	31 c0                	xor    %eax,%eax
ffffffff80002545:	e8 56 3b 01 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff8000254a:	31 c0                	xor    %eax,%eax
ffffffff8000254c:	e8 2f 3b 01 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff80002551:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff80002558:	48 63 45 f0          	movslq -0x10(%rbp),%rax
ffffffff8000255c:	48 8b 0d 35 ad 21 00 	mov    0x21ad35(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002563:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff80002567:	74 0d                	je     ffffffff80002576 <get_roots+0x126>
ffffffff80002569:	48 8b 0d 28 ad 21 00 	mov    0x21ad28(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002570:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff80002574:	eb 04                	jmp    ffffffff8000257a <get_roots+0x12a>
ffffffff80002576:	31 c9                	xor    %ecx,%ecx
ffffffff80002578:	eb 00                	jmp    ffffffff8000257a <get_roots+0x12a>
ffffffff8000257a:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000257d:	0f 8d 24 01 00 00    	jge    ffffffff800026a7 <get_roots+0x257>
ffffffff80002583:	48 8b 05 0e ad 21 00 	mov    0x21ad0e(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff8000258a:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff8000258e:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80002592:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80002596:	48 8b 5d e0          	mov    -0x20(%rbp),%rbx
ffffffff8000259a:	31 c0                	xor    %eax,%eax
ffffffff8000259c:	e8 6f 1d 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff800025a1:	48 39 c3             	cmp    %rax,%rbx
ffffffff800025a4:	75 05                	jne    ffffffff800025ab <get_roots+0x15b>
ffffffff800025a6:	e9 ee 00 00 00       	jmp    ffffffff80002699 <get_roots+0x249>
ffffffff800025ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff800025b2:	48 63 45 f4          	movslq -0xc(%rbp),%rax
ffffffff800025b6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800025ba:	48 8b 89 d0 02 00 00 	mov    0x2d0(%rcx),%rcx
ffffffff800025c1:	48 83 79 18 00       	cmpq   $0x0,0x18(%rcx)
ffffffff800025c6:	74 19                	je     ffffffff800025e1 <get_roots+0x191>
ffffffff800025c8:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800025cc:	48 8b 89 d0 02 00 00 	mov    0x2d0(%rcx),%rcx
ffffffff800025d3:	48 8b 49 18          	mov    0x18(%rcx),%rcx
ffffffff800025d7:	48 8b 49 d8          	mov    -0x28(%rcx),%rcx
ffffffff800025db:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff800025df:	eb 04                	jmp    ffffffff800025e5 <get_roots+0x195>
ffffffff800025e1:	31 c9                	xor    %ecx,%ecx
ffffffff800025e3:	eb 00                	jmp    ffffffff800025e5 <get_roots+0x195>
ffffffff800025e5:	48 39 c8             	cmp    %rcx,%rax
ffffffff800025e8:	7d 6e                	jge    ffffffff80002658 <get_roots+0x208>
ffffffff800025ea:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800025ee:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff800025f5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800025f9:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff800025fd:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80002601:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80002605:	48 8b 3d a4 9a 21 00 	mov    0x219aa4(%rip),%rdi        # ffffffff8021c0b0 <m_roots>
ffffffff8000260c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80002610:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80002614:	48 8d 75 c0          	lea    -0x40(%rbp),%rsi
ffffffff80002618:	e8 83 e4 00 00       	call   ffffffff80010aa0 <stbds_hmput_key>
ffffffff8000261d:	48 89 05 8c 9a 21 00 	mov    %rax,0x219a8c(%rip)        # ffffffff8021c0b0 <m_roots>
ffffffff80002624:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80002628:	48 8b 0d 81 9a 21 00 	mov    0x219a81(%rip),%rcx        # ffffffff8021c0b0 <m_roots>
ffffffff8000262f:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
ffffffff80002633:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80002637:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000263b:	48 8b 0d 6e 9a 21 00 	mov    0x219a6e(%rip),%rcx        # ffffffff8021c0b0 <m_roots>
ffffffff80002642:	48 8b 51 f0          	mov    -0x10(%rcx),%rdx
ffffffff80002646:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff8000264a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000264d:	83 c0 01             	add    $0x1,%eax
ffffffff80002650:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80002653:	e9 5a ff ff ff       	jmp    ffffffff800025b2 <get_roots+0x162>
ffffffff80002658:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000265c:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002663:	48 83 78 18 00       	cmpq   $0x0,0x18(%rax)
ffffffff80002668:	74 1a                	je     ffffffff80002684 <get_roots+0x234>
ffffffff8000266a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000266e:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002675:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff80002679:	48 83 c7 f8          	add    $0xfffffffffffffff8,%rdi
ffffffff8000267d:	e8 0e e3 00 00       	call   ffffffff80010990 <stbds_hmfree_func>
ffffffff80002682:	eb 02                	jmp    ffffffff80002686 <get_roots+0x236>
ffffffff80002684:	eb 00                	jmp    ffffffff80002686 <get_roots+0x236>
ffffffff80002686:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000268a:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002691:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80002698:	00 
ffffffff80002699:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff8000269c:	83 c0 01             	add    $0x1,%eax
ffffffff8000269f:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff800026a2:	e9 b1 fe ff ff       	jmp    ffffffff80002558 <get_roots+0x108>
ffffffff800026a7:	31 c0                	xor    %eax,%eax
ffffffff800026a9:	e8 f2 39 01 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff800026ae:	48 83 c4 48          	add    $0x48,%rsp
ffffffff800026b2:	5b                   	pop    %rbx
ffffffff800026b3:	5d                   	pop    %rbp
ffffffff800026b4:	c3                   	ret    
ffffffff800026b5:	cc                   	int3   
ffffffff800026b6:	cc                   	int3   
ffffffff800026b7:	cc                   	int3   
ffffffff800026b8:	cc                   	int3   
ffffffff800026b9:	cc                   	int3   
ffffffff800026ba:	cc                   	int3   
ffffffff800026bb:	cc                   	int3   
ffffffff800026bc:	cc                   	int3   
ffffffff800026bd:	cc                   	int3   
ffffffff800026be:	cc                   	int3   
ffffffff800026bf:	cc                   	int3   

ffffffff800026c0 <trace_heap>:
ffffffff800026c0:	55                   	push   %rbp
ffffffff800026c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800026c4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800026c8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff800026cf:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff800026d3:	48 8b 0d d6 99 21 00 	mov    0x2199d6(%rip),%rcx        # ffffffff8021c0b0 <m_roots>
ffffffff800026da:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff800026de:	74 11                	je     ffffffff800026f1 <trace_heap+0x31>
ffffffff800026e0:	48 8b 0d c9 99 21 00 	mov    0x2199c9(%rip),%rcx        # ffffffff8021c0b0 <m_roots>
ffffffff800026e7:	48 8b 49 d8          	mov    -0x28(%rcx),%rcx
ffffffff800026eb:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff800026ef:	eb 04                	jmp    ffffffff800026f5 <trace_heap+0x35>
ffffffff800026f1:	31 c9                	xor    %ecx,%ecx
ffffffff800026f3:	eb 00                	jmp    ffffffff800026f5 <trace_heap+0x35>
ffffffff800026f5:	48 39 c8             	cmp    %rcx,%rax
ffffffff800026f8:	0f 8d 83 00 00 00    	jge    ffffffff80002781 <trace_heap+0xc1>
ffffffff800026fe:	48 8b 05 ab 99 21 00 	mov    0x2199ab(%rip),%rax        # ffffffff8021c0b0 <m_roots>
ffffffff80002705:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80002709:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff8000270d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80002711:	48 8b 05 a0 99 21 00 	mov    0x2199a0(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002718:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000271c:	74 14                	je     ffffffff80002732 <trace_heap+0x72>
ffffffff8000271e:	48 8b 05 93 99 21 00 	mov    0x219993(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002725:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80002729:	48 ff c1             	inc    %rcx
ffffffff8000272c:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
ffffffff80002730:	76 21                	jbe    ffffffff80002753 <trace_heap+0x93>
ffffffff80002732:	48 8b 3d 7f 99 21 00 	mov    0x21997f(%rip),%rdi        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002739:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000273e:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002743:	31 c9                	xor    %ecx,%ecx
ffffffff80002745:	e8 36 d8 00 00       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff8000274a:	48 89 05 67 99 21 00 	mov    %rax,0x219967(%rip)        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002751:	eb 02                	jmp    ffffffff80002755 <trace_heap+0x95>
ffffffff80002753:	eb 00                	jmp    ffffffff80002755 <trace_heap+0x95>
ffffffff80002755:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002759:	48 8b 0d 58 99 21 00 	mov    0x219958(%rip),%rcx        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002760:	48 8b 51 e0          	mov    -0x20(%rcx),%rdx
ffffffff80002764:	48 89 d6             	mov    %rdx,%rsi
ffffffff80002767:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000276b:	48 89 71 e0          	mov    %rsi,-0x20(%rcx)
ffffffff8000276f:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80002773:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80002776:	83 c0 01             	add    $0x1,%eax
ffffffff80002779:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000277c:	e9 4e ff ff ff       	jmp    ffffffff800026cf <trace_heap+0xf>
ffffffff80002781:	eb 00                	jmp    ffffffff80002783 <trace_heap+0xc3>
ffffffff80002783:	48 8b 05 2e 99 21 00 	mov    0x21992e(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff8000278a:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000278e:	74 0d                	je     ffffffff8000279d <trace_heap+0xdd>
ffffffff80002790:	48 8b 05 21 99 21 00 	mov    0x219921(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002797:	48 8b 40 e0          	mov    -0x20(%rax),%rax
ffffffff8000279b:	eb 04                	jmp    ffffffff800027a1 <trace_heap+0xe1>
ffffffff8000279d:	31 c0                	xor    %eax,%eax
ffffffff8000279f:	eb 00                	jmp    ffffffff800027a1 <trace_heap+0xe1>
ffffffff800027a1:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800027a5:	74 30                	je     ffffffff800027d7 <trace_heap+0x117>
ffffffff800027a7:	48 8b 05 0a 99 21 00 	mov    0x21990a(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff800027ae:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff800027b2:	48 ff c9             	dec    %rcx
ffffffff800027b5:	48 89 48 e0          	mov    %rcx,-0x20(%rax)
ffffffff800027b9:	48 8b 05 f8 98 21 00 	mov    0x2198f8(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff800027c0:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff800027c4:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff800027c8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800027cc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800027d0:	e8 2b 03 00 00       	call   ffffffff80002b00 <trace>
ffffffff800027d5:	eb ac                	jmp    ffffffff80002783 <trace_heap+0xc3>
ffffffff800027d7:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800027db:	5d                   	pop    %rbp
ffffffff800027dc:	c3                   	ret    
ffffffff800027dd:	cc                   	int3   
ffffffff800027de:	cc                   	int3   
ffffffff800027df:	cc                   	int3   

ffffffff800027e0 <sweep>:
ffffffff800027e0:	55                   	push   %rbp
ffffffff800027e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800027e4:	53                   	push   %rbx
ffffffff800027e5:	48 83 ec 58          	sub    $0x58,%rsp
ffffffff800027e9:	31 c0                	xor    %eax,%eax
ffffffff800027eb:	e8 90 38 01 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff800027f0:	c6 05 d9 aa 21 00 00 	movb   $0x0,0x21aad9(%rip)        # ffffffff8021d2d0 <m_default_gc_thread_data>
ffffffff800027f7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
ffffffff800027fe:	48 63 45 e4          	movslq -0x1c(%rbp),%rax
ffffffff80002802:	48 8b 0d 8f aa 21 00 	mov    0x21aa8f(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002809:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff8000280d:	74 0d                	je     ffffffff8000281c <sweep+0x3c>
ffffffff8000280f:	48 8b 0d 82 aa 21 00 	mov    0x21aa82(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002816:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff8000281a:	eb 04                	jmp    ffffffff80002820 <sweep+0x40>
ffffffff8000281c:	31 c9                	xor    %ecx,%ecx
ffffffff8000281e:	eb 00                	jmp    ffffffff80002820 <sweep+0x40>
ffffffff80002820:	48 39 c8             	cmp    %rcx,%rax
ffffffff80002823:	7d 60                	jge    ffffffff80002885 <sweep+0xa5>
ffffffff80002825:	48 8b 05 6c aa 21 00 	mov    0x21aa6c(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff8000282c:	48 63 4d e4          	movslq -0x1c(%rbp),%rcx
ffffffff80002830:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80002834:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80002838:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
ffffffff8000283c:	31 c0                	xor    %eax,%eax
ffffffff8000283e:	e8 cd 1a 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff80002843:	48 39 c3             	cmp    %rax,%rbx
ffffffff80002846:	75 02                	jne    ffffffff8000284a <sweep+0x6a>
ffffffff80002848:	eb 2d                	jmp    ffffffff80002877 <sweep+0x97>
ffffffff8000284a:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000284e:	e8 cd 15 01 00       	call   ffffffff80013e20 <scheduler_suspend_thread>
ffffffff80002853:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80002857:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8000285b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000285f:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002866:	c6 40 08 00          	movb   $0x0,0x8(%rax)
ffffffff8000286a:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
ffffffff8000286e:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff80002872:	e8 a9 18 01 00       	call   ffffffff80014120 <scheduler_resume_thread>
ffffffff80002877:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff8000287a:	83 c0 01             	add    $0x1,%eax
ffffffff8000287d:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80002880:	e9 79 ff ff ff       	jmp    ffffffff800027fe <sweep+0x1e>
ffffffff80002885:	31 c0                	xor    %eax,%eax
ffffffff80002887:	e8 14 38 01 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff8000288c:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80002893:	00 
ffffffff80002894:	48 8b 05 a5 97 21 00 	mov    0x2197a5(%rip),%rax        # ffffffff8021c040 <m_all_objects>
ffffffff8000289b:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000289f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff800028a3:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800028a7:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff800028ac:	0f 84 f3 00 00 00    	je     ffffffff800029a5 <sweep+0x1c5>
ffffffff800028b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800028b6:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800028ba:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff800028be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800028c2:	0f b6 40 10          	movzbl 0x10(%rax),%eax
ffffffff800028c6:	8b 0d 6c 87 01 00    	mov    0x1876c(%rip),%ecx        # ffffffff8001b038 <m_color_white>
ffffffff800028cc:	39 c8                	cmp    %ecx,%eax
ffffffff800028ce:	0f 85 bc 00 00 00    	jne    ffffffff80002990 <sweep+0x1b0>
ffffffff800028d4:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff800028d9:	75 76                	jne    ffffffff80002951 <sweep+0x171>
ffffffff800028db:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800028df:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800028e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800028e7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800028eb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff800028ef:	48 8d 4d d8          	lea    -0x28(%rbp),%rcx
ffffffff800028f3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800028f7:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff800028fb:	f0 48 0f b1 15 3c 97 	lock cmpxchg %rdx,0x21973c(%rip)        # ffffffff8021c040 <m_all_objects>
ffffffff80002902:	21 00 
ffffffff80002904:	0f 94 c2             	sete   %dl
ffffffff80002907:	f6 c2 01             	test   $0x1,%dl
ffffffff8000290a:	75 03                	jne    ffffffff8000290f <sweep+0x12f>
ffffffff8000290c:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000290f:	80 e2 01             	and    $0x1,%dl
ffffffff80002912:	88 55 f7             	mov    %dl,-0x9(%rbp)
ffffffff80002915:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
ffffffff80002919:	75 32                	jne    ffffffff8000294d <sweep+0x16d>
ffffffff8000291b:	eb 00                	jmp    ffffffff8000291d <sweep+0x13d>
ffffffff8000291d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80002921:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80002925:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80002929:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000292d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80002931:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80002935:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80002939:	75 e2                	jne    ffffffff8000291d <sweep+0x13d>
ffffffff8000293b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000293f:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80002943:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80002947:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000294b:	eb 02                	jmp    ffffffff8000294f <sweep+0x16f>
ffffffff8000294d:	eb 00                	jmp    ffffffff8000294f <sweep+0x16f>
ffffffff8000294f:	eb 10                	jmp    ffffffff80002961 <sweep+0x181>
ffffffff80002951:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002955:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80002959:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000295d:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff80002961:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002965:	c6 40 10 02          	movb   $0x2,0x10(%rax)
ffffffff80002969:	31 c0                	xor    %eax,%eax
ffffffff8000296b:	e8 80 6f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80002970:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80002974:	48 c7 c7 ff 9e 01 80 	mov    $0xffffffff80019eff,%rdi
ffffffff8000297b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000297e:	31 c0                	xor    %eax,%eax
ffffffff80002980:	e8 bb ef 00 00       	call   ffffffff80011940 <printf_>
ffffffff80002985:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80002989:	e8 32 07 00 00       	call   ffffffff800030c0 <heap_free>
ffffffff8000298e:	eb 08                	jmp    ffffffff80002998 <sweep+0x1b8>
ffffffff80002990:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002994:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80002998:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000299c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800029a0:	e9 02 ff ff ff       	jmp    ffffffff800028a7 <sweep+0xc7>
ffffffff800029a5:	48 83 c4 58          	add    $0x58,%rsp
ffffffff800029a9:	5b                   	pop    %rbx
ffffffff800029aa:	5d                   	pop    %rbp
ffffffff800029ab:	c3                   	ret    
ffffffff800029ac:	cc                   	int3   
ffffffff800029ad:	cc                   	int3   
ffffffff800029ae:	cc                   	int3   
ffffffff800029af:	cc                   	int3   

ffffffff800029b0 <prepare_next_collection>:
ffffffff800029b0:	55                   	push   %rbp
ffffffff800029b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800029b4:	53                   	push   %rbx
ffffffff800029b5:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800029b9:	48 8b 05 f0 96 21 00 	mov    0x2196f0(%rip),%rax        # ffffffff8021c0b0 <m_roots>
ffffffff800029c0:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800029c4:	74 12                	je     ffffffff800029d8 <prepare_next_collection+0x28>
ffffffff800029c6:	48 8b 3d e3 96 21 00 	mov    0x2196e3(%rip),%rdi        # ffffffff8021c0b0 <m_roots>
ffffffff800029cd:	48 83 c7 f8          	add    $0xfffffffffffffff8,%rdi
ffffffff800029d1:	e8 ba df 00 00       	call   ffffffff80010990 <stbds_hmfree_func>
ffffffff800029d6:	eb 02                	jmp    ffffffff800029da <prepare_next_collection+0x2a>
ffffffff800029d8:	eb 00                	jmp    ffffffff800029da <prepare_next_collection+0x2a>
ffffffff800029da:	48 c7 05 cb 96 21 00 	movq   $0x0,0x2196cb(%rip)        # ffffffff8021c0b0 <m_roots>
ffffffff800029e1:	00 00 00 00 
ffffffff800029e5:	31 c0                	xor    %eax,%eax
ffffffff800029e7:	e8 94 36 01 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff800029ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff800029f3:	48 63 45 f0          	movslq -0x10(%rbp),%rax
ffffffff800029f7:	48 8b 0d 9a a8 21 00 	mov    0x21a89a(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff800029fe:	48 83 f9 00          	cmp    $0x0,%rcx
ffffffff80002a02:	74 0d                	je     ffffffff80002a11 <prepare_next_collection+0x61>
ffffffff80002a04:	48 8b 0d 8d a8 21 00 	mov    0x21a88d(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80002a0b:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff80002a0f:	eb 04                	jmp    ffffffff80002a15 <prepare_next_collection+0x65>
ffffffff80002a11:	31 c9                	xor    %ecx,%ecx
ffffffff80002a13:	eb 00                	jmp    ffffffff80002a15 <prepare_next_collection+0x65>
ffffffff80002a15:	48 39 c8             	cmp    %rcx,%rax
ffffffff80002a18:	0f 8d ce 00 00 00    	jge    ffffffff80002aec <prepare_next_collection+0x13c>
ffffffff80002a1e:	48 8b 05 73 a8 21 00 	mov    0x21a873(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff80002a25:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff80002a29:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80002a2d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80002a31:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
ffffffff80002a35:	31 c0                	xor    %eax,%eax
ffffffff80002a37:	e8 d4 18 01 00       	call   ffffffff80014310 <get_current_thread>
ffffffff80002a3c:	48 39 c3             	cmp    %rax,%rbx
ffffffff80002a3f:	75 05                	jne    ffffffff80002a46 <prepare_next_collection+0x96>
ffffffff80002a41:	e9 98 00 00 00       	jmp    ffffffff80002ade <prepare_next_collection+0x12e>
ffffffff80002a46:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002a4a:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002a51:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80002a55:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80002a59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80002a60:	48 63 45 f4          	movslq -0xc(%rbp),%rax
ffffffff80002a64:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80002a69:	74 0a                	je     ffffffff80002a75 <prepare_next_collection+0xc5>
ffffffff80002a6b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80002a6f:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff80002a73:	eb 04                	jmp    ffffffff80002a79 <prepare_next_collection+0xc9>
ffffffff80002a75:	31 c9                	xor    %ecx,%ecx
ffffffff80002a77:	eb 00                	jmp    ffffffff80002a79 <prepare_next_collection+0xc9>
ffffffff80002a79:	48 39 c8             	cmp    %rcx,%rax
ffffffff80002a7c:	7d 1f                	jge    ffffffff80002a9d <prepare_next_collection+0xed>
ffffffff80002a7e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80002a82:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff80002a86:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80002a8a:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80002a91:	00 
ffffffff80002a92:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80002a95:	83 c0 01             	add    $0x1,%eax
ffffffff80002a98:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80002a9b:	eb c3                	jmp    ffffffff80002a60 <prepare_next_collection+0xb0>
ffffffff80002a9d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002aa1:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002aa8:	48 83 78 10 00       	cmpq   $0x0,0x10(%rax)
ffffffff80002aad:	74 1a                	je     ffffffff80002ac9 <prepare_next_collection+0x119>
ffffffff80002aaf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002ab3:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002aba:	48 8b 78 10          	mov    0x10(%rax),%rdi
ffffffff80002abe:	48 83 c7 e0          	add    $0xffffffffffffffe0,%rdi
ffffffff80002ac2:	e8 c9 a7 00 00       	call   ffffffff8000d290 <free>
ffffffff80002ac7:	eb 02                	jmp    ffffffff80002acb <prepare_next_collection+0x11b>
ffffffff80002ac9:	eb 00                	jmp    ffffffff80002acb <prepare_next_collection+0x11b>
ffffffff80002acb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002acf:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80002ad6:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80002add:	00 
ffffffff80002ade:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80002ae1:	83 c0 01             	add    $0x1,%eax
ffffffff80002ae4:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80002ae7:	e9 07 ff ff ff       	jmp    ffffffff800029f3 <prepare_next_collection+0x43>
ffffffff80002aec:	31 c0                	xor    %eax,%eax
ffffffff80002aee:	e8 ad 35 01 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff80002af3:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80002af7:	5b                   	pop    %rbx
ffffffff80002af8:	5d                   	pop    %rbp
ffffffff80002af9:	c3                   	ret    
ffffffff80002afa:	cc                   	int3   
ffffffff80002afb:	cc                   	int3   
ffffffff80002afc:	cc                   	int3   
ffffffff80002afd:	cc                   	int3   
ffffffff80002afe:	cc                   	int3   
ffffffff80002aff:	cc                   	int3   

ffffffff80002b00 <trace>:
ffffffff80002b00:	55                   	push   %rbp
ffffffff80002b01:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002b04:	53                   	push   %rbx
ffffffff80002b05:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80002b09:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80002b0d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002b11:	0f b6 40 10          	movzbl 0x10(%rax),%eax
ffffffff80002b15:	8b 0d 1d 85 01 00    	mov    0x1851d(%rip),%ecx        # ffffffff8001b038 <m_color_white>
ffffffff80002b1b:	39 c8                	cmp    %ecx,%eax
ffffffff80002b1d:	0f 85 e0 00 00 00    	jne    ffffffff80002c03 <trace+0x103>
ffffffff80002b23:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002b27:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80002b2c:	0f 85 c2 00 00 00    	jne    ffffffff80002bf4 <trace+0xf4>
ffffffff80002b32:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80002b39:	00 
ffffffff80002b3a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80002b3e:	48 89 65 d8          	mov    %rsp,-0x28(%rbp)
ffffffff80002b42:	48 8d 0c c5 0f 00 00 	lea    0xf(,%rax,8),%rcx
ffffffff80002b49:	00 
ffffffff80002b4a:	48 83 e1 f0          	and    $0xfffffffffffffff0,%rcx
ffffffff80002b4e:	48 89 e3             	mov    %rsp,%rbx
ffffffff80002b51:	48 29 cb             	sub    %rcx,%rbx
ffffffff80002b54:	48 89 dc             	mov    %rbx,%rsp
ffffffff80002b57:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80002b5b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002b5f:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80002b64:	0f 85 84 00 00 00    	jne    ffffffff80002bee <trace+0xee>
ffffffff80002b6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80002b71:	48 63 45 f4          	movslq -0xc(%rbp),%rax
ffffffff80002b75:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff80002b79:	73 71                	jae    ffffffff80002bec <trace+0xec>
ffffffff80002b7b:	48 8b 05 36 95 21 00 	mov    0x219536(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002b82:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80002b86:	74 14                	je     ffffffff80002b9c <trace+0x9c>
ffffffff80002b88:	48 8b 05 29 95 21 00 	mov    0x219529(%rip),%rax        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002b8f:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80002b93:	48 ff c1             	inc    %rcx
ffffffff80002b96:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
ffffffff80002b9a:	76 21                	jbe    ffffffff80002bbd <trace+0xbd>
ffffffff80002b9c:	48 8b 3d 15 95 21 00 	mov    0x219515(%rip),%rdi        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002ba3:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff80002ba8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80002bad:	31 c9                	xor    %ecx,%ecx
ffffffff80002baf:	e8 cc d3 00 00       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff80002bb4:	48 89 05 fd 94 21 00 	mov    %rax,0x2194fd(%rip)        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002bbb:	eb 02                	jmp    ffffffff80002bbf <trace+0xbf>
ffffffff80002bbd:	eb 00                	jmp    ffffffff80002bbf <trace+0xbf>
ffffffff80002bbf:	48 63 45 f4          	movslq -0xc(%rbp),%rax
ffffffff80002bc3:	48 8b 04 c3          	mov    (%rbx,%rax,8),%rax
ffffffff80002bc7:	48 8b 0d ea 94 21 00 	mov    0x2194ea(%rip),%rcx        # ffffffff8021c0b8 <m_mark_stack>
ffffffff80002bce:	48 8b 51 e0          	mov    -0x20(%rcx),%rdx
ffffffff80002bd2:	48 89 d6             	mov    %rdx,%rsi
ffffffff80002bd5:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80002bd9:	48 89 71 e0          	mov    %rsi,-0x20(%rcx)
ffffffff80002bdd:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80002be1:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80002be4:	83 c0 01             	add    $0x1,%eax
ffffffff80002be7:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80002bea:	eb 85                	jmp    ffffffff80002b71 <trace+0x71>
ffffffff80002bec:	eb 00                	jmp    ffffffff80002bee <trace+0xee>
ffffffff80002bee:	48 8b 65 d8          	mov    -0x28(%rbp),%rsp
ffffffff80002bf2:	eb 02                	jmp    ffffffff80002bf6 <trace+0xf6>
ffffffff80002bf4:	eb 00                	jmp    ffffffff80002bf6 <trace+0xf6>
ffffffff80002bf6:	8b 05 ac 94 21 00    	mov    0x2194ac(%rip),%eax        # ffffffff8021c0a8 <m_color_black>
ffffffff80002bfc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80002c00:	88 41 10             	mov    %al,0x10(%rcx)
ffffffff80002c03:	48 8d 65 f8          	lea    -0x8(%rbp),%rsp
ffffffff80002c07:	5b                   	pop    %rbx
ffffffff80002c08:	5d                   	pop    %rbp
ffffffff80002c09:	c3                   	ret    
ffffffff80002c0a:	cc                   	int3   
ffffffff80002c0b:	cc                   	int3   
ffffffff80002c0c:	cc                   	int3   
ffffffff80002c0d:	cc                   	int3   
ffffffff80002c0e:	cc                   	int3   
ffffffff80002c0f:	cc                   	int3   

ffffffff80002c10 <heap_alloc>:
ffffffff80002c10:	55                   	push   %rbp
ffffffff80002c11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002c14:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80002c18:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80002c1c:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff80002c21:	73 0b                	jae    ffffffff80002c2e <heap_alloc+0x1e>
ffffffff80002c23:	e8 28 00 00 00       	call   ffffffff80002c50 <heap_allocate_0>
ffffffff80002c28:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002c2c:	eb 0d                	jmp    ffffffff80002c3b <heap_alloc+0x2b>
ffffffff80002c2e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80002c32:	e8 39 00 00 00       	call   ffffffff80002c70 <heap_allocate_medium>
ffffffff80002c37:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002c3b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80002c3f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80002c43:	5d                   	pop    %rbp
ffffffff80002c44:	c3                   	ret    
ffffffff80002c45:	cc                   	int3   
ffffffff80002c46:	cc                   	int3   
ffffffff80002c47:	cc                   	int3   
ffffffff80002c48:	cc                   	int3   
ffffffff80002c49:	cc                   	int3   
ffffffff80002c4a:	cc                   	int3   
ffffffff80002c4b:	cc                   	int3   
ffffffff80002c4c:	cc                   	int3   
ffffffff80002c4d:	cc                   	int3   
ffffffff80002c4e:	cc                   	int3   
ffffffff80002c4f:	cc                   	int3   

ffffffff80002c50 <heap_allocate_0>:
ffffffff80002c50:	55                   	push   %rbp
ffffffff80002c51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002c54:	48 c7 c7 c0 c0 21 80 	mov    $0xffffffff8021c0c0,%rdi
ffffffff80002c5b:	31 f6                	xor    %esi,%esi
ffffffff80002c5d:	ba 00 00 01 00       	mov    $0x10000,%edx
ffffffff80002c62:	e8 e9 01 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002c67:	5d                   	pop    %rbp
ffffffff80002c68:	c3                   	ret    
ffffffff80002c69:	cc                   	int3   
ffffffff80002c6a:	cc                   	int3   
ffffffff80002c6b:	cc                   	int3   
ffffffff80002c6c:	cc                   	int3   
ffffffff80002c6d:	cc                   	int3   
ffffffff80002c6e:	cc                   	int3   
ffffffff80002c6f:	cc                   	int3   

ffffffff80002c70 <heap_allocate_medium>:
ffffffff80002c70:	55                   	push   %rbp
ffffffff80002c71:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002c74:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80002c78:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80002c7c:	48 81 7d f8 80 00 00 	cmpq   $0x80,-0x8(%rbp)
ffffffff80002c83:	00 
ffffffff80002c84:	73 0b                	jae    ffffffff80002c91 <heap_allocate_medium+0x21>
ffffffff80002c86:	e8 95 00 00 00       	call   ffffffff80002d20 <heap_allocate_1>
ffffffff80002c8b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002c8f:	eb 76                	jmp    ffffffff80002d07 <heap_allocate_medium+0x97>
ffffffff80002c91:	48 81 7d f8 00 01 00 	cmpq   $0x100,-0x8(%rbp)
ffffffff80002c98:	00 
ffffffff80002c99:	73 0b                	jae    ffffffff80002ca6 <heap_allocate_medium+0x36>
ffffffff80002c9b:	e8 a0 00 00 00       	call   ffffffff80002d40 <heap_allocate_2>
ffffffff80002ca0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002ca4:	eb 61                	jmp    ffffffff80002d07 <heap_allocate_medium+0x97>
ffffffff80002ca6:	48 81 7d f8 00 02 00 	cmpq   $0x200,-0x8(%rbp)
ffffffff80002cad:	00 
ffffffff80002cae:	73 0b                	jae    ffffffff80002cbb <heap_allocate_medium+0x4b>
ffffffff80002cb0:	e8 ab 00 00 00       	call   ffffffff80002d60 <heap_allocate_3>
ffffffff80002cb5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002cb9:	eb 4c                	jmp    ffffffff80002d07 <heap_allocate_medium+0x97>
ffffffff80002cbb:	48 81 7d f8 00 04 00 	cmpq   $0x400,-0x8(%rbp)
ffffffff80002cc2:	00 
ffffffff80002cc3:	73 0b                	jae    ffffffff80002cd0 <heap_allocate_medium+0x60>
ffffffff80002cc5:	e8 b6 00 00 00       	call   ffffffff80002d80 <heap_allocate_4>
ffffffff80002cca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002cce:	eb 37                	jmp    ffffffff80002d07 <heap_allocate_medium+0x97>
ffffffff80002cd0:	48 81 7d f8 00 08 00 	cmpq   $0x800,-0x8(%rbp)
ffffffff80002cd7:	00 
ffffffff80002cd8:	73 0b                	jae    ffffffff80002ce5 <heap_allocate_medium+0x75>
ffffffff80002cda:	e8 c1 00 00 00       	call   ffffffff80002da0 <heap_allocate_5>
ffffffff80002cdf:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002ce3:	eb 22                	jmp    ffffffff80002d07 <heap_allocate_medium+0x97>
ffffffff80002ce5:	48 81 7d f8 00 10 00 	cmpq   $0x1000,-0x8(%rbp)
ffffffff80002cec:	00 
ffffffff80002ced:	73 0b                	jae    ffffffff80002cfa <heap_allocate_medium+0x8a>
ffffffff80002cef:	e8 cc 00 00 00       	call   ffffffff80002dc0 <heap_allocate_6>
ffffffff80002cf4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002cf8:	eb 0d                	jmp    ffffffff80002d07 <heap_allocate_medium+0x97>
ffffffff80002cfa:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80002cfe:	e8 dd 00 00 00       	call   ffffffff80002de0 <heap_allocate_large>
ffffffff80002d03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002d07:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80002d0b:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80002d0f:	5d                   	pop    %rbp
ffffffff80002d10:	c3                   	ret    
ffffffff80002d11:	cc                   	int3   
ffffffff80002d12:	cc                   	int3   
ffffffff80002d13:	cc                   	int3   
ffffffff80002d14:	cc                   	int3   
ffffffff80002d15:	cc                   	int3   
ffffffff80002d16:	cc                   	int3   
ffffffff80002d17:	cc                   	int3   
ffffffff80002d18:	cc                   	int3   
ffffffff80002d19:	cc                   	int3   
ffffffff80002d1a:	cc                   	int3   
ffffffff80002d1b:	cc                   	int3   
ffffffff80002d1c:	cc                   	int3   
ffffffff80002d1d:	cc                   	int3   
ffffffff80002d1e:	cc                   	int3   
ffffffff80002d1f:	cc                   	int3   

ffffffff80002d20 <heap_allocate_1>:
ffffffff80002d20:	55                   	push   %rbp
ffffffff80002d21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002d24:	48 c7 c7 d0 c0 21 80 	mov    $0xffffffff8021c0d0,%rdi
ffffffff80002d2b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80002d30:	ba 00 40 00 00       	mov    $0x4000,%edx
ffffffff80002d35:	e8 16 01 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002d3a:	5d                   	pop    %rbp
ffffffff80002d3b:	c3                   	ret    
ffffffff80002d3c:	cc                   	int3   
ffffffff80002d3d:	cc                   	int3   
ffffffff80002d3e:	cc                   	int3   
ffffffff80002d3f:	cc                   	int3   

ffffffff80002d40 <heap_allocate_2>:
ffffffff80002d40:	55                   	push   %rbp
ffffffff80002d41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002d44:	48 c7 c7 e0 c0 21 80 	mov    $0xffffffff8021c0e0,%rdi
ffffffff80002d4b:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80002d50:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff80002d55:	e8 f6 00 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002d5a:	5d                   	pop    %rbp
ffffffff80002d5b:	c3                   	ret    
ffffffff80002d5c:	cc                   	int3   
ffffffff80002d5d:	cc                   	int3   
ffffffff80002d5e:	cc                   	int3   
ffffffff80002d5f:	cc                   	int3   

ffffffff80002d60 <heap_allocate_3>:
ffffffff80002d60:	55                   	push   %rbp
ffffffff80002d61:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002d64:	48 c7 c7 f0 c0 21 80 	mov    $0xffffffff8021c0f0,%rdi
ffffffff80002d6b:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80002d70:	ba 00 04 00 00       	mov    $0x400,%edx
ffffffff80002d75:	e8 d6 00 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002d7a:	5d                   	pop    %rbp
ffffffff80002d7b:	c3                   	ret    
ffffffff80002d7c:	cc                   	int3   
ffffffff80002d7d:	cc                   	int3   
ffffffff80002d7e:	cc                   	int3   
ffffffff80002d7f:	cc                   	int3   

ffffffff80002d80 <heap_allocate_4>:
ffffffff80002d80:	55                   	push   %rbp
ffffffff80002d81:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002d84:	48 c7 c7 00 c1 21 80 	mov    $0xffffffff8021c100,%rdi
ffffffff80002d8b:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff80002d90:	ba 00 01 00 00       	mov    $0x100,%edx
ffffffff80002d95:	e8 b6 00 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002d9a:	5d                   	pop    %rbp
ffffffff80002d9b:	c3                   	ret    
ffffffff80002d9c:	cc                   	int3   
ffffffff80002d9d:	cc                   	int3   
ffffffff80002d9e:	cc                   	int3   
ffffffff80002d9f:	cc                   	int3   

ffffffff80002da0 <heap_allocate_5>:
ffffffff80002da0:	55                   	push   %rbp
ffffffff80002da1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002da4:	48 c7 c7 10 c1 21 80 	mov    $0xffffffff8021c110,%rdi
ffffffff80002dab:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80002db0:	ba 40 00 00 00       	mov    $0x40,%edx
ffffffff80002db5:	e8 96 00 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002dba:	5d                   	pop    %rbp
ffffffff80002dbb:	c3                   	ret    
ffffffff80002dbc:	cc                   	int3   
ffffffff80002dbd:	cc                   	int3   
ffffffff80002dbe:	cc                   	int3   
ffffffff80002dbf:	cc                   	int3   

ffffffff80002dc0 <heap_allocate_6>:
ffffffff80002dc0:	55                   	push   %rbp
ffffffff80002dc1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002dc4:	48 c7 c7 20 c1 21 80 	mov    $0xffffffff8021c120,%rdi
ffffffff80002dcb:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff80002dd0:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80002dd5:	e8 76 00 00 00       	call   ffffffff80002e50 <heap_allocate>
ffffffff80002dda:	5d                   	pop    %rbp
ffffffff80002ddb:	c3                   	ret    
ffffffff80002ddc:	cc                   	int3   
ffffffff80002ddd:	cc                   	int3   
ffffffff80002dde:	cc                   	int3   
ffffffff80002ddf:	cc                   	int3   

ffffffff80002de0 <heap_allocate_large>:
ffffffff80002de0:	55                   	push   %rbp
ffffffff80002de1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002de4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80002de8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80002dec:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80002df0:	e8 5b bf 00 00       	call   ffffffff8000ed50 <palloc>
ffffffff80002df5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80002df9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80002dfe:	75 2e                	jne    ffffffff80002e2e <heap_allocate_large+0x4e>
ffffffff80002e00:	31 c0                	xor    %eax,%eax
ffffffff80002e02:	e8 e9 6a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80002e07:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80002e0e:	48 89 c6             	mov    %rax,%rsi
ffffffff80002e11:	48 c7 c2 66 8a 01 80 	mov    $0xffffffff80018a66,%rdx
ffffffff80002e18:	48 c7 c1 77 89 01 80 	mov    $0xffffffff80018977,%rcx
ffffffff80002e1f:	41 b8 d1 00 00 00    	mov    $0xd1,%r8d
ffffffff80002e25:	31 c0                	xor    %eax,%eax
ffffffff80002e27:	e8 14 eb 00 00       	call   ffffffff80011940 <printf_>
ffffffff80002e2c:	0f 0b                	ud2    
ffffffff80002e2e:	eb 00                	jmp    ffffffff80002e30 <heap_allocate_large+0x50>
ffffffff80002e30:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002e34:	c6 40 11 ff          	movb   $0xff,0x11(%rax)
ffffffff80002e38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002e3c:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80002e40:	5d                   	pop    %rbp
ffffffff80002e41:	c3                   	ret    
ffffffff80002e42:	cc                   	int3   
ffffffff80002e43:	cc                   	int3   
ffffffff80002e44:	cc                   	int3   
ffffffff80002e45:	cc                   	int3   
ffffffff80002e46:	cc                   	int3   
ffffffff80002e47:	cc                   	int3   
ffffffff80002e48:	cc                   	int3   
ffffffff80002e49:	cc                   	int3   
ffffffff80002e4a:	cc                   	int3   
ffffffff80002e4b:	cc                   	int3   
ffffffff80002e4c:	cc                   	int3   
ffffffff80002e4d:	cc                   	int3   
ffffffff80002e4e:	cc                   	int3   
ffffffff80002e4f:	cc                   	int3   

ffffffff80002e50 <heap_allocate>:
ffffffff80002e50:	55                   	push   %rbp
ffffffff80002e51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002e54:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80002e58:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80002e5c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80002e60:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff80002e64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80002e68:	64 48 8b 0c 25 00 00 	mov    %fs:0x0,%rcx
ffffffff80002e6f:	00 00 
ffffffff80002e71:	48 8d 84 c1 c0 ff ff 	lea    -0x40(%rcx,%rax,8),%rax
ffffffff80002e78:	ff 
ffffffff80002e79:	48 8b 00             	mov    (%rax),%rax
ffffffff80002e7c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80002e80:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80002e85:	75 17                	jne    ffffffff80002e9e <heap_allocate+0x4e>
ffffffff80002e87:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80002e8b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80002e8f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80002e93:	e8 38 00 00 00       	call   ffffffff80002ed0 <heap_allocate_from>
ffffffff80002e98:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80002e9c:	eb 28                	jmp    ffffffff80002ec6 <heap_allocate+0x76>
ffffffff80002e9e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002ea2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80002ea6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80002eaa:	64 48 8b 14 25 00 00 	mov    %fs:0x0,%rdx
ffffffff80002eb1:	00 00 
ffffffff80002eb3:	48 8d 8c ca c0 ff ff 	lea    -0x40(%rdx,%rcx,8),%rcx
ffffffff80002eba:	ff 
ffffffff80002ebb:	48 89 01             	mov    %rax,(%rcx)
ffffffff80002ebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002ec2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80002ec6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002eca:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80002ece:	5d                   	pop    %rbp
ffffffff80002ecf:	c3                   	ret    

ffffffff80002ed0 <heap_allocate_from>:
ffffffff80002ed0:	55                   	push   %rbp
ffffffff80002ed1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002ed4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80002ed8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80002edc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80002ee0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80002ee4:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff80002ee8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80002eec:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80002ef0:	e8 3b 00 00 00       	call   ffffffff80002f30 <heap_rank_alloc>
ffffffff80002ef5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80002ef9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002efd:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80002f01:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80002f05:	64 48 8b 14 25 00 00 	mov    %fs:0x0,%rdx
ffffffff80002f0c:	00 00 
ffffffff80002f0e:	48 8d 8c ca c0 ff ff 	lea    -0x40(%rdx,%rcx,8),%rcx
ffffffff80002f15:	ff 
ffffffff80002f16:	48 89 01             	mov    %rax,(%rcx)
ffffffff80002f19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80002f1d:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80002f21:	5d                   	pop    %rbp
ffffffff80002f22:	c3                   	ret    
ffffffff80002f23:	cc                   	int3   
ffffffff80002f24:	cc                   	int3   
ffffffff80002f25:	cc                   	int3   
ffffffff80002f26:	cc                   	int3   
ffffffff80002f27:	cc                   	int3   
ffffffff80002f28:	cc                   	int3   
ffffffff80002f29:	cc                   	int3   
ffffffff80002f2a:	cc                   	int3   
ffffffff80002f2b:	cc                   	int3   
ffffffff80002f2c:	cc                   	int3   
ffffffff80002f2d:	cc                   	int3   
ffffffff80002f2e:	cc                   	int3   
ffffffff80002f2f:	cc                   	int3   

ffffffff80002f30 <heap_rank_alloc>:
ffffffff80002f30:	55                   	push   %rbp
ffffffff80002f31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002f34:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80002f38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80002f3c:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
ffffffff80002f40:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
ffffffff80002f44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80002f48:	48 8b 00             	mov    (%rax),%rax
ffffffff80002f4b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80002f4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80002f53:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002f57:	31 c0                	xor    %eax,%eax
ffffffff80002f59:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80002f5e:	74 37                	je     ffffffff80002f97 <heap_rank_alloc+0x67>
ffffffff80002f60:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80002f64:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80002f68:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80002f6c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80002f70:	48 8d 4d f0          	lea    -0x10(%rbp),%rcx
ffffffff80002f74:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80002f78:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff80002f7c:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff80002f81:	0f 94 c2             	sete   %dl
ffffffff80002f84:	f6 c2 01             	test   $0x1,%dl
ffffffff80002f87:	75 03                	jne    ffffffff80002f8c <heap_rank_alloc+0x5c>
ffffffff80002f89:	48 89 01             	mov    %rax,(%rcx)
ffffffff80002f8c:	80 e2 01             	and    $0x1,%dl
ffffffff80002f8f:	88 55 ff             	mov    %dl,-0x1(%rbp)
ffffffff80002f92:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80002f95:	34 ff                	xor    $0xff,%al
ffffffff80002f97:	a8 01                	test   $0x1,%al
ffffffff80002f99:	75 02                	jne    ffffffff80002f9d <heap_rank_alloc+0x6d>
ffffffff80002f9b:	eb 02                	jmp    ffffffff80002f9f <heap_rank_alloc+0x6f>
ffffffff80002f9d:	eb b8                	jmp    ffffffff80002f57 <heap_rank_alloc+0x27>
ffffffff80002f9f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80002fa4:	75 11                	jne    ffffffff80002fb7 <heap_rank_alloc+0x87>
ffffffff80002fa6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80002faa:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
ffffffff80002fae:	e8 1d 00 00 00       	call   ffffffff80002fd0 <heap_rank_allocate_chunk>
ffffffff80002fb3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80002fb7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80002fbb:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80002fbf:	5d                   	pop    %rbp
ffffffff80002fc0:	c3                   	ret    
ffffffff80002fc1:	cc                   	int3   
ffffffff80002fc2:	cc                   	int3   
ffffffff80002fc3:	cc                   	int3   
ffffffff80002fc4:	cc                   	int3   
ffffffff80002fc5:	cc                   	int3   
ffffffff80002fc6:	cc                   	int3   
ffffffff80002fc7:	cc                   	int3   
ffffffff80002fc8:	cc                   	int3   
ffffffff80002fc9:	cc                   	int3   
ffffffff80002fca:	cc                   	int3   
ffffffff80002fcb:	cc                   	int3   
ffffffff80002fcc:	cc                   	int3   
ffffffff80002fcd:	cc                   	int3   
ffffffff80002fce:	cc                   	int3   
ffffffff80002fcf:	cc                   	int3   

ffffffff80002fd0 <heap_rank_allocate_chunk>:
ffffffff80002fd0:	55                   	push   %rbp
ffffffff80002fd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80002fd4:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80002fd8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80002fdc:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80002fe0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80002fe4:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80002fe9:	d3 e0                	shl    %cl,%eax
ffffffff80002feb:	48 98                	cltq   
ffffffff80002fed:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80002ff1:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80002ff5:	48 0f af 45 c0       	imul   -0x40(%rbp),%rax
ffffffff80002ffa:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80002ffe:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80003002:	e8 49 bd 00 00       	call   ffffffff8000ed50 <palloc>
ffffffff80003007:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000300b:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80003010:	75 2e                	jne    ffffffff80003040 <heap_rank_allocate_chunk+0x70>
ffffffff80003012:	31 c0                	xor    %eax,%eax
ffffffff80003014:	e8 d7 68 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003019:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80003020:	48 89 c6             	mov    %rax,%rsi
ffffffff80003023:	48 c7 c2 1f 9a 01 80 	mov    $0xffffffff80019a1f,%rdx
ffffffff8000302a:	48 c7 c1 77 89 01 80 	mov    $0xffffffff80018977,%rcx
ffffffff80003031:	41 b8 2e 00 00 00    	mov    $0x2e,%r8d
ffffffff80003037:	31 c0                	xor    %eax,%eax
ffffffff80003039:	e8 02 e9 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000303e:	0f 0b                	ud2    
ffffffff80003040:	eb 00                	jmp    ffffffff80003042 <heap_rank_allocate_chunk+0x72>
ffffffff80003042:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003046:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000304a:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80003051:	00 
ffffffff80003052:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003056:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff8000305a:	73 3d                	jae    ffffffff80003099 <heap_rank_allocate_chunk+0xc9>
ffffffff8000305c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003060:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80003064:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80003068:	c6 40 10 02          	movb   $0x2,0x10(%rax)
ffffffff8000306c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003070:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80003074:	88 41 11             	mov    %al,0x11(%rcx)
ffffffff80003077:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000307b:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8000307f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80003083:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80003087:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000308b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000308f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80003093:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80003097:	eb b9                	jmp    ffffffff80003052 <heap_rank_allocate_chunk+0x82>
ffffffff80003099:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000309d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800030a1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800030a5:	c6 40 10 02          	movb   $0x2,0x10(%rax)
ffffffff800030a9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800030ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800030b1:	88 41 11             	mov    %al,0x11(%rcx)
ffffffff800030b4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800030b8:	48 83 c4 50          	add    $0x50,%rsp
ffffffff800030bc:	5d                   	pop    %rbp
ffffffff800030bd:	c3                   	ret    
ffffffff800030be:	cc                   	int3   
ffffffff800030bf:	cc                   	int3   

ffffffff800030c0 <heap_free>:
ffffffff800030c0:	55                   	push   %rbp
ffffffff800030c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800030c4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800030c8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800030cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800030d0:	0f b6 40 11          	movzbl 0x11(%rax),%eax
ffffffff800030d4:	48 89 c1             	mov    %rax,%rcx
ffffffff800030d7:	48 83 e9 06          	sub    $0x6,%rcx
ffffffff800030db:	0f 87 d1 00 00 00    	ja     ffffffff800031b2 <heap_free+0xf2>
ffffffff800030e1:	48 8b 04 c5 00 80 01 	mov    -0x7ffe8000(,%rax,8),%rax
ffffffff800030e8:	80 
ffffffff800030e9:	ff e0                	jmp    *%rax
ffffffff800030eb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800030ef:	48 c7 c7 c0 c0 21 80 	mov    $0xffffffff8021c0c0,%rdi
ffffffff800030f6:	31 f6                	xor    %esi,%esi
ffffffff800030f8:	ba 00 00 01 00       	mov    $0x10000,%edx
ffffffff800030fd:	e8 ce 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff80003102:	e9 b4 00 00 00       	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff80003107:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000310b:	48 c7 c7 d0 c0 21 80 	mov    $0xffffffff8021c0d0,%rdi
ffffffff80003112:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80003117:	ba 00 40 00 00       	mov    $0x4000,%edx
ffffffff8000311c:	e8 af 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff80003121:	e9 95 00 00 00       	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff80003126:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000312a:	48 c7 c7 e0 c0 21 80 	mov    $0xffffffff8021c0e0,%rdi
ffffffff80003131:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80003136:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff8000313b:	e8 90 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff80003140:	eb 79                	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff80003142:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80003146:	48 c7 c7 f0 c0 21 80 	mov    $0xffffffff8021c0f0,%rdi
ffffffff8000314d:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80003152:	ba 00 04 00 00       	mov    $0x400,%edx
ffffffff80003157:	e8 74 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff8000315c:	eb 5d                	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff8000315e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80003162:	48 c7 c7 00 c1 21 80 	mov    $0xffffffff8021c100,%rdi
ffffffff80003169:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff8000316e:	ba 00 01 00 00       	mov    $0x100,%edx
ffffffff80003173:	e8 58 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff80003178:	eb 41                	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff8000317a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000317e:	48 c7 c7 10 c1 21 80 	mov    $0xffffffff8021c110,%rdi
ffffffff80003185:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8000318a:	ba 40 00 00 00       	mov    $0x40,%edx
ffffffff8000318f:	e8 3c 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff80003194:	eb 25                	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff80003196:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000319a:	48 c7 c7 20 c1 21 80 	mov    $0xffffffff8021c120,%rdi
ffffffff800031a1:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff800031a6:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff800031ab:	e8 20 00 00 00       	call   ffffffff800031d0 <heap_rank_free>
ffffffff800031b0:	eb 09                	jmp    ffffffff800031bb <heap_free+0xfb>
ffffffff800031b2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800031b6:	e8 25 bf 00 00       	call   ffffffff8000f0e0 <pfree>
ffffffff800031bb:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800031bf:	5d                   	pop    %rbp
ffffffff800031c0:	c3                   	ret    
ffffffff800031c1:	cc                   	int3   
ffffffff800031c2:	cc                   	int3   
ffffffff800031c3:	cc                   	int3   
ffffffff800031c4:	cc                   	int3   
ffffffff800031c5:	cc                   	int3   
ffffffff800031c6:	cc                   	int3   
ffffffff800031c7:	cc                   	int3   
ffffffff800031c8:	cc                   	int3   
ffffffff800031c9:	cc                   	int3   
ffffffff800031ca:	cc                   	int3   
ffffffff800031cb:	cc                   	int3   
ffffffff800031cc:	cc                   	int3   
ffffffff800031cd:	cc                   	int3   
ffffffff800031ce:	cc                   	int3   
ffffffff800031cf:	cc                   	int3   

ffffffff800031d0 <heap_rank_free>:
ffffffff800031d0:	55                   	push   %rbp
ffffffff800031d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800031d4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800031d8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800031dc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff800031e0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff800031e4:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff800031e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800031ec:	64 48 8b 0c 25 00 00 	mov    %fs:0x0,%rcx
ffffffff800031f3:	00 00 
ffffffff800031f5:	48 8b 84 c1 c0 ff ff 	mov    -0x40(%rcx,%rax,8),%rax
ffffffff800031fc:	ff 
ffffffff800031fd:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80003201:	48 89 42 18          	mov    %rax,0x18(%rdx)
ffffffff80003205:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80003209:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000320d:	48 8d 8c d1 c0 ff ff 	lea    -0x40(%rcx,%rdx,8),%rcx
ffffffff80003214:	ff 
ffffffff80003215:	48 89 01             	mov    %rax,(%rcx)
ffffffff80003218:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000321c:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80003220:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80003224:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80003228:	48 3b 4d e0          	cmp    -0x20(%rbp),%rcx
ffffffff8000322c:	72 0d                	jb     ffffffff8000323b <heap_rank_free+0x6b>
ffffffff8000322e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80003232:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80003236:	e8 15 00 00 00       	call   ffffffff80003250 <heap_rank_flush>
ffffffff8000323b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000323f:	5d                   	pop    %rbp
ffffffff80003240:	c3                   	ret    
ffffffff80003241:	cc                   	int3   
ffffffff80003242:	cc                   	int3   
ffffffff80003243:	cc                   	int3   
ffffffff80003244:	cc                   	int3   
ffffffff80003245:	cc                   	int3   
ffffffff80003246:	cc                   	int3   
ffffffff80003247:	cc                   	int3   
ffffffff80003248:	cc                   	int3   
ffffffff80003249:	cc                   	int3   
ffffffff8000324a:	cc                   	int3   
ffffffff8000324b:	cc                   	int3   
ffffffff8000324c:	cc                   	int3   
ffffffff8000324d:	cc                   	int3   
ffffffff8000324e:	cc                   	int3   
ffffffff8000324f:	cc                   	int3   

ffffffff80003250 <heap_rank_flush>:
ffffffff80003250:	55                   	push   %rbp
ffffffff80003251:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003254:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80003258:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000325c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80003260:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80003264:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80003268:	e8 13 00 00 00       	call   ffffffff80003280 <heap_rank_return>
ffffffff8000326d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80003271:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80003278:	00 
ffffffff80003279:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000327d:	5d                   	pop    %rbp
ffffffff8000327e:	c3                   	ret    
ffffffff8000327f:	cc                   	int3   

ffffffff80003280 <heap_rank_return>:
ffffffff80003280:	55                   	push   %rbp
ffffffff80003281:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003284:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80003288:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000328c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff80003290:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003294:	64 48 8b 0c 25 00 00 	mov    %fs:0x0,%rcx
ffffffff8000329b:	00 00 
ffffffff8000329d:	48 8b 84 c1 c0 ff ff 	mov    -0x40(%rcx,%rax,8),%rax
ffffffff800032a4:	ff 
ffffffff800032a5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800032a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800032ad:	48 8b 00             	mov    (%rax),%rax
ffffffff800032b0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800032b4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800032b8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800032bc:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff800032c0:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff800032c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800032c8:	48 89 c1             	mov    %rax,%rcx
ffffffff800032cb:	48 83 c1 20          	add    $0x20,%rcx
ffffffff800032cf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800032d3:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff800032d7:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff800032db:	f0 48 0f b1 32       	lock cmpxchg %rsi,(%rdx)
ffffffff800032e0:	0f 94 c2             	sete   %dl
ffffffff800032e3:	f6 c2 01             	test   $0x1,%dl
ffffffff800032e6:	75 03                	jne    ffffffff800032eb <heap_rank_return+0x6b>
ffffffff800032e8:	48 89 01             	mov    %rax,(%rcx)
ffffffff800032eb:	80 e2 01             	and    $0x1,%dl
ffffffff800032ee:	88 55 ff             	mov    %dl,-0x1(%rbp)
ffffffff800032f1:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff800032f4:	34 ff                	xor    $0xff,%al
ffffffff800032f6:	a8 01                	test   $0x1,%al
ffffffff800032f8:	75 02                	jne    ffffffff800032fc <heap_rank_return+0x7c>
ffffffff800032fa:	eb 02                	jmp    ffffffff800032fe <heap_rank_return+0x7e>
ffffffff800032fc:	eb c2                	jmp    ffffffff800032c0 <heap_rank_return+0x40>
ffffffff800032fe:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003302:	64 48 8b 0c 25 00 00 	mov    %fs:0x0,%rcx
ffffffff80003309:	00 00 
ffffffff8000330b:	48 8d 84 c1 c0 ff ff 	lea    -0x40(%rcx,%rax,8),%rax
ffffffff80003312:	ff 
ffffffff80003313:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff8000331a:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000331e:	5d                   	pop    %rbp
ffffffff8000331f:	c3                   	ret    

ffffffff80003320 <loader_load_corelib>:
ffffffff80003320:	55                   	push   %rbp
ffffffff80003321:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003324:	48 81 ec c0 04 00 00 	sub    $0x4c0,%rsp
ffffffff8000332b:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8000332f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80003333:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000333a:	31 c0                	xor    %eax,%eax
ffffffff8000333c:	e8 af 65 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003341:	48 c7 c7 06 9e 01 80 	mov    $0xffffffff80019e06,%rdi
ffffffff80003348:	48 89 c6             	mov    %rax,%rsi
ffffffff8000334b:	31 c0                	xor    %eax,%eax
ffffffff8000334d:	e8 ee e5 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003352:	48 8d 85 40 ff ff ff 	lea    -0xc0(%rbp),%rax
ffffffff80003359:	31 c9                	xor    %ecx,%ecx
ffffffff8000335b:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff8000335e:	0f 11 40 50          	movups %xmm0,0x50(%rax)
ffffffff80003362:	0f 11 40 40          	movups %xmm0,0x40(%rax)
ffffffff80003366:	0f 11 40 30          	movups %xmm0,0x30(%rax)
ffffffff8000336a:	0f 11 40 20          	movups %xmm0,0x20(%rax)
ffffffff8000336e:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff80003372:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80003375:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff8000337c:	00 
ffffffff8000337d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003381:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
ffffffff80003388:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000338c:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
ffffffff80003393:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
ffffffff8000339a:	e8 11 17 00 00       	call   ffffffff80004ab0 <pe_parse>
ffffffff8000339f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800033a2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800033a6:	74 31                	je     ffffffff800033d9 <loader_load_corelib+0xb9>
ffffffff800033a8:	31 c0                	xor    %eax,%eax
ffffffff800033aa:	e8 41 65 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800033af:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff800033b6:	48 89 c6             	mov    %rax,%rsi
ffffffff800033b9:	48 c7 c2 06 99 01 80 	mov    $0xffffffff80019906,%rdx
ffffffff800033c0:	48 c7 c1 1a 99 01 80 	mov    $0xffffffff8001991a,%rcx
ffffffff800033c7:	41 b8 b3 00 00 00    	mov    $0xb3,%r8d
ffffffff800033cd:	31 c0                	xor    %eax,%eax
ffffffff800033cf:	e8 6c e5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800033d4:	e9 38 04 00 00       	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff800033d9:	eb 00                	jmp    ffffffff800033db <loader_load_corelib+0xbb>
ffffffff800033db:	48 8d bd 40 fb ff ff 	lea    -0x4c0(%rbp),%rdi
ffffffff800033e2:	31 c0                	xor    %eax,%eax
ffffffff800033e4:	31 f6                	xor    %esi,%esi
ffffffff800033e6:	ba 00 04 00 00       	mov    $0x400,%edx
ffffffff800033eb:	e8 30 c5 00 00       	call   ffffffff8000f920 <memset>
ffffffff800033f0:	48 8d bd 40 ff ff ff 	lea    -0xc0(%rbp),%rdi
ffffffff800033f7:	48 8d b5 40 fb ff ff 	lea    -0x4c0(%rbp),%rsi
ffffffff800033fe:	e8 1d 04 00 00       	call   ffffffff80003820 <decode_metadata>
ffffffff80003403:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80003406:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000340a:	74 31                	je     ffffffff8000343d <loader_load_corelib+0x11d>
ffffffff8000340c:	31 c0                	xor    %eax,%eax
ffffffff8000340e:	e8 dd 64 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003413:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000341a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000341d:	48 c7 c2 06 99 01 80 	mov    $0xffffffff80019906,%rdx
ffffffff80003424:	48 c7 c1 1a 99 01 80 	mov    $0xffffffff8001991a,%rcx
ffffffff8000342b:	41 b8 b7 00 00 00    	mov    $0xb7,%r8d
ffffffff80003431:	31 c0                	xor    %eax,%eax
ffffffff80003433:	e8 08 e5 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003438:	e9 d4 03 00 00       	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff8000343d:	eb 00                	jmp    ffffffff8000343f <loader_load_corelib+0x11f>
ffffffff8000343f:	31 ff                	xor    %edi,%edi
ffffffff80003441:	be 38 00 00 00       	mov    $0x38,%esi
ffffffff80003446:	e8 95 ea ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff8000344b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000344f:	8b 85 68 fb ff ff    	mov    -0x498(%rbp),%eax
ffffffff80003455:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80003458:	48 63 45 e4          	movslq -0x1c(%rbp),%rax
ffffffff8000345c:	48 69 f0 a0 00 00 00 	imul   $0xa0,%rax,%rsi
ffffffff80003463:	48 83 c6 30          	add    $0x30,%rsi
ffffffff80003467:	31 ff                	xor    %edi,%edi
ffffffff80003469:	e8 72 ea ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff8000346e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80003472:	48 89 41 28          	mov    %rax,0x28(%rcx)
ffffffff80003476:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80003479:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000347d:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff80003481:	89 41 28             	mov    %eax,0x28(%rcx)
ffffffff80003484:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
ffffffff8000348b:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff8000348e:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff80003491:	7d 50                	jge    ffffffff800034e3 <loader_load_corelib+0x1c3>
ffffffff80003493:	8b 75 e8             	mov    -0x18(%rbp),%esi
ffffffff80003496:	48 8d bd 40 fb ff ff 	lea    -0x4c0(%rbp),%rdi
ffffffff8000349d:	e8 6e 04 00 00       	call   ffffffff80003910 <metadata_get_type_def>
ffffffff800034a2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff800034a6:	31 ff                	xor    %edi,%edi
ffffffff800034a8:	be a0 00 00 00       	mov    $0xa0,%esi
ffffffff800034ad:	e8 2e ea ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff800034b2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff800034b6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff800034ba:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800034be:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800034c2:	48 63 55 e8          	movslq -0x18(%rbp),%rdx
ffffffff800034c6:	48 89 44 d1 30       	mov    %rax,0x30(%rcx,%rdx,8)
ffffffff800034cb:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff800034cf:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800034d3:	e8 a8 04 00 00       	call   ffffffff80003980 <init_builtin_type>
ffffffff800034d8:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800034db:	83 c0 01             	add    $0x1,%eax
ffffffff800034de:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff800034e1:	eb a8                	jmp    ffffffff8000348b <loader_load_corelib+0x16b>
ffffffff800034e3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%rbp)
ffffffff800034ea:	48 63 45 d8          	movslq -0x28(%rbp),%rax
ffffffff800034ee:	48 83 f8 15          	cmp    $0x15,%rax
ffffffff800034f2:	0f 83 96 00 00 00    	jae    ffffffff8000358e <loader_load_corelib+0x26e>
ffffffff800034f8:	48 63 45 d8          	movslq -0x28(%rbp),%rax
ffffffff800034fc:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
ffffffff80003500:	48 8d 04 c5 40 b0 01 	lea    -0x7ffe4fc0(,%rax,8),%rax
ffffffff80003507:	80 
ffffffff80003508:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000350c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80003510:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80003514:	48 83 38 00          	cmpq   $0x0,(%rax)
ffffffff80003518:	75 62                	jne    ffffffff8000357c <loader_load_corelib+0x25c>
ffffffff8000351a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80003521:	31 c0                	xor    %eax,%eax
ffffffff80003523:	e8 c8 63 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003528:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000352c:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000352f:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80003533:	48 8b 49 08          	mov    0x8(%rcx),%rcx
ffffffff80003537:	48 c7 c7 db 9c 01 80 	mov    $0xffffffff80019cdb,%rdi
ffffffff8000353e:	48 89 c6             	mov    %rax,%rsi
ffffffff80003541:	31 c0                	xor    %eax,%eax
ffffffff80003543:	e8 f8 e3 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003548:	31 c0                	xor    %eax,%eax
ffffffff8000354a:	e8 a1 63 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000354f:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80003552:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80003559:	48 89 c6             	mov    %rax,%rsi
ffffffff8000355c:	48 c7 c1 06 99 01 80 	mov    $0xffffffff80019906,%rcx
ffffffff80003563:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff8000356a:	41 b9 ce 00 00 00    	mov    $0xce,%r9d
ffffffff80003570:	31 c0                	xor    %eax,%eax
ffffffff80003572:	e8 c9 e3 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003577:	e9 95 02 00 00       	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff8000357c:	eb 00                	jmp    ffffffff8000357e <loader_load_corelib+0x25e>
ffffffff8000357e:	eb 00                	jmp    ffffffff80003580 <loader_load_corelib+0x260>
ffffffff80003580:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff80003583:	83 c0 01             	add    $0x1,%eax
ffffffff80003586:	89 45 d8             	mov    %eax,-0x28(%rbp)
ffffffff80003589:	e9 5c ff ff ff       	jmp    ffffffff800034ea <loader_load_corelib+0x1ca>
ffffffff8000358e:	48 8b 05 33 8c 21 00 	mov    0x218c33(%rip),%rax        # ffffffff8021c1c8 <tSystem_Reflection_Assembly>
ffffffff80003595:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80003599:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000359c:	48 8b 3d 95 8b 21 00 	mov    0x218b95(%rip),%rdi        # ffffffff8021c138 <tSystem_Type>
ffffffff800035a3:	e8 88 37 00 00       	call   ffffffff80006d30 <get_array_type>
ffffffff800035a8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800035ac:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800035b0:	48 89 01             	mov    %rax,(%rcx)
ffffffff800035b3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
ffffffff800035ba:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff800035bd:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff800035c0:	7d 26                	jge    ffffffff800035e8 <loader_load_corelib+0x2c8>
ffffffff800035c2:	48 8b 05 6f 8b 21 00 	mov    0x218b6f(%rip),%rax        # ffffffff8021c138 <tSystem_Type>
ffffffff800035c9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800035cd:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800035d1:	48 63 55 dc          	movslq -0x24(%rbp),%rdx
ffffffff800035d5:	48 8b 4c d1 30       	mov    0x30(%rcx,%rdx,8),%rcx
ffffffff800035da:	48 89 01             	mov    %rax,(%rcx)
ffffffff800035dd:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff800035e0:	83 c0 01             	add    $0x1,%eax
ffffffff800035e3:	89 45 dc             	mov    %eax,-0x24(%rbp)
ffffffff800035e6:	eb d2                	jmp    ffffffff800035ba <loader_load_corelib+0x29a>
ffffffff800035e8:	eb 00                	jmp    ffffffff800035ea <loader_load_corelib+0x2ca>
ffffffff800035ea:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff800035ee:	48 8d bd 40 fb ff ff 	lea    -0x4c0(%rbp),%rdi
ffffffff800035f5:	e8 46 04 00 00       	call   ffffffff80003a40 <init_module>
ffffffff800035fa:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800035fd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80003601:	74 31                	je     ffffffff80003634 <loader_load_corelib+0x314>
ffffffff80003603:	31 c0                	xor    %eax,%eax
ffffffff80003605:	e8 e6 62 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000360a:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80003611:	48 89 c6             	mov    %rax,%rsi
ffffffff80003614:	48 c7 c2 06 99 01 80 	mov    $0xffffffff80019906,%rdx
ffffffff8000361b:	48 c7 c1 1a 99 01 80 	mov    $0xffffffff8001991a,%rcx
ffffffff80003622:	41 b8 dd 00 00 00    	mov    $0xdd,%r8d
ffffffff80003628:	31 c0                	xor    %eax,%eax
ffffffff8000362a:	e8 11 e3 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000362f:	e9 dd 01 00 00       	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff80003634:	eb 00                	jmp    ffffffff80003636 <loader_load_corelib+0x316>
ffffffff80003636:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff8000363d:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80003640:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff80003643:	7d 6f                	jge    ffffffff800036b4 <loader_load_corelib+0x394>
ffffffff80003645:	eb 00                	jmp    ffffffff80003647 <loader_load_corelib+0x327>
ffffffff80003647:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000364b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000364f:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80003653:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff80003657:	48 8b 54 c8 30       	mov    0x30(%rax,%rcx,8),%rdx
ffffffff8000365c:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff8000365f:	48 8d bd 40 fb ff ff 	lea    -0x4c0(%rbp),%rdi
ffffffff80003666:	e8 05 05 00 00       	call   ffffffff80003b70 <init_type>
ffffffff8000366b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000366e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80003672:	74 31                	je     ffffffff800036a5 <loader_load_corelib+0x385>
ffffffff80003674:	31 c0                	xor    %eax,%eax
ffffffff80003676:	e8 75 62 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000367b:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80003682:	48 89 c6             	mov    %rax,%rsi
ffffffff80003685:	48 c7 c2 06 99 01 80 	mov    $0xffffffff80019906,%rdx
ffffffff8000368c:	48 c7 c1 1a 99 01 80 	mov    $0xffffffff8001991a,%rcx
ffffffff80003693:	41 b8 e0 00 00 00    	mov    $0xe0,%r8d
ffffffff80003699:	31 c0                	xor    %eax,%eax
ffffffff8000369b:	e8 a0 e2 00 00       	call   ffffffff80011940 <printf_>
ffffffff800036a0:	e9 6c 01 00 00       	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff800036a5:	eb 00                	jmp    ffffffff800036a7 <loader_load_corelib+0x387>
ffffffff800036a7:	eb 00                	jmp    ffffffff800036a9 <loader_load_corelib+0x389>
ffffffff800036a9:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800036ac:	83 c0 01             	add    $0x1,%eax
ffffffff800036af:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff800036b2:	eb 89                	jmp    ffffffff8000363d <loader_load_corelib+0x31d>
ffffffff800036b4:	31 c0                	xor    %eax,%eax
ffffffff800036b6:	e8 35 62 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800036bb:	48 c7 c7 12 98 01 80 	mov    $0xffffffff80019812,%rdi
ffffffff800036c2:	48 89 c6             	mov    %rax,%rsi
ffffffff800036c5:	31 c0                	xor    %eax,%eax
ffffffff800036c7:	e8 74 e2 00 00       	call   ffffffff80011940 <printf_>
ffffffff800036cc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
ffffffff800036d3:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff800036d6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800036da:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800036de:	3b 41 28             	cmp    0x28(%rcx),%eax
ffffffff800036e1:	0f 8d 28 01 00 00    	jge    ffffffff8000380f <loader_load_corelib+0x4ef>
ffffffff800036e7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800036eb:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff800036ef:	48 63 4d e0          	movslq -0x20(%rbp),%rcx
ffffffff800036f3:	48 8b 44 c8 30       	mov    0x30(%rax,%rcx,8),%rax
ffffffff800036f8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800036fc:	31 c0                	xor    %eax,%eax
ffffffff800036fe:	e8 ed 61 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003703:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80003707:	48 8b 51 50          	mov    0x50(%rcx),%rdx
ffffffff8000370b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000370f:	48 8b 49 38          	mov    0x38(%rcx),%rcx
ffffffff80003713:	48 c7 c7 a6 8d 01 80 	mov    $0xffffffff80018da6,%rdi
ffffffff8000371a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000371d:	31 c0                	xor    %eax,%eax
ffffffff8000371f:	e8 1c e2 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003724:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000372b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000372e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80003732:	48 8b 49 58          	mov    0x58(%rcx),%rcx
ffffffff80003736:	3b 41 28             	cmp    0x28(%rcx),%eax
ffffffff80003739:	0f 8d c0 00 00 00    	jge    ffffffff800037ff <loader_load_corelib+0x4df>
ffffffff8000373f:	eb 00                	jmp    ffffffff80003741 <loader_load_corelib+0x421>
ffffffff80003741:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80003745:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80003749:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff8000374d:	48 83 7c c8 30 00    	cmpq   $0x0,0x30(%rax,%rcx,8)
ffffffff80003753:	75 3b                	jne    ffffffff80003790 <loader_load_corelib+0x470>
ffffffff80003755:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000375c:	31 c0                	xor    %eax,%eax
ffffffff8000375e:	e8 8d 61 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003763:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80003766:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000376d:	48 89 c6             	mov    %rax,%rsi
ffffffff80003770:	48 c7 c1 06 99 01 80 	mov    $0xffffffff80019906,%rcx
ffffffff80003777:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff8000377e:	41 b9 e9 00 00 00    	mov    $0xe9,%r9d
ffffffff80003784:	31 c0                	xor    %eax,%eax
ffffffff80003786:	e8 b5 e1 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000378b:	e9 81 00 00 00       	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff80003790:	eb 00                	jmp    ffffffff80003792 <loader_load_corelib+0x472>
ffffffff80003792:	31 c0                	xor    %eax,%eax
ffffffff80003794:	e8 57 61 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003799:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000379d:	48 8b 49 58          	mov    0x58(%rcx),%rcx
ffffffff800037a1:	48 63 55 f8          	movslq -0x8(%rbp),%rdx
ffffffff800037a5:	48 8b 4c d1 30       	mov    0x30(%rcx,%rdx,8),%rcx
ffffffff800037aa:	48 8b 49 48          	mov    0x48(%rcx),%rcx
ffffffff800037ae:	48 8b 51 50          	mov    0x50(%rcx),%rdx
ffffffff800037b2:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800037b6:	48 8b 49 58          	mov    0x58(%rcx),%rcx
ffffffff800037ba:	48 63 75 f8          	movslq -0x8(%rbp),%rsi
ffffffff800037be:	48 8b 4c f1 30       	mov    0x30(%rcx,%rsi,8),%rcx
ffffffff800037c3:	48 8b 49 48          	mov    0x48(%rcx),%rcx
ffffffff800037c7:	48 8b 49 38          	mov    0x38(%rcx),%rcx
ffffffff800037cb:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
ffffffff800037cf:	48 8b 76 58          	mov    0x58(%rsi),%rsi
ffffffff800037d3:	48 63 7d f8          	movslq -0x8(%rbp),%rdi
ffffffff800037d7:	48 8b 74 fe 30       	mov    0x30(%rsi,%rdi,8),%rsi
ffffffff800037dc:	4c 8b 46 38          	mov    0x38(%rsi),%r8
ffffffff800037e0:	48 c7 c7 93 9b 01 80 	mov    $0xffffffff80019b93,%rdi
ffffffff800037e7:	48 89 c6             	mov    %rax,%rsi
ffffffff800037ea:	31 c0                	xor    %eax,%eax
ffffffff800037ec:	e8 4f e1 00 00       	call   ffffffff80011940 <printf_>
ffffffff800037f1:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800037f4:	83 c0 01             	add    $0x1,%eax
ffffffff800037f7:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800037fa:	e9 2c ff ff ff       	jmp    ffffffff8000372b <loader_load_corelib+0x40b>
ffffffff800037ff:	eb 00                	jmp    ffffffff80003801 <loader_load_corelib+0x4e1>
ffffffff80003801:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff80003804:	83 c0 01             	add    $0x1,%eax
ffffffff80003807:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff8000380a:	e9 c4 fe ff ff       	jmp    ffffffff800036d3 <loader_load_corelib+0x3b3>
ffffffff8000380f:	eb 00                	jmp    ffffffff80003811 <loader_load_corelib+0x4f1>
ffffffff80003811:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80003814:	48 81 c4 c0 04 00 00 	add    $0x4c0,%rsp
ffffffff8000381b:	5d                   	pop    %rbp
ffffffff8000381c:	c3                   	ret    
ffffffff8000381d:	cc                   	int3   
ffffffff8000381e:	cc                   	int3   
ffffffff8000381f:	cc                   	int3   

ffffffff80003820 <decode_metadata>:
ffffffff80003820:	55                   	push   %rbp
ffffffff80003821:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003824:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80003828:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000382c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80003830:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80003837:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000383e:	00 
ffffffff8000383f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80003843:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003847:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff8000384b:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff8000384f:	e8 3c 11 00 00       	call   ffffffff80004990 <pe_get_rva_data>
ffffffff80003854:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80003858:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000385d:	75 38                	jne    ffffffff80003897 <decode_metadata+0x77>
ffffffff8000385f:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
ffffffff80003866:	31 c0                	xor    %eax,%eax
ffffffff80003868:	e8 83 60 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000386d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80003870:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80003877:	48 89 c6             	mov    %rax,%rsi
ffffffff8000387a:	48 c7 c1 38 9a 01 80 	mov    $0xffffffff80019a38,%rcx
ffffffff80003881:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff80003888:	41 b9 17 00 00 00    	mov    $0x17,%r9d
ffffffff8000388e:	31 c0                	xor    %eax,%eax
ffffffff80003890:	e8 ab e0 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003895:	eb 5b                	jmp    ffffffff800038f2 <decode_metadata+0xd2>
ffffffff80003897:	eb 00                	jmp    ffffffff80003899 <decode_metadata+0x79>
ffffffff80003899:	eb 00                	jmp    ffffffff8000389b <decode_metadata+0x7b>
ffffffff8000389b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000389f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff800038a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800038a7:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff800038ab:	8b 50 0c             	mov    0xc(%rax),%edx
ffffffff800038ae:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800038b2:	e8 a9 1c 00 00       	call   ffffffff80005560 <metadata_parse>
ffffffff800038b7:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800038ba:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800038be:	74 2e                	je     ffffffff800038ee <decode_metadata+0xce>
ffffffff800038c0:	31 c0                	xor    %eax,%eax
ffffffff800038c2:	e8 29 60 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800038c7:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff800038ce:	48 89 c6             	mov    %rax,%rsi
ffffffff800038d1:	48 c7 c2 38 9a 01 80 	mov    $0xffffffff80019a38,%rdx
ffffffff800038d8:	48 c7 c1 1a 99 01 80 	mov    $0xffffffff8001991a,%rcx
ffffffff800038df:	41 b8 1a 00 00 00    	mov    $0x1a,%r8d
ffffffff800038e5:	31 c0                	xor    %eax,%eax
ffffffff800038e7:	e8 54 e0 00 00       	call   ffffffff80011940 <printf_>
ffffffff800038ec:	eb 04                	jmp    ffffffff800038f2 <decode_metadata+0xd2>
ffffffff800038ee:	eb 00                	jmp    ffffffff800038f0 <decode_metadata+0xd0>
ffffffff800038f0:	eb 00                	jmp    ffffffff800038f2 <decode_metadata+0xd2>
ffffffff800038f2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800038f6:	e8 95 99 00 00       	call   ffffffff8000d290 <free>
ffffffff800038fb:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800038fe:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80003902:	5d                   	pop    %rbp
ffffffff80003903:	c3                   	ret    
ffffffff80003904:	cc                   	int3   
ffffffff80003905:	cc                   	int3   
ffffffff80003906:	cc                   	int3   
ffffffff80003907:	cc                   	int3   
ffffffff80003908:	cc                   	int3   
ffffffff80003909:	cc                   	int3   
ffffffff8000390a:	cc                   	int3   
ffffffff8000390b:	cc                   	int3   
ffffffff8000390c:	cc                   	int3   
ffffffff8000390d:	cc                   	int3   
ffffffff8000390e:	cc                   	int3   
ffffffff8000390f:	cc                   	int3   

ffffffff80003910 <metadata_get_type_def>:
ffffffff80003910:	55                   	push   %rbp
ffffffff80003911:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003914:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80003918:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000391c:	89 75 fc             	mov    %esi,-0x4(%rbp)
ffffffff8000391f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80003922:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80003926:	3b 41 28             	cmp    0x28(%rcx),%eax
ffffffff80003929:	7c 2e                	jl     ffffffff80003959 <metadata_get_type_def+0x49>
ffffffff8000392b:	31 c0                	xor    %eax,%eax
ffffffff8000392d:	e8 be 5f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003932:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80003939:	48 89 c6             	mov    %rax,%rsi
ffffffff8000393c:	48 c7 c2 90 8b 01 80 	mov    $0xffffffff80018b90,%rdx
ffffffff80003943:	48 c7 c1 1a 8b 01 80 	mov    $0xffffffff80018b1a,%rcx
ffffffff8000394a:	41 b8 13 00 00 00    	mov    $0x13,%r8d
ffffffff80003950:	31 c0                	xor    %eax,%eax
ffffffff80003952:	e8 e9 df 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003957:	0f 0b                	ud2    
ffffffff80003959:	eb 00                	jmp    ffffffff8000395b <metadata_get_type_def+0x4b>
ffffffff8000395b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000395f:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80003963:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80003967:	48 c1 e1 05          	shl    $0x5,%rcx
ffffffff8000396b:	48 01 c8             	add    %rcx,%rax
ffffffff8000396e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80003972:	5d                   	pop    %rbp
ffffffff80003973:	c3                   	ret    
ffffffff80003974:	cc                   	int3   
ffffffff80003975:	cc                   	int3   
ffffffff80003976:	cc                   	int3   
ffffffff80003977:	cc                   	int3   
ffffffff80003978:	cc                   	int3   
ffffffff80003979:	cc                   	int3   
ffffffff8000397a:	cc                   	int3   
ffffffff8000397b:	cc                   	int3   
ffffffff8000397c:	cc                   	int3   
ffffffff8000397d:	cc                   	int3   
ffffffff8000397e:	cc                   	int3   
ffffffff8000397f:	cc                   	int3   

ffffffff80003980 <init_builtin_type>:
ffffffff80003980:	55                   	push   %rbp
ffffffff80003981:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003984:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80003988:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000398c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff80003990:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80003997:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff8000399b:	48 83 f8 15          	cmp    $0x15,%rax
ffffffff8000399f:	0f 83 88 00 00 00    	jae    ffffffff80003a2d <init_builtin_type+0xad>
ffffffff800039a5:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff800039a9:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
ffffffff800039ad:	48 8d 04 c5 40 b0 01 	lea    -0x7ffe4fc0(,%rax,8),%rax
ffffffff800039b4:	80 
ffffffff800039b5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800039b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800039bd:	48 8b 78 0c          	mov    0xc(%rax),%rdi
ffffffff800039c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800039c5:	48 8b 30             	mov    (%rax),%rsi
ffffffff800039c8:	e8 83 c4 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff800039cd:	83 f8 00             	cmp    $0x0,%eax
ffffffff800039d0:	75 4b                	jne    ffffffff80003a1d <init_builtin_type+0x9d>
ffffffff800039d2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800039d6:	48 8b 78 04          	mov    0x4(%rax),%rdi
ffffffff800039da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800039de:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff800039e2:	e8 69 c4 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff800039e7:	83 f8 00             	cmp    $0x0,%eax
ffffffff800039ea:	75 31                	jne    ffffffff80003a1d <init_builtin_type+0x9d>
ffffffff800039ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800039f0:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff800039f4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800039f8:	48 89 41 78          	mov    %rax,0x78(%rcx)
ffffffff800039fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80003a00:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80003a04:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80003a08:	48 89 41 70          	mov    %rax,0x70(%rcx)
ffffffff80003a0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80003a10:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80003a14:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff80003a18:	48 89 01             	mov    %rax,(%rcx)
ffffffff80003a1b:	eb 12                	jmp    ffffffff80003a2f <init_builtin_type+0xaf>
ffffffff80003a1d:	eb 00                	jmp    ffffffff80003a1f <init_builtin_type+0x9f>
ffffffff80003a1f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80003a22:	83 c0 01             	add    $0x1,%eax
ffffffff80003a25:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80003a28:	e9 6a ff ff ff       	jmp    ffffffff80003997 <init_builtin_type+0x17>
ffffffff80003a2d:	eb 00                	jmp    ffffffff80003a2f <init_builtin_type+0xaf>
ffffffff80003a2f:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80003a33:	5d                   	pop    %rbp
ffffffff80003a34:	c3                   	ret    
ffffffff80003a35:	cc                   	int3   
ffffffff80003a36:	cc                   	int3   
ffffffff80003a37:	cc                   	int3   
ffffffff80003a38:	cc                   	int3   
ffffffff80003a39:	cc                   	int3   
ffffffff80003a3a:	cc                   	int3   
ffffffff80003a3b:	cc                   	int3   
ffffffff80003a3c:	cc                   	int3   
ffffffff80003a3d:	cc                   	int3   
ffffffff80003a3e:	cc                   	int3   
ffffffff80003a3f:	cc                   	int3   

ffffffff80003a40 <init_module>:
ffffffff80003a40:	55                   	push   %rbp
ffffffff80003a41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003a44:	41 56                	push   %r14
ffffffff80003a46:	53                   	push   %rbx
ffffffff80003a47:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80003a4b:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
ffffffff80003a4f:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
ffffffff80003a53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff80003a5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80003a5e:	83 78 08 01          	cmpl   $0x1,0x8(%rax)
ffffffff80003a62:	74 53                	je     ffffffff80003ab7 <init_module+0x77>
ffffffff80003a64:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80003a6b:	31 c0                	xor    %eax,%eax
ffffffff80003a6d:	e8 7e 5e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003a72:	48 c7 c7 26 a0 01 80 	mov    $0xffffffff8001a026,%rdi
ffffffff80003a79:	48 89 c6             	mov    %rax,%rsi
ffffffff80003a7c:	31 c0                	xor    %eax,%eax
ffffffff80003a7e:	e8 bd de 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003a83:	31 c0                	xor    %eax,%eax
ffffffff80003a85:	e8 66 5e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003a8a:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80003a8d:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80003a94:	48 89 c6             	mov    %rax,%rsi
ffffffff80003a97:	48 c7 c1 64 97 01 80 	mov    $0xffffffff80019764,%rcx
ffffffff80003a9e:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff80003aa5:	41 b9 5e 00 00 00    	mov    $0x5e,%r9d
ffffffff80003aab:	31 c0                	xor    %eax,%eax
ffffffff80003aad:	e8 8e de 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003ab2:	e9 ab 00 00 00       	jmp    ffffffff80003b62 <init_module+0x122>
ffffffff80003ab7:	eb 00                	jmp    ffffffff80003ab9 <init_module+0x79>
ffffffff80003ab9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80003abd:	48 8b 00             	mov    (%rax),%rax
ffffffff80003ac0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80003ac4:	48 8b 05 f5 86 21 00 	mov    0x2186f5(%rip),%rax        # ffffffff8021c1c0 <tSystem_Reflection_Module>
ffffffff80003acb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80003acf:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80003ad3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ad7:	48 8b 70 78          	mov    0x78(%rax),%rsi
ffffffff80003adb:	e8 00 e4 ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff80003ae0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80003ae4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003ae8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80003aec:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003af0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80003af4:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
ffffffff80003af8:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80003afc:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff80003b01:	e8 8a e4 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003b06:	eb 00                	jmp    ffffffff80003b08 <init_module+0xc8>
ffffffff80003b08:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003b0c:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80003b10:	4c 8b 75 b0          	mov    -0x50(%rbp),%r14
ffffffff80003b14:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80003b18:	48 8b 58 02          	mov    0x2(%rax),%rbx
ffffffff80003b1c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80003b20:	48 8b 78 02          	mov    0x2(%rax),%rdi
ffffffff80003b24:	e8 b7 c3 00 00       	call   ffffffff8000fee0 <strlen>
ffffffff80003b29:	48 89 df             	mov    %rbx,%rdi
ffffffff80003b2c:	48 89 c6             	mov    %rax,%rsi
ffffffff80003b2f:	e8 2c 30 00 00       	call   ffffffff80006b60 <new_string_from_utf8>
ffffffff80003b34:	4c 89 f7             	mov    %r14,%rdi
ffffffff80003b37:	be 30 00 00 00       	mov    $0x30,%esi
ffffffff80003b3c:	48 89 c2             	mov    %rax,%rdx
ffffffff80003b3f:	e8 4c e4 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003b44:	eb 00                	jmp    ffffffff80003b46 <init_module+0x106>
ffffffff80003b46:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80003b4a:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80003b4e:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80003b52:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80003b56:	be 30 00 00 00       	mov    $0x30,%esi
ffffffff80003b5b:	e8 30 e4 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003b60:	eb 00                	jmp    ffffffff80003b62 <init_module+0x122>
ffffffff80003b62:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80003b65:	48 83 c4 50          	add    $0x50,%rsp
ffffffff80003b69:	5b                   	pop    %rbx
ffffffff80003b6a:	41 5e                	pop    %r14
ffffffff80003b6c:	5d                   	pop    %rbp
ffffffff80003b6d:	c3                   	ret    
ffffffff80003b6e:	cc                   	int3   
ffffffff80003b6f:	cc                   	int3   

ffffffff80003b70 <init_type>:
ffffffff80003b70:	55                   	push   %rbp
ffffffff80003b71:	48 89 e5             	mov    %rsp,%rbp
ffffffff80003b74:	41 56                	push   %r14
ffffffff80003b76:	53                   	push   %rbx
ffffffff80003b77:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
ffffffff80003b7e:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff80003b82:	48 89 75 98          	mov    %rsi,-0x68(%rbp)
ffffffff80003b86:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80003b8a:	89 4d d4             	mov    %ecx,-0x2c(%rbp)
ffffffff80003b8d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff80003b94:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80003b98:	8b 75 d4             	mov    -0x2c(%rbp),%esi
ffffffff80003b9b:	e8 70 fd ff ff       	call   ffffffff80003910 <metadata_get_type_def>
ffffffff80003ba0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80003ba4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003ba8:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
ffffffff80003baf:	48 8b bd 18 ff ff ff 	mov    -0xe8(%rbp),%rdi
ffffffff80003bb6:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80003bba:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80003bbf:	e8 cc e3 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003bc4:	eb 00                	jmp    ffffffff80003bc6 <init_type+0x56>
ffffffff80003bc6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003bca:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
ffffffff80003bd1:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
ffffffff80003bd8:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80003bdc:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80003be0:	be 30 00 00 00       	mov    $0x30,%esi
ffffffff80003be5:	e8 a6 e3 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003bea:	eb 00                	jmp    ffffffff80003bec <init_type+0x7c>
ffffffff80003bec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003bf0:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
ffffffff80003bf7:	4c 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%r14
ffffffff80003bfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003c02:	48 8b 58 04          	mov    0x4(%rax),%rbx
ffffffff80003c06:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003c0a:	48 8b 78 04          	mov    0x4(%rax),%rdi
ffffffff80003c0e:	e8 cd c2 00 00       	call   ffffffff8000fee0 <strlen>
ffffffff80003c13:	48 89 df             	mov    %rbx,%rdi
ffffffff80003c16:	48 89 c6             	mov    %rax,%rsi
ffffffff80003c19:	e8 42 2f 00 00       	call   ffffffff80006b60 <new_string_from_utf8>
ffffffff80003c1e:	4c 89 f7             	mov    %r14,%rdi
ffffffff80003c21:	be 38 00 00 00       	mov    $0x38,%esi
ffffffff80003c26:	48 89 c2             	mov    %rax,%rdx
ffffffff80003c29:	e8 62 e3 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003c2e:	eb 00                	jmp    ffffffff80003c30 <init_type+0xc0>
ffffffff80003c30:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003c34:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
ffffffff80003c3b:	4c 8b b5 30 ff ff ff 	mov    -0xd0(%rbp),%r14
ffffffff80003c42:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003c46:	48 8b 58 0c          	mov    0xc(%rax),%rbx
ffffffff80003c4a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003c4e:	48 8b 78 0c          	mov    0xc(%rax),%rdi
ffffffff80003c52:	e8 89 c2 00 00       	call   ffffffff8000fee0 <strlen>
ffffffff80003c57:	48 89 df             	mov    %rbx,%rdi
ffffffff80003c5a:	48 89 c6             	mov    %rax,%rsi
ffffffff80003c5d:	e8 fe 2e 00 00       	call   ffffffff80006b60 <new_string_from_utf8>
ffffffff80003c62:	4c 89 f7             	mov    %r14,%rdi
ffffffff80003c65:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff80003c6a:	48 89 c2             	mov    %rax,%rdx
ffffffff80003c6d:	e8 1e e3 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003c72:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003c76:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80003c79:	25 ff ff ff 00       	and    $0xffffff,%eax
ffffffff80003c7e:	83 f8 00             	cmp    $0x0,%eax
ffffffff80003c81:	74 36                	je     ffffffff80003cb9 <init_type+0x149>
ffffffff80003c83:	eb 00                	jmp    ffffffff80003c85 <init_type+0x115>
ffffffff80003c85:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003c89:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
ffffffff80003c90:	48 8b 9d 38 ff ff ff 	mov    -0xc8(%rbp),%rbx
ffffffff80003c97:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
ffffffff80003c9b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003c9f:	8b 70 14             	mov    0x14(%rax),%esi
ffffffff80003ca2:	e8 89 2f 00 00       	call   ffffffff80006c30 <get_type_by_token>
ffffffff80003ca7:	48 89 df             	mov    %rbx,%rdi
ffffffff80003caa:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff80003caf:	48 89 c2             	mov    %rax,%rdx
ffffffff80003cb2:	e8 d9 e2 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003cb7:	eb 00                	jmp    ffffffff80003cb9 <init_type+0x149>
ffffffff80003cb9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003cbd:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80003cc0:	25 ff ff ff 00       	and    $0xffffff,%eax
ffffffff80003cc5:	83 e8 01             	sub    $0x1,%eax
ffffffff80003cc8:	48 98                	cltq   
ffffffff80003cca:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80003cce:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
ffffffff80003cd5:	00 
ffffffff80003cd6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80003cda:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80003cdd:	c1 e8 18             	shr    $0x18,%eax
ffffffff80003ce0:	83 f8 04             	cmp    $0x4,%eax
ffffffff80003ce3:	74 3b                	je     ffffffff80003d20 <init_type+0x1b0>
ffffffff80003ce5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80003cec:	31 c0                	xor    %eax,%eax
ffffffff80003cee:	e8 fd 5b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003cf3:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80003cf6:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80003cfd:	48 89 c6             	mov    %rax,%rsi
ffffffff80003d00:	48 c7 c1 35 98 01 80 	mov    $0xffffffff80019835,%rcx
ffffffff80003d07:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff80003d0e:	41 b9 3b 00 00 00    	mov    $0x3b,%r9d
ffffffff80003d14:	31 c0                	xor    %eax,%eax
ffffffff80003d16:	e8 25 dc 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003d1b:	e9 cc 02 00 00       	jmp    ffffffff80003fec <init_type+0x47c>
ffffffff80003d20:	eb 00                	jmp    ffffffff80003d22 <init_type+0x1b2>
ffffffff80003d22:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80003d25:	83 c0 01             	add    $0x1,%eax
ffffffff80003d28:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80003d2c:	3b 41 28             	cmp    0x28(%rcx),%eax
ffffffff80003d2f:	75 15                	jne    ffffffff80003d46 <init_type+0x1d6>
ffffffff80003d31:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80003d35:	48 63 40 48          	movslq 0x48(%rax),%rax
ffffffff80003d39:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
ffffffff80003d3d:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80003d41:	e9 81 00 00 00       	jmp    ffffffff80003dc7 <init_type+0x257>
ffffffff80003d46:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80003d4a:	8b 75 d4             	mov    -0x2c(%rbp),%esi
ffffffff80003d4d:	83 c6 01             	add    $0x1,%esi
ffffffff80003d50:	e8 bb fb ff ff       	call   ffffffff80003910 <metadata_get_type_def>
ffffffff80003d55:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
ffffffff80003d5c:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80003d63:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80003d66:	c1 e8 18             	shr    $0x18,%eax
ffffffff80003d69:	83 f8 04             	cmp    $0x4,%eax
ffffffff80003d6c:	74 3b                	je     ffffffff80003da9 <init_type+0x239>
ffffffff80003d6e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80003d75:	31 c0                	xor    %eax,%eax
ffffffff80003d77:	e8 74 5b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003d7c:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80003d7f:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80003d86:	48 89 c6             	mov    %rax,%rsi
ffffffff80003d89:	48 c7 c1 35 98 01 80 	mov    $0xffffffff80019835,%rcx
ffffffff80003d90:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff80003d97:	41 b9 40 00 00 00    	mov    $0x40,%r9d
ffffffff80003d9d:	31 c0                	xor    %eax,%eax
ffffffff80003d9f:	e8 9c db 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003da4:	e9 43 02 00 00       	jmp    ffffffff80003fec <init_type+0x47c>
ffffffff80003da9:	eb 00                	jmp    ffffffff80003dab <init_type+0x23b>
ffffffff80003dab:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80003db2:	8b 40 18             	mov    0x18(%rax),%eax
ffffffff80003db5:	25 ff ff ff 00       	and    $0xffffff,%eax
ffffffff80003dba:	83 e8 01             	sub    $0x1,%eax
ffffffff80003dbd:	48 98                	cltq   
ffffffff80003dbf:	48 2b 45 a0          	sub    -0x60(%rbp),%rax
ffffffff80003dc3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80003dc7:	eb 00                	jmp    ffffffff80003dc9 <init_type+0x259>
ffffffff80003dc9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80003dcd:	48 03 45 b8          	add    -0x48(%rbp),%rax
ffffffff80003dd1:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80003dd5:	48 63 49 48          	movslq 0x48(%rcx),%rcx
ffffffff80003dd9:	48 39 c8             	cmp    %rcx,%rax
ffffffff80003ddc:	76 3b                	jbe    ffffffff80003e19 <init_type+0x2a9>
ffffffff80003dde:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80003de5:	31 c0                	xor    %eax,%eax
ffffffff80003de7:	e8 04 5b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003dec:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80003def:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80003df6:	48 89 c6             	mov    %rax,%rsi
ffffffff80003df9:	48 c7 c1 35 98 01 80 	mov    $0xffffffff80019835,%rcx
ffffffff80003e00:	49 c7 c0 1a 99 01 80 	mov    $0xffffffff8001991a,%r8
ffffffff80003e07:	41 b9 43 00 00 00    	mov    $0x43,%r9d
ffffffff80003e0d:	31 c0                	xor    %eax,%eax
ffffffff80003e0f:	e8 2c db 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003e14:	e9 d3 01 00 00       	jmp    ffffffff80003fec <init_type+0x47c>
ffffffff80003e19:	eb 00                	jmp    ffffffff80003e1b <init_type+0x2ab>
ffffffff80003e1b:	eb 00                	jmp    ffffffff80003e1d <init_type+0x2ad>
ffffffff80003e1d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003e21:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
ffffffff80003e28:	48 8b 9d 40 ff ff ff 	mov    -0xc0(%rbp),%rbx
ffffffff80003e2f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80003e33:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80003e3a:	48 8b 05 8f 83 21 00 	mov    0x21838f(%rip),%rax        # ffffffff8021c1d0 <tSystem_Reflection_FieldInfo>
ffffffff80003e41:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
ffffffff80003e48:	48 8b bd 78 ff ff ff 	mov    -0x88(%rbp),%rdi
ffffffff80003e4f:	e8 dc 2e 00 00       	call   ffffffff80006d30 <get_array_type>
ffffffff80003e54:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff80003e58:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
ffffffff80003e5c:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff80003e60:	48 8b 70 78          	mov    0x78(%rax),%rsi
ffffffff80003e64:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff80003e6b:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80003e6f:	48 0f af 85 70 ff ff 	imul   -0x90(%rbp),%rax
ffffffff80003e76:	ff 
ffffffff80003e77:	48 01 c6             	add    %rax,%rsi
ffffffff80003e7a:	e8 61 e0 ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff80003e7f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff80003e83:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff80003e8a:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
ffffffff80003e8e:	89 41 28             	mov    %eax,0x28(%rcx)
ffffffff80003e91:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80003e95:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
ffffffff80003e9c:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
ffffffff80003ea3:	48 89 df             	mov    %rbx,%rdi
ffffffff80003ea6:	be 58 00 00 00       	mov    $0x58,%esi
ffffffff80003eab:	e8 e0 e0 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003eb0:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80003eb7:	00 
ffffffff80003eb8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80003ebc:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff80003ec0:	0f 83 24 01 00 00    	jae    ffffffff80003fea <init_type+0x47a>
ffffffff80003ec6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80003eca:	8b 75 a0             	mov    -0x60(%rbp),%esi
ffffffff80003ecd:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80003ed0:	01 c6                	add    %eax,%esi
ffffffff80003ed2:	e8 29 01 00 00       	call   ffffffff80004000 <metadata_get_field>
ffffffff80003ed7:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80003edb:	48 8b 05 ee 82 21 00 	mov    0x2182ee(%rip),%rax        # ffffffff8021c1d0 <tSystem_Reflection_FieldInfo>
ffffffff80003ee2:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff80003ee6:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
ffffffff80003eea:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80003eee:	48 8b 70 78          	mov    0x78(%rax),%rsi
ffffffff80003ef2:	e8 e9 df ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff80003ef7:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
ffffffff80003efe:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff80003f05:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80003f09:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003f0d:	66 8b 00             	mov    (%rax),%ax
ffffffff80003f10:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80003f14:	66 89 41 40          	mov    %ax,0x40(%rcx)
ffffffff80003f18:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80003f1c:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
ffffffff80003f23:	4c 8b b5 58 ff ff ff 	mov    -0xa8(%rbp),%r14
ffffffff80003f2a:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003f2e:	48 8b 58 02          	mov    0x2(%rax),%rbx
ffffffff80003f32:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003f36:	48 8b 78 02          	mov    0x2(%rax),%rdi
ffffffff80003f3a:	e8 a1 bf 00 00       	call   ffffffff8000fee0 <strlen>
ffffffff80003f3f:	48 89 df             	mov    %rbx,%rdi
ffffffff80003f42:	48 89 c6             	mov    %rax,%rsi
ffffffff80003f45:	e8 16 2c 00 00       	call   ffffffff80006b60 <new_string_from_utf8>
ffffffff80003f4a:	4c 89 f7             	mov    %r14,%rdi
ffffffff80003f4d:	be 38 00 00 00       	mov    $0x38,%esi
ffffffff80003f52:	48 89 c2             	mov    %rax,%rdx
ffffffff80003f55:	e8 36 e0 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003f5a:	eb 00                	jmp    ffffffff80003f5c <init_type+0x3ec>
ffffffff80003f5c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80003f60:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80003f64:	48 8b 78 0a          	mov    0xa(%rax),%rdi
ffffffff80003f68:	48 8b 70 12          	mov    0x12(%rax),%rsi
ffffffff80003f6c:	e8 8f 03 00 00       	call   ffffffff80004300 <parse_field_sig>
ffffffff80003f71:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80003f74:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
ffffffff80003f78:	74 2e                	je     ffffffff80003fa8 <init_type+0x438>
ffffffff80003f7a:	31 c0                	xor    %eax,%eax
ffffffff80003f7c:	e8 6f 59 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80003f81:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80003f88:	48 89 c6             	mov    %rax,%rsi
ffffffff80003f8b:	48 c7 c2 35 98 01 80 	mov    $0xffffffff80019835,%rdx
ffffffff80003f92:	48 c7 c1 1a 99 01 80 	mov    $0xffffffff8001991a,%rcx
ffffffff80003f99:	41 b8 50 00 00 00    	mov    $0x50,%r8d
ffffffff80003f9f:	31 c0                	xor    %eax,%eax
ffffffff80003fa1:	e8 9a d9 00 00       	call   ffffffff80011940 <printf_>
ffffffff80003fa6:	eb 44                	jmp    ffffffff80003fec <init_type+0x47c>
ffffffff80003fa8:	eb 00                	jmp    ffffffff80003faa <init_type+0x43a>
ffffffff80003faa:	eb 00                	jmp    ffffffff80003fac <init_type+0x43c>
ffffffff80003fac:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80003fb0:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff80003fb4:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff80003fbb:	48 8b bd 60 ff ff ff 	mov    -0xa0(%rbp),%rdi
ffffffff80003fc2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80003fc6:	48 c1 e6 03          	shl    $0x3,%rsi
ffffffff80003fca:	48 83 c6 30          	add    $0x30,%rsi
ffffffff80003fce:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff80003fd2:	e8 b9 df ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80003fd7:	eb 00                	jmp    ffffffff80003fd9 <init_type+0x469>
ffffffff80003fd9:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80003fdd:	48 83 c0 01          	add    $0x1,%rax
ffffffff80003fe1:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80003fe5:	e9 ce fe ff ff       	jmp    ffffffff80003eb8 <init_type+0x348>
ffffffff80003fea:	eb 00                	jmp    ffffffff80003fec <init_type+0x47c>
ffffffff80003fec:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80003fef:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
ffffffff80003ff6:	5b                   	pop    %rbx
ffffffff80003ff7:	41 5e                	pop    %r14
ffffffff80003ff9:	5d                   	pop    %rbp
ffffffff80003ffa:	c3                   	ret    
ffffffff80003ffb:	cc                   	int3   
ffffffff80003ffc:	cc                   	int3   
ffffffff80003ffd:	cc                   	int3   
ffffffff80003ffe:	cc                   	int3   
ffffffff80003fff:	cc                   	int3   

ffffffff80004000 <metadata_get_field>:
ffffffff80004000:	55                   	push   %rbp
ffffffff80004001:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004004:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80004008:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000400c:	89 75 fc             	mov    %esi,-0x4(%rbp)
ffffffff8000400f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80004012:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80004016:	3b 41 48             	cmp    0x48(%rcx),%eax
ffffffff80004019:	7c 2e                	jl     ffffffff80004049 <metadata_get_field+0x49>
ffffffff8000401b:	31 c0                	xor    %eax,%eax
ffffffff8000401d:	e8 ce 58 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004022:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80004029:	48 89 c6             	mov    %rax,%rsi
ffffffff8000402c:	48 c7 c2 98 8f 01 80 	mov    $0xffffffff80018f98,%rdx
ffffffff80004033:	48 c7 c1 1a 8b 01 80 	mov    $0xffffffff80018b1a,%rcx
ffffffff8000403a:	41 b8 18 00 00 00    	mov    $0x18,%r8d
ffffffff80004040:	31 c0                	xor    %eax,%eax
ffffffff80004042:	e8 f9 d8 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004047:	0f 0b                	ud2    
ffffffff80004049:	eb 00                	jmp    ffffffff8000404b <metadata_get_field+0x4b>
ffffffff8000404b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000404f:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80004053:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80004057:	48 6b c9 1a          	imul   $0x1a,%rcx,%rcx
ffffffff8000405b:	48 01 c8             	add    %rcx,%rax
ffffffff8000405e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80004062:	5d                   	pop    %rbp
ffffffff80004063:	c3                   	ret    
ffffffff80004064:	cc                   	int3   
ffffffff80004065:	cc                   	int3   
ffffffff80004066:	cc                   	int3   
ffffffff80004067:	cc                   	int3   
ffffffff80004068:	cc                   	int3   
ffffffff80004069:	cc                   	int3   
ffffffff8000406a:	cc                   	int3   
ffffffff8000406b:	cc                   	int3   
ffffffff8000406c:	cc                   	int3   
ffffffff8000406d:	cc                   	int3   
ffffffff8000406e:	cc                   	int3   
ffffffff8000406f:	cc                   	int3   

ffffffff80004070 <parse_compressed_integer>:
ffffffff80004070:	55                   	push   %rbp
ffffffff80004071:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004074:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80004078:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000407c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff80004080:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff80004087:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000408b:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80004090:	77 3b                	ja     ffffffff800040cd <parse_compressed_integer+0x5d>
ffffffff80004092:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff80004099:	31 c0                	xor    %eax,%eax
ffffffff8000409b:	e8 50 58 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800040a0:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff800040a3:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800040aa:	48 89 c6             	mov    %rax,%rsi
ffffffff800040ad:	48 c7 c1 01 92 01 80 	mov    $0xffffffff80019201,%rcx
ffffffff800040b4:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff800040bb:	41 b9 3a 00 00 00    	mov    $0x3a,%r9d
ffffffff800040c1:	31 c0                	xor    %eax,%eax
ffffffff800040c3:	e8 78 d8 00 00       	call   ffffffff80011940 <printf_>
ffffffff800040c8:	e9 23 02 00 00       	jmp    ffffffff800042f0 <parse_compressed_integer+0x280>
ffffffff800040cd:	eb 00                	jmp    ffffffff800040cf <parse_compressed_integer+0x5f>
ffffffff800040cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800040d3:	48 8b 00             	mov    (%rax),%rax
ffffffff800040d6:	8a 00                	mov    (%rax),%al
ffffffff800040d8:	88 45 e6             	mov    %al,-0x1a(%rbp)
ffffffff800040db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800040df:	48 8b 08             	mov    (%rax),%rcx
ffffffff800040e2:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800040e6:	48 89 08             	mov    %rcx,(%rax)
ffffffff800040e9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800040ed:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff800040f1:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff800040f5:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff800040f9:	8a 45 e6             	mov    -0x1a(%rbp),%al
ffffffff800040fc:	88 45 e7             	mov    %al,-0x19(%rbp)
ffffffff800040ff:	8a 45 e7             	mov    -0x19(%rbp),%al
ffffffff80004102:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80004105:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff80004109:	25 80 00 00 00       	and    $0x80,%eax
ffffffff8000410e:	83 f8 00             	cmp    $0x0,%eax
ffffffff80004111:	75 0f                	jne    ffffffff80004122 <parse_compressed_integer+0xb2>
ffffffff80004113:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff80004117:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000411b:	89 01                	mov    %eax,(%rcx)
ffffffff8000411d:	e9 ce 01 00 00       	jmp    ffffffff800042f0 <parse_compressed_integer+0x280>
ffffffff80004122:	eb 00                	jmp    ffffffff80004124 <parse_compressed_integer+0xb4>
ffffffff80004124:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004128:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff8000412d:	77 3b                	ja     ffffffff8000416a <parse_compressed_integer+0xfa>
ffffffff8000412f:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff80004136:	31 c0                	xor    %eax,%eax
ffffffff80004138:	e8 b3 57 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000413d:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80004140:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004147:	48 89 c6             	mov    %rax,%rsi
ffffffff8000414a:	48 c7 c1 01 92 01 80 	mov    $0xffffffff80019201,%rcx
ffffffff80004151:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff80004158:	41 b9 40 00 00 00    	mov    $0x40,%r9d
ffffffff8000415e:	31 c0                	xor    %eax,%eax
ffffffff80004160:	e8 db d7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004165:	e9 86 01 00 00       	jmp    ffffffff800042f0 <parse_compressed_integer+0x280>
ffffffff8000416a:	eb 00                	jmp    ffffffff8000416c <parse_compressed_integer+0xfc>
ffffffff8000416c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004170:	48 8b 00             	mov    (%rax),%rax
ffffffff80004173:	8a 00                	mov    (%rax),%al
ffffffff80004175:	88 45 e8             	mov    %al,-0x18(%rbp)
ffffffff80004178:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000417c:	48 8b 08             	mov    (%rax),%rcx
ffffffff8000417f:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80004183:	48 89 08             	mov    %rcx,(%rax)
ffffffff80004186:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000418a:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8000418e:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff80004192:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80004196:	8a 45 e8             	mov    -0x18(%rbp),%al
ffffffff80004199:	88 45 e9             	mov    %al,-0x17(%rbp)
ffffffff8000419c:	8a 45 e9             	mov    -0x17(%rbp),%al
ffffffff8000419f:	88 45 fe             	mov    %al,-0x2(%rbp)
ffffffff800041a2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff800041a6:	25 c0 00 00 00       	and    $0xc0,%eax
ffffffff800041ab:	3d 80 00 00 00       	cmp    $0x80,%eax
ffffffff800041b0:	75 1b                	jne    ffffffff800041cd <parse_compressed_integer+0x15d>
ffffffff800041b2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff800041b6:	83 e0 3f             	and    $0x3f,%eax
ffffffff800041b9:	c1 e0 08             	shl    $0x8,%eax
ffffffff800041bc:	0f b6 4d fe          	movzbl -0x2(%rbp),%ecx
ffffffff800041c0:	09 c8                	or     %ecx,%eax
ffffffff800041c2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff800041c6:	89 01                	mov    %eax,(%rcx)
ffffffff800041c8:	e9 23 01 00 00       	jmp    ffffffff800042f0 <parse_compressed_integer+0x280>
ffffffff800041cd:	eb 00                	jmp    ffffffff800041cf <parse_compressed_integer+0x15f>
ffffffff800041cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800041d3:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff800041d8:	77 3b                	ja     ffffffff80004215 <parse_compressed_integer+0x1a5>
ffffffff800041da:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff800041e1:	31 c0                	xor    %eax,%eax
ffffffff800041e3:	e8 08 57 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800041e8:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff800041eb:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800041f2:	48 89 c6             	mov    %rax,%rsi
ffffffff800041f5:	48 c7 c1 01 92 01 80 	mov    $0xffffffff80019201,%rcx
ffffffff800041fc:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff80004203:	41 b9 48 00 00 00    	mov    $0x48,%r9d
ffffffff80004209:	31 c0                	xor    %eax,%eax
ffffffff8000420b:	e8 30 d7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004210:	e9 db 00 00 00       	jmp    ffffffff800042f0 <parse_compressed_integer+0x280>
ffffffff80004215:	eb 00                	jmp    ffffffff80004217 <parse_compressed_integer+0x1a7>
ffffffff80004217:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000421b:	48 8b 00             	mov    (%rax),%rax
ffffffff8000421e:	8a 00                	mov    (%rax),%al
ffffffff80004220:	88 45 eb             	mov    %al,-0x15(%rbp)
ffffffff80004223:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004227:	48 8b 08             	mov    (%rax),%rcx
ffffffff8000422a:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000422e:	48 89 08             	mov    %rcx,(%rax)
ffffffff80004231:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004235:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80004239:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff8000423d:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80004241:	8a 45 eb             	mov    -0x15(%rbp),%al
ffffffff80004244:	88 45 ec             	mov    %al,-0x14(%rbp)
ffffffff80004247:	8a 45 ec             	mov    -0x14(%rbp),%al
ffffffff8000424a:	88 45 ea             	mov    %al,-0x16(%rbp)
ffffffff8000424d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004251:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80004256:	77 38                	ja     ffffffff80004290 <parse_compressed_integer+0x220>
ffffffff80004258:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff8000425f:	31 c0                	xor    %eax,%eax
ffffffff80004261:	e8 8a 56 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004266:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80004269:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004270:	48 89 c6             	mov    %rax,%rsi
ffffffff80004273:	48 c7 c1 01 92 01 80 	mov    $0xffffffff80019201,%rcx
ffffffff8000427a:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff80004281:	41 b9 49 00 00 00    	mov    $0x49,%r9d
ffffffff80004287:	31 c0                	xor    %eax,%eax
ffffffff80004289:	e8 b2 d6 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000428e:	eb 60                	jmp    ffffffff800042f0 <parse_compressed_integer+0x280>
ffffffff80004290:	eb 00                	jmp    ffffffff80004292 <parse_compressed_integer+0x222>
ffffffff80004292:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004296:	48 8b 00             	mov    (%rax),%rax
ffffffff80004299:	8a 00                	mov    (%rax),%al
ffffffff8000429b:	88 45 ee             	mov    %al,-0x12(%rbp)
ffffffff8000429e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800042a2:	48 8b 08             	mov    (%rax),%rcx
ffffffff800042a5:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800042a9:	48 89 08             	mov    %rcx,(%rax)
ffffffff800042ac:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800042b0:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff800042b4:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff800042b8:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff800042bc:	8a 45 ee             	mov    -0x12(%rbp),%al
ffffffff800042bf:	88 45 ef             	mov    %al,-0x11(%rbp)
ffffffff800042c2:	8a 45 ef             	mov    -0x11(%rbp),%al
ffffffff800042c5:	88 45 ed             	mov    %al,-0x13(%rbp)
ffffffff800042c8:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff800042cc:	83 e0 1f             	and    $0x1f,%eax
ffffffff800042cf:	c1 e0 18             	shl    $0x18,%eax
ffffffff800042d2:	0f b6 4d fe          	movzbl -0x2(%rbp),%ecx
ffffffff800042d6:	c1 e1 10             	shl    $0x10,%ecx
ffffffff800042d9:	09 c8                	or     %ecx,%eax
ffffffff800042db:	0f b6 4d ea          	movzbl -0x16(%rbp),%ecx
ffffffff800042df:	c1 e1 08             	shl    $0x8,%ecx
ffffffff800042e2:	09 c8                	or     %ecx,%eax
ffffffff800042e4:	0f b6 4d ed          	movzbl -0x13(%rbp),%ecx
ffffffff800042e8:	09 c8                	or     %ecx,%eax
ffffffff800042ea:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff800042ee:	89 01                	mov    %eax,(%rcx)
ffffffff800042f0:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800042f3:	48 83 c4 30          	add    $0x30,%rsp
ffffffff800042f7:	5d                   	pop    %rbp
ffffffff800042f8:	c3                   	ret    
ffffffff800042f9:	cc                   	int3   
ffffffff800042fa:	cc                   	int3   
ffffffff800042fb:	cc                   	int3   
ffffffff800042fc:	cc                   	int3   
ffffffff800042fd:	cc                   	int3   
ffffffff800042fe:	cc                   	int3   
ffffffff800042ff:	cc                   	int3   

ffffffff80004300 <parse_field_sig>:
ffffffff80004300:	55                   	push   %rbp
ffffffff80004301:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004304:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80004308:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000430c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80004310:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80004314:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000431b:	48 8d 45 d8          	lea    -0x28(%rbp),%rax
ffffffff8000431f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80004323:	eb 00                	jmp    ffffffff80004325 <parse_field_sig+0x25>
ffffffff80004325:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004329:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff8000432e:	77 3b                	ja     ffffffff8000436b <parse_field_sig+0x6b>
ffffffff80004330:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff80004337:	31 c0                	xor    %eax,%eax
ffffffff80004339:	e8 b2 55 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000433e:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80004341:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004348:	48 89 c6             	mov    %rax,%rsi
ffffffff8000434b:	48 c7 c1 3e 9c 01 80 	mov    $0xffffffff80019c3e,%rcx
ffffffff80004352:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff80004359:	41 b9 a0 00 00 00    	mov    $0xa0,%r9d
ffffffff8000435f:	31 c0                	xor    %eax,%eax
ffffffff80004361:	e8 da d5 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004366:	e9 47 01 00 00       	jmp    ffffffff800044b2 <parse_field_sig+0x1b2>
ffffffff8000436b:	eb 00                	jmp    ffffffff8000436d <parse_field_sig+0x6d>
ffffffff8000436d:	eb 00                	jmp    ffffffff8000436f <parse_field_sig+0x6f>
ffffffff8000436f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004373:	48 8b 00             	mov    (%rax),%rax
ffffffff80004376:	0f b6 00             	movzbl (%rax),%eax
ffffffff80004379:	83 f8 06             	cmp    $0x6,%eax
ffffffff8000437c:	74 62                	je     ffffffff800043e0 <parse_field_sig+0xe0>
ffffffff8000437e:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff80004385:	31 c0                	xor    %eax,%eax
ffffffff80004387:	e8 64 55 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000438c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80004390:	48 8b 09             	mov    (%rcx),%rcx
ffffffff80004393:	0f b6 09             	movzbl (%rcx),%ecx
ffffffff80004396:	48 c7 c7 99 8e 01 80 	mov    $0xffffffff80018e99,%rdi
ffffffff8000439d:	48 89 c6             	mov    %rax,%rsi
ffffffff800043a0:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff800043a5:	31 c0                	xor    %eax,%eax
ffffffff800043a7:	e8 94 d5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800043ac:	31 c0                	xor    %eax,%eax
ffffffff800043ae:	e8 3d 55 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800043b3:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff800043b6:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800043bd:	48 89 c6             	mov    %rax,%rsi
ffffffff800043c0:	48 c7 c1 3e 9c 01 80 	mov    $0xffffffff80019c3e,%rcx
ffffffff800043c7:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff800043ce:	41 b9 a0 00 00 00    	mov    $0xa0,%r9d
ffffffff800043d4:	31 c0                	xor    %eax,%eax
ffffffff800043d6:	e8 65 d5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800043db:	e9 d2 00 00 00       	jmp    ffffffff800044b2 <parse_field_sig+0x1b2>
ffffffff800043e0:	eb 00                	jmp    ffffffff800043e2 <parse_field_sig+0xe2>
ffffffff800043e2:	eb 00                	jmp    ffffffff800043e4 <parse_field_sig+0xe4>
ffffffff800043e4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800043e8:	48 8b 08             	mov    (%rax),%rcx
ffffffff800043eb:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800043ef:	48 89 08             	mov    %rcx,(%rax)
ffffffff800043f2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800043f6:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff800043fa:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff800043fe:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80004402:	eb 00                	jmp    ffffffff80004404 <parse_field_sig+0x104>
ffffffff80004404:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80004408:	eb 00                	jmp    ffffffff8000440a <parse_field_sig+0x10a>
ffffffff8000440a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000440e:	48 8d 75 ff          	lea    -0x1(%rbp),%rsi
ffffffff80004412:	e8 a9 00 00 00       	call   ffffffff800044c0 <parse_custom_mod>
ffffffff80004417:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000441a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000441e:	74 2e                	je     ffffffff8000444e <parse_field_sig+0x14e>
ffffffff80004420:	31 c0                	xor    %eax,%eax
ffffffff80004422:	e8 c9 54 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004427:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000442e:	48 89 c6             	mov    %rax,%rsi
ffffffff80004431:	48 c7 c2 3e 9c 01 80 	mov    $0xffffffff80019c3e,%rdx
ffffffff80004438:	48 c7 c1 44 8b 01 80 	mov    $0xffffffff80018b44,%rcx
ffffffff8000443f:	41 b8 a6 00 00 00    	mov    $0xa6,%r8d
ffffffff80004445:	31 c0                	xor    %eax,%eax
ffffffff80004447:	e8 f4 d4 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000444c:	eb 64                	jmp    ffffffff800044b2 <parse_field_sig+0x1b2>
ffffffff8000444e:	eb 00                	jmp    ffffffff80004450 <parse_field_sig+0x150>
ffffffff80004450:	eb 00                	jmp    ffffffff80004452 <parse_field_sig+0x152>
ffffffff80004452:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80004456:	75 b0                	jne    ffffffff80004408 <parse_field_sig+0x108>
ffffffff80004458:	eb 00                	jmp    ffffffff8000445a <parse_field_sig+0x15a>
ffffffff8000445a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000445e:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80004462:	48 8b 78 28          	mov    0x28(%rax),%rdi
ffffffff80004466:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000446a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000446e:	48 83 c2 48          	add    $0x48,%rdx
ffffffff80004472:	e8 29 01 00 00       	call   ffffffff800045a0 <parse_type>
ffffffff80004477:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000447a:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000447e:	74 2e                	je     ffffffff800044ae <parse_field_sig+0x1ae>
ffffffff80004480:	31 c0                	xor    %eax,%eax
ffffffff80004482:	e8 69 54 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004487:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000448e:	48 89 c6             	mov    %rax,%rsi
ffffffff80004491:	48 c7 c2 3e 9c 01 80 	mov    $0xffffffff80019c3e,%rdx
ffffffff80004498:	48 c7 c1 44 8b 01 80 	mov    $0xffffffff80018b44,%rcx
ffffffff8000449f:	41 b8 aa 00 00 00    	mov    $0xaa,%r8d
ffffffff800044a5:	31 c0                	xor    %eax,%eax
ffffffff800044a7:	e8 94 d4 00 00       	call   ffffffff80011940 <printf_>
ffffffff800044ac:	eb 04                	jmp    ffffffff800044b2 <parse_field_sig+0x1b2>
ffffffff800044ae:	eb 00                	jmp    ffffffff800044b0 <parse_field_sig+0x1b0>
ffffffff800044b0:	eb 00                	jmp    ffffffff800044b2 <parse_field_sig+0x1b2>
ffffffff800044b2:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800044b5:	48 83 c4 30          	add    $0x30,%rsp
ffffffff800044b9:	5d                   	pop    %rbp
ffffffff800044ba:	c3                   	ret    
ffffffff800044bb:	cc                   	int3   
ffffffff800044bc:	cc                   	int3   
ffffffff800044bd:	cc                   	int3   
ffffffff800044be:	cc                   	int3   
ffffffff800044bf:	cc                   	int3   

ffffffff800044c0 <parse_custom_mod>:
ffffffff800044c0:	55                   	push   %rbp
ffffffff800044c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800044c4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800044c8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff800044cc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff800044d0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff800044d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800044db:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff800044e0:	77 38                	ja     ffffffff8000451a <parse_custom_mod+0x5a>
ffffffff800044e2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800044e9:	31 c0                	xor    %eax,%eax
ffffffff800044eb:	e8 00 54 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800044f0:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800044f3:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800044fa:	48 89 c6             	mov    %rax,%rsi
ffffffff800044fd:	48 c7 c1 15 9d 01 80 	mov    $0xffffffff80019d15,%rcx
ffffffff80004504:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff8000450b:	41 b9 1e 00 00 00    	mov    $0x1e,%r9d
ffffffff80004511:	31 c0                	xor    %eax,%eax
ffffffff80004513:	e8 28 d4 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004518:	eb 79                	jmp    ffffffff80004593 <parse_custom_mod+0xd3>
ffffffff8000451a:	eb 00                	jmp    ffffffff8000451c <parse_custom_mod+0x5c>
ffffffff8000451c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004520:	48 8b 00             	mov    (%rax),%rax
ffffffff80004523:	0f b6 00             	movzbl (%rax),%eax
ffffffff80004526:	83 f8 20             	cmp    $0x20,%eax
ffffffff80004529:	74 0f                	je     ffffffff8000453a <parse_custom_mod+0x7a>
ffffffff8000452b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000452f:	48 8b 00             	mov    (%rax),%rax
ffffffff80004532:	0f b6 00             	movzbl (%rax),%eax
ffffffff80004535:	83 f8 1f             	cmp    $0x1f,%eax
ffffffff80004538:	75 50                	jne    ffffffff8000458a <parse_custom_mod+0xca>
ffffffff8000453a:	eb 00                	jmp    ffffffff8000453c <parse_custom_mod+0x7c>
ffffffff8000453c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004540:	48 8b 08             	mov    (%rax),%rcx
ffffffff80004543:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80004547:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000454a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000454e:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80004552:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff80004556:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000455a:	eb 00                	jmp    ffffffff8000455c <parse_custom_mod+0x9c>
ffffffff8000455c:	31 c0                	xor    %eax,%eax
ffffffff8000455e:	e8 8d 53 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004563:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000456a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000456d:	48 c7 c2 15 9d 01 80 	mov    $0xffffffff80019d15,%rdx
ffffffff80004574:	48 c7 c1 44 8b 01 80 	mov    $0xffffffff80018b44,%rcx
ffffffff8000457b:	41 b8 25 00 00 00    	mov    $0x25,%r8d
ffffffff80004581:	31 c0                	xor    %eax,%eax
ffffffff80004583:	e8 b8 d3 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004588:	0f 0b                	ud2    
ffffffff8000458a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000458e:	c6 00 00             	movb   $0x0,(%rax)
ffffffff80004591:	eb 00                	jmp    ffffffff80004593 <parse_custom_mod+0xd3>
ffffffff80004593:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80004596:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000459a:	5d                   	pop    %rbp
ffffffff8000459b:	c3                   	ret    
ffffffff8000459c:	cc                   	int3   
ffffffff8000459d:	cc                   	int3   
ffffffff8000459e:	cc                   	int3   
ffffffff8000459f:	cc                   	int3   

ffffffff800045a0 <parse_type>:
ffffffff800045a0:	55                   	push   %rbp
ffffffff800045a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800045a4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff800045a8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff800045ac:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff800045b0:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800045b4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff800045bb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800045bf:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff800045c4:	77 3b                	ja     ffffffff80004601 <parse_type+0x61>
ffffffff800045c6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800045cd:	31 c0                	xor    %eax,%eax
ffffffff800045cf:	e8 1c 53 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800045d4:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800045d7:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800045de:	48 89 c6             	mov    %rax,%rsi
ffffffff800045e1:	48 c7 c1 75 99 01 80 	mov    $0xffffffff80019975,%rcx
ffffffff800045e8:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff800045ef:	41 b9 6c 00 00 00    	mov    $0x6c,%r9d
ffffffff800045f5:	31 c0                	xor    %eax,%eax
ffffffff800045f7:	e8 44 d3 00 00       	call   ffffffff80011940 <printf_>
ffffffff800045fc:	e9 86 02 00 00       	jmp    ffffffff80004887 <parse_type+0x2e7>
ffffffff80004601:	eb 00                	jmp    ffffffff80004603 <parse_type+0x63>
ffffffff80004603:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004607:	48 8b 00             	mov    (%rax),%rax
ffffffff8000460a:	8a 00                	mov    (%rax),%al
ffffffff8000460c:	88 45 f2             	mov    %al,-0xe(%rbp)
ffffffff8000460f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004613:	48 8b 08             	mov    (%rax),%rcx
ffffffff80004616:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000461a:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000461d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004621:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff80004625:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff80004629:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000462d:	8a 45 f2             	mov    -0xe(%rbp),%al
ffffffff80004630:	88 45 f3             	mov    %al,-0xd(%rbp)
ffffffff80004633:	0f b6 45 f3          	movzbl -0xd(%rbp),%eax
ffffffff80004637:	83 c0 fe             	add    $0xfffffffe,%eax
ffffffff8000463a:	89 c1                	mov    %eax,%ecx
ffffffff8000463c:	83 e9 1b             	sub    $0x1b,%ecx
ffffffff8000463f:	0f 87 40 02 00 00    	ja     ffffffff80004885 <parse_type+0x2e5>
ffffffff80004645:	48 8b 04 c5 38 80 01 	mov    -0x7ffe7fc8(,%rax,8),%rax
ffffffff8000464c:	80 
ffffffff8000464d:	ff e0                	jmp    *%rax
ffffffff8000464f:	48 8b 05 fa 7a 21 00 	mov    0x217afa(%rip),%rax        # ffffffff8021c150 <tSystem_Boolean>
ffffffff80004656:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000465a:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000465d:	e9 23 02 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004662:	48 8b 05 ef 7a 21 00 	mov    0x217aef(%rip),%rax        # ffffffff8021c158 <tSystem_Char>
ffffffff80004669:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000466d:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004670:	e9 10 02 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004675:	48 8b 05 e4 7a 21 00 	mov    0x217ae4(%rip),%rax        # ffffffff8021c160 <tSystem_SByte>
ffffffff8000467c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80004680:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004683:	e9 fd 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004688:	48 8b 05 d9 7a 21 00 	mov    0x217ad9(%rip),%rax        # ffffffff8021c168 <tSystem_Byte>
ffffffff8000468f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80004693:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004696:	e9 ea 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff8000469b:	48 8b 05 ce 7a 21 00 	mov    0x217ace(%rip),%rax        # ffffffff8021c170 <tSystem_Int16>
ffffffff800046a2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800046a6:	48 89 01             	mov    %rax,(%rcx)
ffffffff800046a9:	e9 d7 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff800046ae:	48 8b 05 c3 7a 21 00 	mov    0x217ac3(%rip),%rax        # ffffffff8021c178 <tSystem_UInt16>
ffffffff800046b5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800046b9:	48 89 01             	mov    %rax,(%rcx)
ffffffff800046bc:	e9 c4 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff800046c1:	48 8b 05 b8 7a 21 00 	mov    0x217ab8(%rip),%rax        # ffffffff8021c180 <tSystem_Int32>
ffffffff800046c8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800046cc:	48 89 01             	mov    %rax,(%rcx)
ffffffff800046cf:	e9 b1 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff800046d4:	48 8b 05 ad 7a 21 00 	mov    0x217aad(%rip),%rax        # ffffffff8021c188 <tSystem_UInt32>
ffffffff800046db:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800046df:	48 89 01             	mov    %rax,(%rcx)
ffffffff800046e2:	e9 9e 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff800046e7:	48 8b 05 a2 7a 21 00 	mov    0x217aa2(%rip),%rax        # ffffffff8021c190 <tSystem_Int64>
ffffffff800046ee:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800046f2:	48 89 01             	mov    %rax,(%rcx)
ffffffff800046f5:	e9 8b 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff800046fa:	48 8b 05 97 7a 21 00 	mov    0x217a97(%rip),%rax        # ffffffff8021c198 <tSystem_UInt64>
ffffffff80004701:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80004705:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004708:	e9 78 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff8000470d:	48 8b 05 8c 7a 21 00 	mov    0x217a8c(%rip),%rax        # ffffffff8021c1a0 <tSystem_Single>
ffffffff80004714:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80004718:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000471b:	e9 65 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004720:	48 8b 05 81 7a 21 00 	mov    0x217a81(%rip),%rax        # ffffffff8021c1a8 <tSystem_Double>
ffffffff80004727:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000472b:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000472e:	e9 52 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004733:	48 8b 05 76 7a 21 00 	mov    0x217a76(%rip),%rax        # ffffffff8021c1b0 <tSystem_IntPtr>
ffffffff8000473a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000473e:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004741:	e9 3f 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004746:	48 8b 05 6b 7a 21 00 	mov    0x217a6b(%rip),%rax        # ffffffff8021c1b8 <tSystem_UIntPtr>
ffffffff8000474d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80004751:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004754:	e9 2c 01 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004759:	eb 00                	jmp    ffffffff8000475b <parse_type+0x1bb>
ffffffff8000475b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000475f:	48 8d 75 e0          	lea    -0x20(%rbp),%rsi
ffffffff80004763:	e8 28 01 00 00       	call   ffffffff80004890 <parse_type_def_or_ref_or_spec_encoded>
ffffffff80004768:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000476b:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff8000476f:	74 31                	je     ffffffff800047a2 <parse_type+0x202>
ffffffff80004771:	31 c0                	xor    %eax,%eax
ffffffff80004773:	e8 78 51 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004778:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000477f:	48 89 c6             	mov    %rax,%rsi
ffffffff80004782:	48 c7 c2 75 99 01 80 	mov    $0xffffffff80019975,%rdx
ffffffff80004789:	48 c7 c1 44 8b 01 80 	mov    $0xffffffff80018b44,%rcx
ffffffff80004790:	41 b8 80 00 00 00    	mov    $0x80,%r8d
ffffffff80004796:	31 c0                	xor    %eax,%eax
ffffffff80004798:	e8 a3 d1 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000479d:	e9 e5 00 00 00       	jmp    ffffffff80004887 <parse_type+0x2e7>
ffffffff800047a2:	eb 00                	jmp    ffffffff800047a4 <parse_type+0x204>
ffffffff800047a4:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff800047a8:	8b 75 e0             	mov    -0x20(%rbp),%esi
ffffffff800047ab:	e8 80 24 00 00       	call   ffffffff80006c30 <get_type_by_token>
ffffffff800047b0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800047b4:	48 89 01             	mov    %rax,(%rcx)
ffffffff800047b7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800047bb:	48 83 38 00          	cmpq   $0x0,(%rax)
ffffffff800047bf:	75 3b                	jne    ffffffff800047fc <parse_type+0x25c>
ffffffff800047c1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800047c8:	31 c0                	xor    %eax,%eax
ffffffff800047ca:	e8 21 51 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800047cf:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800047d2:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800047d9:	48 89 c6             	mov    %rax,%rsi
ffffffff800047dc:	48 c7 c1 75 99 01 80 	mov    $0xffffffff80019975,%rcx
ffffffff800047e3:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff800047ea:	41 b9 82 00 00 00    	mov    $0x82,%r9d
ffffffff800047f0:	31 c0                	xor    %eax,%eax
ffffffff800047f2:	e8 49 d1 00 00       	call   ffffffff80011940 <printf_>
ffffffff800047f7:	e9 8b 00 00 00       	jmp    ffffffff80004887 <parse_type+0x2e7>
ffffffff800047fc:	eb 00                	jmp    ffffffff800047fe <parse_type+0x25e>
ffffffff800047fe:	e9 82 00 00 00       	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004803:	48 8b 05 26 79 21 00 	mov    0x217926(%rip),%rax        # ffffffff8021c130 <tSystem_Object>
ffffffff8000480a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000480e:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004811:	eb 72                	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004813:	48 8b 05 2e 79 21 00 	mov    0x21792e(%rip),%rax        # ffffffff8021c148 <tSystem_String>
ffffffff8000481a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000481e:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004821:	eb 62                	jmp    ffffffff80004885 <parse_type+0x2e5>
ffffffff80004823:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8000482a:	00 
ffffffff8000482b:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000482f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80004833:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
ffffffff80004837:	e8 64 fd ff ff       	call   ffffffff800045a0 <parse_type>
ffffffff8000483c:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000483f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80004843:	74 2e                	je     ffffffff80004873 <parse_type+0x2d3>
ffffffff80004845:	31 c0                	xor    %eax,%eax
ffffffff80004847:	e8 a4 50 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000484c:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80004853:	48 89 c6             	mov    %rax,%rsi
ffffffff80004856:	48 c7 c2 75 99 01 80 	mov    $0xffffffff80019975,%rdx
ffffffff8000485d:	48 c7 c1 44 8b 01 80 	mov    $0xffffffff80018b44,%rcx
ffffffff80004864:	41 b8 8e 00 00 00    	mov    $0x8e,%r8d
ffffffff8000486a:	31 c0                	xor    %eax,%eax
ffffffff8000486c:	e8 cf d0 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004871:	eb 14                	jmp    ffffffff80004887 <parse_type+0x2e7>
ffffffff80004873:	eb 00                	jmp    ffffffff80004875 <parse_type+0x2d5>
ffffffff80004875:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80004879:	e8 b2 24 00 00       	call   ffffffff80006d30 <get_array_type>
ffffffff8000487e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80004882:	48 89 01             	mov    %rax,(%rcx)
ffffffff80004885:	eb 00                	jmp    ffffffff80004887 <parse_type+0x2e7>
ffffffff80004887:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000488a:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000488e:	5d                   	pop    %rbp
ffffffff8000488f:	c3                   	ret    

ffffffff80004890 <parse_type_def_or_ref_or_spec_encoded>:
ffffffff80004890:	55                   	push   %rbp
ffffffff80004891:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004894:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80004898:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000489c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff800048a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff800048a7:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff800048ab:	48 8d 75 f4          	lea    -0xc(%rbp),%rsi
ffffffff800048af:	e8 bc f7 ff ff       	call   ffffffff80004070 <parse_compressed_integer>
ffffffff800048b4:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800048b7:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800048bb:	74 31                	je     ffffffff800048ee <parse_type_def_or_ref_or_spec_encoded+0x5e>
ffffffff800048bd:	31 c0                	xor    %eax,%eax
ffffffff800048bf:	e8 2c 50 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800048c4:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff800048cb:	48 89 c6             	mov    %rax,%rsi
ffffffff800048ce:	48 c7 c2 ec 92 01 80 	mov    $0xffffffff800192ec,%rdx
ffffffff800048d5:	48 c7 c1 44 8b 01 80 	mov    $0xffffffff80018b44,%rcx
ffffffff800048dc:	41 b8 55 00 00 00    	mov    $0x55,%r8d
ffffffff800048e2:	31 c0                	xor    %eax,%eax
ffffffff800048e4:	e8 57 d0 00 00       	call   ffffffff80011940 <printf_>
ffffffff800048e9:	e9 98 00 00 00       	jmp    ffffffff80004986 <parse_type_def_or_ref_or_spec_encoded+0xf6>
ffffffff800048ee:	eb 00                	jmp    ffffffff800048f0 <parse_type_def_or_ref_or_spec_encoded+0x60>
ffffffff800048f0:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800048f3:	83 e0 03             	and    $0x3,%eax
ffffffff800048f6:	48 8d 04 85 20 a2 01 	lea    -0x7ffe5de0(,%rax,4),%rax
ffffffff800048fd:	80 
ffffffff800048fe:	8b 00                	mov    (%rax),%eax
ffffffff80004900:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80004903:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%rbp)
ffffffff80004907:	75 38                	jne    ffffffff80004941 <parse_type_def_or_ref_or_spec_encoded+0xb1>
ffffffff80004909:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004910:	31 c0                	xor    %eax,%eax
ffffffff80004912:	e8 d9 4f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004917:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000491a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004921:	48 89 c6             	mov    %rax,%rsi
ffffffff80004924:	48 c7 c1 ec 92 01 80 	mov    $0xffffffff800192ec,%rcx
ffffffff8000492b:	49 c7 c0 44 8b 01 80 	mov    $0xffffffff80018b44,%r8
ffffffff80004932:	41 b9 59 00 00 00    	mov    $0x59,%r9d
ffffffff80004938:	31 c0                	xor    %eax,%eax
ffffffff8000493a:	e8 01 d0 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000493f:	eb 45                	jmp    ffffffff80004986 <parse_type_def_or_ref_or_spec_encoded+0xf6>
ffffffff80004941:	eb 00                	jmp    ffffffff80004943 <parse_type_def_or_ref_or_spec_encoded+0xb3>
ffffffff80004943:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80004946:	c1 e8 02             	shr    $0x2,%eax
ffffffff80004949:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000494c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80004950:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80004953:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80004956:	81 e1 ff ff ff 00    	and    $0xffffff,%ecx
ffffffff8000495c:	81 e2 00 00 00 ff    	and    $0xff000000,%edx
ffffffff80004962:	09 ca                	or     %ecx,%edx
ffffffff80004964:	89 55 f8             	mov    %edx,-0x8(%rbp)
ffffffff80004967:	8b 4d f0             	mov    -0x10(%rbp),%ecx
ffffffff8000496a:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff8000496d:	81 e1 ff 00 00 00    	and    $0xff,%ecx
ffffffff80004973:	c1 e1 18             	shl    $0x18,%ecx
ffffffff80004976:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
ffffffff8000497c:	09 ca                	or     %ecx,%edx
ffffffff8000497e:	89 55 f8             	mov    %edx,-0x8(%rbp)
ffffffff80004981:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff80004984:	89 08                	mov    %ecx,(%rax)
ffffffff80004986:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80004989:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000498d:	5d                   	pop    %rbp
ffffffff8000498e:	c3                   	ret    
ffffffff8000498f:	cc                   	int3   

ffffffff80004990 <pe_get_rva_data>:
ffffffff80004990:	55                   	push   %rbp
ffffffff80004991:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004994:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80004998:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000499c:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff800049a0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff800049a7:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff800049ab:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800049af:	48 3b 41 18          	cmp    0x18(%rcx),%rax
ffffffff800049b3:	0f 83 d9 00 00 00    	jae    ffffffff80004a92 <pe_get_rva_data+0x102>
ffffffff800049b9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800049bd:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800049c1:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff800049c5:	48 6b c9 28          	imul   $0x28,%rcx,%rcx
ffffffff800049c9:	48 01 c8             	add    %rcx,%rax
ffffffff800049cc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800049d0:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800049d3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800049d7:	3b 41 0c             	cmp    0xc(%rcx),%eax
ffffffff800049da:	73 05                	jae    ffffffff800049e1 <pe_get_rva_data+0x51>
ffffffff800049dc:	e9 a3 00 00 00       	jmp    ffffffff80004a84 <pe_get_rva_data+0xf4>
ffffffff800049e1:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800049e4:	03 45 ec             	add    -0x14(%rbp),%eax
ffffffff800049e7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800049eb:	8b 49 0c             	mov    0xc(%rcx),%ecx
ffffffff800049ee:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff800049f2:	03 4a 08             	add    0x8(%rdx),%ecx
ffffffff800049f5:	39 c8                	cmp    %ecx,%eax
ffffffff800049f7:	76 05                	jbe    ffffffff800049fe <pe_get_rva_data+0x6e>
ffffffff800049f9:	e9 86 00 00 00       	jmp    ffffffff80004a84 <pe_get_rva_data+0xf4>
ffffffff800049fe:	8b 7d ec             	mov    -0x14(%rbp),%edi
ffffffff80004a01:	e8 6a 87 00 00       	call   ffffffff8000d170 <malloc>
ffffffff80004a06:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80004a0a:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80004a0f:	75 0a                	jne    ffffffff80004a1b <pe_get_rva_data+0x8b>
ffffffff80004a11:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80004a18:	00 
ffffffff80004a19:	eb 7f                	jmp    ffffffff80004a9a <pe_get_rva_data+0x10a>
ffffffff80004a1b:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80004a1e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80004a22:	2b 41 0c             	sub    0xc(%rcx),%eax
ffffffff80004a25:	89 c0                	mov    %eax,%eax
ffffffff80004a27:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80004a2b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004a2f:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80004a32:	48 03 45 b8          	add    -0x48(%rbp),%rax
ffffffff80004a36:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80004a3a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004a3e:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80004a41:	48 2b 45 b8          	sub    -0x48(%rbp),%rax
ffffffff80004a45:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80004a49:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80004a4c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80004a50:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004a54:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80004a58:	76 08                	jbe    ffffffff80004a62 <pe_get_rva_data+0xd2>
ffffffff80004a5a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80004a5e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80004a62:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80004a66:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80004a6a:	48 8b 30             	mov    (%rax),%rsi
ffffffff80004a6d:	48 03 75 b0          	add    -0x50(%rbp),%rsi
ffffffff80004a71:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80004a75:	e8 e6 a7 00 00       	call   ffffffff8000f260 <memcpy>
ffffffff80004a7a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80004a7e:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80004a82:	eb 16                	jmp    ffffffff80004a9a <pe_get_rva_data+0x10a>
ffffffff80004a84:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80004a87:	83 c0 01             	add    $0x1,%eax
ffffffff80004a8a:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80004a8d:	e9 15 ff ff ff       	jmp    ffffffff800049a7 <pe_get_rva_data+0x17>
ffffffff80004a92:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80004a99:	00 
ffffffff80004a9a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80004a9e:	48 83 c4 50          	add    $0x50,%rsp
ffffffff80004aa2:	5d                   	pop    %rbp
ffffffff80004aa3:	c3                   	ret    
ffffffff80004aa4:	cc                   	int3   
ffffffff80004aa5:	cc                   	int3   
ffffffff80004aa6:	cc                   	int3   
ffffffff80004aa7:	cc                   	int3   
ffffffff80004aa8:	cc                   	int3   
ffffffff80004aa9:	cc                   	int3   
ffffffff80004aaa:	cc                   	int3   
ffffffff80004aab:	cc                   	int3   
ffffffff80004aac:	cc                   	int3   
ffffffff80004aad:	cc                   	int3   
ffffffff80004aae:	cc                   	int3   
ffffffff80004aaf:	cc                   	int3   

ffffffff80004ab0 <pe_parse>:
ffffffff80004ab0:	55                   	push   %rbp
ffffffff80004ab1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80004ab4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80004ab8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80004abc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80004ac3:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80004aca:	00 
ffffffff80004acb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004acf:	b9 3c 00 00 00       	mov    $0x3c,%ecx
ffffffff80004ad4:	48 3b 48 08          	cmp    0x8(%rax),%rcx
ffffffff80004ad8:	72 60                	jb     ffffffff80004b3a <pe_parse+0x8a>
ffffffff80004ada:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004ae1:	31 c0                	xor    %eax,%eax
ffffffff80004ae3:	e8 08 4e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004ae8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80004aec:	48 8b 49 08          	mov    0x8(%rcx),%rcx
ffffffff80004af0:	48 c7 c7 12 93 01 80 	mov    $0xffffffff80019312,%rdi
ffffffff80004af7:	48 89 c6             	mov    %rax,%rsi
ffffffff80004afa:	ba 3c 00 00 00       	mov    $0x3c,%edx
ffffffff80004aff:	31 c0                	xor    %eax,%eax
ffffffff80004b01:	e8 3a ce 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004b06:	31 c0                	xor    %eax,%eax
ffffffff80004b08:	e8 e3 4d 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004b0d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004b10:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004b17:	48 89 c6             	mov    %rax,%rsi
ffffffff80004b1a:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004b21:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004b28:	41 b9 45 00 00 00    	mov    $0x45,%r9d
ffffffff80004b2e:	31 c0                	xor    %eax,%eax
ffffffff80004b30:	e8 0b ce 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004b35:	e9 b1 09 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004b3a:	eb 00                	jmp    ffffffff80004b3c <pe_parse+0x8c>
ffffffff80004b3c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004b40:	48 8b 00             	mov    (%rax),%rax
ffffffff80004b43:	8b 40 3c             	mov    0x3c(%rax),%eax
ffffffff80004b46:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff80004b49:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80004b4c:	83 c0 04             	add    $0x4,%eax
ffffffff80004b4f:	89 c0                	mov    %eax,%eax
ffffffff80004b51:	48 83 c0 14          	add    $0x14,%rax
ffffffff80004b55:	48 05 e0 00 00 00    	add    $0xe0,%rax
ffffffff80004b5b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80004b5e:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80004b61:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80004b65:	48 3b 41 08          	cmp    0x8(%rcx),%rax
ffffffff80004b69:	72 3b                	jb     ffffffff80004ba6 <pe_parse+0xf6>
ffffffff80004b6b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004b72:	31 c0                	xor    %eax,%eax
ffffffff80004b74:	e8 77 4d 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004b79:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004b7c:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004b83:	48 89 c6             	mov    %rax,%rsi
ffffffff80004b86:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004b8d:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004b94:	41 b9 48 00 00 00    	mov    $0x48,%r9d
ffffffff80004b9a:	31 c0                	xor    %eax,%eax
ffffffff80004b9c:	e8 9f cd 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004ba1:	e9 45 09 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004ba6:	eb 00                	jmp    ffffffff80004ba8 <pe_parse+0xf8>
ffffffff80004ba8:	eb 00                	jmp    ffffffff80004baa <pe_parse+0xfa>
ffffffff80004baa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004bae:	48 8b 00             	mov    (%rax),%rax
ffffffff80004bb1:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80004bb4:	83 c1 00             	add    $0x0,%ecx
ffffffff80004bb7:	89 c9                	mov    %ecx,%ecx
ffffffff80004bb9:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff80004bbd:	83 f8 50             	cmp    $0x50,%eax
ffffffff80004bc0:	74 3b                	je     ffffffff80004bfd <pe_parse+0x14d>
ffffffff80004bc2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004bc9:	31 c0                	xor    %eax,%eax
ffffffff80004bcb:	e8 20 4d 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004bd0:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004bd3:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004bda:	48 89 c6             	mov    %rax,%rsi
ffffffff80004bdd:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004be4:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004beb:	41 b9 4b 00 00 00    	mov    $0x4b,%r9d
ffffffff80004bf1:	31 c0                	xor    %eax,%eax
ffffffff80004bf3:	e8 48 cd 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004bf8:	e9 ee 08 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004bfd:	eb 00                	jmp    ffffffff80004bff <pe_parse+0x14f>
ffffffff80004bff:	eb 00                	jmp    ffffffff80004c01 <pe_parse+0x151>
ffffffff80004c01:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004c05:	48 8b 00             	mov    (%rax),%rax
ffffffff80004c08:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80004c0b:	83 c1 01             	add    $0x1,%ecx
ffffffff80004c0e:	89 c9                	mov    %ecx,%ecx
ffffffff80004c10:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff80004c14:	83 f8 45             	cmp    $0x45,%eax
ffffffff80004c17:	74 3b                	je     ffffffff80004c54 <pe_parse+0x1a4>
ffffffff80004c19:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004c20:	31 c0                	xor    %eax,%eax
ffffffff80004c22:	e8 c9 4c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004c27:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004c2a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004c31:	48 89 c6             	mov    %rax,%rsi
ffffffff80004c34:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004c3b:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004c42:	41 b9 4c 00 00 00    	mov    $0x4c,%r9d
ffffffff80004c48:	31 c0                	xor    %eax,%eax
ffffffff80004c4a:	e8 f1 cc 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004c4f:	e9 97 08 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004c54:	eb 00                	jmp    ffffffff80004c56 <pe_parse+0x1a6>
ffffffff80004c56:	eb 00                	jmp    ffffffff80004c58 <pe_parse+0x1a8>
ffffffff80004c58:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004c5c:	48 8b 00             	mov    (%rax),%rax
ffffffff80004c5f:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80004c62:	83 c1 02             	add    $0x2,%ecx
ffffffff80004c65:	89 c9                	mov    %ecx,%ecx
ffffffff80004c67:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff80004c6b:	83 f8 00             	cmp    $0x0,%eax
ffffffff80004c6e:	74 3b                	je     ffffffff80004cab <pe_parse+0x1fb>
ffffffff80004c70:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004c77:	31 c0                	xor    %eax,%eax
ffffffff80004c79:	e8 72 4c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004c7e:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004c81:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004c88:	48 89 c6             	mov    %rax,%rsi
ffffffff80004c8b:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004c92:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004c99:	41 b9 4d 00 00 00    	mov    $0x4d,%r9d
ffffffff80004c9f:	31 c0                	xor    %eax,%eax
ffffffff80004ca1:	e8 9a cc 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004ca6:	e9 40 08 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004cab:	eb 00                	jmp    ffffffff80004cad <pe_parse+0x1fd>
ffffffff80004cad:	eb 00                	jmp    ffffffff80004caf <pe_parse+0x1ff>
ffffffff80004caf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004cb3:	48 8b 00             	mov    (%rax),%rax
ffffffff80004cb6:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80004cb9:	83 c1 03             	add    $0x3,%ecx
ffffffff80004cbc:	89 c9                	mov    %ecx,%ecx
ffffffff80004cbe:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff80004cc2:	83 f8 00             	cmp    $0x0,%eax
ffffffff80004cc5:	74 3b                	je     ffffffff80004d02 <pe_parse+0x252>
ffffffff80004cc7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004cce:	31 c0                	xor    %eax,%eax
ffffffff80004cd0:	e8 1b 4c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004cd5:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004cd8:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004cdf:	48 89 c6             	mov    %rax,%rsi
ffffffff80004ce2:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004ce9:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004cf0:	41 b9 4e 00 00 00    	mov    $0x4e,%r9d
ffffffff80004cf6:	31 c0                	xor    %eax,%eax
ffffffff80004cf8:	e8 43 cc 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004cfd:	e9 e9 07 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004d02:	eb 00                	jmp    ffffffff80004d04 <pe_parse+0x254>
ffffffff80004d04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004d08:	48 8b 00             	mov    (%rax),%rax
ffffffff80004d0b:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80004d0e:	83 c1 04             	add    $0x4,%ecx
ffffffff80004d11:	89 c9                	mov    %ecx,%ecx
ffffffff80004d13:	48 01 c8             	add    %rcx,%rax
ffffffff80004d16:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80004d1a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80004d1e:	0f b7 00             	movzwl (%rax),%eax
ffffffff80004d21:	3d 4c 01 00 00       	cmp    $0x14c,%eax
ffffffff80004d26:	74 3b                	je     ffffffff80004d63 <pe_parse+0x2b3>
ffffffff80004d28:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004d2f:	31 c0                	xor    %eax,%eax
ffffffff80004d31:	e8 ba 4b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004d36:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004d39:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004d40:	48 89 c6             	mov    %rax,%rsi
ffffffff80004d43:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004d4a:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004d51:	41 b9 52 00 00 00    	mov    $0x52,%r9d
ffffffff80004d57:	31 c0                	xor    %eax,%eax
ffffffff80004d59:	e8 e2 cb 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004d5e:	e9 88 07 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004d63:	eb 00                	jmp    ffffffff80004d65 <pe_parse+0x2b5>
ffffffff80004d65:	eb 00                	jmp    ffffffff80004d67 <pe_parse+0x2b7>
ffffffff80004d67:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80004d6b:	0f b7 40 10          	movzwl 0x10(%rax),%eax
ffffffff80004d6f:	48 3d e0 00 00 00    	cmp    $0xe0,%rax
ffffffff80004d75:	74 3b                	je     ffffffff80004db2 <pe_parse+0x302>
ffffffff80004d77:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004d7e:	31 c0                	xor    %eax,%eax
ffffffff80004d80:	e8 6b 4b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004d85:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004d88:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004d8f:	48 89 c6             	mov    %rax,%rsi
ffffffff80004d92:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004d99:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004da0:	41 b9 53 00 00 00    	mov    $0x53,%r9d
ffffffff80004da6:	31 c0                	xor    %eax,%eax
ffffffff80004da8:	e8 93 cb 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004dad:	e9 39 07 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004db2:	eb 00                	jmp    ffffffff80004db4 <pe_parse+0x304>
ffffffff80004db4:	eb 00                	jmp    ffffffff80004db6 <pe_parse+0x306>
ffffffff80004db6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80004dba:	0f b7 40 12          	movzwl 0x12(%rax),%eax
ffffffff80004dbe:	83 e0 01             	and    $0x1,%eax
ffffffff80004dc1:	83 f8 00             	cmp    $0x0,%eax
ffffffff80004dc4:	74 3b                	je     ffffffff80004e01 <pe_parse+0x351>
ffffffff80004dc6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004dcd:	31 c0                	xor    %eax,%eax
ffffffff80004dcf:	e8 1c 4b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004dd4:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004dd7:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004dde:	48 89 c6             	mov    %rax,%rsi
ffffffff80004de1:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004de8:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004def:	41 b9 54 00 00 00    	mov    $0x54,%r9d
ffffffff80004df5:	31 c0                	xor    %eax,%eax
ffffffff80004df7:	e8 44 cb 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004dfc:	e9 ea 06 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004e01:	eb 00                	jmp    ffffffff80004e03 <pe_parse+0x353>
ffffffff80004e03:	eb 00                	jmp    ffffffff80004e05 <pe_parse+0x355>
ffffffff80004e05:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80004e09:	0f b7 40 12          	movzwl 0x12(%rax),%eax
ffffffff80004e0d:	83 e0 02             	and    $0x2,%eax
ffffffff80004e10:	83 f8 00             	cmp    $0x0,%eax
ffffffff80004e13:	75 3b                	jne    ffffffff80004e50 <pe_parse+0x3a0>
ffffffff80004e15:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004e1c:	31 c0                	xor    %eax,%eax
ffffffff80004e1e:	e8 cd 4a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004e23:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004e26:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004e2d:	48 89 c6             	mov    %rax,%rsi
ffffffff80004e30:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004e37:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004e3e:	41 b9 55 00 00 00    	mov    $0x55,%r9d
ffffffff80004e44:	31 c0                	xor    %eax,%eax
ffffffff80004e46:	e8 f5 ca 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004e4b:	e9 9b 06 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004e50:	eb 00                	jmp    ffffffff80004e52 <pe_parse+0x3a2>
ffffffff80004e52:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80004e56:	48 8b 00             	mov    (%rax),%rax
ffffffff80004e59:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80004e5c:	83 c1 04             	add    $0x4,%ecx
ffffffff80004e5f:	89 c9                	mov    %ecx,%ecx
ffffffff80004e61:	48 83 c1 14          	add    $0x14,%rcx
ffffffff80004e65:	48 01 c8             	add    %rcx,%rax
ffffffff80004e68:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80004e6c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004e70:	0f b7 00             	movzwl (%rax),%eax
ffffffff80004e73:	3d 0b 01 00 00       	cmp    $0x10b,%eax
ffffffff80004e78:	74 3b                	je     ffffffff80004eb5 <pe_parse+0x405>
ffffffff80004e7a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004e81:	31 c0                	xor    %eax,%eax
ffffffff80004e83:	e8 68 4a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004e88:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004e8b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004e92:	48 89 c6             	mov    %rax,%rsi
ffffffff80004e95:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004e9c:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004ea3:	41 b9 59 00 00 00    	mov    $0x59,%r9d
ffffffff80004ea9:	31 c0                	xor    %eax,%eax
ffffffff80004eab:	e8 90 ca 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004eb0:	e9 36 06 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004eb5:	eb 00                	jmp    ffffffff80004eb7 <pe_parse+0x407>
ffffffff80004eb7:	eb 00                	jmp    ffffffff80004eb9 <pe_parse+0x409>
ffffffff80004eb9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004ebd:	8b 40 1c             	mov    0x1c(%rax),%eax
ffffffff80004ec0:	25 ff ff 00 00       	and    $0xffff,%eax
ffffffff80004ec5:	83 f8 00             	cmp    $0x0,%eax
ffffffff80004ec8:	74 3b                	je     ffffffff80004f05 <pe_parse+0x455>
ffffffff80004eca:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004ed1:	31 c0                	xor    %eax,%eax
ffffffff80004ed3:	e8 18 4a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004ed8:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004edb:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004ee2:	48 89 c6             	mov    %rax,%rsi
ffffffff80004ee5:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004eec:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004ef3:	41 b9 5a 00 00 00    	mov    $0x5a,%r9d
ffffffff80004ef9:	31 c0                	xor    %eax,%eax
ffffffff80004efb:	e8 40 ca 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004f00:	e9 e6 05 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004f05:	eb 00                	jmp    ffffffff80004f07 <pe_parse+0x457>
ffffffff80004f07:	eb 00                	jmp    ffffffff80004f09 <pe_parse+0x459>
ffffffff80004f09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004f0d:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff80004f10:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80004f14:	3b 41 24             	cmp    0x24(%rcx),%eax
ffffffff80004f17:	77 3b                	ja     ffffffff80004f54 <pe_parse+0x4a4>
ffffffff80004f19:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004f20:	31 c0                	xor    %eax,%eax
ffffffff80004f22:	e8 c9 49 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004f27:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004f2a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004f31:	48 89 c6             	mov    %rax,%rsi
ffffffff80004f34:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004f3b:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004f42:	41 b9 5b 00 00 00    	mov    $0x5b,%r9d
ffffffff80004f48:	31 c0                	xor    %eax,%eax
ffffffff80004f4a:	e8 f1 c9 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004f4f:	e9 97 05 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004f54:	eb 00                	jmp    ffffffff80004f56 <pe_parse+0x4a6>
ffffffff80004f56:	eb 00                	jmp    ffffffff80004f58 <pe_parse+0x4a8>
ffffffff80004f58:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004f5c:	81 78 24 00 02 00 00 	cmpl   $0x200,0x24(%rax)
ffffffff80004f63:	74 3b                	je     ffffffff80004fa0 <pe_parse+0x4f0>
ffffffff80004f65:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004f6c:	31 c0                	xor    %eax,%eax
ffffffff80004f6e:	e8 7d 49 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004f73:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004f76:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004f7d:	48 89 c6             	mov    %rax,%rsi
ffffffff80004f80:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004f87:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004f8e:	41 b9 5c 00 00 00    	mov    $0x5c,%r9d
ffffffff80004f94:	31 c0                	xor    %eax,%eax
ffffffff80004f96:	e8 a5 c9 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004f9b:	e9 4b 05 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004fa0:	eb 00                	jmp    ffffffff80004fa2 <pe_parse+0x4f2>
ffffffff80004fa2:	eb 00                	jmp    ffffffff80004fa4 <pe_parse+0x4f4>
ffffffff80004fa4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004fa8:	83 78 58 00          	cmpl   $0x0,0x58(%rax)
ffffffff80004fac:	74 3b                	je     ffffffff80004fe9 <pe_parse+0x539>
ffffffff80004fae:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004fb5:	31 c0                	xor    %eax,%eax
ffffffff80004fb7:	e8 34 49 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80004fbc:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80004fbf:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80004fc6:	48 89 c6             	mov    %rax,%rsi
ffffffff80004fc9:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80004fd0:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80004fd7:	41 b9 5f 00 00 00    	mov    $0x5f,%r9d
ffffffff80004fdd:	31 c0                	xor    %eax,%eax
ffffffff80004fdf:	e8 5c c9 00 00       	call   ffffffff80011940 <printf_>
ffffffff80004fe4:	e9 02 05 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80004fe9:	eb 00                	jmp    ffffffff80004feb <pe_parse+0x53b>
ffffffff80004feb:	eb 00                	jmp    ffffffff80004fed <pe_parse+0x53d>
ffffffff80004fed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80004ff1:	83 78 5c 10          	cmpl   $0x10,0x5c(%rax)
ffffffff80004ff5:	74 3b                	je     ffffffff80005032 <pe_parse+0x582>
ffffffff80004ff7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80004ffe:	31 c0                	xor    %eax,%eax
ffffffff80005000:	e8 eb 48 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005005:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005008:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000500f:	48 89 c6             	mov    %rax,%rsi
ffffffff80005012:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005019:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80005020:	41 b9 60 00 00 00    	mov    $0x60,%r9d
ffffffff80005026:	31 c0                	xor    %eax,%eax
ffffffff80005028:	e8 13 c9 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000502d:	e9 b9 04 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80005032:	eb 00                	jmp    ffffffff80005034 <pe_parse+0x584>
ffffffff80005034:	eb 00                	jmp    ffffffff80005036 <pe_parse+0x586>
ffffffff80005036:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80005039:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000503d:	0f b7 49 02          	movzwl 0x2(%rcx),%ecx
ffffffff80005041:	48 6b c9 28          	imul   $0x28,%rcx,%rcx
ffffffff80005045:	48 01 c8             	add    %rcx,%rax
ffffffff80005048:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000504c:	48 3b 41 08          	cmp    0x8(%rcx),%rax
ffffffff80005050:	72 3b                	jb     ffffffff8000508d <pe_parse+0x5dd>
ffffffff80005052:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005059:	31 c0                	xor    %eax,%eax
ffffffff8000505b:	e8 90 48 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005060:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005063:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000506a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000506d:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005074:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff8000507b:	41 b9 63 00 00 00    	mov    $0x63,%r9d
ffffffff80005081:	31 c0                	xor    %eax,%eax
ffffffff80005083:	e8 b8 c8 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005088:	e9 5e 04 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff8000508d:	eb 00                	jmp    ffffffff8000508f <pe_parse+0x5df>
ffffffff8000508f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80005093:	0f b7 40 02          	movzwl 0x2(%rax),%eax
ffffffff80005097:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000509b:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000509f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800050a3:	48 8b 00             	mov    (%rax),%rax
ffffffff800050a6:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
ffffffff800050a9:	48 01 c8             	add    %rcx,%rax
ffffffff800050ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800050b0:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff800050b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff800050bb:	48 63 45 ec          	movslq -0x14(%rbp),%rax
ffffffff800050bf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800050c3:	48 3b 41 18          	cmp    0x18(%rcx),%rax
ffffffff800050c7:	0f 83 4d 01 00 00    	jae    ffffffff8000521a <pe_parse+0x76a>
ffffffff800050cd:	eb 00                	jmp    ffffffff800050cf <pe_parse+0x61f>
ffffffff800050cf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800050d3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800050d7:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff800050db:	48 6b c9 28          	imul   $0x28,%rcx,%rcx
ffffffff800050df:	48 01 c8             	add    %rcx,%rax
ffffffff800050e2:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff800050e5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800050e9:	31 d2                	xor    %edx,%edx
ffffffff800050eb:	f7 71 24             	divl   0x24(%rcx)
ffffffff800050ee:	83 fa 00             	cmp    $0x0,%edx
ffffffff800050f1:	74 3b                	je     ffffffff8000512e <pe_parse+0x67e>
ffffffff800050f3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800050fa:	31 c0                	xor    %eax,%eax
ffffffff800050fc:	e8 ef 47 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005101:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005104:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000510b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000510e:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005115:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff8000511c:	41 b9 69 00 00 00    	mov    $0x69,%r9d
ffffffff80005122:	31 c0                	xor    %eax,%eax
ffffffff80005124:	e8 17 c8 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005129:	e9 bd 03 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff8000512e:	eb 00                	jmp    ffffffff80005130 <pe_parse+0x680>
ffffffff80005130:	eb 00                	jmp    ffffffff80005132 <pe_parse+0x682>
ffffffff80005132:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80005136:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000513a:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff8000513e:	48 6b c9 28          	imul   $0x28,%rcx,%rcx
ffffffff80005142:	48 01 c8             	add    %rcx,%rax
ffffffff80005145:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff80005148:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000514c:	31 d2                	xor    %edx,%edx
ffffffff8000514e:	f7 71 24             	divl   0x24(%rcx)
ffffffff80005151:	83 fa 00             	cmp    $0x0,%edx
ffffffff80005154:	74 3b                	je     ffffffff80005191 <pe_parse+0x6e1>
ffffffff80005156:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000515d:	31 c0                	xor    %eax,%eax
ffffffff8000515f:	e8 8c 47 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005164:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005167:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000516e:	48 89 c6             	mov    %rax,%rsi
ffffffff80005171:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005178:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff8000517f:	41 b9 6a 00 00 00    	mov    $0x6a,%r9d
ffffffff80005185:	31 c0                	xor    %eax,%eax
ffffffff80005187:	e8 b4 c7 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000518c:	e9 5a 03 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80005191:	eb 00                	jmp    ffffffff80005193 <pe_parse+0x6e3>
ffffffff80005193:	eb 00                	jmp    ffffffff80005195 <pe_parse+0x6e5>
ffffffff80005195:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80005199:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000519d:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff800051a1:	48 6b c9 28          	imul   $0x28,%rcx,%rcx
ffffffff800051a5:	48 01 c8             	add    %rcx,%rax
ffffffff800051a8:	8b 40 14             	mov    0x14(%rax),%eax
ffffffff800051ab:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800051af:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff800051b3:	48 63 55 ec          	movslq -0x14(%rbp),%rdx
ffffffff800051b7:	48 6b d2 28          	imul   $0x28,%rdx,%rdx
ffffffff800051bb:	48 01 d1             	add    %rdx,%rcx
ffffffff800051be:	03 41 10             	add    0x10(%rcx),%eax
ffffffff800051c1:	89 c0                	mov    %eax,%eax
ffffffff800051c3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800051c7:	48 3b 41 08          	cmp    0x8(%rcx),%rax
ffffffff800051cb:	76 3b                	jbe    ffffffff80005208 <pe_parse+0x758>
ffffffff800051cd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800051d4:	31 c0                	xor    %eax,%eax
ffffffff800051d6:	e8 15 47 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800051db:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800051de:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800051e5:	48 89 c6             	mov    %rax,%rsi
ffffffff800051e8:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff800051ef:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff800051f6:	41 b9 6b 00 00 00    	mov    $0x6b,%r9d
ffffffff800051fc:	31 c0                	xor    %eax,%eax
ffffffff800051fe:	e8 3d c7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005203:	e9 e3 02 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80005208:	eb 00                	jmp    ffffffff8000520a <pe_parse+0x75a>
ffffffff8000520a:	eb 00                	jmp    ffffffff8000520c <pe_parse+0x75c>
ffffffff8000520c:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff8000520f:	83 c0 01             	add    $0x1,%eax
ffffffff80005212:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80005215:	e9 a1 fe ff ff       	jmp    ffffffff800050bb <pe_parse+0x60b>
ffffffff8000521a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000521e:	8b 80 d4 00 00 00    	mov    0xd4(%rax),%eax
ffffffff80005224:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80005228:	48 83 7d c0 48       	cmpq   $0x48,-0x40(%rbp)
ffffffff8000522d:	73 3b                	jae    ffffffff8000526a <pe_parse+0x7ba>
ffffffff8000522f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005236:	31 c0                	xor    %eax,%eax
ffffffff80005238:	e8 b3 46 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000523d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005240:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005247:	48 89 c6             	mov    %rax,%rsi
ffffffff8000524a:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005251:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80005258:	41 b9 74 00 00 00    	mov    $0x74,%r9d
ffffffff8000525e:	31 c0                	xor    %eax,%eax
ffffffff80005260:	e8 db c6 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005265:	e9 81 02 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff8000526a:	eb 00                	jmp    ffffffff8000526c <pe_parse+0x7bc>
ffffffff8000526c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80005270:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80005274:	48 8b b0 d0 00 00 00 	mov    0xd0(%rax),%rsi
ffffffff8000527b:	e8 10 f7 ff ff       	call   ffffffff80004990 <pe_get_rva_data>
ffffffff80005280:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80005284:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80005289:	75 3b                	jne    ffffffff800052c6 <pe_parse+0x816>
ffffffff8000528b:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005292:	31 c0                	xor    %eax,%eax
ffffffff80005294:	e8 57 46 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005299:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000529c:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800052a3:	48 89 c6             	mov    %rax,%rsi
ffffffff800052a6:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff800052ad:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff800052b4:	41 b9 76 00 00 00    	mov    $0x76,%r9d
ffffffff800052ba:	31 c0                	xor    %eax,%eax
ffffffff800052bc:	e8 7f c6 00 00       	call   ffffffff80011940 <printf_>
ffffffff800052c1:	e9 25 02 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff800052c6:	eb 00                	jmp    ffffffff800052c8 <pe_parse+0x818>
ffffffff800052c8:	eb 00                	jmp    ffffffff800052ca <pe_parse+0x81a>
ffffffff800052ca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800052ce:	8b 00                	mov    (%rax),%eax
ffffffff800052d0:	48 83 f8 48          	cmp    $0x48,%rax
ffffffff800052d4:	74 3b                	je     ffffffff80005311 <pe_parse+0x861>
ffffffff800052d6:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800052dd:	31 c0                	xor    %eax,%eax
ffffffff800052df:	e8 0c 46 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800052e4:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800052e7:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800052ee:	48 89 c6             	mov    %rax,%rsi
ffffffff800052f1:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff800052f8:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff800052ff:	41 b9 77 00 00 00    	mov    $0x77,%r9d
ffffffff80005305:	31 c0                	xor    %eax,%eax
ffffffff80005307:	e8 34 c6 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000530c:	e9 da 01 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80005311:	eb 00                	jmp    ffffffff80005313 <pe_parse+0x863>
ffffffff80005313:	eb 00                	jmp    ffffffff80005315 <pe_parse+0x865>
ffffffff80005315:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005319:	0f b7 40 04          	movzwl 0x4(%rax),%eax
ffffffff8000531d:	83 f8 02             	cmp    $0x2,%eax
ffffffff80005320:	74 3b                	je     ffffffff8000535d <pe_parse+0x8ad>
ffffffff80005322:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005329:	31 c0                	xor    %eax,%eax
ffffffff8000532b:	e8 c0 45 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005330:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005333:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000533a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000533d:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005344:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff8000534b:	41 b9 78 00 00 00    	mov    $0x78,%r9d
ffffffff80005351:	31 c0                	xor    %eax,%eax
ffffffff80005353:	e8 e8 c5 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005358:	e9 8e 01 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff8000535d:	eb 00                	jmp    ffffffff8000535f <pe_parse+0x8af>
ffffffff8000535f:	eb 00                	jmp    ffffffff80005361 <pe_parse+0x8b1>
ffffffff80005361:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005365:	0f b7 40 06          	movzwl 0x6(%rax),%eax
ffffffff80005369:	83 f8 05             	cmp    $0x5,%eax
ffffffff8000536c:	74 3b                	je     ffffffff800053a9 <pe_parse+0x8f9>
ffffffff8000536e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005375:	31 c0                	xor    %eax,%eax
ffffffff80005377:	e8 74 45 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000537c:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000537f:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005386:	48 89 c6             	mov    %rax,%rsi
ffffffff80005389:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff80005390:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80005397:	41 b9 79 00 00 00    	mov    $0x79,%r9d
ffffffff8000539d:	31 c0                	xor    %eax,%eax
ffffffff8000539f:	e8 9c c5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800053a4:	e9 42 01 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff800053a9:	eb 00                	jmp    ffffffff800053ab <pe_parse+0x8fb>
ffffffff800053ab:	eb 00                	jmp    ffffffff800053ad <pe_parse+0x8fd>
ffffffff800053ad:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800053b1:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff800053b4:	83 e0 01             	and    $0x1,%eax
ffffffff800053b7:	83 f8 00             	cmp    $0x0,%eax
ffffffff800053ba:	75 3b                	jne    ffffffff800053f7 <pe_parse+0x947>
ffffffff800053bc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800053c3:	31 c0                	xor    %eax,%eax
ffffffff800053c5:	e8 26 45 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800053ca:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800053cd:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800053d4:	48 89 c6             	mov    %rax,%rsi
ffffffff800053d7:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff800053de:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff800053e5:	41 b9 7a 00 00 00    	mov    $0x7a,%r9d
ffffffff800053eb:	31 c0                	xor    %eax,%eax
ffffffff800053ed:	e8 4e c5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800053f2:	e9 f4 00 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff800053f7:	eb 00                	jmp    ffffffff800053f9 <pe_parse+0x949>
ffffffff800053f9:	eb 00                	jmp    ffffffff800053fb <pe_parse+0x94b>
ffffffff800053fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800053ff:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80005402:	83 e0 02             	and    $0x2,%eax
ffffffff80005405:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005408:	74 3b                	je     ffffffff80005445 <pe_parse+0x995>
ffffffff8000540a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005411:	31 c0                	xor    %eax,%eax
ffffffff80005413:	e8 d8 44 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005418:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000541b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005422:	48 89 c6             	mov    %rax,%rsi
ffffffff80005425:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff8000542c:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80005433:	41 b9 7b 00 00 00    	mov    $0x7b,%r9d
ffffffff80005439:	31 c0                	xor    %eax,%eax
ffffffff8000543b:	e8 00 c5 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005440:	e9 a6 00 00 00       	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80005445:	eb 00                	jmp    ffffffff80005447 <pe_parse+0x997>
ffffffff80005447:	eb 00                	jmp    ffffffff80005449 <pe_parse+0x999>
ffffffff80005449:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000544d:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80005450:	83 e0 10             	and    $0x10,%eax
ffffffff80005453:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005456:	74 38                	je     ffffffff80005490 <pe_parse+0x9e0>
ffffffff80005458:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000545f:	31 c0                	xor    %eax,%eax
ffffffff80005461:	e8 8a 44 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005466:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005469:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005470:	48 89 c6             	mov    %rax,%rsi
ffffffff80005473:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff8000547a:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff80005481:	41 b9 7c 00 00 00    	mov    $0x7c,%r9d
ffffffff80005487:	31 c0                	xor    %eax,%eax
ffffffff80005489:	e8 b2 c4 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000548e:	eb 5b                	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff80005490:	eb 00                	jmp    ffffffff80005492 <pe_parse+0x9e2>
ffffffff80005492:	eb 00                	jmp    ffffffff80005494 <pe_parse+0x9e4>
ffffffff80005494:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005498:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8000549b:	25 00 00 01 00       	and    $0x10000,%eax
ffffffff800054a0:	83 f8 00             	cmp    $0x0,%eax
ffffffff800054a3:	74 38                	je     ffffffff800054dd <pe_parse+0xa2d>
ffffffff800054a5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800054ac:	31 c0                	xor    %eax,%eax
ffffffff800054ae:	e8 3d 44 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800054b3:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800054b6:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800054bd:	48 89 c6             	mov    %rax,%rsi
ffffffff800054c0:	48 c7 c1 48 9a 01 80 	mov    $0xffffffff80019a48,%rcx
ffffffff800054c7:	49 c7 c0 3f 98 01 80 	mov    $0xffffffff8001983f,%r8
ffffffff800054ce:	41 b9 7d 00 00 00    	mov    $0x7d,%r9d
ffffffff800054d4:	31 c0                	xor    %eax,%eax
ffffffff800054d6:	e8 65 c4 00 00       	call   ffffffff80011940 <printf_>
ffffffff800054db:	eb 0e                	jmp    ffffffff800054eb <pe_parse+0xa3b>
ffffffff800054dd:	eb 00                	jmp    ffffffff800054df <pe_parse+0xa2f>
ffffffff800054df:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800054e3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800054e7:	48 89 41 60          	mov    %rax,0x60(%rcx)
ffffffff800054eb:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800054ef:	74 09                	je     ffffffff800054fa <pe_parse+0xa4a>
ffffffff800054f1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800054f5:	e8 16 00 00 00       	call   ffffffff80005510 <free_pe_file>
ffffffff800054fa:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800054fd:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80005501:	5d                   	pop    %rbp
ffffffff80005502:	c3                   	ret    
ffffffff80005503:	cc                   	int3   
ffffffff80005504:	cc                   	int3   
ffffffff80005505:	cc                   	int3   
ffffffff80005506:	cc                   	int3   
ffffffff80005507:	cc                   	int3   
ffffffff80005508:	cc                   	int3   
ffffffff80005509:	cc                   	int3   
ffffffff8000550a:	cc                   	int3   
ffffffff8000550b:	cc                   	int3   
ffffffff8000550c:	cc                   	int3   
ffffffff8000550d:	cc                   	int3   
ffffffff8000550e:	cc                   	int3   
ffffffff8000550f:	cc                   	int3   

ffffffff80005510 <free_pe_file>:
ffffffff80005510:	55                   	push   %rbp
ffffffff80005511:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005514:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80005518:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000551c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80005520:	48 8b 78 60          	mov    0x60(%rax),%rdi
ffffffff80005524:	e8 67 7d 00 00       	call   ffffffff8000d290 <free>
ffffffff80005529:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000552d:	31 c9                	xor    %ecx,%ecx
ffffffff8000552f:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff80005532:	0f 11 40 50          	movups %xmm0,0x50(%rax)
ffffffff80005536:	0f 11 40 40          	movups %xmm0,0x40(%rax)
ffffffff8000553a:	0f 11 40 30          	movups %xmm0,0x30(%rax)
ffffffff8000553e:	0f 11 40 20          	movups %xmm0,0x20(%rax)
ffffffff80005542:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff80005546:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80005549:	48 c7 40 60 00 00 00 	movq   $0x0,0x60(%rax)
ffffffff80005550:	00 
ffffffff80005551:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80005555:	5d                   	pop    %rbp
ffffffff80005556:	c3                   	ret    
ffffffff80005557:	cc                   	int3   
ffffffff80005558:	cc                   	int3   
ffffffff80005559:	cc                   	int3   
ffffffff8000555a:	cc                   	int3   
ffffffff8000555b:	cc                   	int3   
ffffffff8000555c:	cc                   	int3   
ffffffff8000555d:	cc                   	int3   
ffffffff8000555e:	cc                   	int3   
ffffffff8000555f:	cc                   	int3   

ffffffff80005560 <metadata_parse>:
ffffffff80005560:	55                   	push   %rbp
ffffffff80005561:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005564:	53                   	push   %rbx
ffffffff80005565:	48 81 ec d8 00 00 00 	sub    $0xd8,%rsp
ffffffff8000556c:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff80005570:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
ffffffff80005577:	48 89 55 80          	mov    %rdx,-0x80(%rbp)
ffffffff8000557b:	48 89 8d 30 ff ff ff 	mov    %rcx,-0xd0(%rbp)
ffffffff80005582:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80005589:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
ffffffff80005590:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80005594:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80005599:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff8000559d:	76 3b                	jbe    ffffffff800055da <metadata_parse+0x7a>
ffffffff8000559f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800055a6:	31 c0                	xor    %eax,%eax
ffffffff800055a8:	e8 43 43 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800055ad:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800055b0:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800055b7:	48 89 c6             	mov    %rax,%rsi
ffffffff800055ba:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff800055c1:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff800055c8:	41 b9 9e 01 00 00    	mov    $0x19e,%r9d
ffffffff800055ce:	31 c0                	xor    %eax,%eax
ffffffff800055d0:	e8 6b c3 00 00       	call   ffffffff80011940 <printf_>
ffffffff800055d5:	e9 43 07 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff800055da:	eb 00                	jmp    ffffffff800055dc <metadata_parse+0x7c>
ffffffff800055dc:	eb 00                	jmp    ffffffff800055de <metadata_parse+0x7e>
ffffffff800055de:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff800055e2:	81 38 42 53 4a 42    	cmpl   $0x424a5342,(%rax)
ffffffff800055e8:	74 3b                	je     ffffffff80005625 <metadata_parse+0xc5>
ffffffff800055ea:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800055f1:	31 c0                	xor    %eax,%eax
ffffffff800055f3:	e8 f8 42 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800055f8:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800055fb:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005602:	48 89 c6             	mov    %rax,%rsi
ffffffff80005605:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff8000560c:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005613:	41 b9 9f 01 00 00    	mov    $0x19f,%r9d
ffffffff80005619:	31 c0                	xor    %eax,%eax
ffffffff8000561b:	e8 20 c3 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005620:	e9 f8 06 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005625:	eb 00                	jmp    ffffffff80005627 <metadata_parse+0xc7>
ffffffff80005627:	eb 00                	jmp    ffffffff80005629 <metadata_parse+0xc9>
ffffffff80005629:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000562d:	8b 40 0c             	mov    0xc(%rax),%eax
ffffffff80005630:	48 83 c0 10          	add    $0x10,%rax
ffffffff80005634:	48 83 c0 04          	add    $0x4,%rax
ffffffff80005638:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000563c:	75 3b                	jne    ffffffff80005679 <metadata_parse+0x119>
ffffffff8000563e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005645:	31 c0                	xor    %eax,%eax
ffffffff80005647:	e8 a4 42 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000564c:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff8000564f:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005656:	48 89 c6             	mov    %rax,%rsi
ffffffff80005659:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005660:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005667:	41 b9 a0 01 00 00    	mov    $0x1a0,%r9d
ffffffff8000566d:	31 c0                	xor    %eax,%eax
ffffffff8000566f:	e8 cc c2 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005674:	e9 a4 06 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005679:	eb 00                	jmp    ffffffff8000567b <metadata_parse+0x11b>
ffffffff8000567b:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000567f:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff80005683:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff80005687:	48 83 c0 10          	add    $0x10,%rax
ffffffff8000568b:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
ffffffff8000568f:	8b 49 0c             	mov    0xc(%rcx),%ecx
ffffffff80005692:	48 01 c8             	add    %rcx,%rax
ffffffff80005695:	66 8b 40 02          	mov    0x2(%rax),%ax
ffffffff80005699:	66 89 45 ba          	mov    %ax,-0x46(%rbp)
ffffffff8000569d:	66 8b 45 ba          	mov    -0x46(%rbp),%ax
ffffffff800056a1:	66 89 45 b8          	mov    %ax,-0x48(%rbp)
ffffffff800056a5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff800056a9:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff800056ad:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800056b1:	48 83 c0 10          	add    $0x10,%rax
ffffffff800056b5:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
ffffffff800056b9:	8b 49 0c             	mov    0xc(%rcx),%ecx
ffffffff800056bc:	48 01 c8             	add    %rcx,%rax
ffffffff800056bf:	48 83 c0 04          	add    $0x4,%rax
ffffffff800056c3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
ffffffff800056ca:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
ffffffff800056d1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800056d5:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff800056dc:	00 
ffffffff800056dd:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff800056e4:	00 
ffffffff800056e5:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
ffffffff800056ec:	8b 45 bc             	mov    -0x44(%rbp),%eax
ffffffff800056ef:	0f b7 4d b8          	movzwl -0x48(%rbp),%ecx
ffffffff800056f3:	39 c8                	cmp    %ecx,%eax
ffffffff800056f5:	0f 8d 07 03 00 00    	jge    ffffffff80005a02 <metadata_parse+0x4a2>
ffffffff800056fb:	eb 00                	jmp    ffffffff800056fd <metadata_parse+0x19d>
ffffffff800056fd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80005701:	8b 00                	mov    (%rax),%eax
ffffffff80005703:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80005707:	03 41 04             	add    0x4(%rcx),%eax
ffffffff8000570a:	89 c0                	mov    %eax,%eax
ffffffff8000570c:	48 3b 45 80          	cmp    -0x80(%rbp),%rax
ffffffff80005710:	76 3b                	jbe    ffffffff8000574d <metadata_parse+0x1ed>
ffffffff80005712:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005719:	31 c0                	xor    %eax,%eax
ffffffff8000571b:	e8 d0 41 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005720:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005723:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000572a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000572d:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005734:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff8000573b:	41 b9 ab 01 00 00    	mov    $0x1ab,%r9d
ffffffff80005741:	31 c0                	xor    %eax,%eax
ffffffff80005743:	e8 f8 c1 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005748:	e9 d0 05 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff8000574d:	eb 00                	jmp    ffffffff8000574f <metadata_parse+0x1ef>
ffffffff8000574f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80005753:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80005757:	8b 09                	mov    (%rcx),%ecx
ffffffff80005759:	48 01 c8             	add    %rcx,%rax
ffffffff8000575c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff80005760:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80005764:	48 83 c6 08          	add    $0x8,%rsi
ffffffff80005768:	48 c7 c7 ac a1 01 80 	mov    $0xffffffff8001a1ac,%rdi
ffffffff8000576f:	e8 dc a6 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff80005774:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005777:	75 68                	jne    ffffffff800057e1 <metadata_parse+0x281>
ffffffff80005779:	eb 00                	jmp    ffffffff8000577b <metadata_parse+0x21b>
ffffffff8000577b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000577f:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80005782:	b9 18 00 00 00       	mov    $0x18,%ecx
ffffffff80005787:	48 39 c1             	cmp    %rax,%rcx
ffffffff8000578a:	72 3b                	jb     ffffffff800057c7 <metadata_parse+0x267>
ffffffff8000578c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005793:	31 c0                	xor    %eax,%eax
ffffffff80005795:	e8 56 41 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000579a:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff8000579d:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800057a4:	48 89 c6             	mov    %rax,%rsi
ffffffff800057a7:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff800057ae:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff800057b5:	41 b9 b0 01 00 00    	mov    $0x1b0,%r9d
ffffffff800057bb:	31 c0                	xor    %eax,%eax
ffffffff800057bd:	e8 7e c1 00 00       	call   ffffffff80011940 <printf_>
ffffffff800057c2:	e9 56 05 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff800057c7:	eb 00                	jmp    ffffffff800057c9 <metadata_parse+0x269>
ffffffff800057c9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff800057cd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800057d1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800057d5:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800057d8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff800057dc:	e9 b8 01 00 00       	jmp    ffffffff80005999 <metadata_parse+0x439>
ffffffff800057e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800057e5:	8b 78 04             	mov    0x4(%rax),%edi
ffffffff800057e8:	e8 83 79 00 00       	call   ffffffff8000d170 <malloc>
ffffffff800057ed:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff800057f1:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff800057f6:	75 3b                	jne    ffffffff80005833 <metadata_parse+0x2d3>
ffffffff800057f8:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%rbp)
ffffffff800057ff:	31 c0                	xor    %eax,%eax
ffffffff80005801:	e8 ea 40 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005806:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005809:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005810:	48 89 c6             	mov    %rax,%rsi
ffffffff80005813:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff8000581a:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005821:	41 b9 b6 01 00 00    	mov    $0x1b6,%r9d
ffffffff80005827:	31 c0                	xor    %eax,%eax
ffffffff80005829:	e8 12 c1 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000582e:	e9 ea 04 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005833:	eb 00                	jmp    ffffffff80005835 <metadata_parse+0x2d5>
ffffffff80005835:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80005839:	48 83 c6 08          	add    $0x8,%rsi
ffffffff8000583d:	48 c7 c7 bc 8d 01 80 	mov    $0xffffffff80018dbc,%rdi
ffffffff80005844:	e8 07 a6 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff80005849:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000584c:	75 20                	jne    ffffffff8000586e <metadata_parse+0x30e>
ffffffff8000584e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80005852:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80005856:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff8000585a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000585e:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80005861:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80005865:	48 89 41 28          	mov    %rax,0x28(%rcx)
ffffffff80005869:	e9 17 01 00 00       	jmp    ffffffff80005985 <metadata_parse+0x425>
ffffffff8000586e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80005872:	48 83 c6 08          	add    $0x8,%rsi
ffffffff80005876:	48 c7 c7 26 9f 01 80 	mov    $0xffffffff80019f26,%rdi
ffffffff8000587d:	e8 ce a5 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff80005882:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005885:	75 20                	jne    ffffffff800058a7 <metadata_parse+0x347>
ffffffff80005887:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000588b:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000588f:	48 89 41 30          	mov    %rax,0x30(%rcx)
ffffffff80005893:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80005897:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff8000589a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000589e:	48 89 41 38          	mov    %rax,0x38(%rcx)
ffffffff800058a2:	e9 dc 00 00 00       	jmp    ffffffff80005983 <metadata_parse+0x423>
ffffffff800058a7:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff800058ab:	48 83 c6 08          	add    $0x8,%rsi
ffffffff800058af:	48 c7 c7 af a1 01 80 	mov    $0xffffffff8001a1af,%rdi
ffffffff800058b6:	e8 95 a5 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff800058bb:	83 f8 00             	cmp    $0x0,%eax
ffffffff800058be:	75 25                	jne    ffffffff800058e5 <metadata_parse+0x385>
ffffffff800058c0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800058c4:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800058c8:	48 89 41 50          	mov    %rax,0x50(%rcx)
ffffffff800058cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800058d0:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800058d3:	c1 e8 04             	shr    $0x4,%eax
ffffffff800058d6:	89 c0                	mov    %eax,%eax
ffffffff800058d8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800058dc:	48 89 41 58          	mov    %rax,0x58(%rcx)
ffffffff800058e0:	e9 9c 00 00 00       	jmp    ffffffff80005981 <metadata_parse+0x421>
ffffffff800058e5:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff800058e9:	48 83 c6 08          	add    $0x8,%rsi
ffffffff800058ed:	48 c7 c7 7f 8a 01 80 	mov    $0xffffffff80018a7f,%rdi
ffffffff800058f4:	e8 57 a5 00 00       	call   ffffffff8000fe50 <strcmp>
ffffffff800058f9:	83 f8 00             	cmp    $0x0,%eax
ffffffff800058fc:	75 1d                	jne    ffffffff8000591b <metadata_parse+0x3bb>
ffffffff800058fe:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80005902:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80005906:	48 89 41 40          	mov    %rax,0x40(%rcx)
ffffffff8000590a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000590e:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80005911:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80005915:	48 89 41 48          	mov    %rax,0x48(%rcx)
ffffffff80005919:	eb 64                	jmp    ffffffff8000597f <metadata_parse+0x41f>
ffffffff8000591b:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000591f:	e8 6c 79 00 00       	call   ffffffff8000d290 <free>
ffffffff80005924:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%rbp)
ffffffff8000592b:	31 c0                	xor    %eax,%eax
ffffffff8000592d:	e8 be 3f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005932:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80005936:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8000593a:	48 c7 c7 d3 90 01 80 	mov    $0xffffffff800190d3,%rdi
ffffffff80005941:	48 89 c6             	mov    %rax,%rsi
ffffffff80005944:	31 c0                	xor    %eax,%eax
ffffffff80005946:	e8 f5 bf 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000594b:	31 c0                	xor    %eax,%eax
ffffffff8000594d:	e8 9e 3f 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005952:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005955:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000595c:	48 89 c6             	mov    %rax,%rsi
ffffffff8000595f:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005966:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff8000596d:	41 b9 c8 01 00 00    	mov    $0x1c8,%r9d
ffffffff80005973:	31 c0                	xor    %eax,%eax
ffffffff80005975:	e8 c6 bf 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000597a:	e9 9e 03 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff8000597f:	eb 00                	jmp    ffffffff80005981 <metadata_parse+0x421>
ffffffff80005981:	eb 00                	jmp    ffffffff80005983 <metadata_parse+0x423>
ffffffff80005983:	eb 00                	jmp    ffffffff80005985 <metadata_parse+0x425>
ffffffff80005985:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80005989:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
ffffffff8000598d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80005991:	8b 50 04             	mov    0x4(%rax),%edx
ffffffff80005994:	e8 c7 98 00 00       	call   ffffffff8000f260 <memcpy>
ffffffff80005999:	48 8b 5d e8          	mov    -0x18(%rbp),%rbx
ffffffff8000599d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff800059a1:	48 83 c7 08          	add    $0x8,%rdi
ffffffff800059a5:	e8 36 a5 00 00       	call   ffffffff8000fee0 <strlen>
ffffffff800059aa:	48 83 c0 08          	add    $0x8,%rax
ffffffff800059ae:	48 83 c0 01          	add    $0x1,%rax
ffffffff800059b2:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
ffffffff800059b9:	48 c7 45 a0 04 00 00 	movq   $0x4,-0x60(%rbp)
ffffffff800059c0:	00 
ffffffff800059c1:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff800059c8:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff800059cc:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff800059d0:	48 01 c8             	add    %rcx,%rax
ffffffff800059d3:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff800059d7:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff800059db:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
ffffffff800059df:	48 21 c8             	and    %rcx,%rax
ffffffff800059e2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
ffffffff800059e9:	48 03 9d 48 ff ff ff 	add    -0xb8(%rbp),%rbx
ffffffff800059f0:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
ffffffff800059f4:	8b 45 bc             	mov    -0x44(%rbp),%eax
ffffffff800059f7:	83 c0 01             	add    $0x1,%eax
ffffffff800059fa:	89 45 bc             	mov    %eax,-0x44(%rbp)
ffffffff800059fd:	e9 ea fc ff ff       	jmp    ffffffff800056ec <metadata_parse+0x18c>
ffffffff80005a02:	eb 00                	jmp    ffffffff80005a04 <metadata_parse+0x4a4>
ffffffff80005a04:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80005a09:	75 3b                	jne    ffffffff80005a46 <metadata_parse+0x4e6>
ffffffff80005a0b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005a12:	31 c0                	xor    %eax,%eax
ffffffff80005a14:	e8 d7 3e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005a19:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005a1c:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005a23:	48 89 c6             	mov    %rax,%rsi
ffffffff80005a26:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005a2d:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005a34:	41 b9 d2 01 00 00    	mov    $0x1d2,%r9d
ffffffff80005a3a:	31 c0                	xor    %eax,%eax
ffffffff80005a3c:	e8 ff be 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005a41:	e9 d7 02 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005a46:	eb 00                	jmp    ffffffff80005a48 <metadata_parse+0x4e8>
ffffffff80005a48:	eb 00                	jmp    ffffffff80005a4a <metadata_parse+0x4ea>
ffffffff80005a4a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005a4e:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff80005a52:	83 f8 02             	cmp    $0x2,%eax
ffffffff80005a55:	74 3b                	je     ffffffff80005a92 <metadata_parse+0x532>
ffffffff80005a57:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005a5e:	31 c0                	xor    %eax,%eax
ffffffff80005a60:	e8 8b 3e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005a65:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005a68:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005a6f:	48 89 c6             	mov    %rax,%rsi
ffffffff80005a72:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005a79:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005a80:	41 b9 d5 01 00 00    	mov    $0x1d5,%r9d
ffffffff80005a86:	31 c0                	xor    %eax,%eax
ffffffff80005a88:	e8 b3 be 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005a8d:	e9 8b 02 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005a92:	eb 00                	jmp    ffffffff80005a94 <metadata_parse+0x534>
ffffffff80005a94:	eb 00                	jmp    ffffffff80005a96 <metadata_parse+0x536>
ffffffff80005a96:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005a9a:	0f b6 40 05          	movzbl 0x5(%rax),%eax
ffffffff80005a9e:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005aa1:	74 3b                	je     ffffffff80005ade <metadata_parse+0x57e>
ffffffff80005aa3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005aaa:	31 c0                	xor    %eax,%eax
ffffffff80005aac:	e8 3f 3e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005ab1:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005ab4:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005abb:	48 89 c6             	mov    %rax,%rsi
ffffffff80005abe:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005ac5:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005acc:	41 b9 d6 01 00 00    	mov    $0x1d6,%r9d
ffffffff80005ad2:	31 c0                	xor    %eax,%eax
ffffffff80005ad4:	e8 67 be 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005ad9:	e9 3f 02 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005ade:	eb 00                	jmp    ffffffff80005ae0 <metadata_parse+0x580>
ffffffff80005ae0:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80005ae4:	48 83 e8 18          	sub    $0x18,%rax
ffffffff80005ae8:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80005aec:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005af0:	0f b6 40 06          	movzbl 0x6(%rax),%eax
ffffffff80005af4:	83 e0 01             	and    $0x1,%eax
ffffffff80005af7:	31 c9                	xor    %ecx,%ecx
ffffffff80005af9:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005afe:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005b01:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80005b04:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80005b07:	0f 95 c0             	setne  %al
ffffffff80005b0a:	24 01                	and    $0x1,%al
ffffffff80005b0c:	88 85 50 ff ff ff    	mov    %al,-0xb0(%rbp)
ffffffff80005b12:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005b16:	0f b6 40 06          	movzbl 0x6(%rax),%eax
ffffffff80005b1a:	83 e0 02             	and    $0x2,%eax
ffffffff80005b1d:	31 c9                	xor    %ecx,%ecx
ffffffff80005b1f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005b24:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005b27:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80005b2a:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80005b2d:	0f 95 c0             	setne  %al
ffffffff80005b30:	24 01                	and    $0x1,%al
ffffffff80005b32:	88 85 51 ff ff ff    	mov    %al,-0xaf(%rbp)
ffffffff80005b38:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005b3c:	0f b6 40 06          	movzbl 0x6(%rax),%eax
ffffffff80005b40:	83 e0 04             	and    $0x4,%eax
ffffffff80005b43:	31 c9                	xor    %ecx,%ecx
ffffffff80005b45:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005b4a:	83 f8 00             	cmp    $0x0,%eax
ffffffff80005b4d:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80005b50:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80005b53:	0f 95 c0             	setne  %al
ffffffff80005b56:	24 01                	and    $0x1,%al
ffffffff80005b58:	88 85 52 ff ff ff    	mov    %al,-0xae(%rbp)
ffffffff80005b5e:	48 8d 85 50 ff ff ff 	lea    -0xb0(%rbp),%rax
ffffffff80005b65:	48 83 c0 03          	add    $0x3,%rax
ffffffff80005b69:	31 c9                	xor    %ecx,%ecx
ffffffff80005b6b:	48 c7 40 05 00 00 00 	movq   $0x0,0x5(%rax)
ffffffff80005b72:	00 
ffffffff80005b73:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80005b7a:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
ffffffff80005b81:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff80005b88:	48 c7 85 68 ff ff ff 	movq   $0x0,-0x98(%rbp)
ffffffff80005b8f:	00 00 00 00 
ffffffff80005b93:	48 c7 85 70 ff ff ff 	movq   $0x0,-0x90(%rbp)
ffffffff80005b9a:	00 00 00 00 
ffffffff80005b9e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80005ba2:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
ffffffff80005ba9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005bad:	48 83 c0 18          	add    $0x18,%rax
ffffffff80005bb1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80005bb5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
ffffffff80005bbc:	48 63 45 e0          	movslq -0x20(%rbp),%rax
ffffffff80005bc0:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff80005bc4:	0f 83 a9 00 00 00    	jae    ffffffff80005c73 <metadata_parse+0x713>
ffffffff80005bca:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005bce:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80005bd2:	8b 4d e0             	mov    -0x20(%rbp),%ecx
ffffffff80005bd5:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005bda:	48 d3 e2             	shl    %cl,%rdx
ffffffff80005bdd:	48 21 d0             	and    %rdx,%rax
ffffffff80005be0:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80005be4:	74 7d                	je     ffffffff80005c63 <metadata_parse+0x703>
ffffffff80005be6:	eb 00                	jmp    ffffffff80005be8 <metadata_parse+0x688>
ffffffff80005be8:	b8 04 00 00 00       	mov    $0x4,%eax
ffffffff80005bed:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80005bf1:	76 3b                	jbe    ffffffff80005c2e <metadata_parse+0x6ce>
ffffffff80005bf3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff80005bfa:	31 c0                	xor    %eax,%eax
ffffffff80005bfc:	e8 ef 3c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005c01:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80005c04:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005c0b:	48 89 c6             	mov    %rax,%rsi
ffffffff80005c0e:	48 c7 c1 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rcx
ffffffff80005c15:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005c1c:	41 b9 e9 01 00 00    	mov    $0x1e9,%r9d
ffffffff80005c22:	31 c0                	xor    %eax,%eax
ffffffff80005c24:	e8 17 bd 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005c29:	e9 ef 00 00 00       	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005c2e:	eb 00                	jmp    ffffffff80005c30 <metadata_parse+0x6d0>
ffffffff80005c30:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80005c34:	8b 00                	mov    (%rax),%eax
ffffffff80005c36:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
ffffffff80005c3d:	48 63 55 e0          	movslq -0x20(%rbp),%rdx
ffffffff80005c41:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80005c45:	48 01 d1             	add    %rdx,%rcx
ffffffff80005c48:	89 41 08             	mov    %eax,0x8(%rcx)
ffffffff80005c4b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80005c4f:	48 83 c0 04          	add    $0x4,%rax
ffffffff80005c53:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80005c57:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80005c5b:	48 83 e8 04          	sub    $0x4,%rax
ffffffff80005c5f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80005c63:	eb 00                	jmp    ffffffff80005c65 <metadata_parse+0x705>
ffffffff80005c65:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff80005c68:	83 c0 01             	add    $0x1,%eax
ffffffff80005c6b:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff80005c6e:	e9 49 ff ff ff       	jmp    ffffffff80005bbc <metadata_parse+0x65c>
ffffffff80005c73:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
ffffffff80005c7a:	e8 b1 00 00 00       	call   ffffffff80005d30 <resolve_coded_index_sizes>
ffffffff80005c7f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80005c83:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
ffffffff80005c8a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80005c8e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80005c95:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
ffffffff80005c9c:	48 63 45 e4          	movslq -0x1c(%rbp),%rax
ffffffff80005ca0:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff80005ca4:	73 75                	jae    ffffffff80005d1b <metadata_parse+0x7bb>
ffffffff80005ca6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005caa:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80005cae:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff80005cb1:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005cb6:	48 d3 e2             	shl    %cl,%rdx
ffffffff80005cb9:	48 21 d0             	and    %rdx,%rax
ffffffff80005cbc:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80005cc0:	74 4c                	je     ffffffff80005d0e <metadata_parse+0x7ae>
ffffffff80005cc2:	eb 00                	jmp    ffffffff80005cc4 <metadata_parse+0x764>
ffffffff80005cc4:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff80005cc7:	48 8d bd 50 ff ff ff 	lea    -0xb0(%rbp),%rdi
ffffffff80005cce:	e8 6d 01 00 00       	call   ffffffff80005e40 <parse_single_table>
ffffffff80005cd3:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80005cd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80005cda:	74 2e                	je     ffffffff80005d0a <metadata_parse+0x7aa>
ffffffff80005cdc:	31 c0                	xor    %eax,%eax
ffffffff80005cde:	e8 0d 3c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005ce3:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80005cea:	48 89 c6             	mov    %rax,%rsi
ffffffff80005ced:	48 c7 c2 2c 8d 01 80 	mov    $0xffffffff80018d2c,%rdx
ffffffff80005cf4:	48 c7 c1 39 99 01 80 	mov    $0xffffffff80019939,%rcx
ffffffff80005cfb:	41 b8 fb 01 00 00    	mov    $0x1fb,%r8d
ffffffff80005d01:	31 c0                	xor    %eax,%eax
ffffffff80005d03:	e8 38 bc 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005d08:	eb 13                	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005d0a:	eb 00                	jmp    ffffffff80005d0c <metadata_parse+0x7ac>
ffffffff80005d0c:	eb 00                	jmp    ffffffff80005d0e <metadata_parse+0x7ae>
ffffffff80005d0e:	eb 00                	jmp    ffffffff80005d10 <metadata_parse+0x7b0>
ffffffff80005d10:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80005d13:	83 c0 01             	add    $0x1,%eax
ffffffff80005d16:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80005d19:	eb 81                	jmp    ffffffff80005c9c <metadata_parse+0x73c>
ffffffff80005d1b:	eb 00                	jmp    ffffffff80005d1d <metadata_parse+0x7bd>
ffffffff80005d1d:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80005d20:	48 81 c4 d8 00 00 00 	add    $0xd8,%rsp
ffffffff80005d27:	5b                   	pop    %rbx
ffffffff80005d28:	5d                   	pop    %rbp
ffffffff80005d29:	c3                   	ret    
ffffffff80005d2a:	cc                   	int3   
ffffffff80005d2b:	cc                   	int3   
ffffffff80005d2c:	cc                   	int3   
ffffffff80005d2d:	cc                   	int3   
ffffffff80005d2e:	cc                   	int3   
ffffffff80005d2f:	cc                   	int3   

ffffffff80005d30 <resolve_coded_index_sizes>:
ffffffff80005d30:	55                   	push   %rbp
ffffffff80005d31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005d34:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80005d38:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80005d3c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff80005d43:	48 63 45 f8          	movslq -0x8(%rbp),%rax
ffffffff80005d47:	48 83 f8 0d          	cmp    $0xd,%rax
ffffffff80005d4b:	0f 83 dc 00 00 00    	jae    ffffffff80005e2d <resolve_coded_index_sizes+0xfd>
ffffffff80005d51:	48 63 45 f8          	movslq -0x8(%rbp),%rax
ffffffff80005d55:	48 8b 04 c5 40 a2 01 	mov    -0x7ffe5dc0(,%rax,8),%rax
ffffffff80005d5c:	80 
ffffffff80005d5d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80005d61:	48 63 45 f8          	movslq -0x8(%rbp),%rax
ffffffff80005d65:	48 8d 80 a8 a2 01 80 	lea    -0x7ffe5d58(%rax),%rax
ffffffff80005d6c:	0f b6 00             	movzbl (%rax),%eax
ffffffff80005d6f:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80005d72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff80005d79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80005d80:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80005d83:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff80005d86:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005d8b:	d3 e2                	shl    %cl,%edx
ffffffff80005d8d:	39 d0                	cmp    %edx,%eax
ffffffff80005d8f:	7d 5c                	jge    ffffffff80005ded <resolve_coded_index_sizes+0xbd>
ffffffff80005d91:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80005d95:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff80005d99:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff80005d9c:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80005d9f:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
ffffffff80005da3:	83 f8 7a             	cmp    $0x7a,%eax
ffffffff80005da6:	74 38                	je     ffffffff80005de0 <resolve_coded_index_sizes+0xb0>
ffffffff80005da8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80005dac:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80005db0:	48 0f be 4d ff       	movsbq -0x1(%rbp),%rcx
ffffffff80005db5:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80005db9:	48 01 c8             	add    %rcx,%rax
ffffffff80005dbc:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80005dbf:	3b 45 f0             	cmp    -0x10(%rbp),%eax
ffffffff80005dc2:	76 1a                	jbe    ffffffff80005dde <resolve_coded_index_sizes+0xae>
ffffffff80005dc4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80005dc8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80005dcc:	48 0f be 4d ff       	movsbq -0x1(%rbp),%rcx
ffffffff80005dd1:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80005dd5:	48 01 c8             	add    %rcx,%rax
ffffffff80005dd8:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80005ddb:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80005dde:	eb 00                	jmp    ffffffff80005de0 <resolve_coded_index_sizes+0xb0>
ffffffff80005de0:	eb 00                	jmp    ffffffff80005de2 <resolve_coded_index_sizes+0xb2>
ffffffff80005de2:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80005de5:	83 c0 01             	add    $0x1,%eax
ffffffff80005de8:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80005deb:	eb 93                	jmp    ffffffff80005d80 <resolve_coded_index_sizes+0x50>
ffffffff80005ded:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80005df0:	b9 10 00 00 00       	mov    $0x10,%ecx
ffffffff80005df5:	2b 4d ec             	sub    -0x14(%rbp),%ecx
ffffffff80005df8:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80005dfd:	d3 e2                	shl    %cl,%edx
ffffffff80005dff:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80005e04:	31 f6                	xor    %esi,%esi
ffffffff80005e06:	39 d0                	cmp    %edx,%eax
ffffffff80005e08:	0f 42 ce             	cmovb  %esi,%ecx
ffffffff80005e0b:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80005e0e:	0f 95 c0             	setne  %al
ffffffff80005e11:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80005e15:	48 63 55 f8          	movslq -0x8(%rbp),%rdx
ffffffff80005e19:	24 01                	and    $0x1,%al
ffffffff80005e1b:	88 44 11 03          	mov    %al,0x3(%rcx,%rdx,1)
ffffffff80005e1f:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80005e22:	83 c0 01             	add    $0x1,%eax
ffffffff80005e25:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80005e28:	e9 16 ff ff ff       	jmp    ffffffff80005d43 <resolve_coded_index_sizes+0x13>
ffffffff80005e2d:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80005e31:	5d                   	pop    %rbp
ffffffff80005e32:	c3                   	ret    
ffffffff80005e33:	cc                   	int3   
ffffffff80005e34:	cc                   	int3   
ffffffff80005e35:	cc                   	int3   
ffffffff80005e36:	cc                   	int3   
ffffffff80005e37:	cc                   	int3   
ffffffff80005e38:	cc                   	int3   
ffffffff80005e39:	cc                   	int3   
ffffffff80005e3a:	cc                   	int3   
ffffffff80005e3b:	cc                   	int3   
ffffffff80005e3c:	cc                   	int3   
ffffffff80005e3d:	cc                   	int3   
ffffffff80005e3e:	cc                   	int3   
ffffffff80005e3f:	cc                   	int3   

ffffffff80005e40 <parse_single_table>:
ffffffff80005e40:	55                   	push   %rbp
ffffffff80005e41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80005e44:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
ffffffff80005e4b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80005e4f:	89 75 b4             	mov    %esi,-0x4c(%rbp)
ffffffff80005e52:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80005e59:	48 63 45 b4          	movslq -0x4c(%rbp),%rax
ffffffff80005e5d:	48 83 f8 2d          	cmp    $0x2d,%rax
ffffffff80005e61:	72 56                	jb     ffffffff80005eb9 <parse_single_table+0x79>
ffffffff80005e63:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005e6a:	31 c0                	xor    %eax,%eax
ffffffff80005e6c:	e8 7f 3a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005e71:	8b 55 b4             	mov    -0x4c(%rbp),%edx
ffffffff80005e74:	48 c7 c7 63 98 01 80 	mov    $0xffffffff80019863,%rdi
ffffffff80005e7b:	48 89 c6             	mov    %rax,%rsi
ffffffff80005e7e:	31 c0                	xor    %eax,%eax
ffffffff80005e80:	e8 bb ba 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005e85:	31 c0                	xor    %eax,%eax
ffffffff80005e87:	e8 64 3a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005e8c:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005e8f:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005e96:	48 89 c6             	mov    %rax,%rsi
ffffffff80005e99:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80005ea0:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005ea7:	41 b9 f9 00 00 00    	mov    $0xf9,%r9d
ffffffff80005ead:	31 c0                	xor    %eax,%eax
ffffffff80005eaf:	e8 8c ba 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005eb4:	e9 8d 0c 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80005eb9:	eb 00                	jmp    ffffffff80005ebb <parse_single_table+0x7b>
ffffffff80005ebb:	48 63 45 b4          	movslq -0x4c(%rbp),%rax
ffffffff80005ebf:	48 8d 04 c5 e0 a2 01 	lea    -0x7ffe5d20(,%rax,8),%rax
ffffffff80005ec6:	80 
ffffffff80005ec7:	48 8b 00             	mov    (%rax),%rax
ffffffff80005eca:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
ffffffff80005ed1:	48 83 bd 58 ff ff ff 	cmpq   $0x0,-0xa8(%rbp)
ffffffff80005ed8:	00 
ffffffff80005ed9:	75 56                	jne    ffffffff80005f31 <parse_single_table+0xf1>
ffffffff80005edb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80005ee2:	31 c0                	xor    %eax,%eax
ffffffff80005ee4:	e8 07 3a 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005ee9:	8b 55 b4             	mov    -0x4c(%rbp),%edx
ffffffff80005eec:	48 c7 c7 63 98 01 80 	mov    $0xffffffff80019863,%rdi
ffffffff80005ef3:	48 89 c6             	mov    %rax,%rsi
ffffffff80005ef6:	31 c0                	xor    %eax,%eax
ffffffff80005ef8:	e8 43 ba 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005efd:	31 c0                	xor    %eax,%eax
ffffffff80005eff:	e8 ec 39 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80005f04:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80005f07:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80005f0e:	48 89 c6             	mov    %rax,%rsi
ffffffff80005f11:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80005f18:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80005f1f:	41 b9 fb 00 00 00    	mov    $0xfb,%r9d
ffffffff80005f25:	31 c0                	xor    %eax,%eax
ffffffff80005f27:	e8 14 ba 00 00       	call   ffffffff80011940 <printf_>
ffffffff80005f2c:	e9 15 0c 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80005f31:	eb 00                	jmp    ffffffff80005f33 <parse_single_table+0xf3>
ffffffff80005f33:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80005f37:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80005f3b:	48 63 4d b4          	movslq -0x4c(%rbp),%rcx
ffffffff80005f3f:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80005f43:	48 01 c8             	add    %rcx,%rax
ffffffff80005f46:	48 63 40 08          	movslq 0x8(%rax),%rax
ffffffff80005f4a:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff80005f51:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80005f58:	00 
ffffffff80005f59:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80005f60:	00 
ffffffff80005f61:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
ffffffff80005f68:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80005f6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80005f70:	83 38 00             	cmpl   $0x0,(%rax)
ffffffff80005f73:	0f 84 f2 01 00 00    	je     ffffffff8000616b <parse_single_table+0x32b>
ffffffff80005f79:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80005f7d:	8b 00                	mov    (%rax),%eax
ffffffff80005f7f:	48 89 c1             	mov    %rax,%rcx
ffffffff80005f82:	48 83 e9 3e          	sub    $0x3e,%rcx
ffffffff80005f86:	0f 87 79 01 00 00    	ja     ffffffff80006105 <parse_single_table+0x2c5>
ffffffff80005f8c:	48 8b 04 c5 10 83 01 	mov    -0x7ffe7cf0(,%rax,8),%rax
ffffffff80005f93:	80 
ffffffff80005f94:	ff e0                	jmp    *%rax
ffffffff80005f96:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80005f9a:	48 83 c0 04          	add    $0x4,%rax
ffffffff80005f9e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80005fa2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80005fa6:	48 83 c0 04          	add    $0x4,%rax
ffffffff80005faa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80005fae:	e9 a7 01 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff80005fb3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80005fb7:	48 83 c0 02          	add    $0x2,%rax
ffffffff80005fbb:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80005fbf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80005fc3:	48 83 c0 02          	add    $0x2,%rax
ffffffff80005fc7:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80005fcb:	e9 8a 01 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff80005fd0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80005fd4:	48 83 c0 04          	add    $0x4,%rax
ffffffff80005fd8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80005fdc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80005fe0:	48 83 c0 04          	add    $0x4,%rax
ffffffff80005fe4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80005fe8:	e9 6d 01 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff80005fed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80005ff1:	8a 40 02             	mov    0x2(%rax),%al
ffffffff80005ff4:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80005ff9:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80005ffe:	a8 01                	test   $0x1,%al
ffffffff80006000:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80006003:	89 c8                	mov    %ecx,%eax
ffffffff80006005:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff80006009:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000600d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80006011:	48 83 c0 10          	add    $0x10,%rax
ffffffff80006015:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80006019:	e9 3c 01 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff8000601e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006022:	8a 40 01             	mov    0x1(%rax),%al
ffffffff80006025:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8000602a:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8000602f:	a8 01                	test   $0x1,%al
ffffffff80006031:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80006034:	89 c8                	mov    %ecx,%eax
ffffffff80006036:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff8000603a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000603e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80006042:	48 83 c0 08          	add    $0x8,%rax
ffffffff80006046:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000604a:	e9 0b 01 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff8000604f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006053:	8a 00                	mov    (%rax),%al
ffffffff80006055:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8000605a:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8000605f:	a8 01                	test   $0x1,%al
ffffffff80006061:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80006064:	89 c8                	mov    %ecx,%eax
ffffffff80006066:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff8000606a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000606e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80006072:	48 83 c0 08          	add    $0x8,%rax
ffffffff80006076:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000607a:	e9 db 00 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff8000607f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006083:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff80006087:	8b 09                	mov    (%rcx),%ecx
ffffffff80006089:	83 e9 07             	sub    $0x7,%ecx
ffffffff8000608c:	89 c9                	mov    %ecx,%ecx
ffffffff8000608e:	8a 44 08 03          	mov    0x3(%rax,%rcx,1),%al
ffffffff80006092:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80006097:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8000609c:	a8 01                	test   $0x1,%al
ffffffff8000609e:	0f 45 ca             	cmovne %edx,%ecx
ffffffff800060a1:	89 c8                	mov    %ecx,%eax
ffffffff800060a3:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff800060a7:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800060ab:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800060af:	48 83 c0 04          	add    $0x4,%rax
ffffffff800060b3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff800060b7:	e9 9e 00 00 00       	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff800060bc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800060c0:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800060c4:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff800060c8:	8b 09                	mov    (%rcx),%ecx
ffffffff800060ca:	83 e9 14             	sub    $0x14,%ecx
ffffffff800060cd:	89 c9                	mov    %ecx,%ecx
ffffffff800060cf:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff800060d3:	48 01 c8             	add    %rcx,%rax
ffffffff800060d6:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff800060d9:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff800060de:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff800060e3:	3d ff ff 00 00       	cmp    $0xffff,%eax
ffffffff800060e8:	0f 47 ca             	cmova  %edx,%ecx
ffffffff800060eb:	89 c8                	mov    %ecx,%eax
ffffffff800060ed:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff800060f1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800060f5:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800060f9:	48 83 c0 04          	add    $0x4,%rax
ffffffff800060fd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80006101:	eb 57                	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff80006103:	eb 55                	jmp    ffffffff8000615a <parse_single_table+0x31a>
ffffffff80006105:	eb 00                	jmp    ffffffff80006107 <parse_single_table+0x2c7>
ffffffff80006107:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000610e:	31 c0                	xor    %eax,%eax
ffffffff80006110:	e8 db 37 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006115:	48 c7 c7 29 9d 01 80 	mov    $0xffffffff80019d29,%rdi
ffffffff8000611c:	48 89 c6             	mov    %rax,%rsi
ffffffff8000611f:	31 c0                	xor    %eax,%eax
ffffffff80006121:	e8 1a b8 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006126:	31 c0                	xor    %eax,%eax
ffffffff80006128:	e8 c3 37 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000612d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80006130:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80006137:	48 89 c6             	mov    %rax,%rsi
ffffffff8000613a:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80006141:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006148:	41 b9 0f 01 00 00    	mov    $0x10f,%r9d
ffffffff8000614e:	31 c0                	xor    %eax,%eax
ffffffff80006150:	e8 eb b7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006155:	e9 ec 09 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff8000615a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000615e:	48 83 c0 04          	add    $0x4,%rax
ffffffff80006162:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80006166:	e9 01 fe ff ff       	jmp    ffffffff80005f6c <parse_single_table+0x12c>
ffffffff8000616b:	eb 00                	jmp    ffffffff8000616d <parse_single_table+0x32d>
ffffffff8000616d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80006171:	48 0f af 85 60 ff ff 	imul   -0xa0(%rbp),%rax
ffffffff80006178:	ff 
ffffffff80006179:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000617d:	48 3b 41 20          	cmp    0x20(%rcx),%rax
ffffffff80006181:	76 3b                	jbe    ffffffff800061be <parse_single_table+0x37e>
ffffffff80006183:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000618a:	31 c0                	xor    %eax,%eax
ffffffff8000618c:	e8 5f 37 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006191:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80006194:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000619b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000619e:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff800061a5:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff800061ac:	41 b9 15 01 00 00    	mov    $0x115,%r9d
ffffffff800061b2:	31 c0                	xor    %eax,%eax
ffffffff800061b4:	e8 87 b7 00 00       	call   ffffffff80011940 <printf_>
ffffffff800061b9:	e9 88 09 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff800061be:	eb 00                	jmp    ffffffff800061c0 <parse_single_table+0x380>
ffffffff800061c0:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff800061c4:	48 0f af bd 60 ff ff 	imul   -0xa0(%rbp),%rdi
ffffffff800061cb:	ff 
ffffffff800061cc:	e8 9f 6f 00 00       	call   ffffffff8000d170 <malloc>
ffffffff800061d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800061d5:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff800061da:	75 3b                	jne    ffffffff80006217 <parse_single_table+0x3d7>
ffffffff800061dc:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%rbp)
ffffffff800061e3:	31 c0                	xor    %eax,%eax
ffffffff800061e5:	e8 06 37 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800061ea:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800061ed:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800061f4:	48 89 c6             	mov    %rax,%rsi
ffffffff800061f7:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff800061fe:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006205:	41 b9 19 01 00 00    	mov    $0x119,%r9d
ffffffff8000620b:	31 c0                	xor    %eax,%eax
ffffffff8000620d:	e8 2e b7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006212:	e9 2f 09 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006217:	eb 00                	jmp    ffffffff80006219 <parse_single_table+0x3d9>
ffffffff80006219:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000621d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80006221:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff80006225:	48 63 55 b4          	movslq -0x4c(%rbp),%rdx
ffffffff80006229:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff8000622d:	48 01 d1             	add    %rdx,%rcx
ffffffff80006230:	48 89 01             	mov    %rax,(%rcx)
ffffffff80006233:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006237:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000623b:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
ffffffff80006242:	c7 45 84 00 00 00 00 	movl   $0x0,-0x7c(%rbp)
ffffffff80006249:	48 63 45 84          	movslq -0x7c(%rbp),%rax
ffffffff8000624d:	48 3b 85 60 ff ff ff 	cmp    -0xa0(%rbp),%rax
ffffffff80006254:	0f 83 d1 08 00 00    	jae    ffffffff80006b2b <parse_single_table+0xceb>
ffffffff8000625a:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
ffffffff80006261:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80006265:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80006269:	83 38 00             	cmpl   $0x0,(%rax)
ffffffff8000626c:	0f 84 a9 08 00 00    	je     ffffffff80006b1b <parse_single_table+0xcdb>
ffffffff80006272:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80006276:	8b 00                	mov    (%rax),%eax
ffffffff80006278:	48 89 c1             	mov    %rax,%rcx
ffffffff8000627b:	48 83 e9 3e          	sub    $0x3e,%rcx
ffffffff8000627f:	0f 87 33 08 00 00    	ja     ffffffff80006ab8 <parse_single_table+0xc78>
ffffffff80006285:	48 8b 04 c5 18 81 01 	mov    -0x7ffe7ee8(,%rax,8),%rax
ffffffff8000628c:	80 
ffffffff8000628d:	ff e0                	jmp    *%rax
ffffffff8000628f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006293:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80006297:	66 8b 00             	mov    (%rax),%ax
ffffffff8000629a:	66 89 85 6c ff ff ff 	mov    %ax,-0x94(%rbp)
ffffffff800062a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800062a5:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800062a9:	48 83 c1 02          	add    $0x2,%rcx
ffffffff800062ad:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800062b1:	66 8b 85 6c ff ff ff 	mov    -0x94(%rbp),%ax
ffffffff800062b8:	66 89 85 6e ff ff ff 	mov    %ax,-0x92(%rbp)
ffffffff800062bf:	66 8b 85 6e ff ff ff 	mov    -0x92(%rbp),%ax
ffffffff800062c6:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800062ca:	66 89 01             	mov    %ax,(%rcx)
ffffffff800062cd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800062d1:	48 83 c0 02          	add    $0x2,%rax
ffffffff800062d5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800062d9:	e9 2c 08 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff800062de:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800062e2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800062e6:	8b 00                	mov    (%rax),%eax
ffffffff800062e8:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%rbp)
ffffffff800062ee:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800062f2:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800062f6:	48 83 c1 04          	add    $0x4,%rcx
ffffffff800062fa:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800062fe:	8b 85 20 ff ff ff    	mov    -0xe0(%rbp),%eax
ffffffff80006304:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%rbp)
ffffffff8000630a:	8b 85 24 ff ff ff    	mov    -0xdc(%rbp),%eax
ffffffff80006310:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80006314:	89 01                	mov    %eax,(%rcx)
ffffffff80006316:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000631a:	48 83 c0 04          	add    $0x4,%rax
ffffffff8000631e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006322:	e9 e3 07 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006327:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000632b:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000632f:	8b 00                	mov    (%rax),%eax
ffffffff80006331:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
ffffffff80006337:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000633b:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff8000633f:	48 83 c1 04          	add    $0x4,%rcx
ffffffff80006343:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff80006347:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
ffffffff8000634d:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%rbp)
ffffffff80006353:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
ffffffff80006359:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000635d:	89 01                	mov    %eax,(%rcx)
ffffffff8000635f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006363:	48 83 c0 04          	add    $0x4,%rax
ffffffff80006367:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000636b:	e9 9a 07 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006370:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006374:	f6 40 02 01          	testb  $0x1,0x2(%rax)
ffffffff80006378:	74 34                	je     ffffffff800063ae <parse_single_table+0x56e>
ffffffff8000637a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000637e:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80006382:	8b 00                	mov    (%rax),%eax
ffffffff80006384:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
ffffffff8000638a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000638e:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80006392:	48 83 c1 04          	add    $0x4,%rcx
ffffffff80006396:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff8000639a:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
ffffffff800063a0:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
ffffffff800063a6:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
ffffffff800063ac:	eb 37                	jmp    ffffffff800063e5 <parse_single_table+0x5a5>
ffffffff800063ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800063b2:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800063b6:	66 8b 00             	mov    (%rax),%ax
ffffffff800063b9:	66 89 85 70 ff ff ff 	mov    %ax,-0x90(%rbp)
ffffffff800063c0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800063c4:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800063c8:	48 83 c1 02          	add    $0x2,%rcx
ffffffff800063cc:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800063d0:	66 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%ax
ffffffff800063d7:	66 89 85 72 ff ff ff 	mov    %ax,-0x8e(%rbp)
ffffffff800063de:	0f b7 85 72 ff ff ff 	movzwl -0x8e(%rbp),%eax
ffffffff800063e5:	89 45 90             	mov    %eax,-0x70(%rbp)
ffffffff800063e8:	8b 45 90             	mov    -0x70(%rbp),%eax
ffffffff800063eb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800063ef:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800063f3:	48 3b 41 48          	cmp    0x48(%rcx),%rax
ffffffff800063f7:	72 3b                	jb     ffffffff80006434 <parse_single_table+0x5f4>
ffffffff800063f9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80006400:	31 c0                	xor    %eax,%eax
ffffffff80006402:	e8 e9 34 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006407:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000640a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80006411:	48 89 c6             	mov    %rax,%rsi
ffffffff80006414:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff8000641b:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006422:	41 b9 34 01 00 00    	mov    $0x134,%r9d
ffffffff80006428:	31 c0                	xor    %eax,%eax
ffffffff8000642a:	e8 11 b5 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000642f:	e9 12 07 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006434:	eb 00                	jmp    ffffffff80006436 <parse_single_table+0x5f6>
ffffffff80006436:	c7 45 88 00 00 00 00 	movl   $0x0,-0x78(%rbp)
ffffffff8000643d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006441:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80006445:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80006449:	8b 4d 90             	mov    -0x70(%rbp),%ecx
ffffffff8000644c:	48 01 c8             	add    %rcx,%rax
ffffffff8000644f:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
ffffffff80006456:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000645a:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8000645e:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80006462:	8b 4d 90             	mov    -0x70(%rbp),%ecx
ffffffff80006465:	48 29 c8             	sub    %rcx,%rax
ffffffff80006468:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
ffffffff8000646f:	48 8d bd 10 ff ff ff 	lea    -0xf0(%rbp),%rdi
ffffffff80006476:	48 8d 75 88          	lea    -0x78(%rbp),%rsi
ffffffff8000647a:	e8 f1 db ff ff       	call   ffffffff80004070 <parse_compressed_integer>
ffffffff8000647f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80006482:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80006486:	74 31                	je     ffffffff800064b9 <parse_single_table+0x679>
ffffffff80006488:	31 c0                	xor    %eax,%eax
ffffffff8000648a:	e8 61 34 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000648f:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80006496:	48 89 c6             	mov    %rax,%rsi
ffffffff80006499:	48 c7 c2 85 8a 01 80 	mov    $0xffffffff80018a85,%rdx
ffffffff800064a0:	48 c7 c1 39 99 01 80 	mov    $0xffffffff80019939,%rcx
ffffffff800064a7:	41 b8 3c 01 00 00    	mov    $0x13c,%r8d
ffffffff800064ad:	31 c0                	xor    %eax,%eax
ffffffff800064af:	e8 8c b4 00 00       	call   ffffffff80011940 <printf_>
ffffffff800064b4:	e9 8d 06 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff800064b9:	eb 00                	jmp    ffffffff800064bb <parse_single_table+0x67b>
ffffffff800064bb:	eb 00                	jmp    ffffffff800064bd <parse_single_table+0x67d>
ffffffff800064bd:	8b 45 88             	mov    -0x78(%rbp),%eax
ffffffff800064c0:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800064c4:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800064c8:	48 8b 49 48          	mov    0x48(%rcx),%rcx
ffffffff800064cc:	8b 55 90             	mov    -0x70(%rbp),%edx
ffffffff800064cf:	48 29 d1             	sub    %rdx,%rcx
ffffffff800064d2:	48 39 c8             	cmp    %rcx,%rax
ffffffff800064d5:	76 3b                	jbe    ffffffff80006512 <parse_single_table+0x6d2>
ffffffff800064d7:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800064de:	31 c0                	xor    %eax,%eax
ffffffff800064e0:	e8 0b 34 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800064e5:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800064e8:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800064ef:	48 89 c6             	mov    %rax,%rsi
ffffffff800064f2:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff800064f9:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006500:	41 b9 3f 01 00 00    	mov    $0x13f,%r9d
ffffffff80006506:	31 c0                	xor    %eax,%eax
ffffffff80006508:	e8 33 b4 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000650d:	e9 34 06 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006512:	eb 00                	jmp    ffffffff80006514 <parse_single_table+0x6d4>
ffffffff80006514:	8b 45 88             	mov    -0x78(%rbp),%eax
ffffffff80006517:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
ffffffff8000651e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006522:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
ffffffff80006529:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000652c:	48 8b 8d 18 ff ff ff 	mov    -0xe8(%rbp),%rcx
ffffffff80006533:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff80006537:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000653b:	48 83 c0 10          	add    $0x10,%rax
ffffffff8000653f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006543:	e9 c2 05 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006548:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000654c:	f6 40 01 01          	testb  $0x1,0x1(%rax)
ffffffff80006550:	74 34                	je     ffffffff80006586 <parse_single_table+0x746>
ffffffff80006552:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006556:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000655a:	8b 00                	mov    (%rax),%eax
ffffffff8000655c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
ffffffff80006562:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006566:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff8000656a:	48 83 c1 04          	add    $0x4,%rcx
ffffffff8000656e:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff80006572:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
ffffffff80006578:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
ffffffff8000657e:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
ffffffff80006584:	eb 37                	jmp    ffffffff800065bd <parse_single_table+0x77d>
ffffffff80006586:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000658a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000658e:	66 8b 00             	mov    (%rax),%ax
ffffffff80006591:	66 89 85 74 ff ff ff 	mov    %ax,-0x8c(%rbp)
ffffffff80006598:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000659c:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800065a0:	48 83 c1 02          	add    $0x2,%rcx
ffffffff800065a4:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800065a8:	66 8b 85 74 ff ff ff 	mov    -0x8c(%rbp),%ax
ffffffff800065af:	66 89 85 76 ff ff ff 	mov    %ax,-0x8a(%rbp)
ffffffff800065b6:	0f b7 85 76 ff ff ff 	movzwl -0x8a(%rbp),%eax
ffffffff800065bd:	89 45 94             	mov    %eax,-0x6c(%rbp)
ffffffff800065c0:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
ffffffff800065c4:	74 51                	je     ffffffff80006617 <parse_single_table+0x7d7>
ffffffff800065c6:	8b 45 94             	mov    -0x6c(%rbp),%eax
ffffffff800065c9:	83 e8 01             	sub    $0x1,%eax
ffffffff800065cc:	89 c0                	mov    %eax,%eax
ffffffff800065ce:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800065d2:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800065d6:	48 3b 41 58          	cmp    0x58(%rcx),%rax
ffffffff800065da:	72 3b                	jb     ffffffff80006617 <parse_single_table+0x7d7>
ffffffff800065dc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800065e3:	31 c0                	xor    %eax,%eax
ffffffff800065e5:	e8 06 33 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800065ea:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800065ed:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800065f4:	48 89 c6             	mov    %rax,%rsi
ffffffff800065f7:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff800065fe:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006605:	41 b9 49 01 00 00    	mov    $0x149,%r9d
ffffffff8000660b:	31 c0                	xor    %eax,%eax
ffffffff8000660d:	e8 2e b3 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006612:	e9 2f 05 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006617:	eb 00                	jmp    ffffffff80006619 <parse_single_table+0x7d9>
ffffffff80006619:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
ffffffff8000661d:	75 04                	jne    ffffffff80006623 <parse_single_table+0x7e3>
ffffffff8000661f:	31 c0                	xor    %eax,%eax
ffffffff80006621:	eb 1b                	jmp    ffffffff8000663e <parse_single_table+0x7fe>
ffffffff80006623:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006627:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8000662b:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff8000662f:	8b 4d 94             	mov    -0x6c(%rbp),%ecx
ffffffff80006632:	83 e9 01             	sub    $0x1,%ecx
ffffffff80006635:	89 c9                	mov    %ecx,%ecx
ffffffff80006637:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8000663b:	48 01 c8             	add    %rcx,%rax
ffffffff8000663e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80006642:	48 89 01             	mov    %rax,(%rcx)
ffffffff80006645:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006649:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000664d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006651:	e9 b4 04 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000665a:	f6 00 01             	testb  $0x1,(%rax)
ffffffff8000665d:	74 34                	je     ffffffff80006693 <parse_single_table+0x853>
ffffffff8000665f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006663:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80006667:	8b 00                	mov    (%rax),%eax
ffffffff80006669:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%rbp)
ffffffff8000666f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006673:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80006677:	48 83 c1 04          	add    $0x4,%rcx
ffffffff8000667b:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff8000667f:	8b 85 40 ff ff ff    	mov    -0xc0(%rbp),%eax
ffffffff80006685:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%rbp)
ffffffff8000668b:	8b 85 44 ff ff ff    	mov    -0xbc(%rbp),%eax
ffffffff80006691:	eb 37                	jmp    ffffffff800066ca <parse_single_table+0x88a>
ffffffff80006693:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006697:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000669b:	66 8b 00             	mov    (%rax),%ax
ffffffff8000669e:	66 89 85 78 ff ff ff 	mov    %ax,-0x88(%rbp)
ffffffff800066a5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800066a9:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800066ad:	48 83 c1 02          	add    $0x2,%rcx
ffffffff800066b1:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800066b5:	66 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%ax
ffffffff800066bc:	66 89 85 7a ff ff ff 	mov    %ax,-0x86(%rbp)
ffffffff800066c3:	0f b7 85 7a ff ff ff 	movzwl -0x86(%rbp),%eax
ffffffff800066ca:	89 85 68 ff ff ff    	mov    %eax,-0x98(%rbp)
ffffffff800066d0:	8b 85 68 ff ff ff    	mov    -0x98(%rbp),%eax
ffffffff800066d6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800066da:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff800066de:	48 3b 41 28          	cmp    0x28(%rcx),%rax
ffffffff800066e2:	72 3b                	jb     ffffffff8000671f <parse_single_table+0x8df>
ffffffff800066e4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800066eb:	31 c0                	xor    %eax,%eax
ffffffff800066ed:	e8 fe 31 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800066f2:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800066f5:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800066fc:	48 89 c6             	mov    %rax,%rsi
ffffffff800066ff:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80006706:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff8000670d:	41 b9 50 01 00 00    	mov    $0x150,%r9d
ffffffff80006713:	31 c0                	xor    %eax,%eax
ffffffff80006715:	e8 26 b2 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000671a:	e9 27 04 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff8000671f:	eb 00                	jmp    ffffffff80006721 <parse_single_table+0x8e1>
ffffffff80006721:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006725:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80006729:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff8000672d:	8b 8d 68 ff ff ff    	mov    -0x98(%rbp),%ecx
ffffffff80006733:	48 01 c8             	add    %rcx,%rax
ffffffff80006736:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000673a:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000673d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006741:	48 83 c0 08          	add    $0x8,%rax
ffffffff80006745:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006749:	e9 bc 03 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff8000674e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80006752:	8b 00                	mov    (%rax),%eax
ffffffff80006754:	83 e8 07             	sub    $0x7,%eax
ffffffff80006757:	89 45 8c             	mov    %eax,-0x74(%rbp)
ffffffff8000675a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000675e:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80006763:	48 3b 48 20          	cmp    0x20(%rax),%rcx
ffffffff80006767:	76 3b                	jbe    ffffffff800067a4 <parse_single_table+0x964>
ffffffff80006769:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80006770:	31 c0                	xor    %eax,%eax
ffffffff80006772:	e8 79 31 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006777:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000677a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80006781:	48 89 c6             	mov    %rax,%rsi
ffffffff80006784:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff8000678b:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006792:	41 b9 59 01 00 00    	mov    $0x159,%r9d
ffffffff80006798:	31 c0                	xor    %eax,%eax
ffffffff8000679a:	e8 a1 b1 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000679f:	e9 a2 03 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff800067a4:	eb 00                	jmp    ffffffff800067a6 <parse_single_table+0x966>
ffffffff800067a6:	48 63 45 8c          	movslq -0x74(%rbp),%rax
ffffffff800067aa:	8a 80 a8 a2 01 80    	mov    -0x7ffe5d58(%rax),%al
ffffffff800067b0:	88 45 df             	mov    %al,-0x21(%rbp)
ffffffff800067b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800067b7:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800067bb:	0f b6 00             	movzbl (%rax),%eax
ffffffff800067be:	8a 4d df             	mov    -0x21(%rbp),%cl
ffffffff800067c1:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800067c6:	d3 e2                	shl    %cl,%edx
ffffffff800067c8:	ff ca                	dec    %edx
ffffffff800067ca:	21 d0                	and    %edx,%eax
ffffffff800067cc:	88 45 c7             	mov    %al,-0x39(%rbp)
ffffffff800067cf:	48 63 45 8c          	movslq -0x74(%rbp),%rax
ffffffff800067d3:	48 8d 04 c5 40 a2 01 	lea    -0x7ffe5dc0(,%rax,8),%rax
ffffffff800067da:	80 
ffffffff800067db:	48 8b 00             	mov    (%rax),%rax
ffffffff800067de:	0f b6 4d c7          	movzbl -0x39(%rbp),%ecx
ffffffff800067e2:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff800067e5:	88 45 ef             	mov    %al,-0x11(%rbp)
ffffffff800067e8:	0f b6 45 ef          	movzbl -0x11(%rbp),%eax
ffffffff800067ec:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff800067f0:	72 3b                	jb     ffffffff8000682d <parse_single_table+0x9ed>
ffffffff800067f2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800067f9:	31 c0                	xor    %eax,%eax
ffffffff800067fb:	e8 f0 30 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006800:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80006803:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000680a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000680d:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80006814:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff8000681b:	41 b9 5d 01 00 00    	mov    $0x15d,%r9d
ffffffff80006821:	31 c0                	xor    %eax,%eax
ffffffff80006823:	e8 18 b1 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006828:	e9 19 03 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff8000682d:	eb 00                	jmp    ffffffff8000682f <parse_single_table+0x9ef>
ffffffff8000682f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006833:	48 63 4d 8c          	movslq -0x74(%rbp),%rcx
ffffffff80006837:	f6 44 08 03 01       	testb  $0x1,0x3(%rax,%rcx,1)
ffffffff8000683c:	74 34                	je     ffffffff80006872 <parse_single_table+0xa32>
ffffffff8000683e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006842:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80006846:	8b 00                	mov    (%rax),%eax
ffffffff80006848:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%rbp)
ffffffff8000684e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006852:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff80006856:	48 83 c1 04          	add    $0x4,%rcx
ffffffff8000685a:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff8000685e:	8b 85 48 ff ff ff    	mov    -0xb8(%rbp),%eax
ffffffff80006864:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%rbp)
ffffffff8000686a:	8b 85 4c ff ff ff    	mov    -0xb4(%rbp),%eax
ffffffff80006870:	eb 37                	jmp    ffffffff800068a9 <parse_single_table+0xa69>
ffffffff80006872:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006876:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000687a:	66 8b 00             	mov    (%rax),%ax
ffffffff8000687d:	66 89 85 7c ff ff ff 	mov    %ax,-0x84(%rbp)
ffffffff80006884:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006888:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff8000688c:	48 83 c1 02          	add    $0x2,%rcx
ffffffff80006890:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff80006894:	66 8b 85 7c ff ff ff 	mov    -0x84(%rbp),%ax
ffffffff8000689b:	66 89 85 7e ff ff ff 	mov    %ax,-0x82(%rbp)
ffffffff800068a2:	0f b7 85 7e ff ff ff 	movzwl -0x82(%rbp),%eax
ffffffff800068a9:	89 45 b0             	mov    %eax,-0x50(%rbp)
ffffffff800068ac:	0f b6 4d df          	movzbl -0x21(%rbp),%ecx
ffffffff800068b0:	8b 45 b0             	mov    -0x50(%rbp),%eax
ffffffff800068b3:	d3 e8                	shr    %cl,%eax
ffffffff800068b5:	89 45 b0             	mov    %eax,-0x50(%rbp)
ffffffff800068b8:	83 7d b0 00          	cmpl   $0x0,-0x50(%rbp)
ffffffff800068bc:	74 59                	je     ffffffff80006917 <parse_single_table+0xad7>
ffffffff800068be:	8b 45 b0             	mov    -0x50(%rbp),%eax
ffffffff800068c1:	83 e8 01             	sub    $0x1,%eax
ffffffff800068c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800068c8:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff800068cc:	0f b6 55 ef          	movzbl -0x11(%rbp),%edx
ffffffff800068d0:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff800068d4:	48 01 d1             	add    %rdx,%rcx
ffffffff800068d7:	3b 41 08             	cmp    0x8(%rcx),%eax
ffffffff800068da:	76 3b                	jbe    ffffffff80006917 <parse_single_table+0xad7>
ffffffff800068dc:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800068e3:	31 c0                	xor    %eax,%eax
ffffffff800068e5:	e8 06 30 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800068ea:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800068ed:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800068f4:	48 89 c6             	mov    %rax,%rsi
ffffffff800068f7:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff800068fe:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006905:	41 b9 60 01 00 00    	mov    $0x160,%r9d
ffffffff8000690b:	31 c0                	xor    %eax,%eax
ffffffff8000690d:	e8 2e b0 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006912:	e9 2f 02 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006917:	eb 00                	jmp    ffffffff80006919 <parse_single_table+0xad9>
ffffffff80006919:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000691d:	8b 4d b0             	mov    -0x50(%rbp),%ecx
ffffffff80006920:	8b 55 a0             	mov    -0x60(%rbp),%edx
ffffffff80006923:	81 e1 ff ff ff 00    	and    $0xffffff,%ecx
ffffffff80006929:	81 e2 00 00 00 ff    	and    $0xff000000,%edx
ffffffff8000692f:	09 ca                	or     %ecx,%edx
ffffffff80006931:	89 55 a0             	mov    %edx,-0x60(%rbp)
ffffffff80006934:	0f b6 4d ef          	movzbl -0x11(%rbp),%ecx
ffffffff80006938:	8b 55 a0             	mov    -0x60(%rbp),%edx
ffffffff8000693b:	81 e1 ff 00 00 00    	and    $0xff,%ecx
ffffffff80006941:	c1 e1 18             	shl    $0x18,%ecx
ffffffff80006944:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
ffffffff8000694a:	09 ca                	or     %ecx,%edx
ffffffff8000694c:	89 55 a0             	mov    %edx,-0x60(%rbp)
ffffffff8000694f:	8b 4d a0             	mov    -0x60(%rbp),%ecx
ffffffff80006952:	89 08                	mov    %ecx,(%rax)
ffffffff80006954:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006958:	48 83 c0 04          	add    $0x4,%rax
ffffffff8000695c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006960:	e9 a5 01 00 00       	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006965:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80006969:	8b 00                	mov    (%rax),%eax
ffffffff8000696b:	83 e8 14             	sub    $0x14,%eax
ffffffff8000696e:	89 45 98             	mov    %eax,-0x68(%rbp)
ffffffff80006971:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006975:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80006979:	48 63 4d 98          	movslq -0x68(%rbp),%rcx
ffffffff8000697d:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80006981:	48 01 c8             	add    %rcx,%rax
ffffffff80006984:	81 78 08 ff ff 00 00 	cmpl   $0xffff,0x8(%rax)
ffffffff8000698b:	76 34                	jbe    ffffffff800069c1 <parse_single_table+0xb81>
ffffffff8000698d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006991:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80006995:	8b 00                	mov    (%rax),%eax
ffffffff80006997:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%rbp)
ffffffff8000699d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800069a1:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800069a5:	48 83 c1 04          	add    $0x4,%rcx
ffffffff800069a9:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800069ad:	8b 85 50 ff ff ff    	mov    -0xb0(%rbp),%eax
ffffffff800069b3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
ffffffff800069b9:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
ffffffff800069bf:	eb 2b                	jmp    ffffffff800069ec <parse_single_table+0xbac>
ffffffff800069c1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800069c5:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff800069c9:	66 8b 00             	mov    (%rax),%ax
ffffffff800069cc:	66 89 45 80          	mov    %ax,-0x80(%rbp)
ffffffff800069d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800069d4:	48 8b 48 18          	mov    0x18(%rax),%rcx
ffffffff800069d8:	48 83 c1 02          	add    $0x2,%rcx
ffffffff800069dc:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff800069e0:	66 8b 45 80          	mov    -0x80(%rbp),%ax
ffffffff800069e4:	66 89 45 82          	mov    %ax,-0x7e(%rbp)
ffffffff800069e8:	0f b7 45 82          	movzwl -0x7e(%rbp),%eax
ffffffff800069ec:	89 45 9c             	mov    %eax,-0x64(%rbp)
ffffffff800069ef:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
ffffffff800069f3:	74 77                	je     ffffffff80006a6c <parse_single_table+0xc2c>
ffffffff800069f5:	8b 45 9c             	mov    -0x64(%rbp),%eax
ffffffff800069f8:	83 e8 01             	sub    $0x1,%eax
ffffffff800069fb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800069ff:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff80006a03:	48 63 55 98          	movslq -0x68(%rbp),%rdx
ffffffff80006a07:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff80006a0b:	48 01 d1             	add    %rdx,%rcx
ffffffff80006a0e:	3b 41 08             	cmp    0x8(%rcx),%eax
ffffffff80006a11:	76 59                	jbe    ffffffff80006a6c <parse_single_table+0xc2c>
ffffffff80006a13:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80006a1a:	31 c0                	xor    %eax,%eax
ffffffff80006a1c:	e8 cf 2e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006a21:	8b 55 98             	mov    -0x68(%rbp),%edx
ffffffff80006a24:	8b 4d 9c             	mov    -0x64(%rbp),%ecx
ffffffff80006a27:	48 c7 c7 47 9d 01 80 	mov    $0xffffffff80019d47,%rdi
ffffffff80006a2e:	48 89 c6             	mov    %rax,%rsi
ffffffff80006a31:	31 c0                	xor    %eax,%eax
ffffffff80006a33:	e8 08 af 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006a38:	31 c0                	xor    %eax,%eax
ffffffff80006a3a:	e8 b1 2e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006a3f:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80006a42:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80006a49:	48 89 c6             	mov    %rax,%rsi
ffffffff80006a4c:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80006a53:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006a5a:	41 b9 6b 01 00 00    	mov    $0x16b,%r9d
ffffffff80006a60:	31 c0                	xor    %eax,%eax
ffffffff80006a62:	e8 d9 ae 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006a67:	e9 da 00 00 00       	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006a6c:	eb 00                	jmp    ffffffff80006a6e <parse_single_table+0xc2e>
ffffffff80006a6e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006a72:	8b 4d 9c             	mov    -0x64(%rbp),%ecx
ffffffff80006a75:	8b 55 a8             	mov    -0x58(%rbp),%edx
ffffffff80006a78:	81 e1 ff ff ff 00    	and    $0xffffff,%ecx
ffffffff80006a7e:	81 e2 00 00 00 ff    	and    $0xff000000,%edx
ffffffff80006a84:	09 ca                	or     %ecx,%edx
ffffffff80006a86:	89 55 a8             	mov    %edx,-0x58(%rbp)
ffffffff80006a89:	8b 4d 98             	mov    -0x68(%rbp),%ecx
ffffffff80006a8c:	8b 55 a8             	mov    -0x58(%rbp),%edx
ffffffff80006a8f:	81 e1 ff 00 00 00    	and    $0xff,%ecx
ffffffff80006a95:	c1 e1 18             	shl    $0x18,%ecx
ffffffff80006a98:	81 e2 ff ff ff 00    	and    $0xffffff,%edx
ffffffff80006a9e:	09 ca                	or     %ecx,%edx
ffffffff80006aa0:	89 55 a8             	mov    %edx,-0x58(%rbp)
ffffffff80006aa3:	8b 4d a8             	mov    -0x58(%rbp),%ecx
ffffffff80006aa6:	89 08                	mov    %ecx,(%rax)
ffffffff80006aa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006aac:	48 83 c0 04          	add    $0x4,%rax
ffffffff80006ab0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006ab4:	eb 54                	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006ab6:	eb 52                	jmp    ffffffff80006b0a <parse_single_table+0xcca>
ffffffff80006ab8:	eb 00                	jmp    ffffffff80006aba <parse_single_table+0xc7a>
ffffffff80006aba:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80006ac1:	31 c0                	xor    %eax,%eax
ffffffff80006ac3:	e8 28 2e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006ac8:	48 c7 c7 29 9d 01 80 	mov    $0xffffffff80019d29,%rdi
ffffffff80006acf:	48 89 c6             	mov    %rax,%rsi
ffffffff80006ad2:	31 c0                	xor    %eax,%eax
ffffffff80006ad4:	e8 67 ae 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006ad9:	31 c0                	xor    %eax,%eax
ffffffff80006adb:	e8 10 2e 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006ae0:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80006ae3:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80006aea:	48 89 c6             	mov    %rax,%rsi
ffffffff80006aed:	48 c7 c1 85 8a 01 80 	mov    $0xffffffff80018a85,%rcx
ffffffff80006af4:	49 c7 c0 39 99 01 80 	mov    $0xffffffff80019939,%r8
ffffffff80006afb:	41 b9 71 01 00 00    	mov    $0x171,%r9d
ffffffff80006b01:	31 c0                	xor    %eax,%eax
ffffffff80006b03:	e8 38 ae 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006b08:	eb 3c                	jmp    ffffffff80006b46 <parse_single_table+0xd06>
ffffffff80006b0a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80006b0e:	48 83 c0 04          	add    $0x4,%rax
ffffffff80006b12:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80006b16:	e9 4a f7 ff ff       	jmp    ffffffff80006265 <parse_single_table+0x425>
ffffffff80006b1b:	eb 00                	jmp    ffffffff80006b1d <parse_single_table+0xcdd>
ffffffff80006b1d:	8b 45 84             	mov    -0x7c(%rbp),%eax
ffffffff80006b20:	83 c0 01             	add    $0x1,%eax
ffffffff80006b23:	89 45 84             	mov    %eax,-0x7c(%rbp)
ffffffff80006b26:	e9 1e f7 ff ff       	jmp    ffffffff80006249 <parse_single_table+0x409>
ffffffff80006b2b:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80006b32:	48 0f af 45 d0       	imul   -0x30(%rbp),%rax
ffffffff80006b37:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80006b3b:	48 8b 51 20          	mov    0x20(%rcx),%rdx
ffffffff80006b3f:	48 29 c2             	sub    %rax,%rdx
ffffffff80006b42:	48 89 51 20          	mov    %rdx,0x20(%rcx)
ffffffff80006b46:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80006b4a:	74 02                	je     ffffffff80006b4e <parse_single_table+0xd0e>
ffffffff80006b4c:	eb 00                	jmp    ffffffff80006b4e <parse_single_table+0xd0e>
ffffffff80006b4e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80006b51:	48 81 c4 00 01 00 00 	add    $0x100,%rsp
ffffffff80006b58:	5d                   	pop    %rbp
ffffffff80006b59:	c3                   	ret    
ffffffff80006b5a:	cc                   	int3   
ffffffff80006b5b:	cc                   	int3   
ffffffff80006b5c:	cc                   	int3   
ffffffff80006b5d:	cc                   	int3   
ffffffff80006b5e:	cc                   	int3   
ffffffff80006b5f:	cc                   	int3   

ffffffff80006b60 <new_string_from_utf8>:
ffffffff80006b60:	55                   	push   %rbp
ffffffff80006b61:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006b64:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80006b68:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80006b6c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff80006b70:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff80006b74:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80006b78:	31 d2                	xor    %edx,%edx
ffffffff80006b7a:	31 c9                	xor    %ecx,%ecx
ffffffff80006b7c:	e8 7f fd 00 00       	call   ffffffff80016900 <utf8_to_utf16>
ffffffff80006b81:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80006b85:	b8 00 00 00 80       	mov    $0x80000000,%eax
ffffffff80006b8a:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80006b8e:	72 2e                	jb     ffffffff80006bbe <new_string_from_utf8+0x5e>
ffffffff80006b90:	31 c0                	xor    %eax,%eax
ffffffff80006b92:	e8 59 2d 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006b97:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80006b9e:	48 89 c6             	mov    %rax,%rsi
ffffffff80006ba1:	48 c7 c2 69 8b 01 80 	mov    $0xffffffff80018b69,%rdx
ffffffff80006ba8:	48 c7 c1 4b 93 01 80 	mov    $0xffffffff8001934b,%rcx
ffffffff80006baf:	41 b8 0a 00 00 00    	mov    $0xa,%r8d
ffffffff80006bb5:	31 c0                	xor    %eax,%eax
ffffffff80006bb7:	e8 84 ad 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006bbc:	0f 0b                	ud2    
ffffffff80006bbe:	eb 00                	jmp    ffffffff80006bc0 <new_string_from_utf8+0x60>
ffffffff80006bc0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006bc4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80006bc8:	48 8b 3d 79 55 21 00 	mov    0x215579(%rip),%rdi        # ffffffff8021c148 <tSystem_String>
ffffffff80006bcf:	48 8b 77 78          	mov    0x78(%rdi),%rsi
ffffffff80006bd3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80006bd7:	48 c1 e0 01          	shl    $0x1,%rax
ffffffff80006bdb:	48 01 c6             	add    %rax,%rsi
ffffffff80006bde:	e8 fd b2 ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff80006be3:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80006be7:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80006beb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80006bef:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006bf3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80006bf7:	89 41 28             	mov    %eax,0x28(%rcx)
ffffffff80006bfa:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff80006bfe:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80006c02:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80006c06:	48 83 c2 2c          	add    $0x2c,%rdx
ffffffff80006c0a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006c0e:	48 63 48 28          	movslq 0x28(%rax),%rcx
ffffffff80006c12:	e8 e9 fc 00 00       	call   ffffffff80016900 <utf8_to_utf16>
ffffffff80006c17:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006c1b:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80006c1f:	5d                   	pop    %rbp
ffffffff80006c20:	c3                   	ret    
ffffffff80006c21:	cc                   	int3   
ffffffff80006c22:	cc                   	int3   
ffffffff80006c23:	cc                   	int3   
ffffffff80006c24:	cc                   	int3   
ffffffff80006c25:	cc                   	int3   
ffffffff80006c26:	cc                   	int3   
ffffffff80006c27:	cc                   	int3   
ffffffff80006c28:	cc                   	int3   
ffffffff80006c29:	cc                   	int3   
ffffffff80006c2a:	cc                   	int3   
ffffffff80006c2b:	cc                   	int3   
ffffffff80006c2c:	cc                   	int3   
ffffffff80006c2d:	cc                   	int3   
ffffffff80006c2e:	cc                   	int3   
ffffffff80006c2f:	cc                   	int3   

ffffffff80006c30 <get_type_by_token>:
ffffffff80006c30:	55                   	push   %rbp
ffffffff80006c31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006c34:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80006c38:	89 75 f8             	mov    %esi,-0x8(%rbp)
ffffffff80006c3b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80006c3f:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80006c42:	25 ff ff ff 00       	and    $0xffffff,%eax
ffffffff80006c47:	83 f8 00             	cmp    $0x0,%eax
ffffffff80006c4a:	75 30                	jne    ffffffff80006c7c <get_type_by_token+0x4c>
ffffffff80006c4c:	eb 00                	jmp    ffffffff80006c4e <get_type_by_token+0x1e>
ffffffff80006c4e:	31 c0                	xor    %eax,%eax
ffffffff80006c50:	e8 9b 2c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006c55:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80006c5c:	48 89 c6             	mov    %rax,%rsi
ffffffff80006c5f:	48 c7 c2 28 a1 01 80 	mov    $0xffffffff8001a128,%rdx
ffffffff80006c66:	48 c7 c1 bd 96 01 80 	mov    $0xffffffff800196bd,%rcx
ffffffff80006c6d:	41 b8 1d 00 00 00    	mov    $0x1d,%r8d
ffffffff80006c73:	31 c0                	xor    %eax,%eax
ffffffff80006c75:	e8 c6 ac 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006c7a:	0f 0b                	ud2    
ffffffff80006c7c:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80006c7f:	c1 e8 18             	shr    $0x18,%eax
ffffffff80006c82:	83 f8 02             	cmp    $0x2,%eax
ffffffff80006c85:	75 6a                	jne    ffffffff80006cf1 <get_type_by_token+0xc1>
ffffffff80006c87:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80006c8a:	25 ff ff ff 00       	and    $0xffffff,%eax
ffffffff80006c8f:	83 e8 01             	sub    $0x1,%eax
ffffffff80006c92:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80006c96:	48 8b 49 28          	mov    0x28(%rcx),%rcx
ffffffff80006c9a:	3b 41 28             	cmp    0x28(%rcx),%eax
ffffffff80006c9d:	7c 30                	jl     ffffffff80006ccf <get_type_by_token+0x9f>
ffffffff80006c9f:	eb 00                	jmp    ffffffff80006ca1 <get_type_by_token+0x71>
ffffffff80006ca1:	31 c0                	xor    %eax,%eax
ffffffff80006ca3:	e8 48 2c 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006ca8:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80006caf:	48 89 c6             	mov    %rax,%rsi
ffffffff80006cb2:	48 c7 c2 28 a1 01 80 	mov    $0xffffffff8001a128,%rdx
ffffffff80006cb9:	48 c7 c1 bd 96 01 80 	mov    $0xffffffff800196bd,%rcx
ffffffff80006cc0:	41 b8 24 00 00 00    	mov    $0x24,%r8d
ffffffff80006cc6:	31 c0                	xor    %eax,%eax
ffffffff80006cc8:	e8 73 ac 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006ccd:	0f 0b                	ud2    
ffffffff80006ccf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006cd3:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80006cd7:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff80006cda:	81 e1 ff ff ff 00    	and    $0xffffff,%ecx
ffffffff80006ce0:	83 e9 01             	sub    $0x1,%ecx
ffffffff80006ce3:	48 63 c9             	movslq %ecx,%rcx
ffffffff80006ce6:	48 8b 44 c8 30       	mov    0x30(%rax,%rcx,8),%rax
ffffffff80006ceb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80006cef:	eb 30                	jmp    ffffffff80006d21 <get_type_by_token+0xf1>
ffffffff80006cf1:	eb 00                	jmp    ffffffff80006cf3 <get_type_by_token+0xc3>
ffffffff80006cf3:	31 c0                	xor    %eax,%eax
ffffffff80006cf5:	e8 f6 2b 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006cfa:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80006d01:	48 89 c6             	mov    %rax,%rsi
ffffffff80006d04:	48 c7 c2 28 a1 01 80 	mov    $0xffffffff8001a128,%rdx
ffffffff80006d0b:	48 c7 c1 bd 96 01 80 	mov    $0xffffffff800196bd,%rcx
ffffffff80006d12:	41 b8 2b 00 00 00    	mov    $0x2b,%r8d
ffffffff80006d18:	31 c0                	xor    %eax,%eax
ffffffff80006d1a:	e8 21 ac 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006d1f:	0f 0b                	ud2    
ffffffff80006d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80006d25:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80006d29:	5d                   	pop    %rbp
ffffffff80006d2a:	c3                   	ret    
ffffffff80006d2b:	cc                   	int3   
ffffffff80006d2c:	cc                   	int3   
ffffffff80006d2d:	cc                   	int3   
ffffffff80006d2e:	cc                   	int3   
ffffffff80006d2f:	cc                   	int3   

ffffffff80006d30 <get_array_type>:
ffffffff80006d30:	55                   	push   %rbp
ffffffff80006d31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006d34:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80006d38:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80006d3c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006d40:	48 83 78 68 00       	cmpq   $0x0,0x68(%rax)
ffffffff80006d45:	74 11                	je     ffffffff80006d58 <get_array_type+0x28>
ffffffff80006d47:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006d4b:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80006d4f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80006d53:	e9 89 01 00 00       	jmp    ffffffff80006ee1 <get_array_type+0x1b1>
ffffffff80006d58:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80006d5c:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
ffffffff80006d63:	e8 58 99 ff ff       	call   ffffffff800006c0 <mutex_lock>
ffffffff80006d68:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006d6c:	48 83 78 68 00       	cmpq   $0x0,0x68(%rax)
ffffffff80006d71:	74 21                	je     ffffffff80006d94 <get_array_type+0x64>
ffffffff80006d73:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80006d77:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
ffffffff80006d7e:	e8 9d 9b ff ff       	call   ffffffff80000920 <mutex_unlock>
ffffffff80006d83:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006d87:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80006d8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80006d8f:	e9 4d 01 00 00       	jmp    ffffffff80006ee1 <get_array_type+0x1b1>
ffffffff80006d94:	48 8b 05 a5 53 21 00 	mov    0x2153a5(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006d9b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80006d9f:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff80006da3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80006da7:	48 8b 70 78          	mov    0x78(%rax),%rsi
ffffffff80006dab:	e8 30 b1 ff ff       	call   ffffffff80001ee0 <gc_new>
ffffffff80006db0:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80006db4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80006db8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80006dbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006dc0:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80006dc4:	48 8b 7d a8          	mov    -0x58(%rbp),%rdi
ffffffff80006dc8:	48 8b 05 71 53 21 00 	mov    0x215371(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006dcf:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80006dd3:	be 30 00 00 00       	mov    $0x30,%esi
ffffffff80006dd8:	e8 b3 b1 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006ddd:	eb 00                	jmp    ffffffff80006ddf <get_array_type+0xaf>
ffffffff80006ddf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006de3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80006de7:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff80006deb:	48 8b 05 4e 53 21 00 	mov    0x21534e(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006df2:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80006df6:	be 38 00 00 00       	mov    $0x38,%esi
ffffffff80006dfb:	e8 90 b1 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006e00:	eb 00                	jmp    ffffffff80006e02 <get_array_type+0xd2>
ffffffff80006e02:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006e06:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80006e0a:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80006e0e:	48 8b 05 2b 53 21 00 	mov    0x21532b(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006e15:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80006e19:	be 40 00 00 00       	mov    $0x40,%esi
ffffffff80006e1e:	e8 6d b1 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006e23:	eb 00                	jmp    ffffffff80006e25 <get_array_type+0xf5>
ffffffff80006e25:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006e29:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80006e2d:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff80006e31:	48 8b 05 08 53 21 00 	mov    0x215308(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006e38:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff80006e3c:	be 30 00 00 00       	mov    $0x30,%esi
ffffffff80006e41:	e8 4a b1 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006e46:	eb 00                	jmp    ffffffff80006e48 <get_array_type+0x118>
ffffffff80006e48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006e4c:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80006e50:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80006e54:	48 8b 05 e5 52 21 00 	mov    0x2152e5(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006e5b:	48 8b 50 50          	mov    0x50(%rax),%rdx
ffffffff80006e5f:	be 50 00 00 00       	mov    $0x50,%esi
ffffffff80006e64:	e8 27 b1 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006e69:	48 8b 05 d0 52 21 00 	mov    0x2152d0(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006e70:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff80006e74:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80006e78:	48 89 41 70          	mov    %rax,0x70(%rcx)
ffffffff80006e7c:	48 8b 05 bd 52 21 00 	mov    0x2152bd(%rip),%rax        # ffffffff8021c140 <tSystem_Array>
ffffffff80006e83:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff80006e87:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80006e8b:	48 89 41 78          	mov    %rax,0x78(%rcx)
ffffffff80006e8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006e93:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80006e97:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff80006e9b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80006e9f:	be 60 00 00 00       	mov    $0x60,%esi
ffffffff80006ea4:	e8 e7 b0 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006ea9:	eb 00                	jmp    ffffffff80006eab <get_array_type+0x17b>
ffffffff80006eab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006eaf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80006eb3:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80006eb7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80006ebb:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80006ec0:	e8 cb b0 ff ff       	call   ffffffff80001f90 <gc_update>
ffffffff80006ec5:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80006ec9:	48 81 c7 80 00 00 00 	add    $0x80,%rdi
ffffffff80006ed0:	e8 4b 9a ff ff       	call   ffffffff80000920 <mutex_unlock>
ffffffff80006ed5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006ed9:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff80006edd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80006ee1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80006ee5:	48 83 c4 60          	add    $0x60,%rsp
ffffffff80006ee9:	5d                   	pop    %rbp
ffffffff80006eea:	c3                   	ret    
ffffffff80006eeb:	cc                   	int3   
ffffffff80006eec:	cc                   	int3   
ffffffff80006eed:	cc                   	int3   
ffffffff80006eee:	cc                   	int3   
ffffffff80006eef:	cc                   	int3   

ffffffff80006ef0 <init_gdt>:
ffffffff80006ef0:	55                   	push   %rbp
ffffffff80006ef1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006ef4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80006ef8:	48 8d 45 f0          	lea    -0x10(%rbp),%rax
ffffffff80006efc:	66 8b 0d 4d 35 01 00 	mov    0x1354d(%rip),%cx        # ffffffff8001a450 <m_table_ops+0x170>
ffffffff80006f03:	66 89 48 08          	mov    %cx,0x8(%rax)
ffffffff80006f07:	48 8b 0d 3a 35 01 00 	mov    0x1353a(%rip),%rcx        # ffffffff8001a448 <m_table_ops+0x168>
ffffffff80006f0e:	48 89 08             	mov    %rcx,(%rax)
ffffffff80006f11:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
ffffffff80006f15:	e8 26 00 00 00       	call   ffffffff80006f40 <__lgdt>
ffffffff80006f1a:	48 89 e0             	mov    %rsp,%rax
ffffffff80006f1d:	6a 10                	push   $0x10
ffffffff80006f1f:	50                   	push   %rax
ffffffff80006f20:	9c                   	pushf  
ffffffff80006f21:	6a 08                	push   $0x8
ffffffff80006f23:	68 2a 6f 00 80       	push   $0xffffffff80006f2a
ffffffff80006f28:	48 cf                	iretq  
ffffffff80006f2a:	66 b8 10 00          	mov    $0x10,%ax
ffffffff80006f2e:	8e d0                	mov    %eax,%ss
ffffffff80006f30:	8e d8                	mov    %eax,%ds
ffffffff80006f32:	8e c0                	mov    %eax,%es
ffffffff80006f34:	8e e0                	mov    %eax,%fs
ffffffff80006f36:	8e e8                	mov    %eax,%gs
ffffffff80006f38:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80006f3c:	5d                   	pop    %rbp
ffffffff80006f3d:	c3                   	ret    
ffffffff80006f3e:	cc                   	int3   
ffffffff80006f3f:	cc                   	int3   

ffffffff80006f40 <__lgdt>:
ffffffff80006f40:	55                   	push   %rbp
ffffffff80006f41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006f44:	50                   	push   %rax
ffffffff80006f45:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80006f49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80006f4d:	0f 01 10             	lgdt   (%rax)
ffffffff80006f50:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80006f54:	5d                   	pop    %rbp
ffffffff80006f55:	c3                   	ret    
ffffffff80006f56:	cc                   	int3   
ffffffff80006f57:	cc                   	int3   
ffffffff80006f58:	cc                   	int3   
ffffffff80006f59:	cc                   	int3   
ffffffff80006f5a:	cc                   	int3   
ffffffff80006f5b:	cc                   	int3   
ffffffff80006f5c:	cc                   	int3   
ffffffff80006f5d:	cc                   	int3   
ffffffff80006f5e:	cc                   	int3   
ffffffff80006f5f:	cc                   	int3   

ffffffff80006f60 <common_exception_handler>:
ffffffff80006f60:	55                   	push   %rbp
ffffffff80006f61:	48 89 e5             	mov    %rsp,%rbp
ffffffff80006f64:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80006f68:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80006f6c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80006f73:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006f77:	48 83 78 78 0e       	cmpq   $0xe,0x78(%rax)
ffffffff80006f7c:	0f 85 83 00 00 00    	jne    ffffffff80007005 <common_exception_handler+0xa5>
ffffffff80006f82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80006f86:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80006f8d:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80006f90:	0f 20 d0             	mov    %cr2,%rax
ffffffff80006f93:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80006f97:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80006f9b:	8a 45 f8             	mov    -0x8(%rbp),%al
ffffffff80006f9e:	c0 e8 01             	shr    $0x1,%al
ffffffff80006fa1:	24 01                	and    $0x1,%al
ffffffff80006fa3:	0f b6 c0             	movzbl %al,%eax
ffffffff80006fa6:	31 f6                	xor    %esi,%esi
ffffffff80006fa8:	83 f8 00             	cmp    $0x0,%eax
ffffffff80006fab:	40 0f 95 c6          	setne  %sil
ffffffff80006faf:	8a 45 f8             	mov    -0x8(%rbp),%al
ffffffff80006fb2:	24 01                	and    $0x1,%al
ffffffff80006fb4:	0f b6 c0             	movzbl %al,%eax
ffffffff80006fb7:	31 d2                	xor    %edx,%edx
ffffffff80006fb9:	83 f8 00             	cmp    $0x0,%eax
ffffffff80006fbc:	0f 95 c2             	setne  %dl
ffffffff80006fbf:	83 e6 01             	and    $0x1,%esi
ffffffff80006fc2:	83 e2 01             	and    $0x1,%edx
ffffffff80006fc5:	e8 d6 42 00 00       	call   ffffffff8000b2a0 <vmm_page_fault_handler>
ffffffff80006fca:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80006fcd:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80006fd1:	74 2e                	je     ffffffff80007001 <common_exception_handler+0xa1>
ffffffff80006fd3:	31 c0                	xor    %eax,%eax
ffffffff80006fd5:	e8 16 29 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80006fda:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff80006fe1:	48 89 c6             	mov    %rax,%rsi
ffffffff80006fe4:	48 c7 c2 e5 90 01 80 	mov    $0xffffffff800190e5,%rdx
ffffffff80006feb:	48 c7 c1 3a a1 01 80 	mov    $0xffffffff8001a13a,%rcx
ffffffff80006ff2:	41 b8 55 01 00 00    	mov    $0x155,%r8d
ffffffff80006ff8:	31 c0                	xor    %eax,%eax
ffffffff80006ffa:	e8 41 a9 00 00       	call   ffffffff80011940 <printf_>
ffffffff80006fff:	eb 0f                	jmp    ffffffff80007010 <common_exception_handler+0xb0>
ffffffff80007001:	eb 00                	jmp    ffffffff80007003 <common_exception_handler+0xa3>
ffffffff80007003:	eb 09                	jmp    ffffffff8000700e <common_exception_handler+0xae>
ffffffff80007005:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80007009:	e8 42 01 00 00       	call   ffffffff80007150 <default_exception_handler>
ffffffff8000700e:	eb 00                	jmp    ffffffff80007010 <common_exception_handler+0xb0>
ffffffff80007010:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80007014:	74 09                	je     ffffffff8000701f <common_exception_handler+0xbf>
ffffffff80007016:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000701a:	e8 31 01 00 00       	call   ffffffff80007150 <default_exception_handler>
ffffffff8000701f:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80007023:	5d                   	pop    %rbp
ffffffff80007024:	c3                   	ret    
ffffffff80007025:	cc                   	int3   
ffffffff80007026:	cc                   	int3   
ffffffff80007027:	cc                   	int3   
ffffffff80007028:	cc                   	int3   
ffffffff80007029:	cc                   	int3   
ffffffff8000702a:	cc                   	int3   
ffffffff8000702b:	cc                   	int3   
ffffffff8000702c:	cc                   	int3   
ffffffff8000702d:	cc                   	int3   
ffffffff8000702e:	cc                   	int3   
ffffffff8000702f:	cc                   	int3   

ffffffff80007030 <common_interrupt_handler>:
ffffffff80007030:	55                   	push   %rbp
ffffffff80007031:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007034:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80007038:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000703c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80007043:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007047:	48 8b 40 78          	mov    0x78(%rax),%rax
ffffffff8000704b:	48 89 c1             	mov    %rax,%rcx
ffffffff8000704e:	48 83 e9 60          	sub    $0x60,%rcx
ffffffff80007052:	74 36                	je     ffffffff8000708a <common_interrupt_handler+0x5a>
ffffffff80007054:	eb 00                	jmp    ffffffff80007056 <common_interrupt_handler+0x26>
ffffffff80007056:	48 89 c1             	mov    %rax,%rcx
ffffffff80007059:	48 81 e9 f0 00 00 00 	sub    $0xf0,%rcx
ffffffff80007060:	74 42                	je     ffffffff800070a4 <common_interrupt_handler+0x74>
ffffffff80007062:	eb 00                	jmp    ffffffff80007064 <common_interrupt_handler+0x34>
ffffffff80007064:	48 89 c1             	mov    %rax,%rcx
ffffffff80007067:	48 81 e9 f1 00 00 00 	sub    $0xf1,%rcx
ffffffff8000706e:	74 43                	je     ffffffff800070b3 <common_interrupt_handler+0x83>
ffffffff80007070:	eb 00                	jmp    ffffffff80007072 <common_interrupt_handler+0x42>
ffffffff80007072:	48 89 c1             	mov    %rax,%rcx
ffffffff80007075:	48 81 e9 f2 00 00 00 	sub    $0xf2,%rcx
ffffffff8000707c:	74 40                	je     ffffffff800070be <common_interrupt_handler+0x8e>
ffffffff8000707e:	eb 00                	jmp    ffffffff80007080 <common_interrupt_handler+0x50>
ffffffff80007080:	48 2d f3 00 00 00    	sub    $0xf3,%rax
ffffffff80007086:	74 41                	je     ffffffff800070c9 <common_interrupt_handler+0x99>
ffffffff80007088:	eb 4a                	jmp    ffffffff800070d4 <common_interrupt_handler+0xa4>
ffffffff8000708a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000708e:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80007093:	e8 98 d1 00 00       	call   ffffffff80014230 <scheduler_on_schedule>
ffffffff80007098:	31 c0                	xor    %eax,%eax
ffffffff8000709a:	e8 f1 2a 00 00       	call   ffffffff80009b90 <lapic_eoi>
ffffffff8000709f:	e9 8a 00 00 00       	jmp    ffffffff8000712e <common_interrupt_handler+0xfe>
ffffffff800070a4:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800070a8:	31 c0                	xor    %eax,%eax
ffffffff800070aa:	31 f6                	xor    %esi,%esi
ffffffff800070ac:	e8 7f d1 00 00       	call   ffffffff80014230 <scheduler_on_schedule>
ffffffff800070b1:	eb 7b                	jmp    ffffffff8000712e <common_interrupt_handler+0xfe>
ffffffff800070b3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800070b7:	e8 d4 dc 00 00       	call   ffffffff80014d90 <scheduler_on_yield>
ffffffff800070bc:	eb 70                	jmp    ffffffff8000712e <common_interrupt_handler+0xfe>
ffffffff800070be:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800070c2:	e8 69 dd 00 00       	call   ffffffff80014e30 <scheduler_on_park>
ffffffff800070c7:	eb 65                	jmp    ffffffff8000712e <common_interrupt_handler+0xfe>
ffffffff800070c9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800070cd:	e8 1e de 00 00       	call   ffffffff80014ef0 <scheduler_on_drop>
ffffffff800070d2:	eb 5a                	jmp    ffffffff8000712e <common_interrupt_handler+0xfe>
ffffffff800070d4:	eb 00                	jmp    ffffffff800070d6 <common_interrupt_handler+0xa6>
ffffffff800070d6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff800070dd:	31 c0                	xor    %eax,%eax
ffffffff800070df:	e8 0c 28 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800070e4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800070e8:	48 8b 51 78          	mov    0x78(%rcx),%rdx
ffffffff800070ec:	48 c7 c7 40 8d 01 80 	mov    $0xffffffff80018d40,%rdi
ffffffff800070f3:	48 89 c6             	mov    %rax,%rsi
ffffffff800070f6:	31 c0                	xor    %eax,%eax
ffffffff800070f8:	e8 43 a8 00 00       	call   ffffffff80011940 <printf_>
ffffffff800070fd:	31 c0                	xor    %eax,%eax
ffffffff800070ff:	e8 ec 27 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007104:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80007107:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000710e:	48 89 c6             	mov    %rax,%rsi
ffffffff80007111:	48 c7 c1 6c 93 01 80 	mov    $0xffffffff8001936c,%rcx
ffffffff80007118:	49 c7 c0 3a a1 01 80 	mov    $0xffffffff8001a13a,%r8
ffffffff8000711f:	41 b9 d2 02 00 00    	mov    $0x2d2,%r9d
ffffffff80007125:	31 c0                	xor    %eax,%eax
ffffffff80007127:	e8 14 a8 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000712c:	eb 02                	jmp    ffffffff80007130 <common_interrupt_handler+0x100>
ffffffff8000712e:	eb 00                	jmp    ffffffff80007130 <common_interrupt_handler+0x100>
ffffffff80007130:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80007134:	74 05                	je     ffffffff8000713b <common_interrupt_handler+0x10b>
ffffffff80007136:	eb 00                	jmp    ffffffff80007138 <common_interrupt_handler+0x108>
ffffffff80007138:	f4                   	hlt    
ffffffff80007139:	eb fd                	jmp    ffffffff80007138 <common_interrupt_handler+0x108>
ffffffff8000713b:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000713f:	5d                   	pop    %rbp
ffffffff80007140:	c3                   	ret    
ffffffff80007141:	cc                   	int3   
ffffffff80007142:	cc                   	int3   
ffffffff80007143:	cc                   	int3   
ffffffff80007144:	cc                   	int3   
ffffffff80007145:	cc                   	int3   
ffffffff80007146:	cc                   	int3   
ffffffff80007147:	cc                   	int3   
ffffffff80007148:	cc                   	int3   
ffffffff80007149:	cc                   	int3   
ffffffff8000714a:	cc                   	int3   
ffffffff8000714b:	cc                   	int3   
ffffffff8000714c:	cc                   	int3   
ffffffff8000714d:	cc                   	int3   
ffffffff8000714e:	cc                   	int3   
ffffffff8000714f:	cc                   	int3   

ffffffff80007150 <default_exception_handler>:
ffffffff80007150:	55                   	push   %rbp
ffffffff80007151:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007154:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80007158:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000715c:	48 c7 c7 d8 c1 21 80 	mov    $0xffffffff8021c1d8,%rdi
ffffffff80007163:	e8 e8 98 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff80007168:	31 c0                	xor    %eax,%eax
ffffffff8000716a:	e8 81 27 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000716f:	48 c7 c7 b3 8b 01 80 	mov    $0xffffffff80018bb3,%rdi
ffffffff80007176:	48 89 c6             	mov    %rax,%rsi
ffffffff80007179:	31 c0                	xor    %eax,%eax
ffffffff8000717b:	e8 c0 a7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007180:	31 c0                	xor    %eax,%eax
ffffffff80007182:	e8 69 27 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007187:	48 c7 c7 69 a0 01 80 	mov    $0xffffffff8001a069,%rdi
ffffffff8000718e:	48 89 c6             	mov    %rax,%rsi
ffffffff80007191:	31 c0                	xor    %eax,%eax
ffffffff80007193:	e8 a8 a7 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007198:	31 c0                	xor    %eax,%eax
ffffffff8000719a:	e8 51 27 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000719f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800071a3:	48 8b 49 78          	mov    0x78(%rcx),%rcx
ffffffff800071a7:	48 8d 0c cd 60 a4 01 	lea    -0x7ffe5ba0(,%rcx,8),%rcx
ffffffff800071ae:	80 
ffffffff800071af:	48 8b 11             	mov    (%rcx),%rdx
ffffffff800071b2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800071b6:	48 8b 89 80 00 00 00 	mov    0x80(%rcx),%rcx
ffffffff800071bd:	48 c7 c7 56 9a 01 80 	mov    $0xffffffff80019a56,%rdi
ffffffff800071c4:	48 89 c6             	mov    %rax,%rsi
ffffffff800071c7:	31 c0                	xor    %eax,%eax
ffffffff800071c9:	e8 72 a7 00 00       	call   ffffffff80011940 <printf_>
ffffffff800071ce:	31 c0                	xor    %eax,%eax
ffffffff800071d0:	e8 1b 27 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800071d5:	48 c7 c7 69 a0 01 80 	mov    $0xffffffff8001a069,%rdi
ffffffff800071dc:	48 89 c6             	mov    %rax,%rsi
ffffffff800071df:	31 c0                	xor    %eax,%eax
ffffffff800071e1:	e8 5a a7 00 00       	call   ffffffff80011940 <printf_>
ffffffff800071e6:	31 c0                	xor    %eax,%eax
ffffffff800071e8:	e8 03 27 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800071ed:	48 c7 c7 b3 8b 01 80 	mov    $0xffffffff80018bb3,%rdi
ffffffff800071f4:	48 89 c6             	mov    %rax,%rsi
ffffffff800071f7:	31 c0                	xor    %eax,%eax
ffffffff800071f9:	e8 42 a7 00 00       	call   ffffffff80011940 <printf_>
ffffffff800071fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007202:	48 83 78 78 0e       	cmpq   $0xe,0x78(%rax)
ffffffff80007207:	0f 85 f0 00 00 00    	jne    ffffffff800072fd <default_exception_handler+0x1ad>
ffffffff8000720d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80007211:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff80007218:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff8000721b:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff8000721e:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80007221:	8a 45 f0             	mov    -0x10(%rbp),%al
ffffffff80007224:	c0 e8 03             	shr    $0x3,%al
ffffffff80007227:	24 01                	and    $0x1,%al
ffffffff80007229:	0f b6 c0             	movzbl %al,%eax
ffffffff8000722c:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000722f:	74 1d                	je     ffffffff8000724e <default_exception_handler+0xfe>
ffffffff80007231:	31 c0                	xor    %eax,%eax
ffffffff80007233:	e8 b8 26 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007238:	48 c7 c7 c0 8e 01 80 	mov    $0xffffffff80018ec0,%rdi
ffffffff8000723f:	48 89 c6             	mov    %rax,%rsi
ffffffff80007242:	31 c0                	xor    %eax,%eax
ffffffff80007244:	e8 f7 a6 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007249:	e9 97 00 00 00       	jmp    ffffffff800072e5 <default_exception_handler+0x195>
ffffffff8000724e:	8a 45 f0             	mov    -0x10(%rbp),%al
ffffffff80007251:	c0 e8 04             	shr    $0x4,%al
ffffffff80007254:	24 01                	and    $0x1,%al
ffffffff80007256:	0f b6 c0             	movzbl %al,%eax
ffffffff80007259:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000725c:	74 1a                	je     ffffffff80007278 <default_exception_handler+0x128>
ffffffff8000725e:	31 c0                	xor    %eax,%eax
ffffffff80007260:	e8 8b 26 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007265:	48 c7 c7 4c a1 01 80 	mov    $0xffffffff8001a14c,%rdi
ffffffff8000726c:	48 89 c6             	mov    %rax,%rsi
ffffffff8000726f:	31 c0                	xor    %eax,%eax
ffffffff80007271:	e8 ca a6 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007276:	eb 6b                	jmp    ffffffff800072e3 <default_exception_handler+0x193>
ffffffff80007278:	8a 45 f0             	mov    -0x10(%rbp),%al
ffffffff8000727b:	d0 e8                	shr    %al
ffffffff8000727d:	24 01                	and    $0x1,%al
ffffffff8000727f:	0f b6 c8             	movzbl %al,%ecx
ffffffff80007282:	48 c7 c1 64 8d 01 80 	mov    $0xffffffff80018d64,%rcx
ffffffff80007289:	48 c7 c2 98 8a 01 80 	mov    $0xffffffff80018a98,%rdx
ffffffff80007290:	84 c0                	test   %al,%al
ffffffff80007292:	48 0f 45 d1          	cmovne %rcx,%rdx
ffffffff80007296:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8000729a:	8a 45 f0             	mov    -0x10(%rbp),%al
ffffffff8000729d:	24 01                	and    $0x1,%al
ffffffff8000729f:	0f b6 c0             	movzbl %al,%eax
ffffffff800072a2:	83 f8 00             	cmp    $0x0,%eax
ffffffff800072a5:	74 1e                	je     ffffffff800072c5 <default_exception_handler+0x175>
ffffffff800072a7:	31 c0                	xor    %eax,%eax
ffffffff800072a9:	e8 42 26 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800072ae:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800072b2:	48 c7 c7 98 94 01 80 	mov    $0xffffffff80019498,%rdi
ffffffff800072b9:	48 89 c6             	mov    %rax,%rsi
ffffffff800072bc:	31 c0                	xor    %eax,%eax
ffffffff800072be:	e8 7d a6 00 00       	call   ffffffff80011940 <printf_>
ffffffff800072c3:	eb 1c                	jmp    ffffffff800072e1 <default_exception_handler+0x191>
ffffffff800072c5:	31 c0                	xor    %eax,%eax
ffffffff800072c7:	e8 24 26 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800072cc:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800072d0:	48 c7 c7 5c 9d 01 80 	mov    $0xffffffff80019d5c,%rdi
ffffffff800072d7:	48 89 c6             	mov    %rax,%rsi
ffffffff800072da:	31 c0                	xor    %eax,%eax
ffffffff800072dc:	e8 5f a6 00 00       	call   ffffffff80011940 <printf_>
ffffffff800072e1:	eb 00                	jmp    ffffffff800072e3 <default_exception_handler+0x193>
ffffffff800072e3:	eb 00                	jmp    ffffffff800072e5 <default_exception_handler+0x195>
ffffffff800072e5:	31 c0                	xor    %eax,%eax
ffffffff800072e7:	e8 04 26 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800072ec:	48 c7 c7 b3 8b 01 80 	mov    $0xffffffff80018bb3,%rdi
ffffffff800072f3:	48 89 c6             	mov    %rax,%rsi
ffffffff800072f6:	31 c0                	xor    %eax,%eax
ffffffff800072f8:	e8 43 a6 00 00       	call   ffffffff80011940 <printf_>
ffffffff800072fd:	31 c0                	xor    %eax,%eax
ffffffff800072ff:	e8 ec 25 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007304:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80007308:	48 8b 51 70          	mov    0x70(%rcx),%rdx
ffffffff8000730c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80007310:	48 8b 49 68          	mov    0x68(%rcx),%rcx
ffffffff80007314:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80007318:	4c 8b 46 60          	mov    0x60(%rsi),%r8
ffffffff8000731c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80007320:	4c 8b 4e 58          	mov    0x58(%rsi),%r9
ffffffff80007324:	48 c7 c7 85 93 01 80 	mov    $0xffffffff80019385,%rdi
ffffffff8000732b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000732e:	31 c0                	xor    %eax,%eax
ffffffff80007330:	e8 0b a6 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007335:	31 c0                	xor    %eax,%eax
ffffffff80007337:	e8 b4 25 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000733c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80007340:	48 8b 51 50          	mov    0x50(%rcx),%rdx
ffffffff80007344:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80007348:	48 8b 49 48          	mov    0x48(%rcx),%rcx
ffffffff8000734c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80007350:	4c 8b 46 40          	mov    0x40(%rsi),%r8
ffffffff80007354:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80007358:	4c 8b 8e a0 00 00 00 	mov    0xa0(%rsi),%r9
ffffffff8000735f:	48 c7 c7 c0 94 01 80 	mov    $0xffffffff800194c0,%rdi
ffffffff80007366:	48 89 c6             	mov    %rax,%rsi
ffffffff80007369:	31 c0                	xor    %eax,%eax
ffffffff8000736b:	e8 d0 a5 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007370:	31 c0                	xor    %eax,%eax
ffffffff80007372:	e8 79 25 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007377:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000737b:	48 8b 51 38          	mov    0x38(%rcx),%rdx
ffffffff8000737f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80007383:	48 8b 49 30          	mov    0x30(%rcx),%rcx
ffffffff80007387:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000738b:	4c 8b 46 28          	mov    0x28(%rsi),%r8
ffffffff8000738f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff80007393:	4c 8b 4e 20          	mov    0x20(%rsi),%r9
ffffffff80007397:	48 c7 c7 37 9e 01 80 	mov    $0xffffffff80019e37,%rdi
ffffffff8000739e:	48 89 c6             	mov    %rax,%rsi
ffffffff800073a1:	31 c0                	xor    %eax,%eax
ffffffff800073a3:	e8 98 a5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800073a8:	31 c0                	xor    %eax,%eax
ffffffff800073aa:	e8 41 25 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800073af:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800073b3:	48 8b 51 18          	mov    0x18(%rcx),%rdx
ffffffff800073b7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800073bb:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff800073bf:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff800073c3:	4c 8b 46 08          	mov    0x8(%rsi),%r8
ffffffff800073c7:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff800073cb:	4c 8b 0e             	mov    (%rsi),%r9
ffffffff800073ce:	48 c7 c7 f7 94 01 80 	mov    $0xffffffff800194f7,%rdi
ffffffff800073d5:	48 89 c6             	mov    %rax,%rsi
ffffffff800073d8:	31 c0                	xor    %eax,%eax
ffffffff800073da:	e8 61 a5 00 00       	call   ffffffff80011940 <printf_>
ffffffff800073df:	31 c0                	xor    %eax,%eax
ffffffff800073e1:	e8 0a 25 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800073e6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800073ea:	48 8b 91 88 00 00 00 	mov    0x88(%rcx),%rdx
ffffffff800073f1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800073f5:	48 8b 89 98 00 00 00 	mov    0x98(%rcx),%rcx
ffffffff800073fc:	48 c7 c7 80 99 01 80 	mov    $0xffffffff80019980,%rdi
ffffffff80007403:	48 89 c6             	mov    %rax,%rsi
ffffffff80007406:	31 c0                	xor    %eax,%eax
ffffffff80007408:	e8 33 a5 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000740d:	31 c0                	xor    %eax,%eax
ffffffff8000740f:	e8 dc 24 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007414:	48 89 c6             	mov    %rax,%rsi
ffffffff80007417:	c7 45 d0 00 01 00 c0 	movl   $0xc0000100,-0x30(%rbp)
ffffffff8000741e:	8b 4d d0             	mov    -0x30(%rbp),%ecx
ffffffff80007421:	0f 32                	rdmsr  
ffffffff80007423:	89 55 d8             	mov    %edx,-0x28(%rbp)
ffffffff80007426:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80007429:	44 8b 45 d8          	mov    -0x28(%rbp),%r8d
ffffffff8000742d:	49 c1 e0 20          	shl    $0x20,%r8
ffffffff80007431:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80007434:	49 09 c0             	or     %rax,%r8
ffffffff80007437:	c7 45 dc 01 01 00 c0 	movl   $0xc0000101,-0x24(%rbp)
ffffffff8000743e:	8b 4d dc             	mov    -0x24(%rbp),%ecx
ffffffff80007441:	0f 32                	rdmsr  
ffffffff80007443:	89 55 e4             	mov    %edx,-0x1c(%rbp)
ffffffff80007446:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff80007449:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff8000744c:	48 c1 e1 20          	shl    $0x20,%rcx
ffffffff80007450:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff80007453:	48 09 c1             	or     %rax,%rcx
ffffffff80007456:	48 c7 c7 1d 92 01 80 	mov    $0xffffffff8001921d,%rdi
ffffffff8000745d:	4c 89 c2             	mov    %r8,%rdx
ffffffff80007460:	31 c0                	xor    %eax,%eax
ffffffff80007462:	e8 d9 a4 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007467:	31 c0                	xor    %eax,%eax
ffffffff80007469:	e8 82 24 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000746e:	0f 20 c1             	mov    %cr0,%rcx
ffffffff80007471:	48 89 4d b8          	mov    %rcx,-0x48(%rbp)
ffffffff80007475:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80007479:	0f 20 d1             	mov    %cr2,%rcx
ffffffff8000747c:	48 89 4d c0          	mov    %rcx,-0x40(%rbp)
ffffffff80007480:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff80007484:	0f 20 de             	mov    %cr3,%rsi
ffffffff80007487:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff8000748b:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
ffffffff8000748f:	0f 20 e6             	mov    %cr4,%rsi
ffffffff80007492:	48 89 75 a8          	mov    %rsi,-0x58(%rbp)
ffffffff80007496:	4c 8b 4d a8          	mov    -0x58(%rbp),%r9
ffffffff8000749a:	48 c7 c7 b8 9b 01 80 	mov    $0xffffffff80019bb8,%rdi
ffffffff800074a1:	48 89 c6             	mov    %rax,%rsi
ffffffff800074a4:	31 c0                	xor    %eax,%eax
ffffffff800074a6:	e8 95 a4 00 00       	call   ffffffff80011940 <printf_>
ffffffff800074ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800074af:	48 83 78 78 0e       	cmpq   $0xe,0x78(%rax)
ffffffff800074b4:	75 10                	jne    ffffffff800074c6 <default_exception_handler+0x376>
ffffffff800074b6:	8a 45 f0             	mov    -0x10(%rbp),%al
ffffffff800074b9:	c0 e8 04             	shr    $0x4,%al
ffffffff800074bc:	24 01                	and    $0x1,%al
ffffffff800074be:	0f b6 c0             	movzbl %al,%eax
ffffffff800074c1:	83 f8 00             	cmp    $0x0,%eax
ffffffff800074c4:	75 40                	jne    ffffffff80007506 <default_exception_handler+0x3b6>
ffffffff800074c6:	31 c0                	xor    %eax,%eax
ffffffff800074c8:	e8 23 24 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800074cd:	48 c7 c7 b3 8b 01 80 	mov    $0xffffffff80018bb3,%rdi
ffffffff800074d4:	48 89 c6             	mov    %rax,%rsi
ffffffff800074d7:	31 c0                	xor    %eax,%eax
ffffffff800074d9:	e8 62 a4 00 00       	call   ffffffff80011940 <printf_>
ffffffff800074de:	31 c0                	xor    %eax,%eax
ffffffff800074e0:	e8 0b 24 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff800074e5:	48 c7 c7 c3 8b 01 80 	mov    $0xffffffff80018bc3,%rdi
ffffffff800074ec:	48 89 c6             	mov    %rax,%rsi
ffffffff800074ef:	31 c0                	xor    %eax,%eax
ffffffff800074f1:	e8 4a a4 00 00       	call   ffffffff80011940 <printf_>
ffffffff800074f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800074fa:	48 8b b8 88 00 00 00 	mov    0x88(%rax),%rdi
ffffffff80007501:	e8 da a4 ff ff       	call   ffffffff800019e0 <debug_disasm_at>
ffffffff80007506:	31 c0                	xor    %eax,%eax
ffffffff80007508:	e8 e3 23 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000750d:	48 c7 c7 b3 8b 01 80 	mov    $0xffffffff80018bb3,%rdi
ffffffff80007514:	48 89 c6             	mov    %rax,%rsi
ffffffff80007517:	31 c0                	xor    %eax,%eax
ffffffff80007519:	e8 22 a4 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000751e:	31 c0                	xor    %eax,%eax
ffffffff80007520:	e8 cb 23 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff80007525:	48 c7 c7 a3 89 01 80 	mov    $0xffffffff800189a3,%rdi
ffffffff8000752c:	48 89 c6             	mov    %rax,%rsi
ffffffff8000752f:	31 c0                	xor    %eax,%eax
ffffffff80007531:	e8 0a a4 00 00       	call   ffffffff80011940 <printf_>
ffffffff80007536:	48 c7 c7 d8 c1 21 80 	mov    $0xffffffff8021c1d8,%rdi
ffffffff8000753d:	e8 fe 95 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff80007542:	f4                   	hlt    
ffffffff80007543:	eb fd                	jmp    ffffffff80007542 <default_exception_handler+0x3f2>
ffffffff80007545:	cc                   	int3   
ffffffff80007546:	cc                   	int3   
ffffffff80007547:	cc                   	int3   
ffffffff80007548:	cc                   	int3   
ffffffff80007549:	cc                   	int3   
ffffffff8000754a:	cc                   	int3   
ffffffff8000754b:	cc                   	int3   
ffffffff8000754c:	cc                   	int3   
ffffffff8000754d:	cc                   	int3   
ffffffff8000754e:	cc                   	int3   
ffffffff8000754f:	cc                   	int3   

ffffffff80007550 <init_idt>:
ffffffff80007550:	55                   	push   %rbp
ffffffff80007551:	48 89 e5             	mov    %rsp,%rbp
ffffffff80007554:	31 c0                	xor    %eax,%eax
ffffffff80007556:	31 ff                	xor    %edi,%edi
ffffffff80007558:	48 c7 c6 60 86 00 80 	mov    $0xffffffff80008660,%rsi
ffffffff8000755f:	e8 0c 11 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007564:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80007569:	48 c7 c6 10 88 00 80 	mov    $0xffffffff80008810,%rsi
ffffffff80007570:	e8 fb 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007575:	bf 02 00 00 00       	mov    $0x2,%edi
ffffffff8000757a:	48 c7 c6 20 88 00 80 	mov    $0xffffffff80008820,%rsi
ffffffff80007581:	e8 ea 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007586:	bf 03 00 00 00       	mov    $0x3,%edi
ffffffff8000758b:	48 c7 c6 30 88 00 80 	mov    $0xffffffff80008830,%rsi
ffffffff80007592:	e8 d9 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007597:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff8000759c:	48 c7 c6 40 88 00 80 	mov    $0xffffffff80008840,%rsi
ffffffff800075a3:	e8 c8 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800075a8:	bf 05 00 00 00       	mov    $0x5,%edi
ffffffff800075ad:	48 c7 c6 50 88 00 80 	mov    $0xffffffff80008850,%rsi
ffffffff800075b4:	e8 b7 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800075b9:	bf 06 00 00 00       	mov    $0x6,%edi
ffffffff800075be:	48 c7 c6 60 88 00 80 	mov    $0xffffffff80008860,%rsi
ffffffff800075c5:	e8 a6 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800075ca:	bf 07 00 00 00       	mov    $0x7,%edi
ffffffff800075cf:	48 c7 c6 70 88 00 80 	mov    $0xffffffff80008870,%rsi
ffffffff800075d6:	e8 95 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800075db:	bf 08 00 00 00       	mov    $0x8,%edi
ffffffff800075e0:	48 c7 c6 80 88 00 80 	mov    $0xffffffff80008880,%rsi
ffffffff800075e7:	e8 84 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800075ec:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff800075f1:	48 c7 c6 90 88 00 80 	mov    $0xffffffff80008890,%rsi
ffffffff800075f8:	e8 73 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800075fd:	bf 0a 00 00 00       	mov    $0xa,%edi
ffffffff80007602:	48 c7 c6 a0 88 00 80 	mov    $0xffffffff800088a0,%rsi
ffffffff80007609:	e8 62 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000760e:	bf 0b 00 00 00       	mov    $0xb,%edi
ffffffff80007613:	48 c7 c6 b0 88 00 80 	mov    $0xffffffff800088b0,%rsi
ffffffff8000761a:	e8 51 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000761f:	bf 0c 00 00 00       	mov    $0xc,%edi
ffffffff80007624:	48 c7 c6 c0 88 00 80 	mov    $0xffffffff800088c0,%rsi
ffffffff8000762b:	e8 40 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007630:	bf 0d 00 00 00       	mov    $0xd,%edi
ffffffff80007635:	48 c7 c6 d0 88 00 80 	mov    $0xffffffff800088d0,%rsi
ffffffff8000763c:	e8 2f 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007641:	bf 0e 00 00 00       	mov    $0xe,%edi
ffffffff80007646:	48 c7 c6 e0 88 00 80 	mov    $0xffffffff800088e0,%rsi
ffffffff8000764d:	e8 1e 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007652:	bf 0f 00 00 00       	mov    $0xf,%edi
ffffffff80007657:	48 c7 c6 f0 88 00 80 	mov    $0xffffffff800088f0,%rsi
ffffffff8000765e:	e8 0d 10 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007663:	bf 10 00 00 00       	mov    $0x10,%edi
ffffffff80007668:	48 c7 c6 00 89 00 80 	mov    $0xffffffff80008900,%rsi
ffffffff8000766f:	e8 fc 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007674:	bf 11 00 00 00       	mov    $0x11,%edi
ffffffff80007679:	48 c7 c6 10 89 00 80 	mov    $0xffffffff80008910,%rsi
ffffffff80007680:	e8 eb 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007685:	bf 12 00 00 00       	mov    $0x12,%edi
ffffffff8000768a:	48 c7 c6 20 89 00 80 	mov    $0xffffffff80008920,%rsi
ffffffff80007691:	e8 da 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007696:	bf 13 00 00 00       	mov    $0x13,%edi
ffffffff8000769b:	48 c7 c6 30 89 00 80 	mov    $0xffffffff80008930,%rsi
ffffffff800076a2:	e8 c9 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800076a7:	bf 14 00 00 00       	mov    $0x14,%edi
ffffffff800076ac:	48 c7 c6 40 89 00 80 	mov    $0xffffffff80008940,%rsi
ffffffff800076b3:	e8 b8 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800076b8:	bf 15 00 00 00       	mov    $0x15,%edi
ffffffff800076bd:	48 c7 c6 50 89 00 80 	mov    $0xffffffff80008950,%rsi
ffffffff800076c4:	e8 a7 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800076c9:	bf 16 00 00 00       	mov    $0x16,%edi
ffffffff800076ce:	48 c7 c6 60 89 00 80 	mov    $0xffffffff80008960,%rsi
ffffffff800076d5:	e8 96 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800076da:	bf 17 00 00 00       	mov    $0x17,%edi
ffffffff800076df:	48 c7 c6 70 89 00 80 	mov    $0xffffffff80008970,%rsi
ffffffff800076e6:	e8 85 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800076eb:	bf 18 00 00 00       	mov    $0x18,%edi
ffffffff800076f0:	48 c7 c6 80 89 00 80 	mov    $0xffffffff80008980,%rsi
ffffffff800076f7:	e8 74 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800076fc:	bf 19 00 00 00       	mov    $0x19,%edi
ffffffff80007701:	48 c7 c6 90 89 00 80 	mov    $0xffffffff80008990,%rsi
ffffffff80007708:	e8 63 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000770d:	bf 1a 00 00 00       	mov    $0x1a,%edi
ffffffff80007712:	48 c7 c6 a0 89 00 80 	mov    $0xffffffff800089a0,%rsi
ffffffff80007719:	e8 52 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000771e:	bf 1b 00 00 00       	mov    $0x1b,%edi
ffffffff80007723:	48 c7 c6 b0 89 00 80 	mov    $0xffffffff800089b0,%rsi
ffffffff8000772a:	e8 41 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000772f:	bf 1c 00 00 00       	mov    $0x1c,%edi
ffffffff80007734:	48 c7 c6 c0 89 00 80 	mov    $0xffffffff800089c0,%rsi
ffffffff8000773b:	e8 30 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007740:	bf 1d 00 00 00       	mov    $0x1d,%edi
ffffffff80007745:	48 c7 c6 d0 89 00 80 	mov    $0xffffffff800089d0,%rsi
ffffffff8000774c:	e8 1f 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007751:	bf 1e 00 00 00       	mov    $0x1e,%edi
ffffffff80007756:	48 c7 c6 e0 89 00 80 	mov    $0xffffffff800089e0,%rsi
ffffffff8000775d:	e8 0e 0f 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007762:	bf 1f 00 00 00       	mov    $0x1f,%edi
ffffffff80007767:	48 c7 c6 f0 89 00 80 	mov    $0xffffffff800089f0,%rsi
ffffffff8000776e:	e8 fd 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007773:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80007778:	48 c7 c6 00 8a 00 80 	mov    $0xffffffff80008a00,%rsi
ffffffff8000777f:	e8 ec 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007784:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80007789:	48 c7 c6 10 8a 00 80 	mov    $0xffffffff80008a10,%rsi
ffffffff80007790:	e8 db 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007795:	bf 22 00 00 00       	mov    $0x22,%edi
ffffffff8000779a:	48 c7 c6 20 8a 00 80 	mov    $0xffffffff80008a20,%rsi
ffffffff800077a1:	e8 ca 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800077a6:	bf 23 00 00 00       	mov    $0x23,%edi
ffffffff800077ab:	48 c7 c6 30 8a 00 80 	mov    $0xffffffff80008a30,%rsi
ffffffff800077b2:	e8 b9 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800077b7:	bf 24 00 00 00       	mov    $0x24,%edi
ffffffff800077bc:	48 c7 c6 40 8a 00 80 	mov    $0xffffffff80008a40,%rsi
ffffffff800077c3:	e8 a8 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800077c8:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff800077cd:	48 c7 c6 50 8a 00 80 	mov    $0xffffffff80008a50,%rsi
ffffffff800077d4:	e8 97 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800077d9:	bf 26 00 00 00       	mov    $0x26,%edi
ffffffff800077de:	48 c7 c6 60 8a 00 80 	mov    $0xffffffff80008a60,%rsi
ffffffff800077e5:	e8 86 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800077ea:	bf 27 00 00 00       	mov    $0x27,%edi
ffffffff800077ef:	48 c7 c6 70 8a 00 80 	mov    $0xffffffff80008a70,%rsi
ffffffff800077f6:	e8 75 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800077fb:	bf 28 00 00 00       	mov    $0x28,%edi
ffffffff80007800:	48 c7 c6 80 8a 00 80 	mov    $0xffffffff80008a80,%rsi
ffffffff80007807:	e8 64 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000780c:	bf 29 00 00 00       	mov    $0x29,%edi
ffffffff80007811:	48 c7 c6 90 8a 00 80 	mov    $0xffffffff80008a90,%rsi
ffffffff80007818:	e8 53 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000781d:	bf 2a 00 00 00       	mov    $0x2a,%edi
ffffffff80007822:	48 c7 c6 a0 8a 00 80 	mov    $0xffffffff80008aa0,%rsi
ffffffff80007829:	e8 42 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000782e:	bf 2b 00 00 00       	mov    $0x2b,%edi
ffffffff80007833:	48 c7 c6 b0 8a 00 80 	mov    $0xffffffff80008ab0,%rsi
ffffffff8000783a:	e8 31 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000783f:	bf 2c 00 00 00       	mov    $0x2c,%edi
ffffffff80007844:	48 c7 c6 c0 8a 00 80 	mov    $0xffffffff80008ac0,%rsi
ffffffff8000784b:	e8 20 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007850:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff80007855:	48 c7 c6 d0 8a 00 80 	mov    $0xffffffff80008ad0,%rsi
ffffffff8000785c:	e8 0f 0e 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007861:	bf 2e 00 00 00       	mov    $0x2e,%edi
ffffffff80007866:	48 c7 c6 e0 8a 00 80 	mov    $0xffffffff80008ae0,%rsi
ffffffff8000786d:	e8 fe 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007872:	bf 2f 00 00 00       	mov    $0x2f,%edi
ffffffff80007877:	48 c7 c6 f0 8a 00 80 	mov    $0xffffffff80008af0,%rsi
ffffffff8000787e:	e8 ed 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007883:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff80007888:	48 c7 c6 00 8b 00 80 	mov    $0xffffffff80008b00,%rsi
ffffffff8000788f:	e8 dc 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007894:	bf 31 00 00 00       	mov    $0x31,%edi
ffffffff80007899:	48 c7 c6 10 8b 00 80 	mov    $0xffffffff80008b10,%rsi
ffffffff800078a0:	e8 cb 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800078a5:	bf 32 00 00 00       	mov    $0x32,%edi
ffffffff800078aa:	48 c7 c6 20 8b 00 80 	mov    $0xffffffff80008b20,%rsi
ffffffff800078b1:	e8 ba 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800078b6:	bf 33 00 00 00       	mov    $0x33,%edi
ffffffff800078bb:	48 c7 c6 30 8b 00 80 	mov    $0xffffffff80008b30,%rsi
ffffffff800078c2:	e8 a9 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800078c7:	bf 34 00 00 00       	mov    $0x34,%edi
ffffffff800078cc:	48 c7 c6 40 8b 00 80 	mov    $0xffffffff80008b40,%rsi
ffffffff800078d3:	e8 98 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800078d8:	bf 35 00 00 00       	mov    $0x35,%edi
ffffffff800078dd:	48 c7 c6 50 8b 00 80 	mov    $0xffffffff80008b50,%rsi
ffffffff800078e4:	e8 87 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800078e9:	bf 36 00 00 00       	mov    $0x36,%edi
ffffffff800078ee:	48 c7 c6 60 8b 00 80 	mov    $0xffffffff80008b60,%rsi
ffffffff800078f5:	e8 76 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800078fa:	bf 37 00 00 00       	mov    $0x37,%edi
ffffffff800078ff:	48 c7 c6 70 8b 00 80 	mov    $0xffffffff80008b70,%rsi
ffffffff80007906:	e8 65 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000790b:	bf 38 00 00 00       	mov    $0x38,%edi
ffffffff80007910:	48 c7 c6 80 8b 00 80 	mov    $0xffffffff80008b80,%rsi
ffffffff80007917:	e8 54 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000791c:	bf 39 00 00 00       	mov    $0x39,%edi
ffffffff80007921:	48 c7 c6 90 8b 00 80 	mov    $0xffffffff80008b90,%rsi
ffffffff80007928:	e8 43 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000792d:	bf 3a 00 00 00       	mov    $0x3a,%edi
ffffffff80007932:	48 c7 c6 a0 8b 00 80 	mov    $0xffffffff80008ba0,%rsi
ffffffff80007939:	e8 32 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000793e:	bf 3b 00 00 00       	mov    $0x3b,%edi
ffffffff80007943:	48 c7 c6 b0 8b 00 80 	mov    $0xffffffff80008bb0,%rsi
ffffffff8000794a:	e8 21 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000794f:	bf 3c 00 00 00       	mov    $0x3c,%edi
ffffffff80007954:	48 c7 c6 c0 8b 00 80 	mov    $0xffffffff80008bc0,%rsi
ffffffff8000795b:	e8 10 0d 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007960:	bf 3d 00 00 00       	mov    $0x3d,%edi
ffffffff80007965:	48 c7 c6 d0 8b 00 80 	mov    $0xffffffff80008bd0,%rsi
ffffffff8000796c:	e8 ff 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007971:	bf 3e 00 00 00       	mov    $0x3e,%edi
ffffffff80007976:	48 c7 c6 e0 8b 00 80 	mov    $0xffffffff80008be0,%rsi
ffffffff8000797d:	e8 ee 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007982:	bf 3f 00 00 00       	mov    $0x3f,%edi
ffffffff80007987:	48 c7 c6 f0 8b 00 80 	mov    $0xffffffff80008bf0,%rsi
ffffffff8000798e:	e8 dd 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007993:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80007998:	48 c7 c6 00 8c 00 80 	mov    $0xffffffff80008c00,%rsi
ffffffff8000799f:	e8 cc 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800079a4:	bf 41 00 00 00       	mov    $0x41,%edi
ffffffff800079a9:	48 c7 c6 10 8c 00 80 	mov    $0xffffffff80008c10,%rsi
ffffffff800079b0:	e8 bb 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800079b5:	bf 42 00 00 00       	mov    $0x42,%edi
ffffffff800079ba:	48 c7 c6 20 8c 00 80 	mov    $0xffffffff80008c20,%rsi
ffffffff800079c1:	e8 aa 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800079c6:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff800079cb:	48 c7 c6 30 8c 00 80 	mov    $0xffffffff80008c30,%rsi
ffffffff800079d2:	e8 99 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800079d7:	bf 44 00 00 00       	mov    $0x44,%edi
ffffffff800079dc:	48 c7 c6 40 8c 00 80 	mov    $0xffffffff80008c40,%rsi
ffffffff800079e3:	e8 88 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800079e8:	bf 45 00 00 00       	mov    $0x45,%edi
ffffffff800079ed:	48 c7 c6 50 8c 00 80 	mov    $0xffffffff80008c50,%rsi
ffffffff800079f4:	e8 77 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800079f9:	bf 46 00 00 00       	mov    $0x46,%edi
ffffffff800079fe:	48 c7 c6 60 8c 00 80 	mov    $0xffffffff80008c60,%rsi
ffffffff80007a05:	e8 66 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a0a:	bf 47 00 00 00       	mov    $0x47,%edi
ffffffff80007a0f:	48 c7 c6 70 8c 00 80 	mov    $0xffffffff80008c70,%rsi
ffffffff80007a16:	e8 55 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a1b:	bf 48 00 00 00       	mov    $0x48,%edi
ffffffff80007a20:	48 c7 c6 80 8c 00 80 	mov    $0xffffffff80008c80,%rsi
ffffffff80007a27:	e8 44 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a2c:	bf 49 00 00 00       	mov    $0x49,%edi
ffffffff80007a31:	48 c7 c6 90 8c 00 80 	mov    $0xffffffff80008c90,%rsi
ffffffff80007a38:	e8 33 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a3d:	bf 4a 00 00 00       	mov    $0x4a,%edi
ffffffff80007a42:	48 c7 c6 a0 8c 00 80 	mov    $0xffffffff80008ca0,%rsi
ffffffff80007a49:	e8 22 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a4e:	bf 4b 00 00 00       	mov    $0x4b,%edi
ffffffff80007a53:	48 c7 c6 b0 8c 00 80 	mov    $0xffffffff80008cb0,%rsi
ffffffff80007a5a:	e8 11 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a5f:	bf 4c 00 00 00       	mov    $0x4c,%edi
ffffffff80007a64:	48 c7 c6 c0 8c 00 80 	mov    $0xffffffff80008cc0,%rsi
ffffffff80007a6b:	e8 00 0c 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a70:	bf 4d 00 00 00       	mov    $0x4d,%edi
ffffffff80007a75:	48 c7 c6 d0 8c 00 80 	mov    $0xffffffff80008cd0,%rsi
ffffffff80007a7c:	e8 ef 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a81:	bf 4e 00 00 00       	mov    $0x4e,%edi
ffffffff80007a86:	48 c7 c6 e0 8c 00 80 	mov    $0xffffffff80008ce0,%rsi
ffffffff80007a8d:	e8 de 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007a92:	bf 4f 00 00 00       	mov    $0x4f,%edi
ffffffff80007a97:	48 c7 c6 f0 8c 00 80 	mov    $0xffffffff80008cf0,%rsi
ffffffff80007a9e:	e8 cd 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007aa3:	bf 50 00 00 00       	mov    $0x50,%edi
ffffffff80007aa8:	48 c7 c6 00 8d 00 80 	mov    $0xffffffff80008d00,%rsi
ffffffff80007aaf:	e8 bc 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ab4:	bf 51 00 00 00       	mov    $0x51,%edi
ffffffff80007ab9:	48 c7 c6 10 8d 00 80 	mov    $0xffffffff80008d10,%rsi
ffffffff80007ac0:	e8 ab 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ac5:	bf 52 00 00 00       	mov    $0x52,%edi
ffffffff80007aca:	48 c7 c6 20 8d 00 80 	mov    $0xffffffff80008d20,%rsi
ffffffff80007ad1:	e8 9a 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ad6:	bf 53 00 00 00       	mov    $0x53,%edi
ffffffff80007adb:	48 c7 c6 30 8d 00 80 	mov    $0xffffffff80008d30,%rsi
ffffffff80007ae2:	e8 89 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ae7:	bf 54 00 00 00       	mov    $0x54,%edi
ffffffff80007aec:	48 c7 c6 40 8d 00 80 	mov    $0xffffffff80008d40,%rsi
ffffffff80007af3:	e8 78 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007af8:	bf 55 00 00 00       	mov    $0x55,%edi
ffffffff80007afd:	48 c7 c6 50 8d 00 80 	mov    $0xffffffff80008d50,%rsi
ffffffff80007b04:	e8 67 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b09:	bf 56 00 00 00       	mov    $0x56,%edi
ffffffff80007b0e:	48 c7 c6 60 8d 00 80 	mov    $0xffffffff80008d60,%rsi
ffffffff80007b15:	e8 56 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b1a:	bf 57 00 00 00       	mov    $0x57,%edi
ffffffff80007b1f:	48 c7 c6 70 8d 00 80 	mov    $0xffffffff80008d70,%rsi
ffffffff80007b26:	e8 45 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b2b:	bf 58 00 00 00       	mov    $0x58,%edi
ffffffff80007b30:	48 c7 c6 80 8d 00 80 	mov    $0xffffffff80008d80,%rsi
ffffffff80007b37:	e8 34 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b3c:	bf 59 00 00 00       	mov    $0x59,%edi
ffffffff80007b41:	48 c7 c6 90 8d 00 80 	mov    $0xffffffff80008d90,%rsi
ffffffff80007b48:	e8 23 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b4d:	bf 5a 00 00 00       	mov    $0x5a,%edi
ffffffff80007b52:	48 c7 c6 a0 8d 00 80 	mov    $0xffffffff80008da0,%rsi
ffffffff80007b59:	e8 12 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b5e:	bf 5b 00 00 00       	mov    $0x5b,%edi
ffffffff80007b63:	48 c7 c6 b0 8d 00 80 	mov    $0xffffffff80008db0,%rsi
ffffffff80007b6a:	e8 01 0b 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b6f:	bf 5c 00 00 00       	mov    $0x5c,%edi
ffffffff80007b74:	48 c7 c6 c0 8d 00 80 	mov    $0xffffffff80008dc0,%rsi
ffffffff80007b7b:	e8 f0 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b80:	bf 5d 00 00 00       	mov    $0x5d,%edi
ffffffff80007b85:	48 c7 c6 d0 8d 00 80 	mov    $0xffffffff80008dd0,%rsi
ffffffff80007b8c:	e8 df 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007b91:	bf 5e 00 00 00       	mov    $0x5e,%edi
ffffffff80007b96:	48 c7 c6 e0 8d 00 80 	mov    $0xffffffff80008de0,%rsi
ffffffff80007b9d:	e8 ce 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ba2:	bf 5f 00 00 00       	mov    $0x5f,%edi
ffffffff80007ba7:	48 c7 c6 f0 8d 00 80 	mov    $0xffffffff80008df0,%rsi
ffffffff80007bae:	e8 bd 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007bb3:	bf 60 00 00 00       	mov    $0x60,%edi
ffffffff80007bb8:	48 c7 c6 00 8e 00 80 	mov    $0xffffffff80008e00,%rsi
ffffffff80007bbf:	e8 ac 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007bc4:	bf 61 00 00 00       	mov    $0x61,%edi
ffffffff80007bc9:	48 c7 c6 10 8e 00 80 	mov    $0xffffffff80008e10,%rsi
ffffffff80007bd0:	e8 9b 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007bd5:	bf 62 00 00 00       	mov    $0x62,%edi
ffffffff80007bda:	48 c7 c6 20 8e 00 80 	mov    $0xffffffff80008e20,%rsi
ffffffff80007be1:	e8 8a 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007be6:	bf 63 00 00 00       	mov    $0x63,%edi
ffffffff80007beb:	48 c7 c6 30 8e 00 80 	mov    $0xffffffff80008e30,%rsi
ffffffff80007bf2:	e8 79 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007bf7:	bf 64 00 00 00       	mov    $0x64,%edi
ffffffff80007bfc:	48 c7 c6 40 8e 00 80 	mov    $0xffffffff80008e40,%rsi
ffffffff80007c03:	e8 68 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c08:	bf 65 00 00 00       	mov    $0x65,%edi
ffffffff80007c0d:	48 c7 c6 50 8e 00 80 	mov    $0xffffffff80008e50,%rsi
ffffffff80007c14:	e8 57 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c19:	bf 66 00 00 00       	mov    $0x66,%edi
ffffffff80007c1e:	48 c7 c6 60 8e 00 80 	mov    $0xffffffff80008e60,%rsi
ffffffff80007c25:	e8 46 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c2a:	bf 67 00 00 00       	mov    $0x67,%edi
ffffffff80007c2f:	48 c7 c6 70 8e 00 80 	mov    $0xffffffff80008e70,%rsi
ffffffff80007c36:	e8 35 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c3b:	bf 68 00 00 00       	mov    $0x68,%edi
ffffffff80007c40:	48 c7 c6 80 8e 00 80 	mov    $0xffffffff80008e80,%rsi
ffffffff80007c47:	e8 24 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c4c:	bf 69 00 00 00       	mov    $0x69,%edi
ffffffff80007c51:	48 c7 c6 90 8e 00 80 	mov    $0xffffffff80008e90,%rsi
ffffffff80007c58:	e8 13 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c5d:	bf 6a 00 00 00       	mov    $0x6a,%edi
ffffffff80007c62:	48 c7 c6 a0 8e 00 80 	mov    $0xffffffff80008ea0,%rsi
ffffffff80007c69:	e8 02 0a 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c6e:	bf 6b 00 00 00       	mov    $0x6b,%edi
ffffffff80007c73:	48 c7 c6 b0 8e 00 80 	mov    $0xffffffff80008eb0,%rsi
ffffffff80007c7a:	e8 f1 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c7f:	bf 6c 00 00 00       	mov    $0x6c,%edi
ffffffff80007c84:	48 c7 c6 c0 8e 00 80 	mov    $0xffffffff80008ec0,%rsi
ffffffff80007c8b:	e8 e0 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007c90:	bf 6d 00 00 00       	mov    $0x6d,%edi
ffffffff80007c95:	48 c7 c6 d0 8e 00 80 	mov    $0xffffffff80008ed0,%rsi
ffffffff80007c9c:	e8 cf 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ca1:	bf 6e 00 00 00       	mov    $0x6e,%edi
ffffffff80007ca6:	48 c7 c6 e0 8e 00 80 	mov    $0xffffffff80008ee0,%rsi
ffffffff80007cad:	e8 be 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007cb2:	bf 6f 00 00 00       	mov    $0x6f,%edi
ffffffff80007cb7:	48 c7 c6 f0 8e 00 80 	mov    $0xffffffff80008ef0,%rsi
ffffffff80007cbe:	e8 ad 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007cc3:	bf 70 00 00 00       	mov    $0x70,%edi
ffffffff80007cc8:	48 c7 c6 00 8f 00 80 	mov    $0xffffffff80008f00,%rsi
ffffffff80007ccf:	e8 9c 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007cd4:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff80007cd9:	48 c7 c6 10 8f 00 80 	mov    $0xffffffff80008f10,%rsi
ffffffff80007ce0:	e8 8b 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ce5:	bf 72 00 00 00       	mov    $0x72,%edi
ffffffff80007cea:	48 c7 c6 20 8f 00 80 	mov    $0xffffffff80008f20,%rsi
ffffffff80007cf1:	e8 7a 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007cf6:	bf 73 00 00 00       	mov    $0x73,%edi
ffffffff80007cfb:	48 c7 c6 30 8f 00 80 	mov    $0xffffffff80008f30,%rsi
ffffffff80007d02:	e8 69 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d07:	bf 74 00 00 00       	mov    $0x74,%edi
ffffffff80007d0c:	48 c7 c6 40 8f 00 80 	mov    $0xffffffff80008f40,%rsi
ffffffff80007d13:	e8 58 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d18:	bf 75 00 00 00       	mov    $0x75,%edi
ffffffff80007d1d:	48 c7 c6 50 8f 00 80 	mov    $0xffffffff80008f50,%rsi
ffffffff80007d24:	e8 47 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d29:	bf 76 00 00 00       	mov    $0x76,%edi
ffffffff80007d2e:	48 c7 c6 60 8f 00 80 	mov    $0xffffffff80008f60,%rsi
ffffffff80007d35:	e8 36 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d3a:	bf 77 00 00 00       	mov    $0x77,%edi
ffffffff80007d3f:	48 c7 c6 70 8f 00 80 	mov    $0xffffffff80008f70,%rsi
ffffffff80007d46:	e8 25 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d4b:	bf 78 00 00 00       	mov    $0x78,%edi
ffffffff80007d50:	48 c7 c6 80 8f 00 80 	mov    $0xffffffff80008f80,%rsi
ffffffff80007d57:	e8 14 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d5c:	bf 79 00 00 00       	mov    $0x79,%edi
ffffffff80007d61:	48 c7 c6 90 8f 00 80 	mov    $0xffffffff80008f90,%rsi
ffffffff80007d68:	e8 03 09 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d6d:	bf 7a 00 00 00       	mov    $0x7a,%edi
ffffffff80007d72:	48 c7 c6 a0 8f 00 80 	mov    $0xffffffff80008fa0,%rsi
ffffffff80007d79:	e8 f2 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d7e:	bf 7b 00 00 00       	mov    $0x7b,%edi
ffffffff80007d83:	48 c7 c6 b0 8f 00 80 	mov    $0xffffffff80008fb0,%rsi
ffffffff80007d8a:	e8 e1 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007d8f:	bf 7c 00 00 00       	mov    $0x7c,%edi
ffffffff80007d94:	48 c7 c6 c0 8f 00 80 	mov    $0xffffffff80008fc0,%rsi
ffffffff80007d9b:	e8 d0 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007da0:	bf 7d 00 00 00       	mov    $0x7d,%edi
ffffffff80007da5:	48 c7 c6 d0 8f 00 80 	mov    $0xffffffff80008fd0,%rsi
ffffffff80007dac:	e8 bf 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007db1:	bf 7e 00 00 00       	mov    $0x7e,%edi
ffffffff80007db6:	48 c7 c6 e0 8f 00 80 	mov    $0xffffffff80008fe0,%rsi
ffffffff80007dbd:	e8 ae 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007dc2:	bf 7f 00 00 00       	mov    $0x7f,%edi
ffffffff80007dc7:	48 c7 c6 f0 8f 00 80 	mov    $0xffffffff80008ff0,%rsi
ffffffff80007dce:	e8 9d 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007dd3:	bf 80 00 00 00       	mov    $0x80,%edi
ffffffff80007dd8:	48 c7 c6 00 90 00 80 	mov    $0xffffffff80009000,%rsi
ffffffff80007ddf:	e8 8c 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007de4:	bf 81 00 00 00       	mov    $0x81,%edi
ffffffff80007de9:	48 c7 c6 10 90 00 80 	mov    $0xffffffff80009010,%rsi
ffffffff80007df0:	e8 7b 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007df5:	bf 82 00 00 00       	mov    $0x82,%edi
ffffffff80007dfa:	48 c7 c6 20 90 00 80 	mov    $0xffffffff80009020,%rsi
ffffffff80007e01:	e8 6a 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e06:	bf 83 00 00 00       	mov    $0x83,%edi
ffffffff80007e0b:	48 c7 c6 30 90 00 80 	mov    $0xffffffff80009030,%rsi
ffffffff80007e12:	e8 59 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e17:	bf 84 00 00 00       	mov    $0x84,%edi
ffffffff80007e1c:	48 c7 c6 40 90 00 80 	mov    $0xffffffff80009040,%rsi
ffffffff80007e23:	e8 48 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e28:	bf 85 00 00 00       	mov    $0x85,%edi
ffffffff80007e2d:	48 c7 c6 50 90 00 80 	mov    $0xffffffff80009050,%rsi
ffffffff80007e34:	e8 37 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e39:	bf 86 00 00 00       	mov    $0x86,%edi
ffffffff80007e3e:	48 c7 c6 60 90 00 80 	mov    $0xffffffff80009060,%rsi
ffffffff80007e45:	e8 26 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e4a:	bf 87 00 00 00       	mov    $0x87,%edi
ffffffff80007e4f:	48 c7 c6 70 90 00 80 	mov    $0xffffffff80009070,%rsi
ffffffff80007e56:	e8 15 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e5b:	bf 88 00 00 00       	mov    $0x88,%edi
ffffffff80007e60:	48 c7 c6 80 90 00 80 	mov    $0xffffffff80009080,%rsi
ffffffff80007e67:	e8 04 08 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e6c:	bf 89 00 00 00       	mov    $0x89,%edi
ffffffff80007e71:	48 c7 c6 90 90 00 80 	mov    $0xffffffff80009090,%rsi
ffffffff80007e78:	e8 f3 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e7d:	bf 8a 00 00 00       	mov    $0x8a,%edi
ffffffff80007e82:	48 c7 c6 a0 90 00 80 	mov    $0xffffffff800090a0,%rsi
ffffffff80007e89:	e8 e2 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e8e:	bf 8b 00 00 00       	mov    $0x8b,%edi
ffffffff80007e93:	48 c7 c6 b0 90 00 80 	mov    $0xffffffff800090b0,%rsi
ffffffff80007e9a:	e8 d1 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007e9f:	bf 8c 00 00 00       	mov    $0x8c,%edi
ffffffff80007ea4:	48 c7 c6 c0 90 00 80 	mov    $0xffffffff800090c0,%rsi
ffffffff80007eab:	e8 c0 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007eb0:	bf 8d 00 00 00       	mov    $0x8d,%edi
ffffffff80007eb5:	48 c7 c6 d0 90 00 80 	mov    $0xffffffff800090d0,%rsi
ffffffff80007ebc:	e8 af 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ec1:	bf 8e 00 00 00       	mov    $0x8e,%edi
ffffffff80007ec6:	48 c7 c6 e0 90 00 80 	mov    $0xffffffff800090e0,%rsi
ffffffff80007ecd:	e8 9e 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ed2:	bf 8f 00 00 00       	mov    $0x8f,%edi
ffffffff80007ed7:	48 c7 c6 f0 90 00 80 	mov    $0xffffffff800090f0,%rsi
ffffffff80007ede:	e8 8d 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ee3:	bf 90 00 00 00       	mov    $0x90,%edi
ffffffff80007ee8:	48 c7 c6 00 91 00 80 	mov    $0xffffffff80009100,%rsi
ffffffff80007eef:	e8 7c 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ef4:	bf 91 00 00 00       	mov    $0x91,%edi
ffffffff80007ef9:	48 c7 c6 10 91 00 80 	mov    $0xffffffff80009110,%rsi
ffffffff80007f00:	e8 6b 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f05:	bf 92 00 00 00       	mov    $0x92,%edi
ffffffff80007f0a:	48 c7 c6 20 91 00 80 	mov    $0xffffffff80009120,%rsi
ffffffff80007f11:	e8 5a 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f16:	bf 93 00 00 00       	mov    $0x93,%edi
ffffffff80007f1b:	48 c7 c6 30 91 00 80 	mov    $0xffffffff80009130,%rsi
ffffffff80007f22:	e8 49 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f27:	bf 94 00 00 00       	mov    $0x94,%edi
ffffffff80007f2c:	48 c7 c6 40 91 00 80 	mov    $0xffffffff80009140,%rsi
ffffffff80007f33:	e8 38 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f38:	bf 95 00 00 00       	mov    $0x95,%edi
ffffffff80007f3d:	48 c7 c6 50 91 00 80 	mov    $0xffffffff80009150,%rsi
ffffffff80007f44:	e8 27 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f49:	bf 96 00 00 00       	mov    $0x96,%edi
ffffffff80007f4e:	48 c7 c6 60 91 00 80 	mov    $0xffffffff80009160,%rsi
ffffffff80007f55:	e8 16 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f5a:	bf 97 00 00 00       	mov    $0x97,%edi
ffffffff80007f5f:	48 c7 c6 70 91 00 80 	mov    $0xffffffff80009170,%rsi
ffffffff80007f66:	e8 05 07 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f6b:	bf 98 00 00 00       	mov    $0x98,%edi
ffffffff80007f70:	48 c7 c6 80 91 00 80 	mov    $0xffffffff80009180,%rsi
ffffffff80007f77:	e8 f4 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f7c:	bf 99 00 00 00       	mov    $0x99,%edi
ffffffff80007f81:	48 c7 c6 90 91 00 80 	mov    $0xffffffff80009190,%rsi
ffffffff80007f88:	e8 e3 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f8d:	bf 9a 00 00 00       	mov    $0x9a,%edi
ffffffff80007f92:	48 c7 c6 a0 91 00 80 	mov    $0xffffffff800091a0,%rsi
ffffffff80007f99:	e8 d2 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007f9e:	bf 9b 00 00 00       	mov    $0x9b,%edi
ffffffff80007fa3:	48 c7 c6 b0 91 00 80 	mov    $0xffffffff800091b0,%rsi
ffffffff80007faa:	e8 c1 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007faf:	bf 9c 00 00 00       	mov    $0x9c,%edi
ffffffff80007fb4:	48 c7 c6 c0 91 00 80 	mov    $0xffffffff800091c0,%rsi
ffffffff80007fbb:	e8 b0 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007fc0:	bf 9d 00 00 00       	mov    $0x9d,%edi
ffffffff80007fc5:	48 c7 c6 d0 91 00 80 	mov    $0xffffffff800091d0,%rsi
ffffffff80007fcc:	e8 9f 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007fd1:	bf 9e 00 00 00       	mov    $0x9e,%edi
ffffffff80007fd6:	48 c7 c6 e0 91 00 80 	mov    $0xffffffff800091e0,%rsi
ffffffff80007fdd:	e8 8e 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007fe2:	bf 9f 00 00 00       	mov    $0x9f,%edi
ffffffff80007fe7:	48 c7 c6 f0 91 00 80 	mov    $0xffffffff800091f0,%rsi
ffffffff80007fee:	e8 7d 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80007ff3:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80007ff8:	48 c7 c6 00 92 00 80 	mov    $0xffffffff80009200,%rsi
ffffffff80007fff:	e8 6c 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008004:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80008009:	48 c7 c6 10 92 00 80 	mov    $0xffffffff80009210,%rsi
ffffffff80008010:	e8 5b 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008015:	bf a2 00 00 00       	mov    $0xa2,%edi
ffffffff8000801a:	48 c7 c6 20 92 00 80 	mov    $0xffffffff80009220,%rsi
ffffffff80008021:	e8 4a 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008026:	bf a3 00 00 00       	mov    $0xa3,%edi
ffffffff8000802b:	48 c7 c6 30 92 00 80 	mov    $0xffffffff80009230,%rsi
ffffffff80008032:	e8 39 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008037:	bf a4 00 00 00       	mov    $0xa4,%edi
ffffffff8000803c:	48 c7 c6 40 92 00 80 	mov    $0xffffffff80009240,%rsi
ffffffff80008043:	e8 28 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008048:	bf a5 00 00 00       	mov    $0xa5,%edi
ffffffff8000804d:	48 c7 c6 50 92 00 80 	mov    $0xffffffff80009250,%rsi
ffffffff80008054:	e8 17 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008059:	bf a6 00 00 00       	mov    $0xa6,%edi
ffffffff8000805e:	48 c7 c6 60 92 00 80 	mov    $0xffffffff80009260,%rsi
ffffffff80008065:	e8 06 06 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000806a:	bf a7 00 00 00       	mov    $0xa7,%edi
ffffffff8000806f:	48 c7 c6 70 92 00 80 	mov    $0xffffffff80009270,%rsi
ffffffff80008076:	e8 f5 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000807b:	bf a8 00 00 00       	mov    $0xa8,%edi
ffffffff80008080:	48 c7 c6 80 92 00 80 	mov    $0xffffffff80009280,%rsi
ffffffff80008087:	e8 e4 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000808c:	bf a9 00 00 00       	mov    $0xa9,%edi
ffffffff80008091:	48 c7 c6 90 92 00 80 	mov    $0xffffffff80009290,%rsi
ffffffff80008098:	e8 d3 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000809d:	bf aa 00 00 00       	mov    $0xaa,%edi
ffffffff800080a2:	48 c7 c6 a0 92 00 80 	mov    $0xffffffff800092a0,%rsi
ffffffff800080a9:	e8 c2 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800080ae:	bf ab 00 00 00       	mov    $0xab,%edi
ffffffff800080b3:	48 c7 c6 b0 92 00 80 	mov    $0xffffffff800092b0,%rsi
ffffffff800080ba:	e8 b1 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800080bf:	bf ac 00 00 00       	mov    $0xac,%edi
ffffffff800080c4:	48 c7 c6 c0 92 00 80 	mov    $0xffffffff800092c0,%rsi
ffffffff800080cb:	e8 a0 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800080d0:	bf ad 00 00 00       	mov    $0xad,%edi
ffffffff800080d5:	48 c7 c6 d0 92 00 80 	mov    $0xffffffff800092d0,%rsi
ffffffff800080dc:	e8 8f 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800080e1:	bf ae 00 00 00       	mov    $0xae,%edi
ffffffff800080e6:	48 c7 c6 e0 92 00 80 	mov    $0xffffffff800092e0,%rsi
ffffffff800080ed:	e8 7e 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800080f2:	bf af 00 00 00       	mov    $0xaf,%edi
ffffffff800080f7:	48 c7 c6 f0 92 00 80 	mov    $0xffffffff800092f0,%rsi
ffffffff800080fe:	e8 6d 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008103:	bf b0 00 00 00       	mov    $0xb0,%edi
ffffffff80008108:	48 c7 c6 00 93 00 80 	mov    $0xffffffff80009300,%rsi
ffffffff8000810f:	e8 5c 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008114:	bf b1 00 00 00       	mov    $0xb1,%edi
ffffffff80008119:	48 c7 c6 10 93 00 80 	mov    $0xffffffff80009310,%rsi
ffffffff80008120:	e8 4b 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008125:	bf b2 00 00 00       	mov    $0xb2,%edi
ffffffff8000812a:	48 c7 c6 20 93 00 80 	mov    $0xffffffff80009320,%rsi
ffffffff80008131:	e8 3a 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008136:	bf b3 00 00 00       	mov    $0xb3,%edi
ffffffff8000813b:	48 c7 c6 30 93 00 80 	mov    $0xffffffff80009330,%rsi
ffffffff80008142:	e8 29 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008147:	bf b4 00 00 00       	mov    $0xb4,%edi
ffffffff8000814c:	48 c7 c6 40 93 00 80 	mov    $0xffffffff80009340,%rsi
ffffffff80008153:	e8 18 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008158:	bf b5 00 00 00       	mov    $0xb5,%edi
ffffffff8000815d:	48 c7 c6 50 93 00 80 	mov    $0xffffffff80009350,%rsi
ffffffff80008164:	e8 07 05 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008169:	bf b6 00 00 00       	mov    $0xb6,%edi
ffffffff8000816e:	48 c7 c6 60 93 00 80 	mov    $0xffffffff80009360,%rsi
ffffffff80008175:	e8 f6 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000817a:	bf b7 00 00 00       	mov    $0xb7,%edi
ffffffff8000817f:	48 c7 c6 70 93 00 80 	mov    $0xffffffff80009370,%rsi
ffffffff80008186:	e8 e5 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000818b:	bf b8 00 00 00       	mov    $0xb8,%edi
ffffffff80008190:	48 c7 c6 80 93 00 80 	mov    $0xffffffff80009380,%rsi
ffffffff80008197:	e8 d4 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000819c:	bf b9 00 00 00       	mov    $0xb9,%edi
ffffffff800081a1:	48 c7 c6 90 93 00 80 	mov    $0xffffffff80009390,%rsi
ffffffff800081a8:	e8 c3 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800081ad:	bf ba 00 00 00       	mov    $0xba,%edi
ffffffff800081b2:	48 c7 c6 a0 93 00 80 	mov    $0xffffffff800093a0,%rsi
ffffffff800081b9:	e8 b2 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800081be:	bf bb 00 00 00       	mov    $0xbb,%edi
ffffffff800081c3:	48 c7 c6 b0 93 00 80 	mov    $0xffffffff800093b0,%rsi
ffffffff800081ca:	e8 a1 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800081cf:	bf bc 00 00 00       	mov    $0xbc,%edi
ffffffff800081d4:	48 c7 c6 c0 93 00 80 	mov    $0xffffffff800093c0,%rsi
ffffffff800081db:	e8 90 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800081e0:	bf bd 00 00 00       	mov    $0xbd,%edi
ffffffff800081e5:	48 c7 c6 d0 93 00 80 	mov    $0xffffffff800093d0,%rsi
ffffffff800081ec:	e8 7f 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800081f1:	bf be 00 00 00       	mov    $0xbe,%edi
ffffffff800081f6:	48 c7 c6 e0 93 00 80 	mov    $0xffffffff800093e0,%rsi
ffffffff800081fd:	e8 6e 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008202:	bf bf 00 00 00       	mov    $0xbf,%edi
ffffffff80008207:	48 c7 c6 f0 93 00 80 	mov    $0xffffffff800093f0,%rsi
ffffffff8000820e:	e8 5d 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008213:	bf c0 00 00 00       	mov    $0xc0,%edi
ffffffff80008218:	48 c7 c6 00 94 00 80 	mov    $0xffffffff80009400,%rsi
ffffffff8000821f:	e8 4c 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008224:	bf c1 00 00 00       	mov    $0xc1,%edi
ffffffff80008229:	48 c7 c6 10 94 00 80 	mov    $0xffffffff80009410,%rsi
ffffffff80008230:	e8 3b 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008235:	bf c2 00 00 00       	mov    $0xc2,%edi
ffffffff8000823a:	48 c7 c6 20 94 00 80 	mov    $0xffffffff80009420,%rsi
ffffffff80008241:	e8 2a 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008246:	bf c3 00 00 00       	mov    $0xc3,%edi
ffffffff8000824b:	48 c7 c6 30 94 00 80 	mov    $0xffffffff80009430,%rsi
ffffffff80008252:	e8 19 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008257:	bf c4 00 00 00       	mov    $0xc4,%edi
ffffffff8000825c:	48 c7 c6 40 94 00 80 	mov    $0xffffffff80009440,%rsi
ffffffff80008263:	e8 08 04 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008268:	bf c5 00 00 00       	mov    $0xc5,%edi
ffffffff8000826d:	48 c7 c6 50 94 00 80 	mov    $0xffffffff80009450,%rsi
ffffffff80008274:	e8 f7 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008279:	bf c6 00 00 00       	mov    $0xc6,%edi
ffffffff8000827e:	48 c7 c6 60 94 00 80 	mov    $0xffffffff80009460,%rsi
ffffffff80008285:	e8 e6 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000828a:	bf c7 00 00 00       	mov    $0xc7,%edi
ffffffff8000828f:	48 c7 c6 70 94 00 80 	mov    $0xffffffff80009470,%rsi
ffffffff80008296:	e8 d5 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000829b:	bf c8 00 00 00       	mov    $0xc8,%edi
ffffffff800082a0:	48 c7 c6 80 94 00 80 	mov    $0xffffffff80009480,%rsi
ffffffff800082a7:	e8 c4 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800082ac:	bf c9 00 00 00       	mov    $0xc9,%edi
ffffffff800082b1:	48 c7 c6 90 94 00 80 	mov    $0xffffffff80009490,%rsi
ffffffff800082b8:	e8 b3 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800082bd:	bf ca 00 00 00       	mov    $0xca,%edi
ffffffff800082c2:	48 c7 c6 a0 94 00 80 	mov    $0xffffffff800094a0,%rsi
ffffffff800082c9:	e8 a2 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800082ce:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff800082d3:	48 c7 c6 b0 94 00 80 	mov    $0xffffffff800094b0,%rsi
ffffffff800082da:	e8 91 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800082df:	bf cc 00 00 00       	mov    $0xcc,%edi
ffffffff800082e4:	48 c7 c6 c0 94 00 80 	mov    $0xffffffff800094c0,%rsi
ffffffff800082eb:	e8 80 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800082f0:	bf cd 00 00 00       	mov    $0xcd,%edi
ffffffff800082f5:	48 c7 c6 d0 94 00 80 	mov    $0xffffffff800094d0,%rsi
ffffffff800082fc:	e8 6f 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008301:	bf ce 00 00 00       	mov    $0xce,%edi
ffffffff80008306:	48 c7 c6 e0 94 00 80 	mov    $0xffffffff800094e0,%rsi
ffffffff8000830d:	e8 5e 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008312:	bf cf 00 00 00       	mov    $0xcf,%edi
ffffffff80008317:	48 c7 c6 f0 94 00 80 	mov    $0xffffffff800094f0,%rsi
ffffffff8000831e:	e8 4d 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008323:	bf d0 00 00 00       	mov    $0xd0,%edi
ffffffff80008328:	48 c7 c6 00 95 00 80 	mov    $0xffffffff80009500,%rsi
ffffffff8000832f:	e8 3c 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008334:	bf d1 00 00 00       	mov    $0xd1,%edi
ffffffff80008339:	48 c7 c6 10 95 00 80 	mov    $0xffffffff80009510,%rsi
ffffffff80008340:	e8 2b 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008345:	bf d2 00 00 00       	mov    $0xd2,%edi
ffffffff8000834a:	48 c7 c6 20 95 00 80 	mov    $0xffffffff80009520,%rsi
ffffffff80008351:	e8 1a 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008356:	bf d3 00 00 00       	mov    $0xd3,%edi
ffffffff8000835b:	48 c7 c6 30 95 00 80 	mov    $0xffffffff80009530,%rsi
ffffffff80008362:	e8 09 03 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008367:	bf d4 00 00 00       	mov    $0xd4,%edi
ffffffff8000836c:	48 c7 c6 40 95 00 80 	mov    $0xffffffff80009540,%rsi
ffffffff80008373:	e8 f8 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008378:	bf d5 00 00 00       	mov    $0xd5,%edi
ffffffff8000837d:	48 c7 c6 50 95 00 80 	mov    $0xffffffff80009550,%rsi
ffffffff80008384:	e8 e7 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008389:	bf d6 00 00 00       	mov    $0xd6,%edi
ffffffff8000838e:	48 c7 c6 60 95 00 80 	mov    $0xffffffff80009560,%rsi
ffffffff80008395:	e8 d6 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000839a:	bf d7 00 00 00       	mov    $0xd7,%edi
ffffffff8000839f:	48 c7 c6 70 95 00 80 	mov    $0xffffffff80009570,%rsi
ffffffff800083a6:	e8 c5 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800083ab:	bf d8 00 00 00       	mov    $0xd8,%edi
ffffffff800083b0:	48 c7 c6 80 95 00 80 	mov    $0xffffffff80009580,%rsi
ffffffff800083b7:	e8 b4 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800083bc:	bf d9 00 00 00       	mov    $0xd9,%edi
ffffffff800083c1:	48 c7 c6 90 95 00 80 	mov    $0xffffffff80009590,%rsi
ffffffff800083c8:	e8 a3 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800083cd:	bf da 00 00 00       	mov    $0xda,%edi
ffffffff800083d2:	48 c7 c6 a0 95 00 80 	mov    $0xffffffff800095a0,%rsi
ffffffff800083d9:	e8 92 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800083de:	bf db 00 00 00       	mov    $0xdb,%edi
ffffffff800083e3:	48 c7 c6 b0 95 00 80 	mov    $0xffffffff800095b0,%rsi
ffffffff800083ea:	e8 81 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800083ef:	bf dc 00 00 00       	mov    $0xdc,%edi
ffffffff800083f4:	48 c7 c6 c0 95 00 80 	mov    $0xffffffff800095c0,%rsi
ffffffff800083fb:	e8 70 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008400:	bf dd 00 00 00       	mov    $0xdd,%edi
ffffffff80008405:	48 c7 c6 d0 95 00 80 	mov    $0xffffffff800095d0,%rsi
ffffffff8000840c:	e8 5f 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008411:	bf de 00 00 00       	mov    $0xde,%edi
ffffffff80008416:	48 c7 c6 e0 95 00 80 	mov    $0xffffffff800095e0,%rsi
ffffffff8000841d:	e8 4e 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008422:	bf df 00 00 00       	mov    $0xdf,%edi
ffffffff80008427:	48 c7 c6 f0 95 00 80 	mov    $0xffffffff800095f0,%rsi
ffffffff8000842e:	e8 3d 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008433:	bf e0 00 00 00       	mov    $0xe0,%edi
ffffffff80008438:	48 c7 c6 00 96 00 80 	mov    $0xffffffff80009600,%rsi
ffffffff8000843f:	e8 2c 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008444:	bf e1 00 00 00       	mov    $0xe1,%edi
ffffffff80008449:	48 c7 c6 10 96 00 80 	mov    $0xffffffff80009610,%rsi
ffffffff80008450:	e8 1b 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008455:	bf e2 00 00 00       	mov    $0xe2,%edi
ffffffff8000845a:	48 c7 c6 20 96 00 80 	mov    $0xffffffff80009620,%rsi
ffffffff80008461:	e8 0a 02 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008466:	bf e3 00 00 00       	mov    $0xe3,%edi
ffffffff8000846b:	48 c7 c6 30 96 00 80 	mov    $0xffffffff80009630,%rsi
ffffffff80008472:	e8 f9 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008477:	bf e4 00 00 00       	mov    $0xe4,%edi
ffffffff8000847c:	48 c7 c6 40 96 00 80 	mov    $0xffffffff80009640,%rsi
ffffffff80008483:	e8 e8 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008488:	bf e5 00 00 00       	mov    $0xe5,%edi
ffffffff8000848d:	48 c7 c6 50 96 00 80 	mov    $0xffffffff80009650,%rsi
ffffffff80008494:	e8 d7 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008499:	bf e6 00 00 00       	mov    $0xe6,%edi
ffffffff8000849e:	48 c7 c6 60 96 00 80 	mov    $0xffffffff80009660,%rsi
ffffffff800084a5:	e8 c6 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800084aa:	bf e7 00 00 00       	mov    $0xe7,%edi
ffffffff800084af:	48 c7 c6 70 96 00 80 	mov    $0xffffffff80009670,%rsi
ffffffff800084b6:	e8 b5 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800084bb:	bf e8 00 00 00       	mov    $0xe8,%edi
ffffffff800084c0:	48 c7 c6 80 96 00 80 	mov    $0xffffffff80009680,%rsi
ffffffff800084c7:	e8 a4 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800084cc:	bf e9 00 00 00       	mov    $0xe9,%edi
ffffffff800084d1:	48 c7 c6 90 96 00 80 	mov    $0xffffffff80009690,%rsi
ffffffff800084d8:	e8 93 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800084dd:	bf ea 00 00 00       	mov    $0xea,%edi
ffffffff800084e2:	48 c7 c6 a0 96 00 80 	mov    $0xffffffff800096a0,%rsi
ffffffff800084e9:	e8 82 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800084ee:	bf eb 00 00 00       	mov    $0xeb,%edi
ffffffff800084f3:	48 c7 c6 b0 96 00 80 	mov    $0xffffffff800096b0,%rsi
ffffffff800084fa:	e8 71 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800084ff:	bf ec 00 00 00       	mov    $0xec,%edi
ffffffff80008504:	48 c7 c6 c0 96 00 80 	mov    $0xffffffff800096c0,%rsi
ffffffff8000850b:	e8 60 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008510:	bf ed 00 00 00       	mov    $0xed,%edi
ffffffff80008515:	48 c7 c6 d0 96 00 80 	mov    $0xffffffff800096d0,%rsi
ffffffff8000851c:	e8 4f 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008521:	bf ee 00 00 00       	mov    $0xee,%edi
ffffffff80008526:	48 c7 c6 e0 96 00 80 	mov    $0xffffffff800096e0,%rsi
ffffffff8000852d:	e8 3e 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008532:	bf ef 00 00 00       	mov    $0xef,%edi
ffffffff80008537:	48 c7 c6 f0 96 00 80 	mov    $0xffffffff800096f0,%rsi
ffffffff8000853e:	e8 2d 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008543:	bf f0 00 00 00       	mov    $0xf0,%edi
ffffffff80008548:	48 c7 c6 00 97 00 80 	mov    $0xffffffff80009700,%rsi
ffffffff8000854f:	e8 1c 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008554:	bf f1 00 00 00       	mov    $0xf1,%edi
ffffffff80008559:	48 c7 c6 10 97 00 80 	mov    $0xffffffff80009710,%rsi
ffffffff80008560:	e8 0b 01 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008565:	bf f2 00 00 00       	mov    $0xf2,%edi
ffffffff8000856a:	48 c7 c6 20 97 00 80 	mov    $0xffffffff80009720,%rsi
ffffffff80008571:	e8 fa 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008576:	bf f3 00 00 00       	mov    $0xf3,%edi
ffffffff8000857b:	48 c7 c6 30 97 00 80 	mov    $0xffffffff80009730,%rsi
ffffffff80008582:	e8 e9 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008587:	bf f4 00 00 00       	mov    $0xf4,%edi
ffffffff8000858c:	48 c7 c6 40 97 00 80 	mov    $0xffffffff80009740,%rsi
ffffffff80008593:	e8 d8 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008598:	bf f5 00 00 00       	mov    $0xf5,%edi
ffffffff8000859d:	48 c7 c6 50 97 00 80 	mov    $0xffffffff80009750,%rsi
ffffffff800085a4:	e8 c7 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800085a9:	bf f6 00 00 00       	mov    $0xf6,%edi
ffffffff800085ae:	48 c7 c6 60 97 00 80 	mov    $0xffffffff80009760,%rsi
ffffffff800085b5:	e8 b6 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800085ba:	bf f7 00 00 00       	mov    $0xf7,%edi
ffffffff800085bf:	48 c7 c6 70 97 00 80 	mov    $0xffffffff80009770,%rsi
ffffffff800085c6:	e8 a5 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800085cb:	bf f8 00 00 00       	mov    $0xf8,%edi
ffffffff800085d0:	48 c7 c6 80 97 00 80 	mov    $0xffffffff80009780,%rsi
ffffffff800085d7:	e8 94 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800085dc:	bf f9 00 00 00       	mov    $0xf9,%edi
ffffffff800085e1:	48 c7 c6 90 97 00 80 	mov    $0xffffffff80009790,%rsi
ffffffff800085e8:	e8 83 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800085ed:	bf fa 00 00 00       	mov    $0xfa,%edi
ffffffff800085f2:	48 c7 c6 a0 97 00 80 	mov    $0xffffffff800097a0,%rsi
ffffffff800085f9:	e8 72 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff800085fe:	bf fb 00 00 00       	mov    $0xfb,%edi
ffffffff80008603:	48 c7 c6 b0 97 00 80 	mov    $0xffffffff800097b0,%rsi
ffffffff8000860a:	e8 61 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff8000860f:	bf fc 00 00 00       	mov    $0xfc,%edi
ffffffff80008614:	48 c7 c6 c0 97 00 80 	mov    $0xffffffff800097c0,%rsi
ffffffff8000861b:	e8 50 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008620:	bf fd 00 00 00       	mov    $0xfd,%edi
ffffffff80008625:	48 c7 c6 d0 97 00 80 	mov    $0xffffffff800097d0,%rsi
ffffffff8000862c:	e8 3f 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008631:	bf fe 00 00 00       	mov    $0xfe,%edi
ffffffff80008636:	48 c7 c6 e0 97 00 80 	mov    $0xffffffff800097e0,%rsi
ffffffff8000863d:	e8 2e 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008642:	bf ff 00 00 00       	mov    $0xff,%edi
ffffffff80008647:	48 c7 c6 f0 97 00 80 	mov    $0xffffffff800097f0,%rsi
ffffffff8000864e:	e8 1d 00 00 00       	call   ffffffff80008670 <set_idt_entry>
ffffffff80008653:	0f 01 1d 3e 2f 01 00 	lidt   0x12f3e(%rip)        # ffffffff8001b598 <m_idt>
ffffffff8000865a:	5d                   	pop    %rbp
ffffffff8000865b:	c3                   	ret    
ffffffff8000865c:	cc                   	int3   
ffffffff8000865d:	cc                   	int3   
ffffffff8000865e:	cc                   	int3   
ffffffff8000865f:	cc                   	int3   

ffffffff80008660 <interrupt_handle_0x00>:
ffffffff80008660:	6a 00                	push   $0x0
ffffffff80008662:	6a 00                	push   $0x0
ffffffff80008664:	e9 97 79 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008669:	cc                   	int3   
ffffffff8000866a:	cc                   	int3   
ffffffff8000866b:	cc                   	int3   
ffffffff8000866c:	cc                   	int3   
ffffffff8000866d:	cc                   	int3   
ffffffff8000866e:	cc                   	int3   
ffffffff8000866f:	cc                   	int3   

ffffffff80008670 <set_idt_entry>:
ffffffff80008670:	55                   	push   %rbp
ffffffff80008671:	48 89 e5             	mov    %rsp,%rbp
ffffffff80008674:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80008678:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff8000867c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80008680:	0f b7 45 f0          	movzwl -0x10(%rbp),%eax
ffffffff80008684:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff80008688:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8000868c:	48 8b 91 e8 c1 21 80 	mov    -0x7fde3e18(%rcx),%rdx
ffffffff80008693:	48 8b b1 e0 c1 21 80 	mov    -0x7fde3e20(%rcx),%rsi
ffffffff8000869a:	48 81 e6 00 00 ff ff 	and    $0xffffffffffff0000,%rsi
ffffffff800086a1:	48 09 c6             	or     %rax,%rsi
ffffffff800086a4:	48 89 91 e8 c1 21 80 	mov    %rdx,-0x7fde3e18(%rcx)
ffffffff800086ab:	48 89 b1 e0 c1 21 80 	mov    %rsi,-0x7fde3e20(%rcx)
ffffffff800086b2:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
ffffffff800086b6:	44 89 c1             	mov    %r8d,%ecx
ffffffff800086b9:	81 e1 00 00 ff ff    	and    $0xffff0000,%ecx
ffffffff800086bf:	48 c1 e1 20          	shl    $0x20,%rcx
ffffffff800086c3:	0f b6 55 ff          	movzbl -0x1(%rbp),%edx
ffffffff800086c7:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff800086cb:	8b b2 ec c1 21 80    	mov    -0x7fde3e14(%rdx),%esi
ffffffff800086d1:	48 8b ba e0 c1 21 80 	mov    -0x7fde3e20(%rdx),%rdi
ffffffff800086d8:	48 b8 ff ff ff ff ff 	movabs $0xffffffffffff,%rax
ffffffff800086df:	ff 00 00 
ffffffff800086e2:	48 21 c7             	and    %rax,%rdi
ffffffff800086e5:	48 09 cf             	or     %rcx,%rdi
ffffffff800086e8:	4c 0f a4 c6 20       	shld   $0x20,%r8,%rsi
ffffffff800086ed:	48 89 b2 e8 c1 21 80 	mov    %rsi,-0x7fde3e18(%rdx)
ffffffff800086f4:	48 89 ba e0 c1 21 80 	mov    %rdi,-0x7fde3e20(%rdx)
ffffffff800086fb:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff800086ff:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80008703:	48 8b 88 e8 c1 21 80 	mov    -0x7fde3e18(%rax),%rcx
ffffffff8000870a:	48 8b 90 e0 c1 21 80 	mov    -0x7fde3e20(%rax),%rdx
ffffffff80008711:	48 be ff ff ff ff ff 	movabs $0xfffff0ffffffffff,%rsi
ffffffff80008718:	f0 ff ff 
ffffffff8000871b:	48 21 f2             	and    %rsi,%rdx
ffffffff8000871e:	48 be 00 00 00 00 00 	movabs $0xe0000000000,%rsi
ffffffff80008725:	0e 00 00 
ffffffff80008728:	48 09 f2             	or     %rsi,%rdx
ffffffff8000872b:	48 89 88 e8 c1 21 80 	mov    %rcx,-0x7fde3e18(%rax)
ffffffff80008732:	48 89 90 e0 c1 21 80 	mov    %rdx,-0x7fde3e20(%rax)
ffffffff80008739:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000873d:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80008741:	48 8b 88 e8 c1 21 80 	mov    -0x7fde3e18(%rax),%rcx
ffffffff80008748:	48 8b 90 e0 c1 21 80 	mov    -0x7fde3e20(%rax),%rdx
ffffffff8000874f:	48 be ff ff 00 00 ff 	movabs $0xffffffff0000ffff,%rsi
ffffffff80008756:	ff ff ff 
ffffffff80008759:	48 21 f2             	and    %rsi,%rdx
ffffffff8000875c:	48 81 ca 00 00 08 00 	or     $0x80000,%rdx
ffffffff80008763:	48 89 88 e8 c1 21 80 	mov    %rcx,-0x7fde3e18(%rax)
ffffffff8000876a:	48 89 90 e0 c1 21 80 	mov    %rdx,-0x7fde3e20(%rax)
ffffffff80008771:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff80008775:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80008779:	48 8b 88 e8 c1 21 80 	mov    -0x7fde3e18(%rax),%rcx
ffffffff80008780:	48 8b 90 e0 c1 21 80 	mov    -0x7fde3e20(%rax),%rdx
ffffffff80008787:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8000878e:	80 00 00 
ffffffff80008791:	48 09 f2             	or     %rsi,%rdx
ffffffff80008794:	48 89 88 e8 c1 21 80 	mov    %rcx,-0x7fde3e18(%rax)
ffffffff8000879b:	48 89 90 e0 c1 21 80 	mov    %rdx,-0x7fde3e20(%rax)
ffffffff800087a2:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff800087a6:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff800087aa:	48 8b 88 e8 c1 21 80 	mov    -0x7fde3e18(%rax),%rcx
ffffffff800087b1:	48 8b 90 e0 c1 21 80 	mov    -0x7fde3e20(%rax),%rdx
ffffffff800087b8:	48 be ff ff ff ff ff 	movabs $0xffff9fffffffffff,%rsi
ffffffff800087bf:	9f ff ff 
ffffffff800087c2:	48 21 f2             	and    %rsi,%rdx
ffffffff800087c5:	48 89 88 e8 c1 21 80 	mov    %rcx,-0x7fde3e18(%rax)
ffffffff800087cc:	48 89 90 e0 c1 21 80 	mov    %rdx,-0x7fde3e20(%rax)
ffffffff800087d3:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff800087d7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff800087db:	48 8b 88 e8 c1 21 80 	mov    -0x7fde3e18(%rax),%rcx
ffffffff800087e2:	48 8b 90 e0 c1 21 80 	mov    -0x7fde3e20(%rax),%rdx
ffffffff800087e9:	48 be ff ff ff ff f8 	movabs $0xfffffff8ffffffff,%rsi
ffffffff800087f0:	ff ff ff 
ffffffff800087f3:	48 21 f2             	and    %rsi,%rdx
ffffffff800087f6:	48 89 88 e8 c1 21 80 	mov    %rcx,-0x7fde3e18(%rax)
ffffffff800087fd:	48 89 90 e0 c1 21 80 	mov    %rdx,-0x7fde3e20(%rax)
ffffffff80008804:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80008808:	5d                   	pop    %rbp
ffffffff80008809:	c3                   	ret    
ffffffff8000880a:	cc                   	int3   
ffffffff8000880b:	cc                   	int3   
ffffffff8000880c:	cc                   	int3   
ffffffff8000880d:	cc                   	int3   
ffffffff8000880e:	cc                   	int3   
ffffffff8000880f:	cc                   	int3   

ffffffff80008810 <interrupt_handle_0x01>:
ffffffff80008810:	6a 00                	push   $0x0
ffffffff80008812:	6a 01                	push   $0x1
ffffffff80008814:	e9 e7 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008819:	cc                   	int3   
ffffffff8000881a:	cc                   	int3   
ffffffff8000881b:	cc                   	int3   
ffffffff8000881c:	cc                   	int3   
ffffffff8000881d:	cc                   	int3   
ffffffff8000881e:	cc                   	int3   
ffffffff8000881f:	cc                   	int3   

ffffffff80008820 <interrupt_handle_0x02>:
ffffffff80008820:	6a 00                	push   $0x0
ffffffff80008822:	6a 02                	push   $0x2
ffffffff80008824:	e9 d7 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008829:	cc                   	int3   
ffffffff8000882a:	cc                   	int3   
ffffffff8000882b:	cc                   	int3   
ffffffff8000882c:	cc                   	int3   
ffffffff8000882d:	cc                   	int3   
ffffffff8000882e:	cc                   	int3   
ffffffff8000882f:	cc                   	int3   

ffffffff80008830 <interrupt_handle_0x03>:
ffffffff80008830:	6a 00                	push   $0x0
ffffffff80008832:	6a 03                	push   $0x3
ffffffff80008834:	e9 c7 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008839:	cc                   	int3   
ffffffff8000883a:	cc                   	int3   
ffffffff8000883b:	cc                   	int3   
ffffffff8000883c:	cc                   	int3   
ffffffff8000883d:	cc                   	int3   
ffffffff8000883e:	cc                   	int3   
ffffffff8000883f:	cc                   	int3   

ffffffff80008840 <interrupt_handle_0x04>:
ffffffff80008840:	6a 00                	push   $0x0
ffffffff80008842:	6a 04                	push   $0x4
ffffffff80008844:	e9 b7 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008849:	cc                   	int3   
ffffffff8000884a:	cc                   	int3   
ffffffff8000884b:	cc                   	int3   
ffffffff8000884c:	cc                   	int3   
ffffffff8000884d:	cc                   	int3   
ffffffff8000884e:	cc                   	int3   
ffffffff8000884f:	cc                   	int3   

ffffffff80008850 <interrupt_handle_0x05>:
ffffffff80008850:	6a 00                	push   $0x0
ffffffff80008852:	6a 05                	push   $0x5
ffffffff80008854:	e9 a7 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008859:	cc                   	int3   
ffffffff8000885a:	cc                   	int3   
ffffffff8000885b:	cc                   	int3   
ffffffff8000885c:	cc                   	int3   
ffffffff8000885d:	cc                   	int3   
ffffffff8000885e:	cc                   	int3   
ffffffff8000885f:	cc                   	int3   

ffffffff80008860 <interrupt_handle_0x06>:
ffffffff80008860:	6a 00                	push   $0x0
ffffffff80008862:	6a 06                	push   $0x6
ffffffff80008864:	e9 97 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008869:	cc                   	int3   
ffffffff8000886a:	cc                   	int3   
ffffffff8000886b:	cc                   	int3   
ffffffff8000886c:	cc                   	int3   
ffffffff8000886d:	cc                   	int3   
ffffffff8000886e:	cc                   	int3   
ffffffff8000886f:	cc                   	int3   

ffffffff80008870 <interrupt_handle_0x07>:
ffffffff80008870:	6a 00                	push   $0x0
ffffffff80008872:	6a 07                	push   $0x7
ffffffff80008874:	e9 87 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008879:	cc                   	int3   
ffffffff8000887a:	cc                   	int3   
ffffffff8000887b:	cc                   	int3   
ffffffff8000887c:	cc                   	int3   
ffffffff8000887d:	cc                   	int3   
ffffffff8000887e:	cc                   	int3   
ffffffff8000887f:	cc                   	int3   

ffffffff80008880 <interrupt_handle_0x08>:
ffffffff80008880:	6a 08                	push   $0x8
ffffffff80008882:	e9 79 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008887:	cc                   	int3   
ffffffff80008888:	cc                   	int3   
ffffffff80008889:	cc                   	int3   
ffffffff8000888a:	cc                   	int3   
ffffffff8000888b:	cc                   	int3   
ffffffff8000888c:	cc                   	int3   
ffffffff8000888d:	cc                   	int3   
ffffffff8000888e:	cc                   	int3   
ffffffff8000888f:	cc                   	int3   

ffffffff80008890 <interrupt_handle_0x09>:
ffffffff80008890:	6a 00                	push   $0x0
ffffffff80008892:	6a 09                	push   $0x9
ffffffff80008894:	e9 67 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008899:	cc                   	int3   
ffffffff8000889a:	cc                   	int3   
ffffffff8000889b:	cc                   	int3   
ffffffff8000889c:	cc                   	int3   
ffffffff8000889d:	cc                   	int3   
ffffffff8000889e:	cc                   	int3   
ffffffff8000889f:	cc                   	int3   

ffffffff800088a0 <interrupt_handle_0x0a>:
ffffffff800088a0:	6a 0a                	push   $0xa
ffffffff800088a2:	e9 59 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800088a7:	cc                   	int3   
ffffffff800088a8:	cc                   	int3   
ffffffff800088a9:	cc                   	int3   
ffffffff800088aa:	cc                   	int3   
ffffffff800088ab:	cc                   	int3   
ffffffff800088ac:	cc                   	int3   
ffffffff800088ad:	cc                   	int3   
ffffffff800088ae:	cc                   	int3   
ffffffff800088af:	cc                   	int3   

ffffffff800088b0 <interrupt_handle_0x0b>:
ffffffff800088b0:	6a 0b                	push   $0xb
ffffffff800088b2:	e9 49 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800088b7:	cc                   	int3   
ffffffff800088b8:	cc                   	int3   
ffffffff800088b9:	cc                   	int3   
ffffffff800088ba:	cc                   	int3   
ffffffff800088bb:	cc                   	int3   
ffffffff800088bc:	cc                   	int3   
ffffffff800088bd:	cc                   	int3   
ffffffff800088be:	cc                   	int3   
ffffffff800088bf:	cc                   	int3   

ffffffff800088c0 <interrupt_handle_0x0c>:
ffffffff800088c0:	6a 0c                	push   $0xc
ffffffff800088c2:	e9 39 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800088c7:	cc                   	int3   
ffffffff800088c8:	cc                   	int3   
ffffffff800088c9:	cc                   	int3   
ffffffff800088ca:	cc                   	int3   
ffffffff800088cb:	cc                   	int3   
ffffffff800088cc:	cc                   	int3   
ffffffff800088cd:	cc                   	int3   
ffffffff800088ce:	cc                   	int3   
ffffffff800088cf:	cc                   	int3   

ffffffff800088d0 <interrupt_handle_0x0d>:
ffffffff800088d0:	6a 0d                	push   $0xd
ffffffff800088d2:	e9 29 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800088d7:	cc                   	int3   
ffffffff800088d8:	cc                   	int3   
ffffffff800088d9:	cc                   	int3   
ffffffff800088da:	cc                   	int3   
ffffffff800088db:	cc                   	int3   
ffffffff800088dc:	cc                   	int3   
ffffffff800088dd:	cc                   	int3   
ffffffff800088de:	cc                   	int3   
ffffffff800088df:	cc                   	int3   

ffffffff800088e0 <interrupt_handle_0x0e>:
ffffffff800088e0:	6a 0e                	push   $0xe
ffffffff800088e2:	e9 19 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800088e7:	cc                   	int3   
ffffffff800088e8:	cc                   	int3   
ffffffff800088e9:	cc                   	int3   
ffffffff800088ea:	cc                   	int3   
ffffffff800088eb:	cc                   	int3   
ffffffff800088ec:	cc                   	int3   
ffffffff800088ed:	cc                   	int3   
ffffffff800088ee:	cc                   	int3   
ffffffff800088ef:	cc                   	int3   

ffffffff800088f0 <interrupt_handle_0x0f>:
ffffffff800088f0:	6a 00                	push   $0x0
ffffffff800088f2:	6a 0f                	push   $0xf
ffffffff800088f4:	e9 07 77 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800088f9:	cc                   	int3   
ffffffff800088fa:	cc                   	int3   
ffffffff800088fb:	cc                   	int3   
ffffffff800088fc:	cc                   	int3   
ffffffff800088fd:	cc                   	int3   
ffffffff800088fe:	cc                   	int3   
ffffffff800088ff:	cc                   	int3   

ffffffff80008900 <interrupt_handle_0x10>:
ffffffff80008900:	6a 00                	push   $0x0
ffffffff80008902:	6a 10                	push   $0x10
ffffffff80008904:	e9 f7 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008909:	cc                   	int3   
ffffffff8000890a:	cc                   	int3   
ffffffff8000890b:	cc                   	int3   
ffffffff8000890c:	cc                   	int3   
ffffffff8000890d:	cc                   	int3   
ffffffff8000890e:	cc                   	int3   
ffffffff8000890f:	cc                   	int3   

ffffffff80008910 <interrupt_handle_0x11>:
ffffffff80008910:	6a 11                	push   $0x11
ffffffff80008912:	e9 e9 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008917:	cc                   	int3   
ffffffff80008918:	cc                   	int3   
ffffffff80008919:	cc                   	int3   
ffffffff8000891a:	cc                   	int3   
ffffffff8000891b:	cc                   	int3   
ffffffff8000891c:	cc                   	int3   
ffffffff8000891d:	cc                   	int3   
ffffffff8000891e:	cc                   	int3   
ffffffff8000891f:	cc                   	int3   

ffffffff80008920 <interrupt_handle_0x12>:
ffffffff80008920:	6a 00                	push   $0x0
ffffffff80008922:	6a 12                	push   $0x12
ffffffff80008924:	e9 d7 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008929:	cc                   	int3   
ffffffff8000892a:	cc                   	int3   
ffffffff8000892b:	cc                   	int3   
ffffffff8000892c:	cc                   	int3   
ffffffff8000892d:	cc                   	int3   
ffffffff8000892e:	cc                   	int3   
ffffffff8000892f:	cc                   	int3   

ffffffff80008930 <interrupt_handle_0x13>:
ffffffff80008930:	6a 00                	push   $0x0
ffffffff80008932:	6a 13                	push   $0x13
ffffffff80008934:	e9 c7 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008939:	cc                   	int3   
ffffffff8000893a:	cc                   	int3   
ffffffff8000893b:	cc                   	int3   
ffffffff8000893c:	cc                   	int3   
ffffffff8000893d:	cc                   	int3   
ffffffff8000893e:	cc                   	int3   
ffffffff8000893f:	cc                   	int3   

ffffffff80008940 <interrupt_handle_0x14>:
ffffffff80008940:	6a 00                	push   $0x0
ffffffff80008942:	6a 14                	push   $0x14
ffffffff80008944:	e9 b7 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008949:	cc                   	int3   
ffffffff8000894a:	cc                   	int3   
ffffffff8000894b:	cc                   	int3   
ffffffff8000894c:	cc                   	int3   
ffffffff8000894d:	cc                   	int3   
ffffffff8000894e:	cc                   	int3   
ffffffff8000894f:	cc                   	int3   

ffffffff80008950 <interrupt_handle_0x15>:
ffffffff80008950:	6a 00                	push   $0x0
ffffffff80008952:	6a 15                	push   $0x15
ffffffff80008954:	e9 a7 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008959:	cc                   	int3   
ffffffff8000895a:	cc                   	int3   
ffffffff8000895b:	cc                   	int3   
ffffffff8000895c:	cc                   	int3   
ffffffff8000895d:	cc                   	int3   
ffffffff8000895e:	cc                   	int3   
ffffffff8000895f:	cc                   	int3   

ffffffff80008960 <interrupt_handle_0x16>:
ffffffff80008960:	6a 00                	push   $0x0
ffffffff80008962:	6a 16                	push   $0x16
ffffffff80008964:	e9 97 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008969:	cc                   	int3   
ffffffff8000896a:	cc                   	int3   
ffffffff8000896b:	cc                   	int3   
ffffffff8000896c:	cc                   	int3   
ffffffff8000896d:	cc                   	int3   
ffffffff8000896e:	cc                   	int3   
ffffffff8000896f:	cc                   	int3   

ffffffff80008970 <interrupt_handle_0x17>:
ffffffff80008970:	6a 00                	push   $0x0
ffffffff80008972:	6a 17                	push   $0x17
ffffffff80008974:	e9 87 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008979:	cc                   	int3   
ffffffff8000897a:	cc                   	int3   
ffffffff8000897b:	cc                   	int3   
ffffffff8000897c:	cc                   	int3   
ffffffff8000897d:	cc                   	int3   
ffffffff8000897e:	cc                   	int3   
ffffffff8000897f:	cc                   	int3   

ffffffff80008980 <interrupt_handle_0x18>:
ffffffff80008980:	6a 00                	push   $0x0
ffffffff80008982:	6a 18                	push   $0x18
ffffffff80008984:	e9 77 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008989:	cc                   	int3   
ffffffff8000898a:	cc                   	int3   
ffffffff8000898b:	cc                   	int3   
ffffffff8000898c:	cc                   	int3   
ffffffff8000898d:	cc                   	int3   
ffffffff8000898e:	cc                   	int3   
ffffffff8000898f:	cc                   	int3   

ffffffff80008990 <interrupt_handle_0x19>:
ffffffff80008990:	6a 00                	push   $0x0
ffffffff80008992:	6a 19                	push   $0x19
ffffffff80008994:	e9 67 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff80008999:	cc                   	int3   
ffffffff8000899a:	cc                   	int3   
ffffffff8000899b:	cc                   	int3   
ffffffff8000899c:	cc                   	int3   
ffffffff8000899d:	cc                   	int3   
ffffffff8000899e:	cc                   	int3   
ffffffff8000899f:	cc                   	int3   

ffffffff800089a0 <interrupt_handle_0x1a>:
ffffffff800089a0:	6a 00                	push   $0x0
ffffffff800089a2:	6a 1a                	push   $0x1a
ffffffff800089a4:	e9 57 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800089a9:	cc                   	int3   
ffffffff800089aa:	cc                   	int3   
ffffffff800089ab:	cc                   	int3   
ffffffff800089ac:	cc                   	int3   
ffffffff800089ad:	cc                   	int3   
ffffffff800089ae:	cc                   	int3   
ffffffff800089af:	cc                   	int3   

ffffffff800089b0 <interrupt_handle_0x1b>:
ffffffff800089b0:	6a 00                	push   $0x0
ffffffff800089b2:	6a 1b                	push   $0x1b
ffffffff800089b4:	e9 47 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800089b9:	cc                   	int3   
ffffffff800089ba:	cc                   	int3   
ffffffff800089bb:	cc                   	int3   
ffffffff800089bc:	cc                   	int3   
ffffffff800089bd:	cc                   	int3   
ffffffff800089be:	cc                   	int3   
ffffffff800089bf:	cc                   	int3   

ffffffff800089c0 <interrupt_handle_0x1c>:
ffffffff800089c0:	6a 00                	push   $0x0
ffffffff800089c2:	6a 1c                	push   $0x1c
ffffffff800089c4:	e9 37 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800089c9:	cc                   	int3   
ffffffff800089ca:	cc                   	int3   
ffffffff800089cb:	cc                   	int3   
ffffffff800089cc:	cc                   	int3   
ffffffff800089cd:	cc                   	int3   
ffffffff800089ce:	cc                   	int3   
ffffffff800089cf:	cc                   	int3   

ffffffff800089d0 <interrupt_handle_0x1d>:
ffffffff800089d0:	6a 00                	push   $0x0
ffffffff800089d2:	6a 1d                	push   $0x1d
ffffffff800089d4:	e9 27 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800089d9:	cc                   	int3   
ffffffff800089da:	cc                   	int3   
ffffffff800089db:	cc                   	int3   
ffffffff800089dc:	cc                   	int3   
ffffffff800089dd:	cc                   	int3   
ffffffff800089de:	cc                   	int3   
ffffffff800089df:	cc                   	int3   

ffffffff800089e0 <interrupt_handle_0x1e>:
ffffffff800089e0:	6a 1e                	push   $0x1e
ffffffff800089e2:	e9 19 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800089e7:	cc                   	int3   
ffffffff800089e8:	cc                   	int3   
ffffffff800089e9:	cc                   	int3   
ffffffff800089ea:	cc                   	int3   
ffffffff800089eb:	cc                   	int3   
ffffffff800089ec:	cc                   	int3   
ffffffff800089ed:	cc                   	int3   
ffffffff800089ee:	cc                   	int3   
ffffffff800089ef:	cc                   	int3   

ffffffff800089f0 <interrupt_handle_0x1f>:
ffffffff800089f0:	6a 00                	push   $0x0
ffffffff800089f2:	6a 1f                	push   $0x1f
ffffffff800089f4:	e9 07 76 ff ff       	jmp    ffffffff80000000 <common_exception_stub>
ffffffff800089f9:	cc                   	int3   
ffffffff800089fa:	cc                   	int3   
ffffffff800089fb:	cc                   	int3   
ffffffff800089fc:	cc                   	int3   
ffffffff800089fd:	cc                   	int3   
ffffffff800089fe:	cc                   	int3   
ffffffff800089ff:	cc                   	int3   

ffffffff80008a00 <interrupt_handle_0x20>:
ffffffff80008a00:	6a 20                	push   $0x20
ffffffff80008a02:	e9 36 76 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a07:	cc                   	int3   
ffffffff80008a08:	cc                   	int3   
ffffffff80008a09:	cc                   	int3   
ffffffff80008a0a:	cc                   	int3   
ffffffff80008a0b:	cc                   	int3   
ffffffff80008a0c:	cc                   	int3   
ffffffff80008a0d:	cc                   	int3   
ffffffff80008a0e:	cc                   	int3   
ffffffff80008a0f:	cc                   	int3   

ffffffff80008a10 <interrupt_handle_0x21>:
ffffffff80008a10:	6a 21                	push   $0x21
ffffffff80008a12:	e9 26 76 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a17:	cc                   	int3   
ffffffff80008a18:	cc                   	int3   
ffffffff80008a19:	cc                   	int3   
ffffffff80008a1a:	cc                   	int3   
ffffffff80008a1b:	cc                   	int3   
ffffffff80008a1c:	cc                   	int3   
ffffffff80008a1d:	cc                   	int3   
ffffffff80008a1e:	cc                   	int3   
ffffffff80008a1f:	cc                   	int3   

ffffffff80008a20 <interrupt_handle_0x22>:
ffffffff80008a20:	6a 22                	push   $0x22
ffffffff80008a22:	e9 16 76 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a27:	cc                   	int3   
ffffffff80008a28:	cc                   	int3   
ffffffff80008a29:	cc                   	int3   
ffffffff80008a2a:	cc                   	int3   
ffffffff80008a2b:	cc                   	int3   
ffffffff80008a2c:	cc                   	int3   
ffffffff80008a2d:	cc                   	int3   
ffffffff80008a2e:	cc                   	int3   
ffffffff80008a2f:	cc                   	int3   

ffffffff80008a30 <interrupt_handle_0x23>:
ffffffff80008a30:	6a 23                	push   $0x23
ffffffff80008a32:	e9 06 76 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a37:	cc                   	int3   
ffffffff80008a38:	cc                   	int3   
ffffffff80008a39:	cc                   	int3   
ffffffff80008a3a:	cc                   	int3   
ffffffff80008a3b:	cc                   	int3   
ffffffff80008a3c:	cc                   	int3   
ffffffff80008a3d:	cc                   	int3   
ffffffff80008a3e:	cc                   	int3   
ffffffff80008a3f:	cc                   	int3   

ffffffff80008a40 <interrupt_handle_0x24>:
ffffffff80008a40:	6a 24                	push   $0x24
ffffffff80008a42:	e9 f6 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a47:	cc                   	int3   
ffffffff80008a48:	cc                   	int3   
ffffffff80008a49:	cc                   	int3   
ffffffff80008a4a:	cc                   	int3   
ffffffff80008a4b:	cc                   	int3   
ffffffff80008a4c:	cc                   	int3   
ffffffff80008a4d:	cc                   	int3   
ffffffff80008a4e:	cc                   	int3   
ffffffff80008a4f:	cc                   	int3   

ffffffff80008a50 <interrupt_handle_0x25>:
ffffffff80008a50:	6a 25                	push   $0x25
ffffffff80008a52:	e9 e6 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a57:	cc                   	int3   
ffffffff80008a58:	cc                   	int3   
ffffffff80008a59:	cc                   	int3   
ffffffff80008a5a:	cc                   	int3   
ffffffff80008a5b:	cc                   	int3   
ffffffff80008a5c:	cc                   	int3   
ffffffff80008a5d:	cc                   	int3   
ffffffff80008a5e:	cc                   	int3   
ffffffff80008a5f:	cc                   	int3   

ffffffff80008a60 <interrupt_handle_0x26>:
ffffffff80008a60:	6a 26                	push   $0x26
ffffffff80008a62:	e9 d6 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a67:	cc                   	int3   
ffffffff80008a68:	cc                   	int3   
ffffffff80008a69:	cc                   	int3   
ffffffff80008a6a:	cc                   	int3   
ffffffff80008a6b:	cc                   	int3   
ffffffff80008a6c:	cc                   	int3   
ffffffff80008a6d:	cc                   	int3   
ffffffff80008a6e:	cc                   	int3   
ffffffff80008a6f:	cc                   	int3   

ffffffff80008a70 <interrupt_handle_0x27>:
ffffffff80008a70:	6a 27                	push   $0x27
ffffffff80008a72:	e9 c6 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a77:	cc                   	int3   
ffffffff80008a78:	cc                   	int3   
ffffffff80008a79:	cc                   	int3   
ffffffff80008a7a:	cc                   	int3   
ffffffff80008a7b:	cc                   	int3   
ffffffff80008a7c:	cc                   	int3   
ffffffff80008a7d:	cc                   	int3   
ffffffff80008a7e:	cc                   	int3   
ffffffff80008a7f:	cc                   	int3   

ffffffff80008a80 <interrupt_handle_0x28>:
ffffffff80008a80:	6a 28                	push   $0x28
ffffffff80008a82:	e9 b6 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a87:	cc                   	int3   
ffffffff80008a88:	cc                   	int3   
ffffffff80008a89:	cc                   	int3   
ffffffff80008a8a:	cc                   	int3   
ffffffff80008a8b:	cc                   	int3   
ffffffff80008a8c:	cc                   	int3   
ffffffff80008a8d:	cc                   	int3   
ffffffff80008a8e:	cc                   	int3   
ffffffff80008a8f:	cc                   	int3   

ffffffff80008a90 <interrupt_handle_0x29>:
ffffffff80008a90:	6a 29                	push   $0x29
ffffffff80008a92:	e9 a6 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008a97:	cc                   	int3   
ffffffff80008a98:	cc                   	int3   
ffffffff80008a99:	cc                   	int3   
ffffffff80008a9a:	cc                   	int3   
ffffffff80008a9b:	cc                   	int3   
ffffffff80008a9c:	cc                   	int3   
ffffffff80008a9d:	cc                   	int3   
ffffffff80008a9e:	cc                   	int3   
ffffffff80008a9f:	cc                   	int3   

ffffffff80008aa0 <interrupt_handle_0x2a>:
ffffffff80008aa0:	6a 2a                	push   $0x2a
ffffffff80008aa2:	e9 96 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008aa7:	cc                   	int3   
ffffffff80008aa8:	cc                   	int3   
ffffffff80008aa9:	cc                   	int3   
ffffffff80008aaa:	cc                   	int3   
ffffffff80008aab:	cc                   	int3   
ffffffff80008aac:	cc                   	int3   
ffffffff80008aad:	cc                   	int3   
ffffffff80008aae:	cc                   	int3   
ffffffff80008aaf:	cc                   	int3   

ffffffff80008ab0 <interrupt_handle_0x2b>:
ffffffff80008ab0:	6a 2b                	push   $0x2b
ffffffff80008ab2:	e9 86 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ab7:	cc                   	int3   
ffffffff80008ab8:	cc                   	int3   
ffffffff80008ab9:	cc                   	int3   
ffffffff80008aba:	cc                   	int3   
ffffffff80008abb:	cc                   	int3   
ffffffff80008abc:	cc                   	int3   
ffffffff80008abd:	cc                   	int3   
ffffffff80008abe:	cc                   	int3   
ffffffff80008abf:	cc                   	int3   

ffffffff80008ac0 <interrupt_handle_0x2c>:
ffffffff80008ac0:	6a 2c                	push   $0x2c
ffffffff80008ac2:	e9 76 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ac7:	cc                   	int3   
ffffffff80008ac8:	cc                   	int3   
ffffffff80008ac9:	cc                   	int3   
ffffffff80008aca:	cc                   	int3   
ffffffff80008acb:	cc                   	int3   
ffffffff80008acc:	cc                   	int3   
ffffffff80008acd:	cc                   	int3   
ffffffff80008ace:	cc                   	int3   
ffffffff80008acf:	cc                   	int3   

ffffffff80008ad0 <interrupt_handle_0x2d>:
ffffffff80008ad0:	6a 2d                	push   $0x2d
ffffffff80008ad2:	e9 66 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ad7:	cc                   	int3   
ffffffff80008ad8:	cc                   	int3   
ffffffff80008ad9:	cc                   	int3   
ffffffff80008ada:	cc                   	int3   
ffffffff80008adb:	cc                   	int3   
ffffffff80008adc:	cc                   	int3   
ffffffff80008add:	cc                   	int3   
ffffffff80008ade:	cc                   	int3   
ffffffff80008adf:	cc                   	int3   

ffffffff80008ae0 <interrupt_handle_0x2e>:
ffffffff80008ae0:	6a 2e                	push   $0x2e
ffffffff80008ae2:	e9 56 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ae7:	cc                   	int3   
ffffffff80008ae8:	cc                   	int3   
ffffffff80008ae9:	cc                   	int3   
ffffffff80008aea:	cc                   	int3   
ffffffff80008aeb:	cc                   	int3   
ffffffff80008aec:	cc                   	int3   
ffffffff80008aed:	cc                   	int3   
ffffffff80008aee:	cc                   	int3   
ffffffff80008aef:	cc                   	int3   

ffffffff80008af0 <interrupt_handle_0x2f>:
ffffffff80008af0:	6a 2f                	push   $0x2f
ffffffff80008af2:	e9 46 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008af7:	cc                   	int3   
ffffffff80008af8:	cc                   	int3   
ffffffff80008af9:	cc                   	int3   
ffffffff80008afa:	cc                   	int3   
ffffffff80008afb:	cc                   	int3   
ffffffff80008afc:	cc                   	int3   
ffffffff80008afd:	cc                   	int3   
ffffffff80008afe:	cc                   	int3   
ffffffff80008aff:	cc                   	int3   

ffffffff80008b00 <interrupt_handle_0x30>:
ffffffff80008b00:	6a 30                	push   $0x30
ffffffff80008b02:	e9 36 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b07:	cc                   	int3   
ffffffff80008b08:	cc                   	int3   
ffffffff80008b09:	cc                   	int3   
ffffffff80008b0a:	cc                   	int3   
ffffffff80008b0b:	cc                   	int3   
ffffffff80008b0c:	cc                   	int3   
ffffffff80008b0d:	cc                   	int3   
ffffffff80008b0e:	cc                   	int3   
ffffffff80008b0f:	cc                   	int3   

ffffffff80008b10 <interrupt_handle_0x31>:
ffffffff80008b10:	6a 31                	push   $0x31
ffffffff80008b12:	e9 26 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b17:	cc                   	int3   
ffffffff80008b18:	cc                   	int3   
ffffffff80008b19:	cc                   	int3   
ffffffff80008b1a:	cc                   	int3   
ffffffff80008b1b:	cc                   	int3   
ffffffff80008b1c:	cc                   	int3   
ffffffff80008b1d:	cc                   	int3   
ffffffff80008b1e:	cc                   	int3   
ffffffff80008b1f:	cc                   	int3   

ffffffff80008b20 <interrupt_handle_0x32>:
ffffffff80008b20:	6a 32                	push   $0x32
ffffffff80008b22:	e9 16 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b27:	cc                   	int3   
ffffffff80008b28:	cc                   	int3   
ffffffff80008b29:	cc                   	int3   
ffffffff80008b2a:	cc                   	int3   
ffffffff80008b2b:	cc                   	int3   
ffffffff80008b2c:	cc                   	int3   
ffffffff80008b2d:	cc                   	int3   
ffffffff80008b2e:	cc                   	int3   
ffffffff80008b2f:	cc                   	int3   

ffffffff80008b30 <interrupt_handle_0x33>:
ffffffff80008b30:	6a 33                	push   $0x33
ffffffff80008b32:	e9 06 75 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b37:	cc                   	int3   
ffffffff80008b38:	cc                   	int3   
ffffffff80008b39:	cc                   	int3   
ffffffff80008b3a:	cc                   	int3   
ffffffff80008b3b:	cc                   	int3   
ffffffff80008b3c:	cc                   	int3   
ffffffff80008b3d:	cc                   	int3   
ffffffff80008b3e:	cc                   	int3   
ffffffff80008b3f:	cc                   	int3   

ffffffff80008b40 <interrupt_handle_0x34>:
ffffffff80008b40:	6a 34                	push   $0x34
ffffffff80008b42:	e9 f6 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b47:	cc                   	int3   
ffffffff80008b48:	cc                   	int3   
ffffffff80008b49:	cc                   	int3   
ffffffff80008b4a:	cc                   	int3   
ffffffff80008b4b:	cc                   	int3   
ffffffff80008b4c:	cc                   	int3   
ffffffff80008b4d:	cc                   	int3   
ffffffff80008b4e:	cc                   	int3   
ffffffff80008b4f:	cc                   	int3   

ffffffff80008b50 <interrupt_handle_0x35>:
ffffffff80008b50:	6a 35                	push   $0x35
ffffffff80008b52:	e9 e6 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b57:	cc                   	int3   
ffffffff80008b58:	cc                   	int3   
ffffffff80008b59:	cc                   	int3   
ffffffff80008b5a:	cc                   	int3   
ffffffff80008b5b:	cc                   	int3   
ffffffff80008b5c:	cc                   	int3   
ffffffff80008b5d:	cc                   	int3   
ffffffff80008b5e:	cc                   	int3   
ffffffff80008b5f:	cc                   	int3   

ffffffff80008b60 <interrupt_handle_0x36>:
ffffffff80008b60:	6a 36                	push   $0x36
ffffffff80008b62:	e9 d6 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b67:	cc                   	int3   
ffffffff80008b68:	cc                   	int3   
ffffffff80008b69:	cc                   	int3   
ffffffff80008b6a:	cc                   	int3   
ffffffff80008b6b:	cc                   	int3   
ffffffff80008b6c:	cc                   	int3   
ffffffff80008b6d:	cc                   	int3   
ffffffff80008b6e:	cc                   	int3   
ffffffff80008b6f:	cc                   	int3   

ffffffff80008b70 <interrupt_handle_0x37>:
ffffffff80008b70:	6a 37                	push   $0x37
ffffffff80008b72:	e9 c6 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b77:	cc                   	int3   
ffffffff80008b78:	cc                   	int3   
ffffffff80008b79:	cc                   	int3   
ffffffff80008b7a:	cc                   	int3   
ffffffff80008b7b:	cc                   	int3   
ffffffff80008b7c:	cc                   	int3   
ffffffff80008b7d:	cc                   	int3   
ffffffff80008b7e:	cc                   	int3   
ffffffff80008b7f:	cc                   	int3   

ffffffff80008b80 <interrupt_handle_0x38>:
ffffffff80008b80:	6a 38                	push   $0x38
ffffffff80008b82:	e9 b6 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b87:	cc                   	int3   
ffffffff80008b88:	cc                   	int3   
ffffffff80008b89:	cc                   	int3   
ffffffff80008b8a:	cc                   	int3   
ffffffff80008b8b:	cc                   	int3   
ffffffff80008b8c:	cc                   	int3   
ffffffff80008b8d:	cc                   	int3   
ffffffff80008b8e:	cc                   	int3   
ffffffff80008b8f:	cc                   	int3   

ffffffff80008b90 <interrupt_handle_0x39>:
ffffffff80008b90:	6a 39                	push   $0x39
ffffffff80008b92:	e9 a6 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008b97:	cc                   	int3   
ffffffff80008b98:	cc                   	int3   
ffffffff80008b99:	cc                   	int3   
ffffffff80008b9a:	cc                   	int3   
ffffffff80008b9b:	cc                   	int3   
ffffffff80008b9c:	cc                   	int3   
ffffffff80008b9d:	cc                   	int3   
ffffffff80008b9e:	cc                   	int3   
ffffffff80008b9f:	cc                   	int3   

ffffffff80008ba0 <interrupt_handle_0x3a>:
ffffffff80008ba0:	6a 3a                	push   $0x3a
ffffffff80008ba2:	e9 96 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ba7:	cc                   	int3   
ffffffff80008ba8:	cc                   	int3   
ffffffff80008ba9:	cc                   	int3   
ffffffff80008baa:	cc                   	int3   
ffffffff80008bab:	cc                   	int3   
ffffffff80008bac:	cc                   	int3   
ffffffff80008bad:	cc                   	int3   
ffffffff80008bae:	cc                   	int3   
ffffffff80008baf:	cc                   	int3   

ffffffff80008bb0 <interrupt_handle_0x3b>:
ffffffff80008bb0:	6a 3b                	push   $0x3b
ffffffff80008bb2:	e9 86 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008bb7:	cc                   	int3   
ffffffff80008bb8:	cc                   	int3   
ffffffff80008bb9:	cc                   	int3   
ffffffff80008bba:	cc                   	int3   
ffffffff80008bbb:	cc                   	int3   
ffffffff80008bbc:	cc                   	int3   
ffffffff80008bbd:	cc                   	int3   
ffffffff80008bbe:	cc                   	int3   
ffffffff80008bbf:	cc                   	int3   

ffffffff80008bc0 <interrupt_handle_0x3c>:
ffffffff80008bc0:	6a 3c                	push   $0x3c
ffffffff80008bc2:	e9 76 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008bc7:	cc                   	int3   
ffffffff80008bc8:	cc                   	int3   
ffffffff80008bc9:	cc                   	int3   
ffffffff80008bca:	cc                   	int3   
ffffffff80008bcb:	cc                   	int3   
ffffffff80008bcc:	cc                   	int3   
ffffffff80008bcd:	cc                   	int3   
ffffffff80008bce:	cc                   	int3   
ffffffff80008bcf:	cc                   	int3   

ffffffff80008bd0 <interrupt_handle_0x3d>:
ffffffff80008bd0:	6a 3d                	push   $0x3d
ffffffff80008bd2:	e9 66 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008bd7:	cc                   	int3   
ffffffff80008bd8:	cc                   	int3   
ffffffff80008bd9:	cc                   	int3   
ffffffff80008bda:	cc                   	int3   
ffffffff80008bdb:	cc                   	int3   
ffffffff80008bdc:	cc                   	int3   
ffffffff80008bdd:	cc                   	int3   
ffffffff80008bde:	cc                   	int3   
ffffffff80008bdf:	cc                   	int3   

ffffffff80008be0 <interrupt_handle_0x3e>:
ffffffff80008be0:	6a 3e                	push   $0x3e
ffffffff80008be2:	e9 56 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008be7:	cc                   	int3   
ffffffff80008be8:	cc                   	int3   
ffffffff80008be9:	cc                   	int3   
ffffffff80008bea:	cc                   	int3   
ffffffff80008beb:	cc                   	int3   
ffffffff80008bec:	cc                   	int3   
ffffffff80008bed:	cc                   	int3   
ffffffff80008bee:	cc                   	int3   
ffffffff80008bef:	cc                   	int3   

ffffffff80008bf0 <interrupt_handle_0x3f>:
ffffffff80008bf0:	6a 3f                	push   $0x3f
ffffffff80008bf2:	e9 46 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008bf7:	cc                   	int3   
ffffffff80008bf8:	cc                   	int3   
ffffffff80008bf9:	cc                   	int3   
ffffffff80008bfa:	cc                   	int3   
ffffffff80008bfb:	cc                   	int3   
ffffffff80008bfc:	cc                   	int3   
ffffffff80008bfd:	cc                   	int3   
ffffffff80008bfe:	cc                   	int3   
ffffffff80008bff:	cc                   	int3   

ffffffff80008c00 <interrupt_handle_0x40>:
ffffffff80008c00:	6a 40                	push   $0x40
ffffffff80008c02:	e9 36 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c07:	cc                   	int3   
ffffffff80008c08:	cc                   	int3   
ffffffff80008c09:	cc                   	int3   
ffffffff80008c0a:	cc                   	int3   
ffffffff80008c0b:	cc                   	int3   
ffffffff80008c0c:	cc                   	int3   
ffffffff80008c0d:	cc                   	int3   
ffffffff80008c0e:	cc                   	int3   
ffffffff80008c0f:	cc                   	int3   

ffffffff80008c10 <interrupt_handle_0x41>:
ffffffff80008c10:	6a 41                	push   $0x41
ffffffff80008c12:	e9 26 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c17:	cc                   	int3   
ffffffff80008c18:	cc                   	int3   
ffffffff80008c19:	cc                   	int3   
ffffffff80008c1a:	cc                   	int3   
ffffffff80008c1b:	cc                   	int3   
ffffffff80008c1c:	cc                   	int3   
ffffffff80008c1d:	cc                   	int3   
ffffffff80008c1e:	cc                   	int3   
ffffffff80008c1f:	cc                   	int3   

ffffffff80008c20 <interrupt_handle_0x42>:
ffffffff80008c20:	6a 42                	push   $0x42
ffffffff80008c22:	e9 16 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c27:	cc                   	int3   
ffffffff80008c28:	cc                   	int3   
ffffffff80008c29:	cc                   	int3   
ffffffff80008c2a:	cc                   	int3   
ffffffff80008c2b:	cc                   	int3   
ffffffff80008c2c:	cc                   	int3   
ffffffff80008c2d:	cc                   	int3   
ffffffff80008c2e:	cc                   	int3   
ffffffff80008c2f:	cc                   	int3   

ffffffff80008c30 <interrupt_handle_0x43>:
ffffffff80008c30:	6a 43                	push   $0x43
ffffffff80008c32:	e9 06 74 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c37:	cc                   	int3   
ffffffff80008c38:	cc                   	int3   
ffffffff80008c39:	cc                   	int3   
ffffffff80008c3a:	cc                   	int3   
ffffffff80008c3b:	cc                   	int3   
ffffffff80008c3c:	cc                   	int3   
ffffffff80008c3d:	cc                   	int3   
ffffffff80008c3e:	cc                   	int3   
ffffffff80008c3f:	cc                   	int3   

ffffffff80008c40 <interrupt_handle_0x44>:
ffffffff80008c40:	6a 44                	push   $0x44
ffffffff80008c42:	e9 f6 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c47:	cc                   	int3   
ffffffff80008c48:	cc                   	int3   
ffffffff80008c49:	cc                   	int3   
ffffffff80008c4a:	cc                   	int3   
ffffffff80008c4b:	cc                   	int3   
ffffffff80008c4c:	cc                   	int3   
ffffffff80008c4d:	cc                   	int3   
ffffffff80008c4e:	cc                   	int3   
ffffffff80008c4f:	cc                   	int3   

ffffffff80008c50 <interrupt_handle_0x45>:
ffffffff80008c50:	6a 45                	push   $0x45
ffffffff80008c52:	e9 e6 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c57:	cc                   	int3   
ffffffff80008c58:	cc                   	int3   
ffffffff80008c59:	cc                   	int3   
ffffffff80008c5a:	cc                   	int3   
ffffffff80008c5b:	cc                   	int3   
ffffffff80008c5c:	cc                   	int3   
ffffffff80008c5d:	cc                   	int3   
ffffffff80008c5e:	cc                   	int3   
ffffffff80008c5f:	cc                   	int3   

ffffffff80008c60 <interrupt_handle_0x46>:
ffffffff80008c60:	6a 46                	push   $0x46
ffffffff80008c62:	e9 d6 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c67:	cc                   	int3   
ffffffff80008c68:	cc                   	int3   
ffffffff80008c69:	cc                   	int3   
ffffffff80008c6a:	cc                   	int3   
ffffffff80008c6b:	cc                   	int3   
ffffffff80008c6c:	cc                   	int3   
ffffffff80008c6d:	cc                   	int3   
ffffffff80008c6e:	cc                   	int3   
ffffffff80008c6f:	cc                   	int3   

ffffffff80008c70 <interrupt_handle_0x47>:
ffffffff80008c70:	6a 47                	push   $0x47
ffffffff80008c72:	e9 c6 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c77:	cc                   	int3   
ffffffff80008c78:	cc                   	int3   
ffffffff80008c79:	cc                   	int3   
ffffffff80008c7a:	cc                   	int3   
ffffffff80008c7b:	cc                   	int3   
ffffffff80008c7c:	cc                   	int3   
ffffffff80008c7d:	cc                   	int3   
ffffffff80008c7e:	cc                   	int3   
ffffffff80008c7f:	cc                   	int3   

ffffffff80008c80 <interrupt_handle_0x48>:
ffffffff80008c80:	6a 48                	push   $0x48
ffffffff80008c82:	e9 b6 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c87:	cc                   	int3   
ffffffff80008c88:	cc                   	int3   
ffffffff80008c89:	cc                   	int3   
ffffffff80008c8a:	cc                   	int3   
ffffffff80008c8b:	cc                   	int3   
ffffffff80008c8c:	cc                   	int3   
ffffffff80008c8d:	cc                   	int3   
ffffffff80008c8e:	cc                   	int3   
ffffffff80008c8f:	cc                   	int3   

ffffffff80008c90 <interrupt_handle_0x49>:
ffffffff80008c90:	6a 49                	push   $0x49
ffffffff80008c92:	e9 a6 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008c97:	cc                   	int3   
ffffffff80008c98:	cc                   	int3   
ffffffff80008c99:	cc                   	int3   
ffffffff80008c9a:	cc                   	int3   
ffffffff80008c9b:	cc                   	int3   
ffffffff80008c9c:	cc                   	int3   
ffffffff80008c9d:	cc                   	int3   
ffffffff80008c9e:	cc                   	int3   
ffffffff80008c9f:	cc                   	int3   

ffffffff80008ca0 <interrupt_handle_0x4a>:
ffffffff80008ca0:	6a 4a                	push   $0x4a
ffffffff80008ca2:	e9 96 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ca7:	cc                   	int3   
ffffffff80008ca8:	cc                   	int3   
ffffffff80008ca9:	cc                   	int3   
ffffffff80008caa:	cc                   	int3   
ffffffff80008cab:	cc                   	int3   
ffffffff80008cac:	cc                   	int3   
ffffffff80008cad:	cc                   	int3   
ffffffff80008cae:	cc                   	int3   
ffffffff80008caf:	cc                   	int3   

ffffffff80008cb0 <interrupt_handle_0x4b>:
ffffffff80008cb0:	6a 4b                	push   $0x4b
ffffffff80008cb2:	e9 86 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008cb7:	cc                   	int3   
ffffffff80008cb8:	cc                   	int3   
ffffffff80008cb9:	cc                   	int3   
ffffffff80008cba:	cc                   	int3   
ffffffff80008cbb:	cc                   	int3   
ffffffff80008cbc:	cc                   	int3   
ffffffff80008cbd:	cc                   	int3   
ffffffff80008cbe:	cc                   	int3   
ffffffff80008cbf:	cc                   	int3   

ffffffff80008cc0 <interrupt_handle_0x4c>:
ffffffff80008cc0:	6a 4c                	push   $0x4c
ffffffff80008cc2:	e9 76 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008cc7:	cc                   	int3   
ffffffff80008cc8:	cc                   	int3   
ffffffff80008cc9:	cc                   	int3   
ffffffff80008cca:	cc                   	int3   
ffffffff80008ccb:	cc                   	int3   
ffffffff80008ccc:	cc                   	int3   
ffffffff80008ccd:	cc                   	int3   
ffffffff80008cce:	cc                   	int3   
ffffffff80008ccf:	cc                   	int3   

ffffffff80008cd0 <interrupt_handle_0x4d>:
ffffffff80008cd0:	6a 4d                	push   $0x4d
ffffffff80008cd2:	e9 66 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008cd7:	cc                   	int3   
ffffffff80008cd8:	cc                   	int3   
ffffffff80008cd9:	cc                   	int3   
ffffffff80008cda:	cc                   	int3   
ffffffff80008cdb:	cc                   	int3   
ffffffff80008cdc:	cc                   	int3   
ffffffff80008cdd:	cc                   	int3   
ffffffff80008cde:	cc                   	int3   
ffffffff80008cdf:	cc                   	int3   

ffffffff80008ce0 <interrupt_handle_0x4e>:
ffffffff80008ce0:	6a 4e                	push   $0x4e
ffffffff80008ce2:	e9 56 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ce7:	cc                   	int3   
ffffffff80008ce8:	cc                   	int3   
ffffffff80008ce9:	cc                   	int3   
ffffffff80008cea:	cc                   	int3   
ffffffff80008ceb:	cc                   	int3   
ffffffff80008cec:	cc                   	int3   
ffffffff80008ced:	cc                   	int3   
ffffffff80008cee:	cc                   	int3   
ffffffff80008cef:	cc                   	int3   

ffffffff80008cf0 <interrupt_handle_0x4f>:
ffffffff80008cf0:	6a 4f                	push   $0x4f
ffffffff80008cf2:	e9 46 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008cf7:	cc                   	int3   
ffffffff80008cf8:	cc                   	int3   
ffffffff80008cf9:	cc                   	int3   
ffffffff80008cfa:	cc                   	int3   
ffffffff80008cfb:	cc                   	int3   
ffffffff80008cfc:	cc                   	int3   
ffffffff80008cfd:	cc                   	int3   
ffffffff80008cfe:	cc                   	int3   
ffffffff80008cff:	cc                   	int3   

ffffffff80008d00 <interrupt_handle_0x50>:
ffffffff80008d00:	6a 50                	push   $0x50
ffffffff80008d02:	e9 36 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d07:	cc                   	int3   
ffffffff80008d08:	cc                   	int3   
ffffffff80008d09:	cc                   	int3   
ffffffff80008d0a:	cc                   	int3   
ffffffff80008d0b:	cc                   	int3   
ffffffff80008d0c:	cc                   	int3   
ffffffff80008d0d:	cc                   	int3   
ffffffff80008d0e:	cc                   	int3   
ffffffff80008d0f:	cc                   	int3   

ffffffff80008d10 <interrupt_handle_0x51>:
ffffffff80008d10:	6a 51                	push   $0x51
ffffffff80008d12:	e9 26 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d17:	cc                   	int3   
ffffffff80008d18:	cc                   	int3   
ffffffff80008d19:	cc                   	int3   
ffffffff80008d1a:	cc                   	int3   
ffffffff80008d1b:	cc                   	int3   
ffffffff80008d1c:	cc                   	int3   
ffffffff80008d1d:	cc                   	int3   
ffffffff80008d1e:	cc                   	int3   
ffffffff80008d1f:	cc                   	int3   

ffffffff80008d20 <interrupt_handle_0x52>:
ffffffff80008d20:	6a 52                	push   $0x52
ffffffff80008d22:	e9 16 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d27:	cc                   	int3   
ffffffff80008d28:	cc                   	int3   
ffffffff80008d29:	cc                   	int3   
ffffffff80008d2a:	cc                   	int3   
ffffffff80008d2b:	cc                   	int3   
ffffffff80008d2c:	cc                   	int3   
ffffffff80008d2d:	cc                   	int3   
ffffffff80008d2e:	cc                   	int3   
ffffffff80008d2f:	cc                   	int3   

ffffffff80008d30 <interrupt_handle_0x53>:
ffffffff80008d30:	6a 53                	push   $0x53
ffffffff80008d32:	e9 06 73 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d37:	cc                   	int3   
ffffffff80008d38:	cc                   	int3   
ffffffff80008d39:	cc                   	int3   
ffffffff80008d3a:	cc                   	int3   
ffffffff80008d3b:	cc                   	int3   
ffffffff80008d3c:	cc                   	int3   
ffffffff80008d3d:	cc                   	int3   
ffffffff80008d3e:	cc                   	int3   
ffffffff80008d3f:	cc                   	int3   

ffffffff80008d40 <interrupt_handle_0x54>:
ffffffff80008d40:	6a 54                	push   $0x54
ffffffff80008d42:	e9 f6 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d47:	cc                   	int3   
ffffffff80008d48:	cc                   	int3   
ffffffff80008d49:	cc                   	int3   
ffffffff80008d4a:	cc                   	int3   
ffffffff80008d4b:	cc                   	int3   
ffffffff80008d4c:	cc                   	int3   
ffffffff80008d4d:	cc                   	int3   
ffffffff80008d4e:	cc                   	int3   
ffffffff80008d4f:	cc                   	int3   

ffffffff80008d50 <interrupt_handle_0x55>:
ffffffff80008d50:	6a 55                	push   $0x55
ffffffff80008d52:	e9 e6 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d57:	cc                   	int3   
ffffffff80008d58:	cc                   	int3   
ffffffff80008d59:	cc                   	int3   
ffffffff80008d5a:	cc                   	int3   
ffffffff80008d5b:	cc                   	int3   
ffffffff80008d5c:	cc                   	int3   
ffffffff80008d5d:	cc                   	int3   
ffffffff80008d5e:	cc                   	int3   
ffffffff80008d5f:	cc                   	int3   

ffffffff80008d60 <interrupt_handle_0x56>:
ffffffff80008d60:	6a 56                	push   $0x56
ffffffff80008d62:	e9 d6 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d67:	cc                   	int3   
ffffffff80008d68:	cc                   	int3   
ffffffff80008d69:	cc                   	int3   
ffffffff80008d6a:	cc                   	int3   
ffffffff80008d6b:	cc                   	int3   
ffffffff80008d6c:	cc                   	int3   
ffffffff80008d6d:	cc                   	int3   
ffffffff80008d6e:	cc                   	int3   
ffffffff80008d6f:	cc                   	int3   

ffffffff80008d70 <interrupt_handle_0x57>:
ffffffff80008d70:	6a 57                	push   $0x57
ffffffff80008d72:	e9 c6 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d77:	cc                   	int3   
ffffffff80008d78:	cc                   	int3   
ffffffff80008d79:	cc                   	int3   
ffffffff80008d7a:	cc                   	int3   
ffffffff80008d7b:	cc                   	int3   
ffffffff80008d7c:	cc                   	int3   
ffffffff80008d7d:	cc                   	int3   
ffffffff80008d7e:	cc                   	int3   
ffffffff80008d7f:	cc                   	int3   

ffffffff80008d80 <interrupt_handle_0x58>:
ffffffff80008d80:	6a 58                	push   $0x58
ffffffff80008d82:	e9 b6 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d87:	cc                   	int3   
ffffffff80008d88:	cc                   	int3   
ffffffff80008d89:	cc                   	int3   
ffffffff80008d8a:	cc                   	int3   
ffffffff80008d8b:	cc                   	int3   
ffffffff80008d8c:	cc                   	int3   
ffffffff80008d8d:	cc                   	int3   
ffffffff80008d8e:	cc                   	int3   
ffffffff80008d8f:	cc                   	int3   

ffffffff80008d90 <interrupt_handle_0x59>:
ffffffff80008d90:	6a 59                	push   $0x59
ffffffff80008d92:	e9 a6 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008d97:	cc                   	int3   
ffffffff80008d98:	cc                   	int3   
ffffffff80008d99:	cc                   	int3   
ffffffff80008d9a:	cc                   	int3   
ffffffff80008d9b:	cc                   	int3   
ffffffff80008d9c:	cc                   	int3   
ffffffff80008d9d:	cc                   	int3   
ffffffff80008d9e:	cc                   	int3   
ffffffff80008d9f:	cc                   	int3   

ffffffff80008da0 <interrupt_handle_0x5a>:
ffffffff80008da0:	6a 5a                	push   $0x5a
ffffffff80008da2:	e9 96 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008da7:	cc                   	int3   
ffffffff80008da8:	cc                   	int3   
ffffffff80008da9:	cc                   	int3   
ffffffff80008daa:	cc                   	int3   
ffffffff80008dab:	cc                   	int3   
ffffffff80008dac:	cc                   	int3   
ffffffff80008dad:	cc                   	int3   
ffffffff80008dae:	cc                   	int3   
ffffffff80008daf:	cc                   	int3   

ffffffff80008db0 <interrupt_handle_0x5b>:
ffffffff80008db0:	6a 5b                	push   $0x5b
ffffffff80008db2:	e9 86 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008db7:	cc                   	int3   
ffffffff80008db8:	cc                   	int3   
ffffffff80008db9:	cc                   	int3   
ffffffff80008dba:	cc                   	int3   
ffffffff80008dbb:	cc                   	int3   
ffffffff80008dbc:	cc                   	int3   
ffffffff80008dbd:	cc                   	int3   
ffffffff80008dbe:	cc                   	int3   
ffffffff80008dbf:	cc                   	int3   

ffffffff80008dc0 <interrupt_handle_0x5c>:
ffffffff80008dc0:	6a 5c                	push   $0x5c
ffffffff80008dc2:	e9 76 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008dc7:	cc                   	int3   
ffffffff80008dc8:	cc                   	int3   
ffffffff80008dc9:	cc                   	int3   
ffffffff80008dca:	cc                   	int3   
ffffffff80008dcb:	cc                   	int3   
ffffffff80008dcc:	cc                   	int3   
ffffffff80008dcd:	cc                   	int3   
ffffffff80008dce:	cc                   	int3   
ffffffff80008dcf:	cc                   	int3   

ffffffff80008dd0 <interrupt_handle_0x5d>:
ffffffff80008dd0:	6a 5d                	push   $0x5d
ffffffff80008dd2:	e9 66 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008dd7:	cc                   	int3   
ffffffff80008dd8:	cc                   	int3   
ffffffff80008dd9:	cc                   	int3   
ffffffff80008dda:	cc                   	int3   
ffffffff80008ddb:	cc                   	int3   
ffffffff80008ddc:	cc                   	int3   
ffffffff80008ddd:	cc                   	int3   
ffffffff80008dde:	cc                   	int3   
ffffffff80008ddf:	cc                   	int3   

ffffffff80008de0 <interrupt_handle_0x5e>:
ffffffff80008de0:	6a 5e                	push   $0x5e
ffffffff80008de2:	e9 56 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008de7:	cc                   	int3   
ffffffff80008de8:	cc                   	int3   
ffffffff80008de9:	cc                   	int3   
ffffffff80008dea:	cc                   	int3   
ffffffff80008deb:	cc                   	int3   
ffffffff80008dec:	cc                   	int3   
ffffffff80008ded:	cc                   	int3   
ffffffff80008dee:	cc                   	int3   
ffffffff80008def:	cc                   	int3   

ffffffff80008df0 <interrupt_handle_0x5f>:
ffffffff80008df0:	6a 5f                	push   $0x5f
ffffffff80008df2:	e9 46 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008df7:	cc                   	int3   
ffffffff80008df8:	cc                   	int3   
ffffffff80008df9:	cc                   	int3   
ffffffff80008dfa:	cc                   	int3   
ffffffff80008dfb:	cc                   	int3   
ffffffff80008dfc:	cc                   	int3   
ffffffff80008dfd:	cc                   	int3   
ffffffff80008dfe:	cc                   	int3   
ffffffff80008dff:	cc                   	int3   

ffffffff80008e00 <interrupt_handle_0x60>:
ffffffff80008e00:	6a 60                	push   $0x60
ffffffff80008e02:	e9 36 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e07:	cc                   	int3   
ffffffff80008e08:	cc                   	int3   
ffffffff80008e09:	cc                   	int3   
ffffffff80008e0a:	cc                   	int3   
ffffffff80008e0b:	cc                   	int3   
ffffffff80008e0c:	cc                   	int3   
ffffffff80008e0d:	cc                   	int3   
ffffffff80008e0e:	cc                   	int3   
ffffffff80008e0f:	cc                   	int3   

ffffffff80008e10 <interrupt_handle_0x61>:
ffffffff80008e10:	6a 61                	push   $0x61
ffffffff80008e12:	e9 26 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e17:	cc                   	int3   
ffffffff80008e18:	cc                   	int3   
ffffffff80008e19:	cc                   	int3   
ffffffff80008e1a:	cc                   	int3   
ffffffff80008e1b:	cc                   	int3   
ffffffff80008e1c:	cc                   	int3   
ffffffff80008e1d:	cc                   	int3   
ffffffff80008e1e:	cc                   	int3   
ffffffff80008e1f:	cc                   	int3   

ffffffff80008e20 <interrupt_handle_0x62>:
ffffffff80008e20:	6a 62                	push   $0x62
ffffffff80008e22:	e9 16 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e27:	cc                   	int3   
ffffffff80008e28:	cc                   	int3   
ffffffff80008e29:	cc                   	int3   
ffffffff80008e2a:	cc                   	int3   
ffffffff80008e2b:	cc                   	int3   
ffffffff80008e2c:	cc                   	int3   
ffffffff80008e2d:	cc                   	int3   
ffffffff80008e2e:	cc                   	int3   
ffffffff80008e2f:	cc                   	int3   

ffffffff80008e30 <interrupt_handle_0x63>:
ffffffff80008e30:	6a 63                	push   $0x63
ffffffff80008e32:	e9 06 72 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e37:	cc                   	int3   
ffffffff80008e38:	cc                   	int3   
ffffffff80008e39:	cc                   	int3   
ffffffff80008e3a:	cc                   	int3   
ffffffff80008e3b:	cc                   	int3   
ffffffff80008e3c:	cc                   	int3   
ffffffff80008e3d:	cc                   	int3   
ffffffff80008e3e:	cc                   	int3   
ffffffff80008e3f:	cc                   	int3   

ffffffff80008e40 <interrupt_handle_0x64>:
ffffffff80008e40:	6a 64                	push   $0x64
ffffffff80008e42:	e9 f6 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e47:	cc                   	int3   
ffffffff80008e48:	cc                   	int3   
ffffffff80008e49:	cc                   	int3   
ffffffff80008e4a:	cc                   	int3   
ffffffff80008e4b:	cc                   	int3   
ffffffff80008e4c:	cc                   	int3   
ffffffff80008e4d:	cc                   	int3   
ffffffff80008e4e:	cc                   	int3   
ffffffff80008e4f:	cc                   	int3   

ffffffff80008e50 <interrupt_handle_0x65>:
ffffffff80008e50:	6a 65                	push   $0x65
ffffffff80008e52:	e9 e6 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e57:	cc                   	int3   
ffffffff80008e58:	cc                   	int3   
ffffffff80008e59:	cc                   	int3   
ffffffff80008e5a:	cc                   	int3   
ffffffff80008e5b:	cc                   	int3   
ffffffff80008e5c:	cc                   	int3   
ffffffff80008e5d:	cc                   	int3   
ffffffff80008e5e:	cc                   	int3   
ffffffff80008e5f:	cc                   	int3   

ffffffff80008e60 <interrupt_handle_0x66>:
ffffffff80008e60:	6a 66                	push   $0x66
ffffffff80008e62:	e9 d6 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e67:	cc                   	int3   
ffffffff80008e68:	cc                   	int3   
ffffffff80008e69:	cc                   	int3   
ffffffff80008e6a:	cc                   	int3   
ffffffff80008e6b:	cc                   	int3   
ffffffff80008e6c:	cc                   	int3   
ffffffff80008e6d:	cc                   	int3   
ffffffff80008e6e:	cc                   	int3   
ffffffff80008e6f:	cc                   	int3   

ffffffff80008e70 <interrupt_handle_0x67>:
ffffffff80008e70:	6a 67                	push   $0x67
ffffffff80008e72:	e9 c6 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e77:	cc                   	int3   
ffffffff80008e78:	cc                   	int3   
ffffffff80008e79:	cc                   	int3   
ffffffff80008e7a:	cc                   	int3   
ffffffff80008e7b:	cc                   	int3   
ffffffff80008e7c:	cc                   	int3   
ffffffff80008e7d:	cc                   	int3   
ffffffff80008e7e:	cc                   	int3   
ffffffff80008e7f:	cc                   	int3   

ffffffff80008e80 <interrupt_handle_0x68>:
ffffffff80008e80:	6a 68                	push   $0x68
ffffffff80008e82:	e9 b6 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e87:	cc                   	int3   
ffffffff80008e88:	cc                   	int3   
ffffffff80008e89:	cc                   	int3   
ffffffff80008e8a:	cc                   	int3   
ffffffff80008e8b:	cc                   	int3   
ffffffff80008e8c:	cc                   	int3   
ffffffff80008e8d:	cc                   	int3   
ffffffff80008e8e:	cc                   	int3   
ffffffff80008e8f:	cc                   	int3   

ffffffff80008e90 <interrupt_handle_0x69>:
ffffffff80008e90:	6a 69                	push   $0x69
ffffffff80008e92:	e9 a6 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008e97:	cc                   	int3   
ffffffff80008e98:	cc                   	int3   
ffffffff80008e99:	cc                   	int3   
ffffffff80008e9a:	cc                   	int3   
ffffffff80008e9b:	cc                   	int3   
ffffffff80008e9c:	cc                   	int3   
ffffffff80008e9d:	cc                   	int3   
ffffffff80008e9e:	cc                   	int3   
ffffffff80008e9f:	cc                   	int3   

ffffffff80008ea0 <interrupt_handle_0x6a>:
ffffffff80008ea0:	6a 6a                	push   $0x6a
ffffffff80008ea2:	e9 96 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ea7:	cc                   	int3   
ffffffff80008ea8:	cc                   	int3   
ffffffff80008ea9:	cc                   	int3   
ffffffff80008eaa:	cc                   	int3   
ffffffff80008eab:	cc                   	int3   
ffffffff80008eac:	cc                   	int3   
ffffffff80008ead:	cc                   	int3   
ffffffff80008eae:	cc                   	int3   
ffffffff80008eaf:	cc                   	int3   

ffffffff80008eb0 <interrupt_handle_0x6b>:
ffffffff80008eb0:	6a 6b                	push   $0x6b
ffffffff80008eb2:	e9 86 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008eb7:	cc                   	int3   
ffffffff80008eb8:	cc                   	int3   
ffffffff80008eb9:	cc                   	int3   
ffffffff80008eba:	cc                   	int3   
ffffffff80008ebb:	cc                   	int3   
ffffffff80008ebc:	cc                   	int3   
ffffffff80008ebd:	cc                   	int3   
ffffffff80008ebe:	cc                   	int3   
ffffffff80008ebf:	cc                   	int3   

ffffffff80008ec0 <interrupt_handle_0x6c>:
ffffffff80008ec0:	6a 6c                	push   $0x6c
ffffffff80008ec2:	e9 76 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ec7:	cc                   	int3   
ffffffff80008ec8:	cc                   	int3   
ffffffff80008ec9:	cc                   	int3   
ffffffff80008eca:	cc                   	int3   
ffffffff80008ecb:	cc                   	int3   
ffffffff80008ecc:	cc                   	int3   
ffffffff80008ecd:	cc                   	int3   
ffffffff80008ece:	cc                   	int3   
ffffffff80008ecf:	cc                   	int3   

ffffffff80008ed0 <interrupt_handle_0x6d>:
ffffffff80008ed0:	6a 6d                	push   $0x6d
ffffffff80008ed2:	e9 66 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ed7:	cc                   	int3   
ffffffff80008ed8:	cc                   	int3   
ffffffff80008ed9:	cc                   	int3   
ffffffff80008eda:	cc                   	int3   
ffffffff80008edb:	cc                   	int3   
ffffffff80008edc:	cc                   	int3   
ffffffff80008edd:	cc                   	int3   
ffffffff80008ede:	cc                   	int3   
ffffffff80008edf:	cc                   	int3   

ffffffff80008ee0 <interrupt_handle_0x6e>:
ffffffff80008ee0:	6a 6e                	push   $0x6e
ffffffff80008ee2:	e9 56 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ee7:	cc                   	int3   
ffffffff80008ee8:	cc                   	int3   
ffffffff80008ee9:	cc                   	int3   
ffffffff80008eea:	cc                   	int3   
ffffffff80008eeb:	cc                   	int3   
ffffffff80008eec:	cc                   	int3   
ffffffff80008eed:	cc                   	int3   
ffffffff80008eee:	cc                   	int3   
ffffffff80008eef:	cc                   	int3   

ffffffff80008ef0 <interrupt_handle_0x6f>:
ffffffff80008ef0:	6a 6f                	push   $0x6f
ffffffff80008ef2:	e9 46 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ef7:	cc                   	int3   
ffffffff80008ef8:	cc                   	int3   
ffffffff80008ef9:	cc                   	int3   
ffffffff80008efa:	cc                   	int3   
ffffffff80008efb:	cc                   	int3   
ffffffff80008efc:	cc                   	int3   
ffffffff80008efd:	cc                   	int3   
ffffffff80008efe:	cc                   	int3   
ffffffff80008eff:	cc                   	int3   

ffffffff80008f00 <interrupt_handle_0x70>:
ffffffff80008f00:	6a 70                	push   $0x70
ffffffff80008f02:	e9 36 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f07:	cc                   	int3   
ffffffff80008f08:	cc                   	int3   
ffffffff80008f09:	cc                   	int3   
ffffffff80008f0a:	cc                   	int3   
ffffffff80008f0b:	cc                   	int3   
ffffffff80008f0c:	cc                   	int3   
ffffffff80008f0d:	cc                   	int3   
ffffffff80008f0e:	cc                   	int3   
ffffffff80008f0f:	cc                   	int3   

ffffffff80008f10 <interrupt_handle_0x71>:
ffffffff80008f10:	6a 71                	push   $0x71
ffffffff80008f12:	e9 26 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f17:	cc                   	int3   
ffffffff80008f18:	cc                   	int3   
ffffffff80008f19:	cc                   	int3   
ffffffff80008f1a:	cc                   	int3   
ffffffff80008f1b:	cc                   	int3   
ffffffff80008f1c:	cc                   	int3   
ffffffff80008f1d:	cc                   	int3   
ffffffff80008f1e:	cc                   	int3   
ffffffff80008f1f:	cc                   	int3   

ffffffff80008f20 <interrupt_handle_0x72>:
ffffffff80008f20:	6a 72                	push   $0x72
ffffffff80008f22:	e9 16 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f27:	cc                   	int3   
ffffffff80008f28:	cc                   	int3   
ffffffff80008f29:	cc                   	int3   
ffffffff80008f2a:	cc                   	int3   
ffffffff80008f2b:	cc                   	int3   
ffffffff80008f2c:	cc                   	int3   
ffffffff80008f2d:	cc                   	int3   
ffffffff80008f2e:	cc                   	int3   
ffffffff80008f2f:	cc                   	int3   

ffffffff80008f30 <interrupt_handle_0x73>:
ffffffff80008f30:	6a 73                	push   $0x73
ffffffff80008f32:	e9 06 71 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f37:	cc                   	int3   
ffffffff80008f38:	cc                   	int3   
ffffffff80008f39:	cc                   	int3   
ffffffff80008f3a:	cc                   	int3   
ffffffff80008f3b:	cc                   	int3   
ffffffff80008f3c:	cc                   	int3   
ffffffff80008f3d:	cc                   	int3   
ffffffff80008f3e:	cc                   	int3   
ffffffff80008f3f:	cc                   	int3   

ffffffff80008f40 <interrupt_handle_0x74>:
ffffffff80008f40:	6a 74                	push   $0x74
ffffffff80008f42:	e9 f6 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f47:	cc                   	int3   
ffffffff80008f48:	cc                   	int3   
ffffffff80008f49:	cc                   	int3   
ffffffff80008f4a:	cc                   	int3   
ffffffff80008f4b:	cc                   	int3   
ffffffff80008f4c:	cc                   	int3   
ffffffff80008f4d:	cc                   	int3   
ffffffff80008f4e:	cc                   	int3   
ffffffff80008f4f:	cc                   	int3   

ffffffff80008f50 <interrupt_handle_0x75>:
ffffffff80008f50:	6a 75                	push   $0x75
ffffffff80008f52:	e9 e6 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f57:	cc                   	int3   
ffffffff80008f58:	cc                   	int3   
ffffffff80008f59:	cc                   	int3   
ffffffff80008f5a:	cc                   	int3   
ffffffff80008f5b:	cc                   	int3   
ffffffff80008f5c:	cc                   	int3   
ffffffff80008f5d:	cc                   	int3   
ffffffff80008f5e:	cc                   	int3   
ffffffff80008f5f:	cc                   	int3   

ffffffff80008f60 <interrupt_handle_0x76>:
ffffffff80008f60:	6a 76                	push   $0x76
ffffffff80008f62:	e9 d6 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f67:	cc                   	int3   
ffffffff80008f68:	cc                   	int3   
ffffffff80008f69:	cc                   	int3   
ffffffff80008f6a:	cc                   	int3   
ffffffff80008f6b:	cc                   	int3   
ffffffff80008f6c:	cc                   	int3   
ffffffff80008f6d:	cc                   	int3   
ffffffff80008f6e:	cc                   	int3   
ffffffff80008f6f:	cc                   	int3   

ffffffff80008f70 <interrupt_handle_0x77>:
ffffffff80008f70:	6a 77                	push   $0x77
ffffffff80008f72:	e9 c6 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f77:	cc                   	int3   
ffffffff80008f78:	cc                   	int3   
ffffffff80008f79:	cc                   	int3   
ffffffff80008f7a:	cc                   	int3   
ffffffff80008f7b:	cc                   	int3   
ffffffff80008f7c:	cc                   	int3   
ffffffff80008f7d:	cc                   	int3   
ffffffff80008f7e:	cc                   	int3   
ffffffff80008f7f:	cc                   	int3   

ffffffff80008f80 <interrupt_handle_0x78>:
ffffffff80008f80:	6a 78                	push   $0x78
ffffffff80008f82:	e9 b6 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f87:	cc                   	int3   
ffffffff80008f88:	cc                   	int3   
ffffffff80008f89:	cc                   	int3   
ffffffff80008f8a:	cc                   	int3   
ffffffff80008f8b:	cc                   	int3   
ffffffff80008f8c:	cc                   	int3   
ffffffff80008f8d:	cc                   	int3   
ffffffff80008f8e:	cc                   	int3   
ffffffff80008f8f:	cc                   	int3   

ffffffff80008f90 <interrupt_handle_0x79>:
ffffffff80008f90:	6a 79                	push   $0x79
ffffffff80008f92:	e9 a6 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008f97:	cc                   	int3   
ffffffff80008f98:	cc                   	int3   
ffffffff80008f99:	cc                   	int3   
ffffffff80008f9a:	cc                   	int3   
ffffffff80008f9b:	cc                   	int3   
ffffffff80008f9c:	cc                   	int3   
ffffffff80008f9d:	cc                   	int3   
ffffffff80008f9e:	cc                   	int3   
ffffffff80008f9f:	cc                   	int3   

ffffffff80008fa0 <interrupt_handle_0x7a>:
ffffffff80008fa0:	6a 7a                	push   $0x7a
ffffffff80008fa2:	e9 96 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008fa7:	cc                   	int3   
ffffffff80008fa8:	cc                   	int3   
ffffffff80008fa9:	cc                   	int3   
ffffffff80008faa:	cc                   	int3   
ffffffff80008fab:	cc                   	int3   
ffffffff80008fac:	cc                   	int3   
ffffffff80008fad:	cc                   	int3   
ffffffff80008fae:	cc                   	int3   
ffffffff80008faf:	cc                   	int3   

ffffffff80008fb0 <interrupt_handle_0x7b>:
ffffffff80008fb0:	6a 7b                	push   $0x7b
ffffffff80008fb2:	e9 86 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008fb7:	cc                   	int3   
ffffffff80008fb8:	cc                   	int3   
ffffffff80008fb9:	cc                   	int3   
ffffffff80008fba:	cc                   	int3   
ffffffff80008fbb:	cc                   	int3   
ffffffff80008fbc:	cc                   	int3   
ffffffff80008fbd:	cc                   	int3   
ffffffff80008fbe:	cc                   	int3   
ffffffff80008fbf:	cc                   	int3   

ffffffff80008fc0 <interrupt_handle_0x7c>:
ffffffff80008fc0:	6a 7c                	push   $0x7c
ffffffff80008fc2:	e9 76 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008fc7:	cc                   	int3   
ffffffff80008fc8:	cc                   	int3   
ffffffff80008fc9:	cc                   	int3   
ffffffff80008fca:	cc                   	int3   
ffffffff80008fcb:	cc                   	int3   
ffffffff80008fcc:	cc                   	int3   
ffffffff80008fcd:	cc                   	int3   
ffffffff80008fce:	cc                   	int3   
ffffffff80008fcf:	cc                   	int3   

ffffffff80008fd0 <interrupt_handle_0x7d>:
ffffffff80008fd0:	6a 7d                	push   $0x7d
ffffffff80008fd2:	e9 66 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008fd7:	cc                   	int3   
ffffffff80008fd8:	cc                   	int3   
ffffffff80008fd9:	cc                   	int3   
ffffffff80008fda:	cc                   	int3   
ffffffff80008fdb:	cc                   	int3   
ffffffff80008fdc:	cc                   	int3   
ffffffff80008fdd:	cc                   	int3   
ffffffff80008fde:	cc                   	int3   
ffffffff80008fdf:	cc                   	int3   

ffffffff80008fe0 <interrupt_handle_0x7e>:
ffffffff80008fe0:	6a 7e                	push   $0x7e
ffffffff80008fe2:	e9 56 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008fe7:	cc                   	int3   
ffffffff80008fe8:	cc                   	int3   
ffffffff80008fe9:	cc                   	int3   
ffffffff80008fea:	cc                   	int3   
ffffffff80008feb:	cc                   	int3   
ffffffff80008fec:	cc                   	int3   
ffffffff80008fed:	cc                   	int3   
ffffffff80008fee:	cc                   	int3   
ffffffff80008fef:	cc                   	int3   

ffffffff80008ff0 <interrupt_handle_0x7f>:
ffffffff80008ff0:	6a 7f                	push   $0x7f
ffffffff80008ff2:	e9 46 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff80008ff7:	cc                   	int3   
ffffffff80008ff8:	cc                   	int3   
ffffffff80008ff9:	cc                   	int3   
ffffffff80008ffa:	cc                   	int3   
ffffffff80008ffb:	cc                   	int3   
ffffffff80008ffc:	cc                   	int3   
ffffffff80008ffd:	cc                   	int3   
ffffffff80008ffe:	cc                   	int3   
ffffffff80008fff:	cc                   	int3   

ffffffff80009000 <interrupt_handle_0x80>:
ffffffff80009000:	68 80 00 00 00       	push   $0x80
ffffffff80009005:	e9 33 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000900a:	cc                   	int3   
ffffffff8000900b:	cc                   	int3   
ffffffff8000900c:	cc                   	int3   
ffffffff8000900d:	cc                   	int3   
ffffffff8000900e:	cc                   	int3   
ffffffff8000900f:	cc                   	int3   

ffffffff80009010 <interrupt_handle_0x81>:
ffffffff80009010:	68 81 00 00 00       	push   $0x81
ffffffff80009015:	e9 23 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000901a:	cc                   	int3   
ffffffff8000901b:	cc                   	int3   
ffffffff8000901c:	cc                   	int3   
ffffffff8000901d:	cc                   	int3   
ffffffff8000901e:	cc                   	int3   
ffffffff8000901f:	cc                   	int3   

ffffffff80009020 <interrupt_handle_0x82>:
ffffffff80009020:	68 82 00 00 00       	push   $0x82
ffffffff80009025:	e9 13 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000902a:	cc                   	int3   
ffffffff8000902b:	cc                   	int3   
ffffffff8000902c:	cc                   	int3   
ffffffff8000902d:	cc                   	int3   
ffffffff8000902e:	cc                   	int3   
ffffffff8000902f:	cc                   	int3   

ffffffff80009030 <interrupt_handle_0x83>:
ffffffff80009030:	68 83 00 00 00       	push   $0x83
ffffffff80009035:	e9 03 70 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000903a:	cc                   	int3   
ffffffff8000903b:	cc                   	int3   
ffffffff8000903c:	cc                   	int3   
ffffffff8000903d:	cc                   	int3   
ffffffff8000903e:	cc                   	int3   
ffffffff8000903f:	cc                   	int3   

ffffffff80009040 <interrupt_handle_0x84>:
ffffffff80009040:	68 84 00 00 00       	push   $0x84
ffffffff80009045:	e9 f3 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000904a:	cc                   	int3   
ffffffff8000904b:	cc                   	int3   
ffffffff8000904c:	cc                   	int3   
ffffffff8000904d:	cc                   	int3   
ffffffff8000904e:	cc                   	int3   
ffffffff8000904f:	cc                   	int3   

ffffffff80009050 <interrupt_handle_0x85>:
ffffffff80009050:	68 85 00 00 00       	push   $0x85
ffffffff80009055:	e9 e3 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000905a:	cc                   	int3   
ffffffff8000905b:	cc                   	int3   
ffffffff8000905c:	cc                   	int3   
ffffffff8000905d:	cc                   	int3   
ffffffff8000905e:	cc                   	int3   
ffffffff8000905f:	cc                   	int3   

ffffffff80009060 <interrupt_handle_0x86>:
ffffffff80009060:	68 86 00 00 00       	push   $0x86
ffffffff80009065:	e9 d3 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000906a:	cc                   	int3   
ffffffff8000906b:	cc                   	int3   
ffffffff8000906c:	cc                   	int3   
ffffffff8000906d:	cc                   	int3   
ffffffff8000906e:	cc                   	int3   
ffffffff8000906f:	cc                   	int3   

ffffffff80009070 <interrupt_handle_0x87>:
ffffffff80009070:	68 87 00 00 00       	push   $0x87
ffffffff80009075:	e9 c3 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000907a:	cc                   	int3   
ffffffff8000907b:	cc                   	int3   
ffffffff8000907c:	cc                   	int3   
ffffffff8000907d:	cc                   	int3   
ffffffff8000907e:	cc                   	int3   
ffffffff8000907f:	cc                   	int3   

ffffffff80009080 <interrupt_handle_0x88>:
ffffffff80009080:	68 88 00 00 00       	push   $0x88
ffffffff80009085:	e9 b3 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000908a:	cc                   	int3   
ffffffff8000908b:	cc                   	int3   
ffffffff8000908c:	cc                   	int3   
ffffffff8000908d:	cc                   	int3   
ffffffff8000908e:	cc                   	int3   
ffffffff8000908f:	cc                   	int3   

ffffffff80009090 <interrupt_handle_0x89>:
ffffffff80009090:	68 89 00 00 00       	push   $0x89
ffffffff80009095:	e9 a3 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000909a:	cc                   	int3   
ffffffff8000909b:	cc                   	int3   
ffffffff8000909c:	cc                   	int3   
ffffffff8000909d:	cc                   	int3   
ffffffff8000909e:	cc                   	int3   
ffffffff8000909f:	cc                   	int3   

ffffffff800090a0 <interrupt_handle_0x8a>:
ffffffff800090a0:	68 8a 00 00 00       	push   $0x8a
ffffffff800090a5:	e9 93 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800090aa:	cc                   	int3   
ffffffff800090ab:	cc                   	int3   
ffffffff800090ac:	cc                   	int3   
ffffffff800090ad:	cc                   	int3   
ffffffff800090ae:	cc                   	int3   
ffffffff800090af:	cc                   	int3   

ffffffff800090b0 <interrupt_handle_0x8b>:
ffffffff800090b0:	68 8b 00 00 00       	push   $0x8b
ffffffff800090b5:	e9 83 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800090ba:	cc                   	int3   
ffffffff800090bb:	cc                   	int3   
ffffffff800090bc:	cc                   	int3   
ffffffff800090bd:	cc                   	int3   
ffffffff800090be:	cc                   	int3   
ffffffff800090bf:	cc                   	int3   

ffffffff800090c0 <interrupt_handle_0x8c>:
ffffffff800090c0:	68 8c 00 00 00       	push   $0x8c
ffffffff800090c5:	e9 73 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800090ca:	cc                   	int3   
ffffffff800090cb:	cc                   	int3   
ffffffff800090cc:	cc                   	int3   
ffffffff800090cd:	cc                   	int3   
ffffffff800090ce:	cc                   	int3   
ffffffff800090cf:	cc                   	int3   

ffffffff800090d0 <interrupt_handle_0x8d>:
ffffffff800090d0:	68 8d 00 00 00       	push   $0x8d
ffffffff800090d5:	e9 63 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800090da:	cc                   	int3   
ffffffff800090db:	cc                   	int3   
ffffffff800090dc:	cc                   	int3   
ffffffff800090dd:	cc                   	int3   
ffffffff800090de:	cc                   	int3   
ffffffff800090df:	cc                   	int3   

ffffffff800090e0 <interrupt_handle_0x8e>:
ffffffff800090e0:	68 8e 00 00 00       	push   $0x8e
ffffffff800090e5:	e9 53 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800090ea:	cc                   	int3   
ffffffff800090eb:	cc                   	int3   
ffffffff800090ec:	cc                   	int3   
ffffffff800090ed:	cc                   	int3   
ffffffff800090ee:	cc                   	int3   
ffffffff800090ef:	cc                   	int3   

ffffffff800090f0 <interrupt_handle_0x8f>:
ffffffff800090f0:	68 8f 00 00 00       	push   $0x8f
ffffffff800090f5:	e9 43 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800090fa:	cc                   	int3   
ffffffff800090fb:	cc                   	int3   
ffffffff800090fc:	cc                   	int3   
ffffffff800090fd:	cc                   	int3   
ffffffff800090fe:	cc                   	int3   
ffffffff800090ff:	cc                   	int3   

ffffffff80009100 <interrupt_handle_0x90>:
ffffffff80009100:	68 90 00 00 00       	push   $0x90
ffffffff80009105:	e9 33 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000910a:	cc                   	int3   
ffffffff8000910b:	cc                   	int3   
ffffffff8000910c:	cc                   	int3   
ffffffff8000910d:	cc                   	int3   
ffffffff8000910e:	cc                   	int3   
ffffffff8000910f:	cc                   	int3   

ffffffff80009110 <interrupt_handle_0x91>:
ffffffff80009110:	68 91 00 00 00       	push   $0x91
ffffffff80009115:	e9 23 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000911a:	cc                   	int3   
ffffffff8000911b:	cc                   	int3   
ffffffff8000911c:	cc                   	int3   
ffffffff8000911d:	cc                   	int3   
ffffffff8000911e:	cc                   	int3   
ffffffff8000911f:	cc                   	int3   

ffffffff80009120 <interrupt_handle_0x92>:
ffffffff80009120:	68 92 00 00 00       	push   $0x92
ffffffff80009125:	e9 13 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000912a:	cc                   	int3   
ffffffff8000912b:	cc                   	int3   
ffffffff8000912c:	cc                   	int3   
ffffffff8000912d:	cc                   	int3   
ffffffff8000912e:	cc                   	int3   
ffffffff8000912f:	cc                   	int3   

ffffffff80009130 <interrupt_handle_0x93>:
ffffffff80009130:	68 93 00 00 00       	push   $0x93
ffffffff80009135:	e9 03 6f ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000913a:	cc                   	int3   
ffffffff8000913b:	cc                   	int3   
ffffffff8000913c:	cc                   	int3   
ffffffff8000913d:	cc                   	int3   
ffffffff8000913e:	cc                   	int3   
ffffffff8000913f:	cc                   	int3   

ffffffff80009140 <interrupt_handle_0x94>:
ffffffff80009140:	68 94 00 00 00       	push   $0x94
ffffffff80009145:	e9 f3 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000914a:	cc                   	int3   
ffffffff8000914b:	cc                   	int3   
ffffffff8000914c:	cc                   	int3   
ffffffff8000914d:	cc                   	int3   
ffffffff8000914e:	cc                   	int3   
ffffffff8000914f:	cc                   	int3   

ffffffff80009150 <interrupt_handle_0x95>:
ffffffff80009150:	68 95 00 00 00       	push   $0x95
ffffffff80009155:	e9 e3 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000915a:	cc                   	int3   
ffffffff8000915b:	cc                   	int3   
ffffffff8000915c:	cc                   	int3   
ffffffff8000915d:	cc                   	int3   
ffffffff8000915e:	cc                   	int3   
ffffffff8000915f:	cc                   	int3   

ffffffff80009160 <interrupt_handle_0x96>:
ffffffff80009160:	68 96 00 00 00       	push   $0x96
ffffffff80009165:	e9 d3 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000916a:	cc                   	int3   
ffffffff8000916b:	cc                   	int3   
ffffffff8000916c:	cc                   	int3   
ffffffff8000916d:	cc                   	int3   
ffffffff8000916e:	cc                   	int3   
ffffffff8000916f:	cc                   	int3   

ffffffff80009170 <interrupt_handle_0x97>:
ffffffff80009170:	68 97 00 00 00       	push   $0x97
ffffffff80009175:	e9 c3 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000917a:	cc                   	int3   
ffffffff8000917b:	cc                   	int3   
ffffffff8000917c:	cc                   	int3   
ffffffff8000917d:	cc                   	int3   
ffffffff8000917e:	cc                   	int3   
ffffffff8000917f:	cc                   	int3   

ffffffff80009180 <interrupt_handle_0x98>:
ffffffff80009180:	68 98 00 00 00       	push   $0x98
ffffffff80009185:	e9 b3 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000918a:	cc                   	int3   
ffffffff8000918b:	cc                   	int3   
ffffffff8000918c:	cc                   	int3   
ffffffff8000918d:	cc                   	int3   
ffffffff8000918e:	cc                   	int3   
ffffffff8000918f:	cc                   	int3   

ffffffff80009190 <interrupt_handle_0x99>:
ffffffff80009190:	68 99 00 00 00       	push   $0x99
ffffffff80009195:	e9 a3 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000919a:	cc                   	int3   
ffffffff8000919b:	cc                   	int3   
ffffffff8000919c:	cc                   	int3   
ffffffff8000919d:	cc                   	int3   
ffffffff8000919e:	cc                   	int3   
ffffffff8000919f:	cc                   	int3   

ffffffff800091a0 <interrupt_handle_0x9a>:
ffffffff800091a0:	68 9a 00 00 00       	push   $0x9a
ffffffff800091a5:	e9 93 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800091aa:	cc                   	int3   
ffffffff800091ab:	cc                   	int3   
ffffffff800091ac:	cc                   	int3   
ffffffff800091ad:	cc                   	int3   
ffffffff800091ae:	cc                   	int3   
ffffffff800091af:	cc                   	int3   

ffffffff800091b0 <interrupt_handle_0x9b>:
ffffffff800091b0:	68 9b 00 00 00       	push   $0x9b
ffffffff800091b5:	e9 83 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800091ba:	cc                   	int3   
ffffffff800091bb:	cc                   	int3   
ffffffff800091bc:	cc                   	int3   
ffffffff800091bd:	cc                   	int3   
ffffffff800091be:	cc                   	int3   
ffffffff800091bf:	cc                   	int3   

ffffffff800091c0 <interrupt_handle_0x9c>:
ffffffff800091c0:	68 9c 00 00 00       	push   $0x9c
ffffffff800091c5:	e9 73 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800091ca:	cc                   	int3   
ffffffff800091cb:	cc                   	int3   
ffffffff800091cc:	cc                   	int3   
ffffffff800091cd:	cc                   	int3   
ffffffff800091ce:	cc                   	int3   
ffffffff800091cf:	cc                   	int3   

ffffffff800091d0 <interrupt_handle_0x9d>:
ffffffff800091d0:	68 9d 00 00 00       	push   $0x9d
ffffffff800091d5:	e9 63 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800091da:	cc                   	int3   
ffffffff800091db:	cc                   	int3   
ffffffff800091dc:	cc                   	int3   
ffffffff800091dd:	cc                   	int3   
ffffffff800091de:	cc                   	int3   
ffffffff800091df:	cc                   	int3   

ffffffff800091e0 <interrupt_handle_0x9e>:
ffffffff800091e0:	68 9e 00 00 00       	push   $0x9e
ffffffff800091e5:	e9 53 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800091ea:	cc                   	int3   
ffffffff800091eb:	cc                   	int3   
ffffffff800091ec:	cc                   	int3   
ffffffff800091ed:	cc                   	int3   
ffffffff800091ee:	cc                   	int3   
ffffffff800091ef:	cc                   	int3   

ffffffff800091f0 <interrupt_handle_0x9f>:
ffffffff800091f0:	68 9f 00 00 00       	push   $0x9f
ffffffff800091f5:	e9 43 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800091fa:	cc                   	int3   
ffffffff800091fb:	cc                   	int3   
ffffffff800091fc:	cc                   	int3   
ffffffff800091fd:	cc                   	int3   
ffffffff800091fe:	cc                   	int3   
ffffffff800091ff:	cc                   	int3   

ffffffff80009200 <interrupt_handle_0xa0>:
ffffffff80009200:	68 a0 00 00 00       	push   $0xa0
ffffffff80009205:	e9 33 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000920a:	cc                   	int3   
ffffffff8000920b:	cc                   	int3   
ffffffff8000920c:	cc                   	int3   
ffffffff8000920d:	cc                   	int3   
ffffffff8000920e:	cc                   	int3   
ffffffff8000920f:	cc                   	int3   

ffffffff80009210 <interrupt_handle_0xa1>:
ffffffff80009210:	68 a1 00 00 00       	push   $0xa1
ffffffff80009215:	e9 23 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000921a:	cc                   	int3   
ffffffff8000921b:	cc                   	int3   
ffffffff8000921c:	cc                   	int3   
ffffffff8000921d:	cc                   	int3   
ffffffff8000921e:	cc                   	int3   
ffffffff8000921f:	cc                   	int3   

ffffffff80009220 <interrupt_handle_0xa2>:
ffffffff80009220:	68 a2 00 00 00       	push   $0xa2
ffffffff80009225:	e9 13 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000922a:	cc                   	int3   
ffffffff8000922b:	cc                   	int3   
ffffffff8000922c:	cc                   	int3   
ffffffff8000922d:	cc                   	int3   
ffffffff8000922e:	cc                   	int3   
ffffffff8000922f:	cc                   	int3   

ffffffff80009230 <interrupt_handle_0xa3>:
ffffffff80009230:	68 a3 00 00 00       	push   $0xa3
ffffffff80009235:	e9 03 6e ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000923a:	cc                   	int3   
ffffffff8000923b:	cc                   	int3   
ffffffff8000923c:	cc                   	int3   
ffffffff8000923d:	cc                   	int3   
ffffffff8000923e:	cc                   	int3   
ffffffff8000923f:	cc                   	int3   

ffffffff80009240 <interrupt_handle_0xa4>:
ffffffff80009240:	68 a4 00 00 00       	push   $0xa4
ffffffff80009245:	e9 f3 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000924a:	cc                   	int3   
ffffffff8000924b:	cc                   	int3   
ffffffff8000924c:	cc                   	int3   
ffffffff8000924d:	cc                   	int3   
ffffffff8000924e:	cc                   	int3   
ffffffff8000924f:	cc                   	int3   

ffffffff80009250 <interrupt_handle_0xa5>:
ffffffff80009250:	68 a5 00 00 00       	push   $0xa5
ffffffff80009255:	e9 e3 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000925a:	cc                   	int3   
ffffffff8000925b:	cc                   	int3   
ffffffff8000925c:	cc                   	int3   
ffffffff8000925d:	cc                   	int3   
ffffffff8000925e:	cc                   	int3   
ffffffff8000925f:	cc                   	int3   

ffffffff80009260 <interrupt_handle_0xa6>:
ffffffff80009260:	68 a6 00 00 00       	push   $0xa6
ffffffff80009265:	e9 d3 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000926a:	cc                   	int3   
ffffffff8000926b:	cc                   	int3   
ffffffff8000926c:	cc                   	int3   
ffffffff8000926d:	cc                   	int3   
ffffffff8000926e:	cc                   	int3   
ffffffff8000926f:	cc                   	int3   

ffffffff80009270 <interrupt_handle_0xa7>:
ffffffff80009270:	68 a7 00 00 00       	push   $0xa7
ffffffff80009275:	e9 c3 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000927a:	cc                   	int3   
ffffffff8000927b:	cc                   	int3   
ffffffff8000927c:	cc                   	int3   
ffffffff8000927d:	cc                   	int3   
ffffffff8000927e:	cc                   	int3   
ffffffff8000927f:	cc                   	int3   

ffffffff80009280 <interrupt_handle_0xa8>:
ffffffff80009280:	68 a8 00 00 00       	push   $0xa8
ffffffff80009285:	e9 b3 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000928a:	cc                   	int3   
ffffffff8000928b:	cc                   	int3   
ffffffff8000928c:	cc                   	int3   
ffffffff8000928d:	cc                   	int3   
ffffffff8000928e:	cc                   	int3   
ffffffff8000928f:	cc                   	int3   

ffffffff80009290 <interrupt_handle_0xa9>:
ffffffff80009290:	68 a9 00 00 00       	push   $0xa9
ffffffff80009295:	e9 a3 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000929a:	cc                   	int3   
ffffffff8000929b:	cc                   	int3   
ffffffff8000929c:	cc                   	int3   
ffffffff8000929d:	cc                   	int3   
ffffffff8000929e:	cc                   	int3   
ffffffff8000929f:	cc                   	int3   

ffffffff800092a0 <interrupt_handle_0xaa>:
ffffffff800092a0:	68 aa 00 00 00       	push   $0xaa
ffffffff800092a5:	e9 93 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800092aa:	cc                   	int3   
ffffffff800092ab:	cc                   	int3   
ffffffff800092ac:	cc                   	int3   
ffffffff800092ad:	cc                   	int3   
ffffffff800092ae:	cc                   	int3   
ffffffff800092af:	cc                   	int3   

ffffffff800092b0 <interrupt_handle_0xab>:
ffffffff800092b0:	68 ab 00 00 00       	push   $0xab
ffffffff800092b5:	e9 83 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800092ba:	cc                   	int3   
ffffffff800092bb:	cc                   	int3   
ffffffff800092bc:	cc                   	int3   
ffffffff800092bd:	cc                   	int3   
ffffffff800092be:	cc                   	int3   
ffffffff800092bf:	cc                   	int3   

ffffffff800092c0 <interrupt_handle_0xac>:
ffffffff800092c0:	68 ac 00 00 00       	push   $0xac
ffffffff800092c5:	e9 73 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800092ca:	cc                   	int3   
ffffffff800092cb:	cc                   	int3   
ffffffff800092cc:	cc                   	int3   
ffffffff800092cd:	cc                   	int3   
ffffffff800092ce:	cc                   	int3   
ffffffff800092cf:	cc                   	int3   

ffffffff800092d0 <interrupt_handle_0xad>:
ffffffff800092d0:	68 ad 00 00 00       	push   $0xad
ffffffff800092d5:	e9 63 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800092da:	cc                   	int3   
ffffffff800092db:	cc                   	int3   
ffffffff800092dc:	cc                   	int3   
ffffffff800092dd:	cc                   	int3   
ffffffff800092de:	cc                   	int3   
ffffffff800092df:	cc                   	int3   

ffffffff800092e0 <interrupt_handle_0xae>:
ffffffff800092e0:	68 ae 00 00 00       	push   $0xae
ffffffff800092e5:	e9 53 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800092ea:	cc                   	int3   
ffffffff800092eb:	cc                   	int3   
ffffffff800092ec:	cc                   	int3   
ffffffff800092ed:	cc                   	int3   
ffffffff800092ee:	cc                   	int3   
ffffffff800092ef:	cc                   	int3   

ffffffff800092f0 <interrupt_handle_0xaf>:
ffffffff800092f0:	68 af 00 00 00       	push   $0xaf
ffffffff800092f5:	e9 43 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800092fa:	cc                   	int3   
ffffffff800092fb:	cc                   	int3   
ffffffff800092fc:	cc                   	int3   
ffffffff800092fd:	cc                   	int3   
ffffffff800092fe:	cc                   	int3   
ffffffff800092ff:	cc                   	int3   

ffffffff80009300 <interrupt_handle_0xb0>:
ffffffff80009300:	68 b0 00 00 00       	push   $0xb0
ffffffff80009305:	e9 33 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000930a:	cc                   	int3   
ffffffff8000930b:	cc                   	int3   
ffffffff8000930c:	cc                   	int3   
ffffffff8000930d:	cc                   	int3   
ffffffff8000930e:	cc                   	int3   
ffffffff8000930f:	cc                   	int3   

ffffffff80009310 <interrupt_handle_0xb1>:
ffffffff80009310:	68 b1 00 00 00       	push   $0xb1
ffffffff80009315:	e9 23 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000931a:	cc                   	int3   
ffffffff8000931b:	cc                   	int3   
ffffffff8000931c:	cc                   	int3   
ffffffff8000931d:	cc                   	int3   
ffffffff8000931e:	cc                   	int3   
ffffffff8000931f:	cc                   	int3   

ffffffff80009320 <interrupt_handle_0xb2>:
ffffffff80009320:	68 b2 00 00 00       	push   $0xb2
ffffffff80009325:	e9 13 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000932a:	cc                   	int3   
ffffffff8000932b:	cc                   	int3   
ffffffff8000932c:	cc                   	int3   
ffffffff8000932d:	cc                   	int3   
ffffffff8000932e:	cc                   	int3   
ffffffff8000932f:	cc                   	int3   

ffffffff80009330 <interrupt_handle_0xb3>:
ffffffff80009330:	68 b3 00 00 00       	push   $0xb3
ffffffff80009335:	e9 03 6d ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000933a:	cc                   	int3   
ffffffff8000933b:	cc                   	int3   
ffffffff8000933c:	cc                   	int3   
ffffffff8000933d:	cc                   	int3   
ffffffff8000933e:	cc                   	int3   
ffffffff8000933f:	cc                   	int3   

ffffffff80009340 <interrupt_handle_0xb4>:
ffffffff80009340:	68 b4 00 00 00       	push   $0xb4
ffffffff80009345:	e9 f3 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000934a:	cc                   	int3   
ffffffff8000934b:	cc                   	int3   
ffffffff8000934c:	cc                   	int3   
ffffffff8000934d:	cc                   	int3   
ffffffff8000934e:	cc                   	int3   
ffffffff8000934f:	cc                   	int3   

ffffffff80009350 <interrupt_handle_0xb5>:
ffffffff80009350:	68 b5 00 00 00       	push   $0xb5
ffffffff80009355:	e9 e3 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000935a:	cc                   	int3   
ffffffff8000935b:	cc                   	int3   
ffffffff8000935c:	cc                   	int3   
ffffffff8000935d:	cc                   	int3   
ffffffff8000935e:	cc                   	int3   
ffffffff8000935f:	cc                   	int3   

ffffffff80009360 <interrupt_handle_0xb6>:
ffffffff80009360:	68 b6 00 00 00       	push   $0xb6
ffffffff80009365:	e9 d3 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000936a:	cc                   	int3   
ffffffff8000936b:	cc                   	int3   
ffffffff8000936c:	cc                   	int3   
ffffffff8000936d:	cc                   	int3   
ffffffff8000936e:	cc                   	int3   
ffffffff8000936f:	cc                   	int3   

ffffffff80009370 <interrupt_handle_0xb7>:
ffffffff80009370:	68 b7 00 00 00       	push   $0xb7
ffffffff80009375:	e9 c3 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000937a:	cc                   	int3   
ffffffff8000937b:	cc                   	int3   
ffffffff8000937c:	cc                   	int3   
ffffffff8000937d:	cc                   	int3   
ffffffff8000937e:	cc                   	int3   
ffffffff8000937f:	cc                   	int3   

ffffffff80009380 <interrupt_handle_0xb8>:
ffffffff80009380:	68 b8 00 00 00       	push   $0xb8
ffffffff80009385:	e9 b3 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000938a:	cc                   	int3   
ffffffff8000938b:	cc                   	int3   
ffffffff8000938c:	cc                   	int3   
ffffffff8000938d:	cc                   	int3   
ffffffff8000938e:	cc                   	int3   
ffffffff8000938f:	cc                   	int3   

ffffffff80009390 <interrupt_handle_0xb9>:
ffffffff80009390:	68 b9 00 00 00       	push   $0xb9
ffffffff80009395:	e9 a3 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000939a:	cc                   	int3   
ffffffff8000939b:	cc                   	int3   
ffffffff8000939c:	cc                   	int3   
ffffffff8000939d:	cc                   	int3   
ffffffff8000939e:	cc                   	int3   
ffffffff8000939f:	cc                   	int3   

ffffffff800093a0 <interrupt_handle_0xba>:
ffffffff800093a0:	68 ba 00 00 00       	push   $0xba
ffffffff800093a5:	e9 93 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800093aa:	cc                   	int3   
ffffffff800093ab:	cc                   	int3   
ffffffff800093ac:	cc                   	int3   
ffffffff800093ad:	cc                   	int3   
ffffffff800093ae:	cc                   	int3   
ffffffff800093af:	cc                   	int3   

ffffffff800093b0 <interrupt_handle_0xbb>:
ffffffff800093b0:	68 bb 00 00 00       	push   $0xbb
ffffffff800093b5:	e9 83 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800093ba:	cc                   	int3   
ffffffff800093bb:	cc                   	int3   
ffffffff800093bc:	cc                   	int3   
ffffffff800093bd:	cc                   	int3   
ffffffff800093be:	cc                   	int3   
ffffffff800093bf:	cc                   	int3   

ffffffff800093c0 <interrupt_handle_0xbc>:
ffffffff800093c0:	68 bc 00 00 00       	push   $0xbc
ffffffff800093c5:	e9 73 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800093ca:	cc                   	int3   
ffffffff800093cb:	cc                   	int3   
ffffffff800093cc:	cc                   	int3   
ffffffff800093cd:	cc                   	int3   
ffffffff800093ce:	cc                   	int3   
ffffffff800093cf:	cc                   	int3   

ffffffff800093d0 <interrupt_handle_0xbd>:
ffffffff800093d0:	68 bd 00 00 00       	push   $0xbd
ffffffff800093d5:	e9 63 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800093da:	cc                   	int3   
ffffffff800093db:	cc                   	int3   
ffffffff800093dc:	cc                   	int3   
ffffffff800093dd:	cc                   	int3   
ffffffff800093de:	cc                   	int3   
ffffffff800093df:	cc                   	int3   

ffffffff800093e0 <interrupt_handle_0xbe>:
ffffffff800093e0:	68 be 00 00 00       	push   $0xbe
ffffffff800093e5:	e9 53 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800093ea:	cc                   	int3   
ffffffff800093eb:	cc                   	int3   
ffffffff800093ec:	cc                   	int3   
ffffffff800093ed:	cc                   	int3   
ffffffff800093ee:	cc                   	int3   
ffffffff800093ef:	cc                   	int3   

ffffffff800093f0 <interrupt_handle_0xbf>:
ffffffff800093f0:	68 bf 00 00 00       	push   $0xbf
ffffffff800093f5:	e9 43 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800093fa:	cc                   	int3   
ffffffff800093fb:	cc                   	int3   
ffffffff800093fc:	cc                   	int3   
ffffffff800093fd:	cc                   	int3   
ffffffff800093fe:	cc                   	int3   
ffffffff800093ff:	cc                   	int3   

ffffffff80009400 <interrupt_handle_0xc0>:
ffffffff80009400:	68 c0 00 00 00       	push   $0xc0
ffffffff80009405:	e9 33 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000940a:	cc                   	int3   
ffffffff8000940b:	cc                   	int3   
ffffffff8000940c:	cc                   	int3   
ffffffff8000940d:	cc                   	int3   
ffffffff8000940e:	cc                   	int3   
ffffffff8000940f:	cc                   	int3   

ffffffff80009410 <interrupt_handle_0xc1>:
ffffffff80009410:	68 c1 00 00 00       	push   $0xc1
ffffffff80009415:	e9 23 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000941a:	cc                   	int3   
ffffffff8000941b:	cc                   	int3   
ffffffff8000941c:	cc                   	int3   
ffffffff8000941d:	cc                   	int3   
ffffffff8000941e:	cc                   	int3   
ffffffff8000941f:	cc                   	int3   

ffffffff80009420 <interrupt_handle_0xc2>:
ffffffff80009420:	68 c2 00 00 00       	push   $0xc2
ffffffff80009425:	e9 13 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000942a:	cc                   	int3   
ffffffff8000942b:	cc                   	int3   
ffffffff8000942c:	cc                   	int3   
ffffffff8000942d:	cc                   	int3   
ffffffff8000942e:	cc                   	int3   
ffffffff8000942f:	cc                   	int3   

ffffffff80009430 <interrupt_handle_0xc3>:
ffffffff80009430:	68 c3 00 00 00       	push   $0xc3
ffffffff80009435:	e9 03 6c ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000943a:	cc                   	int3   
ffffffff8000943b:	cc                   	int3   
ffffffff8000943c:	cc                   	int3   
ffffffff8000943d:	cc                   	int3   
ffffffff8000943e:	cc                   	int3   
ffffffff8000943f:	cc                   	int3   

ffffffff80009440 <interrupt_handle_0xc4>:
ffffffff80009440:	68 c4 00 00 00       	push   $0xc4
ffffffff80009445:	e9 f3 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000944a:	cc                   	int3   
ffffffff8000944b:	cc                   	int3   
ffffffff8000944c:	cc                   	int3   
ffffffff8000944d:	cc                   	int3   
ffffffff8000944e:	cc                   	int3   
ffffffff8000944f:	cc                   	int3   

ffffffff80009450 <interrupt_handle_0xc5>:
ffffffff80009450:	68 c5 00 00 00       	push   $0xc5
ffffffff80009455:	e9 e3 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000945a:	cc                   	int3   
ffffffff8000945b:	cc                   	int3   
ffffffff8000945c:	cc                   	int3   
ffffffff8000945d:	cc                   	int3   
ffffffff8000945e:	cc                   	int3   
ffffffff8000945f:	cc                   	int3   

ffffffff80009460 <interrupt_handle_0xc6>:
ffffffff80009460:	68 c6 00 00 00       	push   $0xc6
ffffffff80009465:	e9 d3 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000946a:	cc                   	int3   
ffffffff8000946b:	cc                   	int3   
ffffffff8000946c:	cc                   	int3   
ffffffff8000946d:	cc                   	int3   
ffffffff8000946e:	cc                   	int3   
ffffffff8000946f:	cc                   	int3   

ffffffff80009470 <interrupt_handle_0xc7>:
ffffffff80009470:	68 c7 00 00 00       	push   $0xc7
ffffffff80009475:	e9 c3 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000947a:	cc                   	int3   
ffffffff8000947b:	cc                   	int3   
ffffffff8000947c:	cc                   	int3   
ffffffff8000947d:	cc                   	int3   
ffffffff8000947e:	cc                   	int3   
ffffffff8000947f:	cc                   	int3   

ffffffff80009480 <interrupt_handle_0xc8>:
ffffffff80009480:	68 c8 00 00 00       	push   $0xc8
ffffffff80009485:	e9 b3 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000948a:	cc                   	int3   
ffffffff8000948b:	cc                   	int3   
ffffffff8000948c:	cc                   	int3   
ffffffff8000948d:	cc                   	int3   
ffffffff8000948e:	cc                   	int3   
ffffffff8000948f:	cc                   	int3   

ffffffff80009490 <interrupt_handle_0xc9>:
ffffffff80009490:	68 c9 00 00 00       	push   $0xc9
ffffffff80009495:	e9 a3 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000949a:	cc                   	int3   
ffffffff8000949b:	cc                   	int3   
ffffffff8000949c:	cc                   	int3   
ffffffff8000949d:	cc                   	int3   
ffffffff8000949e:	cc                   	int3   
ffffffff8000949f:	cc                   	int3   

ffffffff800094a0 <interrupt_handle_0xca>:
ffffffff800094a0:	68 ca 00 00 00       	push   $0xca
ffffffff800094a5:	e9 93 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800094aa:	cc                   	int3   
ffffffff800094ab:	cc                   	int3   
ffffffff800094ac:	cc                   	int3   
ffffffff800094ad:	cc                   	int3   
ffffffff800094ae:	cc                   	int3   
ffffffff800094af:	cc                   	int3   

ffffffff800094b0 <interrupt_handle_0xcb>:
ffffffff800094b0:	68 cb 00 00 00       	push   $0xcb
ffffffff800094b5:	e9 83 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800094ba:	cc                   	int3   
ffffffff800094bb:	cc                   	int3   
ffffffff800094bc:	cc                   	int3   
ffffffff800094bd:	cc                   	int3   
ffffffff800094be:	cc                   	int3   
ffffffff800094bf:	cc                   	int3   

ffffffff800094c0 <interrupt_handle_0xcc>:
ffffffff800094c0:	68 cc 00 00 00       	push   $0xcc
ffffffff800094c5:	e9 73 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800094ca:	cc                   	int3   
ffffffff800094cb:	cc                   	int3   
ffffffff800094cc:	cc                   	int3   
ffffffff800094cd:	cc                   	int3   
ffffffff800094ce:	cc                   	int3   
ffffffff800094cf:	cc                   	int3   

ffffffff800094d0 <interrupt_handle_0xcd>:
ffffffff800094d0:	68 cd 00 00 00       	push   $0xcd
ffffffff800094d5:	e9 63 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800094da:	cc                   	int3   
ffffffff800094db:	cc                   	int3   
ffffffff800094dc:	cc                   	int3   
ffffffff800094dd:	cc                   	int3   
ffffffff800094de:	cc                   	int3   
ffffffff800094df:	cc                   	int3   

ffffffff800094e0 <interrupt_handle_0xce>:
ffffffff800094e0:	68 ce 00 00 00       	push   $0xce
ffffffff800094e5:	e9 53 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800094ea:	cc                   	int3   
ffffffff800094eb:	cc                   	int3   
ffffffff800094ec:	cc                   	int3   
ffffffff800094ed:	cc                   	int3   
ffffffff800094ee:	cc                   	int3   
ffffffff800094ef:	cc                   	int3   

ffffffff800094f0 <interrupt_handle_0xcf>:
ffffffff800094f0:	68 cf 00 00 00       	push   $0xcf
ffffffff800094f5:	e9 43 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800094fa:	cc                   	int3   
ffffffff800094fb:	cc                   	int3   
ffffffff800094fc:	cc                   	int3   
ffffffff800094fd:	cc                   	int3   
ffffffff800094fe:	cc                   	int3   
ffffffff800094ff:	cc                   	int3   

ffffffff80009500 <interrupt_handle_0xd0>:
ffffffff80009500:	68 d0 00 00 00       	push   $0xd0
ffffffff80009505:	e9 33 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000950a:	cc                   	int3   
ffffffff8000950b:	cc                   	int3   
ffffffff8000950c:	cc                   	int3   
ffffffff8000950d:	cc                   	int3   
ffffffff8000950e:	cc                   	int3   
ffffffff8000950f:	cc                   	int3   

ffffffff80009510 <interrupt_handle_0xd1>:
ffffffff80009510:	68 d1 00 00 00       	push   $0xd1
ffffffff80009515:	e9 23 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000951a:	cc                   	int3   
ffffffff8000951b:	cc                   	int3   
ffffffff8000951c:	cc                   	int3   
ffffffff8000951d:	cc                   	int3   
ffffffff8000951e:	cc                   	int3   
ffffffff8000951f:	cc                   	int3   

ffffffff80009520 <interrupt_handle_0xd2>:
ffffffff80009520:	68 d2 00 00 00       	push   $0xd2
ffffffff80009525:	e9 13 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000952a:	cc                   	int3   
ffffffff8000952b:	cc                   	int3   
ffffffff8000952c:	cc                   	int3   
ffffffff8000952d:	cc                   	int3   
ffffffff8000952e:	cc                   	int3   
ffffffff8000952f:	cc                   	int3   

ffffffff80009530 <interrupt_handle_0xd3>:
ffffffff80009530:	68 d3 00 00 00       	push   $0xd3
ffffffff80009535:	e9 03 6b ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000953a:	cc                   	int3   
ffffffff8000953b:	cc                   	int3   
ffffffff8000953c:	cc                   	int3   
ffffffff8000953d:	cc                   	int3   
ffffffff8000953e:	cc                   	int3   
ffffffff8000953f:	cc                   	int3   

ffffffff80009540 <interrupt_handle_0xd4>:
ffffffff80009540:	68 d4 00 00 00       	push   $0xd4
ffffffff80009545:	e9 f3 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000954a:	cc                   	int3   
ffffffff8000954b:	cc                   	int3   
ffffffff8000954c:	cc                   	int3   
ffffffff8000954d:	cc                   	int3   
ffffffff8000954e:	cc                   	int3   
ffffffff8000954f:	cc                   	int3   

ffffffff80009550 <interrupt_handle_0xd5>:
ffffffff80009550:	68 d5 00 00 00       	push   $0xd5
ffffffff80009555:	e9 e3 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000955a:	cc                   	int3   
ffffffff8000955b:	cc                   	int3   
ffffffff8000955c:	cc                   	int3   
ffffffff8000955d:	cc                   	int3   
ffffffff8000955e:	cc                   	int3   
ffffffff8000955f:	cc                   	int3   

ffffffff80009560 <interrupt_handle_0xd6>:
ffffffff80009560:	68 d6 00 00 00       	push   $0xd6
ffffffff80009565:	e9 d3 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000956a:	cc                   	int3   
ffffffff8000956b:	cc                   	int3   
ffffffff8000956c:	cc                   	int3   
ffffffff8000956d:	cc                   	int3   
ffffffff8000956e:	cc                   	int3   
ffffffff8000956f:	cc                   	int3   

ffffffff80009570 <interrupt_handle_0xd7>:
ffffffff80009570:	68 d7 00 00 00       	push   $0xd7
ffffffff80009575:	e9 c3 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000957a:	cc                   	int3   
ffffffff8000957b:	cc                   	int3   
ffffffff8000957c:	cc                   	int3   
ffffffff8000957d:	cc                   	int3   
ffffffff8000957e:	cc                   	int3   
ffffffff8000957f:	cc                   	int3   

ffffffff80009580 <interrupt_handle_0xd8>:
ffffffff80009580:	68 d8 00 00 00       	push   $0xd8
ffffffff80009585:	e9 b3 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000958a:	cc                   	int3   
ffffffff8000958b:	cc                   	int3   
ffffffff8000958c:	cc                   	int3   
ffffffff8000958d:	cc                   	int3   
ffffffff8000958e:	cc                   	int3   
ffffffff8000958f:	cc                   	int3   

ffffffff80009590 <interrupt_handle_0xd9>:
ffffffff80009590:	68 d9 00 00 00       	push   $0xd9
ffffffff80009595:	e9 a3 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000959a:	cc                   	int3   
ffffffff8000959b:	cc                   	int3   
ffffffff8000959c:	cc                   	int3   
ffffffff8000959d:	cc                   	int3   
ffffffff8000959e:	cc                   	int3   
ffffffff8000959f:	cc                   	int3   

ffffffff800095a0 <interrupt_handle_0xda>:
ffffffff800095a0:	68 da 00 00 00       	push   $0xda
ffffffff800095a5:	e9 93 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800095aa:	cc                   	int3   
ffffffff800095ab:	cc                   	int3   
ffffffff800095ac:	cc                   	int3   
ffffffff800095ad:	cc                   	int3   
ffffffff800095ae:	cc                   	int3   
ffffffff800095af:	cc                   	int3   

ffffffff800095b0 <interrupt_handle_0xdb>:
ffffffff800095b0:	68 db 00 00 00       	push   $0xdb
ffffffff800095b5:	e9 83 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800095ba:	cc                   	int3   
ffffffff800095bb:	cc                   	int3   
ffffffff800095bc:	cc                   	int3   
ffffffff800095bd:	cc                   	int3   
ffffffff800095be:	cc                   	int3   
ffffffff800095bf:	cc                   	int3   

ffffffff800095c0 <interrupt_handle_0xdc>:
ffffffff800095c0:	68 dc 00 00 00       	push   $0xdc
ffffffff800095c5:	e9 73 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800095ca:	cc                   	int3   
ffffffff800095cb:	cc                   	int3   
ffffffff800095cc:	cc                   	int3   
ffffffff800095cd:	cc                   	int3   
ffffffff800095ce:	cc                   	int3   
ffffffff800095cf:	cc                   	int3   

ffffffff800095d0 <interrupt_handle_0xdd>:
ffffffff800095d0:	68 dd 00 00 00       	push   $0xdd
ffffffff800095d5:	e9 63 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800095da:	cc                   	int3   
ffffffff800095db:	cc                   	int3   
ffffffff800095dc:	cc                   	int3   
ffffffff800095dd:	cc                   	int3   
ffffffff800095de:	cc                   	int3   
ffffffff800095df:	cc                   	int3   

ffffffff800095e0 <interrupt_handle_0xde>:
ffffffff800095e0:	68 de 00 00 00       	push   $0xde
ffffffff800095e5:	e9 53 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800095ea:	cc                   	int3   
ffffffff800095eb:	cc                   	int3   
ffffffff800095ec:	cc                   	int3   
ffffffff800095ed:	cc                   	int3   
ffffffff800095ee:	cc                   	int3   
ffffffff800095ef:	cc                   	int3   

ffffffff800095f0 <interrupt_handle_0xdf>:
ffffffff800095f0:	68 df 00 00 00       	push   $0xdf
ffffffff800095f5:	e9 43 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800095fa:	cc                   	int3   
ffffffff800095fb:	cc                   	int3   
ffffffff800095fc:	cc                   	int3   
ffffffff800095fd:	cc                   	int3   
ffffffff800095fe:	cc                   	int3   
ffffffff800095ff:	cc                   	int3   

ffffffff80009600 <interrupt_handle_0xe0>:
ffffffff80009600:	68 e0 00 00 00       	push   $0xe0
ffffffff80009605:	e9 33 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000960a:	cc                   	int3   
ffffffff8000960b:	cc                   	int3   
ffffffff8000960c:	cc                   	int3   
ffffffff8000960d:	cc                   	int3   
ffffffff8000960e:	cc                   	int3   
ffffffff8000960f:	cc                   	int3   

ffffffff80009610 <interrupt_handle_0xe1>:
ffffffff80009610:	68 e1 00 00 00       	push   $0xe1
ffffffff80009615:	e9 23 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000961a:	cc                   	int3   
ffffffff8000961b:	cc                   	int3   
ffffffff8000961c:	cc                   	int3   
ffffffff8000961d:	cc                   	int3   
ffffffff8000961e:	cc                   	int3   
ffffffff8000961f:	cc                   	int3   

ffffffff80009620 <interrupt_handle_0xe2>:
ffffffff80009620:	68 e2 00 00 00       	push   $0xe2
ffffffff80009625:	e9 13 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000962a:	cc                   	int3   
ffffffff8000962b:	cc                   	int3   
ffffffff8000962c:	cc                   	int3   
ffffffff8000962d:	cc                   	int3   
ffffffff8000962e:	cc                   	int3   
ffffffff8000962f:	cc                   	int3   

ffffffff80009630 <interrupt_handle_0xe3>:
ffffffff80009630:	68 e3 00 00 00       	push   $0xe3
ffffffff80009635:	e9 03 6a ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000963a:	cc                   	int3   
ffffffff8000963b:	cc                   	int3   
ffffffff8000963c:	cc                   	int3   
ffffffff8000963d:	cc                   	int3   
ffffffff8000963e:	cc                   	int3   
ffffffff8000963f:	cc                   	int3   

ffffffff80009640 <interrupt_handle_0xe4>:
ffffffff80009640:	68 e4 00 00 00       	push   $0xe4
ffffffff80009645:	e9 f3 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000964a:	cc                   	int3   
ffffffff8000964b:	cc                   	int3   
ffffffff8000964c:	cc                   	int3   
ffffffff8000964d:	cc                   	int3   
ffffffff8000964e:	cc                   	int3   
ffffffff8000964f:	cc                   	int3   

ffffffff80009650 <interrupt_handle_0xe5>:
ffffffff80009650:	68 e5 00 00 00       	push   $0xe5
ffffffff80009655:	e9 e3 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000965a:	cc                   	int3   
ffffffff8000965b:	cc                   	int3   
ffffffff8000965c:	cc                   	int3   
ffffffff8000965d:	cc                   	int3   
ffffffff8000965e:	cc                   	int3   
ffffffff8000965f:	cc                   	int3   

ffffffff80009660 <interrupt_handle_0xe6>:
ffffffff80009660:	68 e6 00 00 00       	push   $0xe6
ffffffff80009665:	e9 d3 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000966a:	cc                   	int3   
ffffffff8000966b:	cc                   	int3   
ffffffff8000966c:	cc                   	int3   
ffffffff8000966d:	cc                   	int3   
ffffffff8000966e:	cc                   	int3   
ffffffff8000966f:	cc                   	int3   

ffffffff80009670 <interrupt_handle_0xe7>:
ffffffff80009670:	68 e7 00 00 00       	push   $0xe7
ffffffff80009675:	e9 c3 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000967a:	cc                   	int3   
ffffffff8000967b:	cc                   	int3   
ffffffff8000967c:	cc                   	int3   
ffffffff8000967d:	cc                   	int3   
ffffffff8000967e:	cc                   	int3   
ffffffff8000967f:	cc                   	int3   

ffffffff80009680 <interrupt_handle_0xe8>:
ffffffff80009680:	68 e8 00 00 00       	push   $0xe8
ffffffff80009685:	e9 b3 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000968a:	cc                   	int3   
ffffffff8000968b:	cc                   	int3   
ffffffff8000968c:	cc                   	int3   
ffffffff8000968d:	cc                   	int3   
ffffffff8000968e:	cc                   	int3   
ffffffff8000968f:	cc                   	int3   

ffffffff80009690 <interrupt_handle_0xe9>:
ffffffff80009690:	68 e9 00 00 00       	push   $0xe9
ffffffff80009695:	e9 a3 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000969a:	cc                   	int3   
ffffffff8000969b:	cc                   	int3   
ffffffff8000969c:	cc                   	int3   
ffffffff8000969d:	cc                   	int3   
ffffffff8000969e:	cc                   	int3   
ffffffff8000969f:	cc                   	int3   

ffffffff800096a0 <interrupt_handle_0xea>:
ffffffff800096a0:	68 ea 00 00 00       	push   $0xea
ffffffff800096a5:	e9 93 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800096aa:	cc                   	int3   
ffffffff800096ab:	cc                   	int3   
ffffffff800096ac:	cc                   	int3   
ffffffff800096ad:	cc                   	int3   
ffffffff800096ae:	cc                   	int3   
ffffffff800096af:	cc                   	int3   

ffffffff800096b0 <interrupt_handle_0xeb>:
ffffffff800096b0:	68 eb 00 00 00       	push   $0xeb
ffffffff800096b5:	e9 83 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800096ba:	cc                   	int3   
ffffffff800096bb:	cc                   	int3   
ffffffff800096bc:	cc                   	int3   
ffffffff800096bd:	cc                   	int3   
ffffffff800096be:	cc                   	int3   
ffffffff800096bf:	cc                   	int3   

ffffffff800096c0 <interrupt_handle_0xec>:
ffffffff800096c0:	68 ec 00 00 00       	push   $0xec
ffffffff800096c5:	e9 73 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800096ca:	cc                   	int3   
ffffffff800096cb:	cc                   	int3   
ffffffff800096cc:	cc                   	int3   
ffffffff800096cd:	cc                   	int3   
ffffffff800096ce:	cc                   	int3   
ffffffff800096cf:	cc                   	int3   

ffffffff800096d0 <interrupt_handle_0xed>:
ffffffff800096d0:	68 ed 00 00 00       	push   $0xed
ffffffff800096d5:	e9 63 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800096da:	cc                   	int3   
ffffffff800096db:	cc                   	int3   
ffffffff800096dc:	cc                   	int3   
ffffffff800096dd:	cc                   	int3   
ffffffff800096de:	cc                   	int3   
ffffffff800096df:	cc                   	int3   

ffffffff800096e0 <interrupt_handle_0xee>:
ffffffff800096e0:	68 ee 00 00 00       	push   $0xee
ffffffff800096e5:	e9 53 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800096ea:	cc                   	int3   
ffffffff800096eb:	cc                   	int3   
ffffffff800096ec:	cc                   	int3   
ffffffff800096ed:	cc                   	int3   
ffffffff800096ee:	cc                   	int3   
ffffffff800096ef:	cc                   	int3   

ffffffff800096f0 <interrupt_handle_0xef>:
ffffffff800096f0:	68 ef 00 00 00       	push   $0xef
ffffffff800096f5:	e9 43 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800096fa:	cc                   	int3   
ffffffff800096fb:	cc                   	int3   
ffffffff800096fc:	cc                   	int3   
ffffffff800096fd:	cc                   	int3   
ffffffff800096fe:	cc                   	int3   
ffffffff800096ff:	cc                   	int3   

ffffffff80009700 <interrupt_handle_0xf0>:
ffffffff80009700:	68 f0 00 00 00       	push   $0xf0
ffffffff80009705:	e9 33 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000970a:	cc                   	int3   
ffffffff8000970b:	cc                   	int3   
ffffffff8000970c:	cc                   	int3   
ffffffff8000970d:	cc                   	int3   
ffffffff8000970e:	cc                   	int3   
ffffffff8000970f:	cc                   	int3   

ffffffff80009710 <interrupt_handle_0xf1>:
ffffffff80009710:	68 f1 00 00 00       	push   $0xf1
ffffffff80009715:	e9 23 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000971a:	cc                   	int3   
ffffffff8000971b:	cc                   	int3   
ffffffff8000971c:	cc                   	int3   
ffffffff8000971d:	cc                   	int3   
ffffffff8000971e:	cc                   	int3   
ffffffff8000971f:	cc                   	int3   

ffffffff80009720 <interrupt_handle_0xf2>:
ffffffff80009720:	68 f2 00 00 00       	push   $0xf2
ffffffff80009725:	e9 13 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000972a:	cc                   	int3   
ffffffff8000972b:	cc                   	int3   
ffffffff8000972c:	cc                   	int3   
ffffffff8000972d:	cc                   	int3   
ffffffff8000972e:	cc                   	int3   
ffffffff8000972f:	cc                   	int3   

ffffffff80009730 <interrupt_handle_0xf3>:
ffffffff80009730:	68 f3 00 00 00       	push   $0xf3
ffffffff80009735:	e9 03 69 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000973a:	cc                   	int3   
ffffffff8000973b:	cc                   	int3   
ffffffff8000973c:	cc                   	int3   
ffffffff8000973d:	cc                   	int3   
ffffffff8000973e:	cc                   	int3   
ffffffff8000973f:	cc                   	int3   

ffffffff80009740 <interrupt_handle_0xf4>:
ffffffff80009740:	68 f4 00 00 00       	push   $0xf4
ffffffff80009745:	e9 f3 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000974a:	cc                   	int3   
ffffffff8000974b:	cc                   	int3   
ffffffff8000974c:	cc                   	int3   
ffffffff8000974d:	cc                   	int3   
ffffffff8000974e:	cc                   	int3   
ffffffff8000974f:	cc                   	int3   

ffffffff80009750 <interrupt_handle_0xf5>:
ffffffff80009750:	68 f5 00 00 00       	push   $0xf5
ffffffff80009755:	e9 e3 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000975a:	cc                   	int3   
ffffffff8000975b:	cc                   	int3   
ffffffff8000975c:	cc                   	int3   
ffffffff8000975d:	cc                   	int3   
ffffffff8000975e:	cc                   	int3   
ffffffff8000975f:	cc                   	int3   

ffffffff80009760 <interrupt_handle_0xf6>:
ffffffff80009760:	68 f6 00 00 00       	push   $0xf6
ffffffff80009765:	e9 d3 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000976a:	cc                   	int3   
ffffffff8000976b:	cc                   	int3   
ffffffff8000976c:	cc                   	int3   
ffffffff8000976d:	cc                   	int3   
ffffffff8000976e:	cc                   	int3   
ffffffff8000976f:	cc                   	int3   

ffffffff80009770 <interrupt_handle_0xf7>:
ffffffff80009770:	68 f7 00 00 00       	push   $0xf7
ffffffff80009775:	e9 c3 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000977a:	cc                   	int3   
ffffffff8000977b:	cc                   	int3   
ffffffff8000977c:	cc                   	int3   
ffffffff8000977d:	cc                   	int3   
ffffffff8000977e:	cc                   	int3   
ffffffff8000977f:	cc                   	int3   

ffffffff80009780 <interrupt_handle_0xf8>:
ffffffff80009780:	68 f8 00 00 00       	push   $0xf8
ffffffff80009785:	e9 b3 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000978a:	cc                   	int3   
ffffffff8000978b:	cc                   	int3   
ffffffff8000978c:	cc                   	int3   
ffffffff8000978d:	cc                   	int3   
ffffffff8000978e:	cc                   	int3   
ffffffff8000978f:	cc                   	int3   

ffffffff80009790 <interrupt_handle_0xf9>:
ffffffff80009790:	68 f9 00 00 00       	push   $0xf9
ffffffff80009795:	e9 a3 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff8000979a:	cc                   	int3   
ffffffff8000979b:	cc                   	int3   
ffffffff8000979c:	cc                   	int3   
ffffffff8000979d:	cc                   	int3   
ffffffff8000979e:	cc                   	int3   
ffffffff8000979f:	cc                   	int3   

ffffffff800097a0 <interrupt_handle_0xfa>:
ffffffff800097a0:	68 fa 00 00 00       	push   $0xfa
ffffffff800097a5:	e9 93 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800097aa:	cc                   	int3   
ffffffff800097ab:	cc                   	int3   
ffffffff800097ac:	cc                   	int3   
ffffffff800097ad:	cc                   	int3   
ffffffff800097ae:	cc                   	int3   
ffffffff800097af:	cc                   	int3   

ffffffff800097b0 <interrupt_handle_0xfb>:
ffffffff800097b0:	68 fb 00 00 00       	push   $0xfb
ffffffff800097b5:	e9 83 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800097ba:	cc                   	int3   
ffffffff800097bb:	cc                   	int3   
ffffffff800097bc:	cc                   	int3   
ffffffff800097bd:	cc                   	int3   
ffffffff800097be:	cc                   	int3   
ffffffff800097bf:	cc                   	int3   

ffffffff800097c0 <interrupt_handle_0xfc>:
ffffffff800097c0:	68 fc 00 00 00       	push   $0xfc
ffffffff800097c5:	e9 73 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800097ca:	cc                   	int3   
ffffffff800097cb:	cc                   	int3   
ffffffff800097cc:	cc                   	int3   
ffffffff800097cd:	cc                   	int3   
ffffffff800097ce:	cc                   	int3   
ffffffff800097cf:	cc                   	int3   

ffffffff800097d0 <interrupt_handle_0xfd>:
ffffffff800097d0:	68 fd 00 00 00       	push   $0xfd
ffffffff800097d5:	e9 63 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800097da:	cc                   	int3   
ffffffff800097db:	cc                   	int3   
ffffffff800097dc:	cc                   	int3   
ffffffff800097dd:	cc                   	int3   
ffffffff800097de:	cc                   	int3   
ffffffff800097df:	cc                   	int3   

ffffffff800097e0 <interrupt_handle_0xfe>:
ffffffff800097e0:	68 fe 00 00 00       	push   $0xfe
ffffffff800097e5:	e9 53 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800097ea:	cc                   	int3   
ffffffff800097eb:	cc                   	int3   
ffffffff800097ec:	cc                   	int3   
ffffffff800097ed:	cc                   	int3   
ffffffff800097ee:	cc                   	int3   
ffffffff800097ef:	cc                   	int3   

ffffffff800097f0 <interrupt_handle_0xff>:
ffffffff800097f0:	68 ff 00 00 00       	push   $0xff
ffffffff800097f5:	e9 43 68 ff ff       	jmp    ffffffff8000003d <common_interrupt_stub>
ffffffff800097fa:	cc                   	int3   
ffffffff800097fb:	cc                   	int3   
ffffffff800097fc:	cc                   	int3   
ffffffff800097fd:	cc                   	int3   
ffffffff800097fe:	cc                   	int3   
ffffffff800097ff:	cc                   	int3   

ffffffff80009800 <early_init_apic>:
ffffffff80009800:	55                   	push   %rbp
ffffffff80009801:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009804:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80009808:	c7 45 ec 1b 00 00 00 	movl   $0x1b,-0x14(%rbp)
ffffffff8000980f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff80009812:	0f 32                	rdmsr  
ffffffff80009814:	89 55 f4             	mov    %edx,-0xc(%rbp)
ffffffff80009817:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff8000981a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000981d:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80009821:	8b 4d f0             	mov    -0x10(%rbp),%ecx
ffffffff80009824:	48 09 c8             	or     %rcx,%rax
ffffffff80009827:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000982b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000982f:	48 25 ff f7 ff ff    	and    $0xfffffffffffff7ff,%rax
ffffffff80009835:	48 0d 00 08 00 00    	or     $0x800,%rax
ffffffff8000983b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000983f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80009843:	48 25 ff fb ff ff    	and    $0xfffffffffffffbff,%rax
ffffffff80009849:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000984d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80009851:	48 c7 45 c0 1b 00 00 	movq   $0x1b,-0x40(%rbp)
ffffffff80009858:	00 
ffffffff80009859:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000985d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80009861:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80009865:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80009869:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8000986d:	0f 30                	wrmsr  
ffffffff8000986f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80009873:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80009877:	48 c1 e0 0c          	shl    $0xc,%rax
ffffffff8000987b:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000987f:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80009883:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80009887:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff8000988e:	00 00 00 
ffffffff80009891:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff80009895:	76 2c                	jbe    ffffffff800098c3 <early_init_apic+0xc3>
ffffffff80009897:	e8 54 00 00 00       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000989c:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff800098a3:	48 89 c6             	mov    %rax,%rsi
ffffffff800098a6:	48 c7 c2 65 92 01 80 	mov    $0xffffffff80019265,%rdx
ffffffff800098ad:	48 c7 c1 ec 96 01 80 	mov    $0xffffffff800196ec,%rcx
ffffffff800098b4:	41 b8 b1 00 00 00    	mov    $0xb1,%r8d
ffffffff800098ba:	31 c0                	xor    %eax,%eax
ffffffff800098bc:	e8 7f 80 00 00       	call   ffffffff80011940 <printf_>
ffffffff800098c1:	0f 0b                	ud2    
ffffffff800098c3:	eb 00                	jmp    ffffffff800098c5 <early_init_apic+0xc5>
ffffffff800098c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800098c9:	48 b9 00 00 00 00 00 	movabs $0xffff800000000000,%rcx
ffffffff800098d0:	80 ff ff 
ffffffff800098d3:	48 01 c8             	add    %rcx,%rax
ffffffff800098d6:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800098da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800098de:	48 89 05 c3 1c 01 00 	mov    %rax,0x11cc3(%rip)        # ffffffff8001b5a8 <m_local_apic_base>
ffffffff800098e5:	48 83 c4 40          	add    $0x40,%rsp
ffffffff800098e9:	5d                   	pop    %rbp
ffffffff800098ea:	c3                   	ret    
ffffffff800098eb:	cc                   	int3   
ffffffff800098ec:	cc                   	int3   
ffffffff800098ed:	cc                   	int3   
ffffffff800098ee:	cc                   	int3   
ffffffff800098ef:	cc                   	int3   

ffffffff800098f0 <get_apic_id>:
ffffffff800098f0:	55                   	push   %rbp
ffffffff800098f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800098f4:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800098f9:	e8 12 00 00 00       	call   ffffffff80009910 <lapic_read>
ffffffff800098fe:	c1 e8 18             	shr    $0x18,%eax
ffffffff80009901:	89 c0                	mov    %eax,%eax
ffffffff80009903:	5d                   	pop    %rbp
ffffffff80009904:	c3                   	ret    
ffffffff80009905:	cc                   	int3   
ffffffff80009906:	cc                   	int3   
ffffffff80009907:	cc                   	int3   
ffffffff80009908:	cc                   	int3   
ffffffff80009909:	cc                   	int3   
ffffffff8000990a:	cc                   	int3   
ffffffff8000990b:	cc                   	int3   
ffffffff8000990c:	cc                   	int3   
ffffffff8000990d:	cc                   	int3   
ffffffff8000990e:	cc                   	int3   
ffffffff8000990f:	cc                   	int3   

ffffffff80009910 <lapic_read>:
ffffffff80009910:	55                   	push   %rbp
ffffffff80009911:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009914:	48 83 ec 04          	sub    $0x4,%rsp
ffffffff80009918:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff8000991b:	48 8b 05 86 1c 01 00 	mov    0x11c86(%rip),%rax        # ffffffff8001b5a8 <m_local_apic_base>
ffffffff80009922:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff80009925:	48 01 c8             	add    %rcx,%rax
ffffffff80009928:	8b 00                	mov    (%rax),%eax
ffffffff8000992a:	48 83 c4 04          	add    $0x4,%rsp
ffffffff8000992e:	5d                   	pop    %rbp
ffffffff8000992f:	c3                   	ret    

ffffffff80009930 <init_apic>:
ffffffff80009930:	55                   	push   %rbp
ffffffff80009931:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009934:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80009938:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000993f:	8a 05 9b 38 21 00    	mov    0x21389b(%rip),%al        # ffffffff8021d1e0 <m_mapped_lapic>
ffffffff80009945:	24 01                	and    $0x1,%al
ffffffff80009947:	a8 01                	test   $0x1,%al
ffffffff80009949:	0f 85 cb 00 00 00    	jne    ffffffff80009a1a <init_apic+0xea>
ffffffff8000994f:	c6 05 8a 38 21 00 01 	movb   $0x1,0x21388a(%rip)        # ffffffff8021d1e0 <m_mapped_lapic>
ffffffff80009956:	48 8b 05 4b 1c 01 00 	mov    0x11c4b(%rip),%rax        # ffffffff8001b5a8 <m_local_apic_base>
ffffffff8000995d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80009961:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80009968:	80 ff ff 
ffffffff8000996b:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8000996f:	77 10                	ja     ffffffff80009981 <init_apic+0x51>
ffffffff80009971:	48 b8 00 00 00 00 80 	movabs $0xffff808000000000,%rax
ffffffff80009978:	80 ff ff 
ffffffff8000997b:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8000997f:	76 2c                	jbe    ffffffff800099ad <init_apic+0x7d>
ffffffff80009981:	e8 6a ff ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80009986:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000998d:	48 89 c6             	mov    %rax,%rsi
ffffffff80009990:	48 c7 c2 75 92 01 80 	mov    $0xffffffff80019275,%rdx
ffffffff80009997:	48 c7 c1 ec 96 01 80 	mov    $0xffffffff800196ec,%rcx
ffffffff8000999e:	41 b8 bf 00 00 00    	mov    $0xbf,%r8d
ffffffff800099a4:	31 c0                	xor    %eax,%eax
ffffffff800099a6:	e8 95 7f 00 00       	call   ffffffff80011940 <printf_>
ffffffff800099ab:	0f 0b                	ud2    
ffffffff800099ad:	eb 00                	jmp    ffffffff800099af <init_apic+0x7f>
ffffffff800099af:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800099b3:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff800099ba:	80 00 00 
ffffffff800099bd:	48 01 c8             	add    %rcx,%rax
ffffffff800099c0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800099c4:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff800099c8:	48 8b 35 d9 1b 01 00 	mov    0x11bd9(%rip),%rsi        # ffffffff8001b5a8 <m_local_apic_base>
ffffffff800099cf:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800099d4:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff800099d9:	e8 42 0f 00 00       	call   ffffffff8000a920 <vmm_map>
ffffffff800099de:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800099e1:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800099e5:	74 2f                	je     ffffffff80009a16 <init_apic+0xe6>
ffffffff800099e7:	e8 04 ff ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff800099ec:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff800099f3:	48 89 c6             	mov    %rax,%rsi
ffffffff800099f6:	48 c7 c2 75 92 01 80 	mov    $0xffffffff80019275,%rdx
ffffffff800099fd:	48 c7 c1 ec 96 01 80 	mov    $0xffffffff800196ec,%rcx
ffffffff80009a04:	41 b8 c0 00 00 00    	mov    $0xc0,%r8d
ffffffff80009a0a:	31 c0                	xor    %eax,%eax
ffffffff80009a0c:	e8 2f 7f 00 00       	call   ffffffff80011940 <printf_>
ffffffff80009a11:	e9 85 00 00 00       	jmp    ffffffff80009a9b <init_apic+0x16b>
ffffffff80009a16:	eb 00                	jmp    ffffffff80009a18 <init_apic+0xe8>
ffffffff80009a18:	eb 00                	jmp    ffffffff80009a1a <init_apic+0xea>
ffffffff80009a1a:	48 8d 45 e8          	lea    -0x18(%rbp),%rax
ffffffff80009a1e:	8b 0d 40 0b 01 00    	mov    0x10b40(%rip),%ecx        # ffffffff8001a564 <g_exception_name+0x104>
ffffffff80009a24:	89 08                	mov    %ecx,(%rax)
ffffffff80009a26:	8b 75 e8             	mov    -0x18(%rbp),%esi
ffffffff80009a29:	bf f0 00 00 00       	mov    $0xf0,%edi
ffffffff80009a2e:	e8 7d 00 00 00       	call   ffffffff80009ab0 <lapic_write>
ffffffff80009a33:	48 8d 7d f0          	lea    -0x10(%rbp),%rdi
ffffffff80009a37:	e8 a4 00 00 00       	call   ffffffff80009ae0 <cpuid>
ffffffff80009a3c:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80009a3f:	c1 e8 18             	shr    $0x18,%eax
ffffffff80009a42:	83 e0 01             	and    $0x1,%eax
ffffffff80009a45:	83 f8 00             	cmp    $0x0,%eax
ffffffff80009a48:	75 36                	jne    ffffffff80009a80 <init_apic+0x150>
ffffffff80009a4a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80009a51:	e8 9a fe ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80009a56:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80009a59:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80009a60:	48 89 c6             	mov    %rax,%rsi
ffffffff80009a63:	48 c7 c1 75 92 01 80 	mov    $0xffffffff80019275,%rcx
ffffffff80009a6a:	49 c7 c0 ec 96 01 80 	mov    $0xffffffff800196ec,%r8
ffffffff80009a71:	41 b9 cd 00 00 00    	mov    $0xcd,%r9d
ffffffff80009a77:	31 c0                	xor    %eax,%eax
ffffffff80009a79:	e8 c2 7e 00 00       	call   ffffffff80011940 <printf_>
ffffffff80009a7e:	eb 1b                	jmp    ffffffff80009a9b <init_apic+0x16b>
ffffffff80009a80:	eb 00                	jmp    ffffffff80009a82 <init_apic+0x152>
ffffffff80009a82:	48 8d 45 f8          	lea    -0x8(%rbp),%rax
ffffffff80009a86:	8b 0d d4 0a 01 00    	mov    0x10ad4(%rip),%ecx        # ffffffff8001a560 <g_exception_name+0x100>
ffffffff80009a8c:	89 08                	mov    %ecx,(%rax)
ffffffff80009a8e:	8b 75 f8             	mov    -0x8(%rbp),%esi
ffffffff80009a91:	bf 20 03 00 00       	mov    $0x320,%edi
ffffffff80009a96:	e8 15 00 00 00       	call   ffffffff80009ab0 <lapic_write>
ffffffff80009a9b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80009a9e:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80009aa2:	5d                   	pop    %rbp
ffffffff80009aa3:	c3                   	ret    
ffffffff80009aa4:	cc                   	int3   
ffffffff80009aa5:	cc                   	int3   
ffffffff80009aa6:	cc                   	int3   
ffffffff80009aa7:	cc                   	int3   
ffffffff80009aa8:	cc                   	int3   
ffffffff80009aa9:	cc                   	int3   
ffffffff80009aaa:	cc                   	int3   
ffffffff80009aab:	cc                   	int3   
ffffffff80009aac:	cc                   	int3   
ffffffff80009aad:	cc                   	int3   
ffffffff80009aae:	cc                   	int3   
ffffffff80009aaf:	cc                   	int3   

ffffffff80009ab0 <lapic_write>:
ffffffff80009ab0:	55                   	push   %rbp
ffffffff80009ab1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009ab4:	50                   	push   %rax
ffffffff80009ab5:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff80009ab8:	89 75 fc             	mov    %esi,-0x4(%rbp)
ffffffff80009abb:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80009abe:	48 8b 0d e3 1a 01 00 	mov    0x11ae3(%rip),%rcx        # ffffffff8001b5a8 <m_local_apic_base>
ffffffff80009ac5:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80009ac8:	48 01 d1             	add    %rdx,%rcx
ffffffff80009acb:	89 01                	mov    %eax,(%rcx)
ffffffff80009acd:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80009ad1:	5d                   	pop    %rbp
ffffffff80009ad2:	c3                   	ret    
ffffffff80009ad3:	cc                   	int3   
ffffffff80009ad4:	cc                   	int3   
ffffffff80009ad5:	cc                   	int3   
ffffffff80009ad6:	cc                   	int3   
ffffffff80009ad7:	cc                   	int3   
ffffffff80009ad8:	cc                   	int3   
ffffffff80009ad9:	cc                   	int3   
ffffffff80009ada:	cc                   	int3   
ffffffff80009adb:	cc                   	int3   
ffffffff80009adc:	cc                   	int3   
ffffffff80009add:	cc                   	int3   
ffffffff80009ade:	cc                   	int3   
ffffffff80009adf:	cc                   	int3   

ffffffff80009ae0 <cpuid>:
ffffffff80009ae0:	55                   	push   %rbp
ffffffff80009ae1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009ae4:	53                   	push   %rbx
ffffffff80009ae5:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff80009ae9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80009af0:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80009af7:	00 
ffffffff80009af8:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80009aff:	00 
ffffffff80009b00:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80009b04:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80009b0b:	00 
ffffffff80009b0c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80009b10:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff80009b13:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80009b17:	89 4d e8             	mov    %ecx,-0x18(%rbp)
ffffffff80009b1a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80009b1e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80009b22:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
ffffffff80009b26:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
ffffffff80009b2a:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80009b2d:	0f a2                	cpuid  
ffffffff80009b2f:	89 06                	mov    %eax,(%rsi)
ffffffff80009b31:	89 5f 04             	mov    %ebx,0x4(%rdi)
ffffffff80009b34:	41 89 48 08          	mov    %ecx,0x8(%r8)
ffffffff80009b38:	41 89 51 0c          	mov    %edx,0xc(%r9)
ffffffff80009b3c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80009b41:	74 09                	je     ffffffff80009b4c <cpuid+0x6c>
ffffffff80009b43:	8b 45 b0             	mov    -0x50(%rbp),%eax
ffffffff80009b46:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80009b4a:	89 01                	mov    %eax,(%rcx)
ffffffff80009b4c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80009b51:	74 09                	je     ffffffff80009b5c <cpuid+0x7c>
ffffffff80009b53:	8b 45 b4             	mov    -0x4c(%rbp),%eax
ffffffff80009b56:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80009b5a:	89 01                	mov    %eax,(%rcx)
ffffffff80009b5c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80009b61:	74 09                	je     ffffffff80009b6c <cpuid+0x8c>
ffffffff80009b63:	8b 45 b8             	mov    -0x48(%rbp),%eax
ffffffff80009b66:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80009b6a:	89 01                	mov    %eax,(%rcx)
ffffffff80009b6c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80009b71:	74 09                	je     ffffffff80009b7c <cpuid+0x9c>
ffffffff80009b73:	8b 45 bc             	mov    -0x44(%rbp),%eax
ffffffff80009b76:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80009b7a:	89 01                	mov    %eax,(%rcx)
ffffffff80009b7c:	48 83 c4 48          	add    $0x48,%rsp
ffffffff80009b80:	5b                   	pop    %rbx
ffffffff80009b81:	5d                   	pop    %rbp
ffffffff80009b82:	c3                   	ret    
ffffffff80009b83:	cc                   	int3   
ffffffff80009b84:	cc                   	int3   
ffffffff80009b85:	cc                   	int3   
ffffffff80009b86:	cc                   	int3   
ffffffff80009b87:	cc                   	int3   
ffffffff80009b88:	cc                   	int3   
ffffffff80009b89:	cc                   	int3   
ffffffff80009b8a:	cc                   	int3   
ffffffff80009b8b:	cc                   	int3   
ffffffff80009b8c:	cc                   	int3   
ffffffff80009b8d:	cc                   	int3   
ffffffff80009b8e:	cc                   	int3   
ffffffff80009b8f:	cc                   	int3   

ffffffff80009b90 <lapic_eoi>:
ffffffff80009b90:	55                   	push   %rbp
ffffffff80009b91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009b94:	31 c0                	xor    %eax,%eax
ffffffff80009b96:	bf b0 00 00 00       	mov    $0xb0,%edi
ffffffff80009b9b:	31 f6                	xor    %esi,%esi
ffffffff80009b9d:	e8 0e ff ff ff       	call   ffffffff80009ab0 <lapic_write>
ffffffff80009ba2:	5d                   	pop    %rbp
ffffffff80009ba3:	c3                   	ret    
ffffffff80009ba4:	cc                   	int3   
ffffffff80009ba5:	cc                   	int3   
ffffffff80009ba6:	cc                   	int3   
ffffffff80009ba7:	cc                   	int3   
ffffffff80009ba8:	cc                   	int3   
ffffffff80009ba9:	cc                   	int3   
ffffffff80009baa:	cc                   	int3   
ffffffff80009bab:	cc                   	int3   
ffffffff80009bac:	cc                   	int3   
ffffffff80009bad:	cc                   	int3   
ffffffff80009bae:	cc                   	int3   
ffffffff80009baf:	cc                   	int3   

ffffffff80009bb0 <lapic_send_ipi>:
ffffffff80009bb0:	55                   	push   %rbp
ffffffff80009bb1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009bb4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80009bb8:	c6 45 f7 f0          	movb   $0xf0,-0x9(%rbp)
ffffffff80009bbc:	89 7d f0             	mov    %edi,-0x10(%rbp)
ffffffff80009bbf:	0f b6 45 f7          	movzbl -0x9(%rbp),%eax
ffffffff80009bc3:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff80009bc6:	25 ff 00 00 00       	and    $0xff,%eax
ffffffff80009bcb:	81 e1 00 ff ff ff    	and    $0xffffff00,%ecx
ffffffff80009bd1:	09 c1                	or     %eax,%ecx
ffffffff80009bd3:	89 4d f8             	mov    %ecx,-0x8(%rbp)
ffffffff80009bd6:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009bd9:	25 ff f8 ff ff       	and    $0xfffff8ff,%eax
ffffffff80009bde:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009be1:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009be4:	25 ff f7 ff ff       	and    $0xfffff7ff,%eax
ffffffff80009be9:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009bec:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009bef:	25 ff ef ff ff       	and    $0xffffefff,%eax
ffffffff80009bf4:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009bf7:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009bfa:	25 ff df ff ff       	and    $0xffffdfff,%eax
ffffffff80009bff:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009c02:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009c05:	25 ff bf ff ff       	and    $0xffffbfff,%eax
ffffffff80009c0a:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009c0d:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009c10:	25 ff 7f ff ff       	and    $0xffff7fff,%eax
ffffffff80009c15:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009c18:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009c1b:	25 ff ff fc ff       	and    $0xfffcffff,%eax
ffffffff80009c20:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009c23:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009c26:	25 ff ff f3 ff       	and    $0xfff3ffff,%eax
ffffffff80009c2b:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009c2e:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80009c31:	25 ff ff 0f 00       	and    $0xfffff,%eax
ffffffff80009c36:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80009c39:	8b 75 f0             	mov    -0x10(%rbp),%esi
ffffffff80009c3c:	8b 7d f8             	mov    -0x8(%rbp),%edi
ffffffff80009c3f:	e8 0c 00 00 00       	call   ffffffff80009c50 <send_ipi>
ffffffff80009c44:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80009c48:	5d                   	pop    %rbp
ffffffff80009c49:	c3                   	ret    
ffffffff80009c4a:	cc                   	int3   
ffffffff80009c4b:	cc                   	int3   
ffffffff80009c4c:	cc                   	int3   
ffffffff80009c4d:	cc                   	int3   
ffffffff80009c4e:	cc                   	int3   
ffffffff80009c4f:	cc                   	int3   

ffffffff80009c50 <send_ipi>:
ffffffff80009c50:	55                   	push   %rbp
ffffffff80009c51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009c54:	53                   	push   %rbx
ffffffff80009c55:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80009c59:	89 7d e8             	mov    %edi,-0x18(%rbp)
ffffffff80009c5c:	89 75 e4             	mov    %esi,-0x1c(%rbp)
ffffffff80009c5f:	9c                   	pushf  
ffffffff80009c60:	58                   	pop    %rax
ffffffff80009c61:	48 25 00 02 00 00    	and    $0x200,%rax
ffffffff80009c67:	31 c9                	xor    %ecx,%ecx
ffffffff80009c69:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80009c6e:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80009c72:	0f 45 ca             	cmovne %edx,%ecx
ffffffff80009c75:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80009c78:	0f 95 c0             	setne  %al
ffffffff80009c7b:	24 01                	and    $0x1,%al
ffffffff80009c7d:	88 45 f7             	mov    %al,-0x9(%rbp)
ffffffff80009c80:	fa                   	cli    
ffffffff80009c81:	48 8d 5d f0          	lea    -0x10(%rbp),%rbx
ffffffff80009c85:	bf 00 03 00 00       	mov    $0x300,%edi
ffffffff80009c8a:	e8 81 fc ff ff       	call   ffffffff80009910 <lapic_read>
ffffffff80009c8f:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80009c92:	8b 03                	mov    (%rbx),%eax
ffffffff80009c94:	c1 e8 0c             	shr    $0xc,%eax
ffffffff80009c97:	83 e0 01             	and    $0x1,%eax
ffffffff80009c9a:	83 f8 00             	cmp    $0x0,%eax
ffffffff80009c9d:	75 e6                	jne    ffffffff80009c85 <send_ipi+0x35>
ffffffff80009c9f:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff80009ca2:	c1 e6 18             	shl    $0x18,%esi
ffffffff80009ca5:	bf 10 03 00 00       	mov    $0x310,%edi
ffffffff80009caa:	e8 01 fe ff ff       	call   ffffffff80009ab0 <lapic_write>
ffffffff80009caf:	8b 75 e8             	mov    -0x18(%rbp),%esi
ffffffff80009cb2:	bf 00 03 00 00       	mov    $0x300,%edi
ffffffff80009cb7:	e8 f4 fd ff ff       	call   ffffffff80009ab0 <lapic_write>
ffffffff80009cbc:	48 8d 5d f0          	lea    -0x10(%rbp),%rbx
ffffffff80009cc0:	bf 00 03 00 00       	mov    $0x300,%edi
ffffffff80009cc5:	e8 46 fc ff ff       	call   ffffffff80009910 <lapic_read>
ffffffff80009cca:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80009ccd:	8b 03                	mov    (%rbx),%eax
ffffffff80009ccf:	c1 e8 0c             	shr    $0xc,%eax
ffffffff80009cd2:	83 e0 01             	and    $0x1,%eax
ffffffff80009cd5:	83 f8 00             	cmp    $0x0,%eax
ffffffff80009cd8:	75 e6                	jne    ffffffff80009cc0 <send_ipi+0x70>
ffffffff80009cda:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
ffffffff80009cde:	74 01                	je     ffffffff80009ce1 <send_ipi+0x91>
ffffffff80009ce0:	fb                   	sti    
ffffffff80009ce1:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80009ce5:	5b                   	pop    %rbx
ffffffff80009ce6:	5d                   	pop    %rbp
ffffffff80009ce7:	c3                   	ret    
ffffffff80009ce8:	cc                   	int3   
ffffffff80009ce9:	cc                   	int3   
ffffffff80009cea:	cc                   	int3   
ffffffff80009ceb:	cc                   	int3   
ffffffff80009cec:	cc                   	int3   
ffffffff80009ced:	cc                   	int3   
ffffffff80009cee:	cc                   	int3   
ffffffff80009cef:	cc                   	int3   

ffffffff80009cf0 <lapic_set_deadline>:
ffffffff80009cf0:	55                   	push   %rbp
ffffffff80009cf1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009cf4:	41 56                	push   %r14
ffffffff80009cf6:	53                   	push   %rbx
ffffffff80009cf7:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80009cfb:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80009cff:	0f 31                	rdtsc  
ffffffff80009d01:	48 89 c3             	mov    %rax,%rbx
ffffffff80009d04:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff80009d08:	48 09 d3             	or     %rdx,%rbx
ffffffff80009d0b:	4c 8b 75 e0          	mov    -0x20(%rbp),%r14
ffffffff80009d0f:	31 c0                	xor    %eax,%eax
ffffffff80009d11:	e8 ea c5 00 00       	call   ffffffff80016300 <get_tsc_freq>
ffffffff80009d16:	4c 0f af f0          	imul   %rax,%r14
ffffffff80009d1a:	4c 01 f3             	add    %r14,%rbx
ffffffff80009d1d:	48 c7 45 d8 e0 06 00 	movq   $0x6e0,-0x28(%rbp)
ffffffff80009d24:	00 
ffffffff80009d25:	48 89 5d e8          	mov    %rbx,-0x18(%rbp)
ffffffff80009d29:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80009d2d:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80009d31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80009d35:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80009d39:	0f 30                	wrmsr  
ffffffff80009d3b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80009d3f:	5b                   	pop    %rbx
ffffffff80009d40:	41 5e                	pop    %r14
ffffffff80009d42:	5d                   	pop    %rbp
ffffffff80009d43:	c3                   	ret    
ffffffff80009d44:	cc                   	int3   
ffffffff80009d45:	cc                   	int3   
ffffffff80009d46:	cc                   	int3   
ffffffff80009d47:	cc                   	int3   
ffffffff80009d48:	cc                   	int3   
ffffffff80009d49:	cc                   	int3   
ffffffff80009d4a:	cc                   	int3   
ffffffff80009d4b:	cc                   	int3   
ffffffff80009d4c:	cc                   	int3   
ffffffff80009d4d:	cc                   	int3   
ffffffff80009d4e:	cc                   	int3   
ffffffff80009d4f:	cc                   	int3   

ffffffff80009d50 <init_vmm>:
ffffffff80009d50:	55                   	push   %rbp
ffffffff80009d51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80009d54:	48 81 ec 60 01 00 00 	sub    $0x160,%rsp
ffffffff80009d5b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80009d62:	31 c0                	xor    %eax,%eax
ffffffff80009d64:	e8 57 32 00 00       	call   ffffffff8000cfc0 <early_alloc_page_phys>
ffffffff80009d69:	48 89 05 40 18 01 00 	mov    %rax,0x11840(%rip)        # ffffffff8001b5b0 <m_pml4_pa>
ffffffff80009d70:	48 8b 05 39 18 01 00 	mov    0x11839(%rip),%rax        # ffffffff8001b5b0 <m_pml4_pa>
ffffffff80009d77:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
ffffffff80009d7e:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff80009d85:	00 00 00 
ffffffff80009d88:	48 39 85 40 ff ff ff 	cmp    %rax,-0xc0(%rbp)
ffffffff80009d8f:	76 2e                	jbe    ffffffff80009dbf <init_vmm+0x6f>
ffffffff80009d91:	31 c0                	xor    %eax,%eax
ffffffff80009d93:	e8 58 fb ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80009d98:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80009d9f:	48 89 c6             	mov    %rax,%rsi
ffffffff80009da2:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff80009da9:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff80009db0:	41 b8 37 00 00 00    	mov    $0x37,%r8d
ffffffff80009db6:	31 c0                	xor    %eax,%eax
ffffffff80009db8:	e8 83 7b 00 00       	call   ffffffff80011940 <printf_>
ffffffff80009dbd:	0f 0b                	ud2    
ffffffff80009dbf:	eb 00                	jmp    ffffffff80009dc1 <init_vmm+0x71>
ffffffff80009dc1:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff80009dc8:	48 b9 00 00 00 00 00 	movabs $0xffff800000000000,%rcx
ffffffff80009dcf:	80 ff ff 
ffffffff80009dd2:	48 01 c8             	add    %rcx,%rax
ffffffff80009dd5:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
ffffffff80009ddc:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
ffffffff80009de3:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
ffffffff80009dea:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
ffffffff80009df1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80009df5:	48 83 c9 01          	or     $0x1,%rcx
ffffffff80009df9:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80009dfd:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e00:	80 c9 02             	or     $0x2,%cl
ffffffff80009e03:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e06:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e09:	80 e1 fb             	and    $0xfb,%cl
ffffffff80009e0c:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e0f:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e12:	80 e1 f7             	and    $0xf7,%cl
ffffffff80009e15:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e18:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e1b:	80 e1 ef             	and    $0xef,%cl
ffffffff80009e1e:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e21:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e24:	80 e1 df             	and    $0xdf,%cl
ffffffff80009e27:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e2a:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e2d:	80 e1 bf             	and    $0xbf,%cl
ffffffff80009e30:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e33:	8a 4d f0             	mov    -0x10(%rbp),%cl
ffffffff80009e36:	80 e1 7f             	and    $0x7f,%cl
ffffffff80009e39:	88 4d f0             	mov    %cl,-0x10(%rbp)
ffffffff80009e3c:	8a 4d f1             	mov    -0xf(%rbp),%cl
ffffffff80009e3f:	80 e1 fe             	and    $0xfe,%cl
ffffffff80009e42:	88 4d f1             	mov    %cl,-0xf(%rbp)
ffffffff80009e45:	8a 4d f1             	mov    -0xf(%rbp),%cl
ffffffff80009e48:	80 e1 f1             	and    $0xf1,%cl
ffffffff80009e4b:	88 4d f1             	mov    %cl,-0xf(%rbp)
ffffffff80009e4e:	48 8b 0d 5b 17 01 00 	mov    0x1175b(%rip),%rcx        # ffffffff8001b5b0 <m_pml4_pa>
ffffffff80009e55:	48 c1 e9 0c          	shr    $0xc,%rcx
ffffffff80009e59:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80009e5d:	48 be ff ff ff ff ff 	movabs $0xffffffffff,%rsi
ffffffff80009e64:	00 00 00 
ffffffff80009e67:	48 21 f1             	and    %rsi,%rcx
ffffffff80009e6a:	48 c1 e1 0c          	shl    $0xc,%rcx
ffffffff80009e6e:	48 be ff 0f 00 00 00 	movabs $0xfff0000000000fff,%rsi
ffffffff80009e75:	00 f0 ff 
ffffffff80009e78:	48 21 f2             	and    %rsi,%rdx
ffffffff80009e7b:	48 09 ca             	or     %rcx,%rdx
ffffffff80009e7e:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80009e82:	48 b9 ff ff ff ff ff 	movabs $0x800fffffffffffff,%rcx
ffffffff80009e89:	ff 0f 80 
ffffffff80009e8c:	48 23 4d f0          	and    -0x10(%rbp),%rcx
ffffffff80009e90:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80009e94:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff80009e9b:	ff ff 7f 
ffffffff80009e9e:	48 23 4d f0          	and    -0x10(%rbp),%rcx
ffffffff80009ea2:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80009ea6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80009eaa:	48 89 88 f0 0f 00 00 	mov    %rcx,0xff0(%rax)
ffffffff80009eb1:	0f 20 d8             	mov    %cr3,%rax
ffffffff80009eb4:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
ffffffff80009ebb:	48 8b 85 c0 fe ff ff 	mov    -0x140(%rbp),%rax
ffffffff80009ec2:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
ffffffff80009ec9:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff80009ed0:	00 00 00 
ffffffff80009ed3:	48 39 85 48 ff ff ff 	cmp    %rax,-0xb8(%rbp)
ffffffff80009eda:	76 2e                	jbe    ffffffff80009f0a <init_vmm+0x1ba>
ffffffff80009edc:	31 c0                	xor    %eax,%eax
ffffffff80009ede:	e8 0d fa ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80009ee3:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80009eea:	48 89 c6             	mov    %rax,%rsi
ffffffff80009eed:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff80009ef4:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff80009efb:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80009f01:	31 c0                	xor    %eax,%eax
ffffffff80009f03:	e8 38 7a 00 00       	call   ffffffff80011940 <printf_>
ffffffff80009f08:	0f 0b                	ud2    
ffffffff80009f0a:	eb 00                	jmp    ffffffff80009f0c <init_vmm+0x1bc>
ffffffff80009f0c:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80009f13:	80 ff ff 
ffffffff80009f16:	48 03 85 48 ff ff ff 	add    -0xb8(%rbp),%rax
ffffffff80009f1d:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
ffffffff80009f24:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
ffffffff80009f2b:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
ffffffff80009f32:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
ffffffff80009f39:	48 8b 8d 38 ff ff ff 	mov    -0xc8(%rbp),%rcx
ffffffff80009f40:	48 8b 89 f0 0f 00 00 	mov    0xff0(%rcx),%rcx
ffffffff80009f47:	48 89 88 f0 0f 00 00 	mov    %rcx,0xff0(%rax)
ffffffff80009f4e:	48 bf bd b6 47 40 a6 	movabs $0x5df266a64047b6bd,%rdi
ffffffff80009f55:	66 f2 5d 
ffffffff80009f58:	e8 13 6c ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff80009f5d:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff80009f61:	48 bf f0 8a 2a 4a 87 	movabs $0x60d78874a2a8af0,%rdi
ffffffff80009f68:	78 0d 06 
ffffffff80009f6b:	e8 00 6c ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff80009f70:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff80009f74:	48 bf 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rdi
ffffffff80009f7b:	f7 87 21 
ffffffff80009f7e:	e8 ed 6b ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff80009f83:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff80009f87:	48 83 7d 88 00       	cmpq   $0x0,-0x78(%rbp)
ffffffff80009f8c:	75 3b                	jne    ffffffff80009fc9 <init_vmm+0x279>
ffffffff80009f8e:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
ffffffff80009f95:	31 c0                	xor    %eax,%eax
ffffffff80009f97:	e8 54 f9 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80009f9c:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80009f9f:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80009fa6:	48 89 c6             	mov    %rax,%rsi
ffffffff80009fa9:	48 c7 c1 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rcx
ffffffff80009fb0:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff80009fb7:	41 b9 46 00 00 00    	mov    $0x46,%r9d
ffffffff80009fbd:	31 c0                	xor    %eax,%eax
ffffffff80009fbf:	e8 7c 79 00 00       	call   ffffffff80011940 <printf_>
ffffffff80009fc4:	e9 86 08 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff80009fc9:	eb 00                	jmp    ffffffff80009fcb <init_vmm+0x27b>
ffffffff80009fcb:	eb 00                	jmp    ffffffff80009fcd <init_vmm+0x27d>
ffffffff80009fcd:	48 83 7d 90 00       	cmpq   $0x0,-0x70(%rbp)
ffffffff80009fd2:	75 3b                	jne    ffffffff8000a00f <init_vmm+0x2bf>
ffffffff80009fd4:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
ffffffff80009fdb:	31 c0                	xor    %eax,%eax
ffffffff80009fdd:	e8 0e f9 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80009fe2:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80009fe5:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80009fec:	48 89 c6             	mov    %rax,%rsi
ffffffff80009fef:	48 c7 c1 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rcx
ffffffff80009ff6:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff80009ffd:	41 b9 47 00 00 00    	mov    $0x47,%r9d
ffffffff8000a003:	31 c0                	xor    %eax,%eax
ffffffff8000a005:	e8 36 79 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a00a:	e9 40 08 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a00f:	eb 00                	jmp    ffffffff8000a011 <init_vmm+0x2c1>
ffffffff8000a011:	eb 00                	jmp    ffffffff8000a013 <init_vmm+0x2c3>
ffffffff8000a013:	48 83 7d 98 00       	cmpq   $0x0,-0x68(%rbp)
ffffffff8000a018:	75 3b                	jne    ffffffff8000a055 <init_vmm+0x305>
ffffffff8000a01a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
ffffffff8000a021:	31 c0                	xor    %eax,%eax
ffffffff8000a023:	e8 c8 f8 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a028:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000a02b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000a032:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a035:	48 c7 c1 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rcx
ffffffff8000a03c:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000a043:	41 b9 48 00 00 00    	mov    $0x48,%r9d
ffffffff8000a049:	31 c0                	xor    %eax,%eax
ffffffff8000a04b:	e8 f0 78 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a050:	e9 fa 07 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a055:	eb 00                	jmp    ffffffff8000a057 <init_vmm+0x307>
ffffffff8000a057:	31 c0                	xor    %eax,%eax
ffffffff8000a059:	e8 92 f8 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a05e:	48 c7 c7 30 8f 01 80 	mov    $0xffffffff80018f30,%rdi
ffffffff8000a065:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a068:	31 c0                	xor    %eax,%eax
ffffffff8000a06a:	e8 d1 78 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a06f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
ffffffff8000a076:	48 63 45 cc          	movslq -0x34(%rbp),%rax
ffffffff8000a07a:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff8000a07e:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000a082:	0f 83 64 04 00 00    	jae    ffffffff8000a4ec <init_vmm+0x79c>
ffffffff8000a088:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8000a08c:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000a090:	48 63 4d cc          	movslq -0x34(%rbp),%rcx
ffffffff8000a094:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000a098:	48 01 c8             	add    %rcx,%rax
ffffffff8000a09b:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000a09f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000a0a3:	48 8b 00             	mov    (%rax),%rax
ffffffff8000a0a6:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000a0aa:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000a0ae:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000a0b2:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
ffffffff8000a0b9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000a0bd:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8000a0c0:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff8000a0c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000a0c7:	48 03 85 e0 fe ff ff 	add    -0x120(%rbp),%rax
ffffffff8000a0ce:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000a0d2:	8b 7d e0             	mov    -0x20(%rbp),%edi
ffffffff8000a0d5:	e8 86 07 00 00       	call   ffffffff8000a860 <get_memmap_type_name>
ffffffff8000a0da:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000a0de:	83 7d e0 05          	cmpl   $0x5,-0x20(%rbp)
ffffffff8000a0e2:	0f 84 c2 03 00 00    	je     ffffffff8000a4aa <init_vmm+0x75a>
ffffffff8000a0e8:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000a0ec:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
ffffffff8000a0f3:	48 c7 85 e8 fe ff ff 	movq   $0x1000,-0x118(%rbp)
ffffffff8000a0fa:	00 10 00 00 
ffffffff8000a0fe:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
ffffffff8000a105:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
ffffffff8000a10c:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
ffffffff8000a113:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000a117:	48 21 d1             	and    %rdx,%rcx
ffffffff8000a11a:	48 29 c8             	sub    %rcx,%rax
ffffffff8000a11d:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
ffffffff8000a124:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
ffffffff8000a12b:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000a12f:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000a133:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
ffffffff8000a13a:	48 c7 85 58 ff ff ff 	movq   $0x1000,-0xa8(%rbp)
ffffffff8000a141:	00 10 00 00 
ffffffff8000a145:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
ffffffff8000a14c:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
ffffffff8000a153:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000a157:	48 01 c8             	add    %rcx,%rax
ffffffff8000a15a:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
ffffffff8000a161:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000a165:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
ffffffff8000a169:	48 21 c8             	and    %rcx,%rax
ffffffff8000a16c:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
ffffffff8000a173:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
ffffffff8000a17a:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000a17e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%rbp)
ffffffff8000a185:	83 7d e0 01          	cmpl   $0x1,-0x20(%rbp)
ffffffff8000a189:	74 12                	je     ffffffff8000a19d <init_vmm+0x44d>
ffffffff8000a18b:	81 7d e0 00 10 00 00 	cmpl   $0x1000,-0x20(%rbp)
ffffffff8000a192:	74 09                	je     ffffffff8000a19d <init_vmm+0x44d>
ffffffff8000a194:	81 7d e0 02 10 00 00 	cmpl   $0x1002,-0x20(%rbp)
ffffffff8000a19b:	75 07                	jne    ffffffff8000a1a4 <init_vmm+0x454>
ffffffff8000a19d:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%rbp)
ffffffff8000a1a4:	48 83 7d a0 00       	cmpq   $0x0,-0x60(%rbp)
ffffffff8000a1a9:	0f 84 31 01 00 00    	je     ffffffff8000a2e0 <init_vmm+0x590>
ffffffff8000a1af:	31 c0                	xor    %eax,%eax
ffffffff8000a1b1:	e8 3a f7 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a1b6:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000a1ba:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000a1bd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000a1c1:	48 8b 09             	mov    (%rcx),%rcx
ffffffff8000a1c4:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000a1c8:	48 03 4e 08          	add    0x8(%rsi),%rcx
ffffffff8000a1cc:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8000a1d0:	48 89 b5 60 ff ff ff 	mov    %rsi,-0xa0(%rbp)
ffffffff8000a1d7:	48 be 00 00 00 00 80 	movabs $0x8000000000,%rsi
ffffffff8000a1de:	00 00 00 
ffffffff8000a1e1:	48 39 b5 60 ff ff ff 	cmp    %rsi,-0xa0(%rbp)
ffffffff8000a1e8:	76 2e                	jbe    ffffffff8000a218 <init_vmm+0x4c8>
ffffffff8000a1ea:	31 c0                	xor    %eax,%eax
ffffffff8000a1ec:	e8 ff f6 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a1f1:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000a1f8:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a1fb:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a202:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a209:	41 b8 6b 00 00 00    	mov    $0x6b,%r8d
ffffffff8000a20f:	31 c0                	xor    %eax,%eax
ffffffff8000a211:	e8 2a 77 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a216:	0f 0b                	ud2    
ffffffff8000a218:	eb 00                	jmp    ffffffff8000a21a <init_vmm+0x4ca>
ffffffff8000a21a:	48 be 00 00 00 00 00 	movabs $0xffff800000000000,%rsi
ffffffff8000a221:	80 ff ff 
ffffffff8000a224:	48 03 b5 60 ff ff ff 	add    -0xa0(%rbp),%rsi
ffffffff8000a22b:	48 89 b5 08 ff ff ff 	mov    %rsi,-0xf8(%rbp)
ffffffff8000a232:	4c 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%r8
ffffffff8000a239:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8000a23d:	48 89 b5 68 ff ff ff 	mov    %rsi,-0x98(%rbp)
ffffffff8000a244:	48 be 00 00 00 00 80 	movabs $0x8000000000,%rsi
ffffffff8000a24b:	00 00 00 
ffffffff8000a24e:	48 39 b5 68 ff ff ff 	cmp    %rsi,-0x98(%rbp)
ffffffff8000a255:	76 2e                	jbe    ffffffff8000a285 <init_vmm+0x535>
ffffffff8000a257:	31 c0                	xor    %eax,%eax
ffffffff8000a259:	e8 92 f6 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a25e:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000a265:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a268:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a26f:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a276:	41 b8 6b 00 00 00    	mov    $0x6b,%r8d
ffffffff8000a27c:	31 c0                	xor    %eax,%eax
ffffffff8000a27e:	e8 bd 76 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a283:	0f 0b                	ud2    
ffffffff8000a285:	eb 00                	jmp    ffffffff8000a287 <init_vmm+0x537>
ffffffff8000a287:	48 be 00 00 00 00 00 	movabs $0xffff800000000000,%rsi
ffffffff8000a28e:	80 ff ff 
ffffffff8000a291:	48 03 b5 68 ff ff ff 	add    -0x98(%rbp),%rsi
ffffffff8000a298:	48 89 b5 10 ff ff ff 	mov    %rsi,-0xf0(%rbp)
ffffffff8000a29f:	4c 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%r9
ffffffff8000a2a6:	8b 75 bc             	mov    -0x44(%rbp),%esi
ffffffff8000a2a9:	83 e6 01             	and    $0x1,%esi
ffffffff8000a2ac:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff8000a2b1:	41 ba 77 00 00 00    	mov    $0x77,%r10d
ffffffff8000a2b7:	83 fe 00             	cmp    $0x0,%esi
ffffffff8000a2ba:	41 0f 45 fa          	cmovne %r10d,%edi
ffffffff8000a2be:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
ffffffff8000a2c2:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
ffffffff8000a2c7:	89 3c 24             	mov    %edi,(%rsp)
ffffffff8000a2ca:	48 c7 c7 bc 93 01 80 	mov    $0xffffffff800193bc,%rdi
ffffffff8000a2d1:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a2d4:	31 c0                	xor    %eax,%eax
ffffffff8000a2d6:	e8 65 76 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a2db:	e9 0e 01 00 00       	jmp    ffffffff8000a3ee <init_vmm+0x69e>
ffffffff8000a2e0:	31 c0                	xor    %eax,%eax
ffffffff8000a2e2:	e8 09 f6 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a2e7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000a2eb:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000a2ee:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000a2f2:	48 8b 09             	mov    (%rcx),%rcx
ffffffff8000a2f5:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000a2f9:	48 03 4e 08          	add    0x8(%rsi),%rcx
ffffffff8000a2fd:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8000a301:	48 89 b5 70 ff ff ff 	mov    %rsi,-0x90(%rbp)
ffffffff8000a308:	48 be 00 00 00 00 80 	movabs $0x8000000000,%rsi
ffffffff8000a30f:	00 00 00 
ffffffff8000a312:	48 39 b5 70 ff ff ff 	cmp    %rsi,-0x90(%rbp)
ffffffff8000a319:	76 2e                	jbe    ffffffff8000a349 <init_vmm+0x5f9>
ffffffff8000a31b:	31 c0                	xor    %eax,%eax
ffffffff8000a31d:	e8 ce f5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a322:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000a329:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a32c:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a333:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a33a:	41 b8 70 00 00 00    	mov    $0x70,%r8d
ffffffff8000a340:	31 c0                	xor    %eax,%eax
ffffffff8000a342:	e8 f9 75 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a347:	0f 0b                	ud2    
ffffffff8000a349:	eb 00                	jmp    ffffffff8000a34b <init_vmm+0x5fb>
ffffffff8000a34b:	48 be 00 00 00 00 00 	movabs $0xffff800000000000,%rsi
ffffffff8000a352:	80 ff ff 
ffffffff8000a355:	48 03 b5 70 ff ff ff 	add    -0x90(%rbp),%rsi
ffffffff8000a35c:	48 89 b5 18 ff ff ff 	mov    %rsi,-0xe8(%rbp)
ffffffff8000a363:	4c 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%r8
ffffffff8000a36a:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8000a36e:	48 89 b5 78 ff ff ff 	mov    %rsi,-0x88(%rbp)
ffffffff8000a375:	48 be 00 00 00 00 80 	movabs $0x8000000000,%rsi
ffffffff8000a37c:	00 00 00 
ffffffff8000a37f:	48 39 b5 78 ff ff ff 	cmp    %rsi,-0x88(%rbp)
ffffffff8000a386:	76 2e                	jbe    ffffffff8000a3b6 <init_vmm+0x666>
ffffffff8000a388:	31 c0                	xor    %eax,%eax
ffffffff8000a38a:	e8 61 f5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a38f:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000a396:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a399:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a3a0:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a3a7:	41 b8 70 00 00 00    	mov    $0x70,%r8d
ffffffff8000a3ad:	31 c0                	xor    %eax,%eax
ffffffff8000a3af:	e8 8c 75 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a3b4:	0f 0b                	ud2    
ffffffff8000a3b6:	eb 00                	jmp    ffffffff8000a3b8 <init_vmm+0x668>
ffffffff8000a3b8:	48 be 00 00 00 00 00 	movabs $0xffff800000000000,%rsi
ffffffff8000a3bf:	80 ff ff 
ffffffff8000a3c2:	48 03 b5 78 ff ff ff 	add    -0x88(%rbp),%rsi
ffffffff8000a3c9:	48 89 b5 20 ff ff ff 	mov    %rsi,-0xe0(%rbp)
ffffffff8000a3d0:	4c 8b 8d 20 ff ff ff 	mov    -0xe0(%rbp),%r9
ffffffff8000a3d7:	8b 75 e0             	mov    -0x20(%rbp),%esi
ffffffff8000a3da:	89 34 24             	mov    %esi,(%rsp)
ffffffff8000a3dd:	48 c7 c7 e6 95 01 80 	mov    $0xffffffff800195e6,%rdi
ffffffff8000a3e4:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a3e7:	31 c0                	xor    %eax,%eax
ffffffff8000a3e9:	e8 52 75 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a3ee:	eb 00                	jmp    ffffffff8000a3f0 <init_vmm+0x6a0>
ffffffff8000a3f0:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000a3f4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000a3f8:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff8000a3fc:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff8000a403:	00 00 00 
ffffffff8000a406:	48 39 45 80          	cmp    %rax,-0x80(%rbp)
ffffffff8000a40a:	76 2e                	jbe    ffffffff8000a43a <init_vmm+0x6ea>
ffffffff8000a40c:	31 c0                	xor    %eax,%eax
ffffffff8000a40e:	e8 dd f4 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a413:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000a41a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a41d:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a424:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a42b:	41 b8 73 00 00 00    	mov    $0x73,%r8d
ffffffff8000a431:	31 c0                	xor    %eax,%eax
ffffffff8000a433:	e8 08 75 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a438:	0f 0b                	ud2    
ffffffff8000a43a:	eb 00                	jmp    ffffffff8000a43c <init_vmm+0x6ec>
ffffffff8000a43c:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000a443:	80 ff ff 
ffffffff8000a446:	48 03 45 80          	add    -0x80(%rbp),%rax
ffffffff8000a44a:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
ffffffff8000a451:	48 8b b5 28 ff ff ff 	mov    -0xd8(%rbp),%rsi
ffffffff8000a458:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8000a45c:	48 2b 55 c0          	sub    -0x40(%rbp),%rdx
ffffffff8000a460:	48 c1 ea 0c          	shr    $0xc,%rdx
ffffffff8000a464:	8b 4d bc             	mov    -0x44(%rbp),%ecx
ffffffff8000a467:	e8 b4 04 00 00       	call   ffffffff8000a920 <vmm_map>
ffffffff8000a46c:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000a46f:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000a473:	74 31                	je     ffffffff8000a4a6 <init_vmm+0x756>
ffffffff8000a475:	31 c0                	xor    %eax,%eax
ffffffff8000a477:	e8 74 f4 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a47c:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000a483:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a486:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a48d:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a494:	41 b8 73 00 00 00    	mov    $0x73,%r8d
ffffffff8000a49a:	31 c0                	xor    %eax,%eax
ffffffff8000a49c:	e8 9f 74 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a4a1:	e9 a9 03 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a4a6:	eb 00                	jmp    ffffffff8000a4a8 <init_vmm+0x758>
ffffffff8000a4a8:	eb 32                	jmp    ffffffff8000a4dc <init_vmm+0x78c>
ffffffff8000a4aa:	31 c0                	xor    %eax,%eax
ffffffff8000a4ac:	e8 3f f4 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a4b1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000a4b5:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000a4b8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000a4bc:	48 8b 09             	mov    (%rcx),%rcx
ffffffff8000a4bf:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000a4c3:	48 03 4e 08          	add    0x8(%rsi),%rcx
ffffffff8000a4c7:	4c 8b 45 a0          	mov    -0x60(%rbp),%r8
ffffffff8000a4cb:	48 c7 c7 fe 90 01 80 	mov    $0xffffffff800190fe,%rdi
ffffffff8000a4d2:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a4d5:	31 c0                	xor    %eax,%eax
ffffffff8000a4d7:	e8 64 74 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a4dc:	eb 00                	jmp    ffffffff8000a4de <init_vmm+0x78e>
ffffffff8000a4de:	8b 45 cc             	mov    -0x34(%rbp),%eax
ffffffff8000a4e1:	83 c0 01             	add    $0x1,%eax
ffffffff8000a4e4:	89 45 cc             	mov    %eax,-0x34(%rbp)
ffffffff8000a4e7:	e9 8a fb ff ff       	jmp    ffffffff8000a076 <init_vmm+0x326>
ffffffff8000a4ec:	31 c0                	xor    %eax,%eax
ffffffff8000a4ee:	e8 fd f3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a4f3:	48 c7 c7 ff 96 01 80 	mov    $0xffffffff800196ff,%rdi
ffffffff8000a4fa:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a4fd:	31 c0                	xor    %eax,%eax
ffffffff8000a4ff:	e8 3c 74 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a504:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%rbp)
ffffffff8000a50b:	48 63 45 d0          	movslq -0x30(%rbp),%rax
ffffffff8000a50f:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
ffffffff8000a513:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000a517:	0f 83 eb 02 00 00    	jae    ffffffff8000a808 <init_vmm+0xab8>
ffffffff8000a51d:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8000a521:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000a525:	48 63 4d d0          	movslq -0x30(%rbp),%rcx
ffffffff8000a529:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000a52d:	48 01 c8             	add    %rcx,%rax
ffffffff8000a530:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000a534:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a538:	48 8b 00             	mov    (%rax),%rax
ffffffff8000a53b:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
ffffffff8000a53f:	48 2b 41 18          	sub    0x18(%rcx),%rax
ffffffff8000a543:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
ffffffff8000a54a:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8000a54e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000a552:	48 03 85 30 ff ff ff 	add    -0xd0(%rbp),%rax
ffffffff8000a559:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000a55d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000a561:	48 25 ff 0f 00 00    	and    $0xfff,%rax
ffffffff8000a567:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a56b:	74 57                	je     ffffffff8000a5c4 <init_vmm+0x874>
ffffffff8000a56d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000a574:	31 c0                	xor    %eax,%eax
ffffffff8000a576:	e8 75 f3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a57b:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8000a57f:	48 c7 c7 8f 97 01 80 	mov    $0xffffffff8001978f,%rdi
ffffffff8000a586:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a589:	31 c0                	xor    %eax,%eax
ffffffff8000a58b:	e8 b0 73 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a590:	31 c0                	xor    %eax,%eax
ffffffff8000a592:	e8 59 f3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a597:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000a59a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000a5a1:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a5a4:	48 c7 c1 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rcx
ffffffff8000a5ab:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000a5b2:	41 b9 85 00 00 00    	mov    $0x85,%r9d
ffffffff8000a5b8:	31 c0                	xor    %eax,%eax
ffffffff8000a5ba:	e8 81 73 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a5bf:	e9 8b 02 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a5c4:	eb 00                	jmp    ffffffff8000a5c6 <init_vmm+0x876>
ffffffff8000a5c6:	eb 00                	jmp    ffffffff8000a5c8 <init_vmm+0x878>
ffffffff8000a5c8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a5cc:	48 8b 00             	mov    (%rax),%rax
ffffffff8000a5cf:	48 25 ff 0f 00 00    	and    $0xfff,%rax
ffffffff8000a5d5:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a5d9:	74 5a                	je     ffffffff8000a635 <init_vmm+0x8e5>
ffffffff8000a5db:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000a5e2:	31 c0                	xor    %eax,%eax
ffffffff8000a5e4:	e8 07 f3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a5e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000a5ed:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000a5f0:	48 c7 c7 f1 8f 01 80 	mov    $0xffffffff80018ff1,%rdi
ffffffff8000a5f7:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a5fa:	31 c0                	xor    %eax,%eax
ffffffff8000a5fc:	e8 3f 73 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a601:	31 c0                	xor    %eax,%eax
ffffffff8000a603:	e8 e8 f2 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a608:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000a60b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000a612:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a615:	48 c7 c1 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rcx
ffffffff8000a61c:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000a623:	41 b9 86 00 00 00    	mov    $0x86,%r9d
ffffffff8000a629:	31 c0                	xor    %eax,%eax
ffffffff8000a62b:	e8 10 73 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a630:	e9 1a 02 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a635:	eb 00                	jmp    ffffffff8000a637 <init_vmm+0x8e7>
ffffffff8000a637:	eb 00                	jmp    ffffffff8000a639 <init_vmm+0x8e9>
ffffffff8000a639:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a63d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000a641:	48 25 ff 0f 00 00    	and    $0xfff,%rax
ffffffff8000a647:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a64b:	74 5b                	je     ffffffff8000a6a8 <init_vmm+0x958>
ffffffff8000a64d:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000a654:	31 c0                	xor    %eax,%eax
ffffffff8000a656:	e8 95 f2 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a65b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000a65f:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8000a663:	48 c7 c7 d8 8d 01 80 	mov    $0xffffffff80018dd8,%rdi
ffffffff8000a66a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a66d:	31 c0                	xor    %eax,%eax
ffffffff8000a66f:	e8 cc 72 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a674:	31 c0                	xor    %eax,%eax
ffffffff8000a676:	e8 75 f2 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a67b:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000a67e:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000a685:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a688:	48 c7 c1 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rcx
ffffffff8000a68f:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000a696:	41 b9 87 00 00 00    	mov    $0x87,%r9d
ffffffff8000a69c:	31 c0                	xor    %eax,%eax
ffffffff8000a69e:	e8 9d 72 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a6a3:	e9 a7 01 00 00       	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a6a8:	eb 00                	jmp    ffffffff8000a6aa <init_vmm+0x95a>
ffffffff8000a6aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a6ae:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000a6b2:	48 83 e0 04          	and    $0x4,%rax
ffffffff8000a6b6:	b9 2d 00 00 00       	mov    $0x2d,%ecx
ffffffff8000a6bb:	ba 72 00 00 00       	mov    $0x72,%edx
ffffffff8000a6c0:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a6c4:	0f 45 ca             	cmovne %edx,%ecx
ffffffff8000a6c7:	88 4d e5             	mov    %cl,-0x1b(%rbp)
ffffffff8000a6ca:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a6ce:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000a6d2:	48 83 e0 02          	and    $0x2,%rax
ffffffff8000a6d6:	b9 2d 00 00 00       	mov    $0x2d,%ecx
ffffffff8000a6db:	ba 77 00 00 00       	mov    $0x77,%edx
ffffffff8000a6e0:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a6e4:	0f 45 ca             	cmovne %edx,%ecx
ffffffff8000a6e7:	88 4d e6             	mov    %cl,-0x1a(%rbp)
ffffffff8000a6ea:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a6ee:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000a6f2:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000a6f6:	b9 2d 00 00 00       	mov    $0x2d,%ecx
ffffffff8000a6fb:	ba 78 00 00 00       	mov    $0x78,%edx
ffffffff8000a700:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a704:	0f 45 ca             	cmovne %edx,%ecx
ffffffff8000a707:	88 4d e7             	mov    %cl,-0x19(%rbp)
ffffffff8000a70a:	31 c0                	xor    %eax,%eax
ffffffff8000a70c:	e8 df f1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a711:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000a715:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000a718:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000a71c:	48 8b 09             	mov    (%rcx),%rcx
ffffffff8000a71f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000a723:	48 03 4e 08          	add    0x8(%rsi),%rcx
ffffffff8000a727:	4c 8b 45 b0          	mov    -0x50(%rbp),%r8
ffffffff8000a72b:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff8000a72f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000a733:	4c 03 4e 08          	add    0x8(%rsi),%r9
ffffffff8000a737:	44 0f be 55 e5       	movsbl -0x1b(%rbp),%r10d
ffffffff8000a73c:	0f be 7d e6          	movsbl -0x1a(%rbp),%edi
ffffffff8000a740:	0f be 75 e7          	movsbl -0x19(%rbp),%esi
ffffffff8000a744:	89 74 24 10          	mov    %esi,0x10(%rsp)
ffffffff8000a748:	89 7c 24 08          	mov    %edi,0x8(%rsp)
ffffffff8000a74c:	44 89 14 24          	mov    %r10d,(%rsp)
ffffffff8000a750:	48 c7 c7 fb 89 01 80 	mov    $0xffffffff800189fb,%rdi
ffffffff8000a757:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a75a:	31 c0                	xor    %eax,%eax
ffffffff8000a75c:	e8 df 71 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a761:	c7 45 d4 04 00 00 00 	movl   $0x4,-0x2c(%rbp)
ffffffff8000a768:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a76c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000a770:	48 83 e0 02          	and    $0x2,%rax
ffffffff8000a774:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a778:	74 09                	je     ffffffff8000a783 <init_vmm+0xa33>
ffffffff8000a77a:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff8000a77d:	83 c8 01             	or     $0x1,%eax
ffffffff8000a780:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff8000a783:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a787:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000a78b:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000a78f:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000a793:	74 09                	je     ffffffff8000a79e <init_vmm+0xa4e>
ffffffff8000a795:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff8000a798:	83 c8 02             	or     $0x2,%eax
ffffffff8000a79b:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff8000a79e:	eb 00                	jmp    ffffffff8000a7a0 <init_vmm+0xa50>
ffffffff8000a7a0:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000a7a4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a7a8:	48 8b 30             	mov    (%rax),%rsi
ffffffff8000a7ab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a7af:	48 8b 50 08          	mov    0x8(%rax),%rdx
ffffffff8000a7b3:	48 c1 ea 0c          	shr    $0xc,%rdx
ffffffff8000a7b7:	8b 4d d4             	mov    -0x2c(%rbp),%ecx
ffffffff8000a7ba:	e8 61 01 00 00       	call   ffffffff8000a920 <vmm_map>
ffffffff8000a7bf:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000a7c2:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000a7c6:	74 2e                	je     ffffffff8000a7f6 <init_vmm+0xaa6>
ffffffff8000a7c8:	31 c0                	xor    %eax,%eax
ffffffff8000a7ca:	e8 21 f1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a7cf:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000a7d6:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a7d9:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a7e0:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a7e7:	41 b8 96 00 00 00    	mov    $0x96,%r8d
ffffffff8000a7ed:	31 c0                	xor    %eax,%eax
ffffffff8000a7ef:	e8 4c 71 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a7f4:	eb 59                	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a7f6:	eb 00                	jmp    ffffffff8000a7f8 <init_vmm+0xaa8>
ffffffff8000a7f8:	eb 00                	jmp    ffffffff8000a7fa <init_vmm+0xaaa>
ffffffff8000a7fa:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffff8000a7fd:	83 c0 01             	add    $0x1,%eax
ffffffff8000a800:	89 45 d0             	mov    %eax,-0x30(%rbp)
ffffffff8000a803:	e9 03 fd ff ff       	jmp    ffffffff8000a50b <init_vmm+0x7bb>
ffffffff8000a808:	eb 00                	jmp    ffffffff8000a80a <init_vmm+0xaba>
ffffffff8000a80a:	31 c0                	xor    %eax,%eax
ffffffff8000a80c:	e8 1f f1 ff ff       	call   ffffffff80009930 <init_apic>
ffffffff8000a811:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000a814:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000a818:	74 2e                	je     ffffffff8000a848 <init_vmm+0xaf8>
ffffffff8000a81a:	31 c0                	xor    %eax,%eax
ffffffff8000a81c:	e8 cf f0 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a821:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000a828:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a82b:	48 c7 c2 6a 8d 01 80 	mov    $0xffffffff80018d6a,%rdx
ffffffff8000a832:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000a839:	41 b8 9b 00 00 00    	mov    $0x9b,%r8d
ffffffff8000a83f:	31 c0                	xor    %eax,%eax
ffffffff8000a841:	e8 fa 70 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000a846:	eb 07                	jmp    ffffffff8000a84f <init_vmm+0xaff>
ffffffff8000a848:	eb 00                	jmp    ffffffff8000a84a <init_vmm+0xafa>
ffffffff8000a84a:	e8 11 04 00 00       	call   ffffffff8000ac60 <init_vmm_per_cpu>
ffffffff8000a84f:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000a852:	48 81 c4 60 01 00 00 	add    $0x160,%rsp
ffffffff8000a859:	5d                   	pop    %rbp
ffffffff8000a85a:	c3                   	ret    
ffffffff8000a85b:	cc                   	int3   
ffffffff8000a85c:	cc                   	int3   
ffffffff8000a85d:	cc                   	int3   
ffffffff8000a85e:	cc                   	int3   
ffffffff8000a85f:	cc                   	int3   

ffffffff8000a860 <get_memmap_type_name>:
ffffffff8000a860:	55                   	push   %rbp
ffffffff8000a861:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000a864:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000a868:	89 7d f4             	mov    %edi,-0xc(%rbp)
ffffffff8000a86b:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000a86e:	89 c1                	mov    %eax,%ecx
ffffffff8000a870:	83 e9 01             	sub    $0x1,%ecx
ffffffff8000a873:	74 47                	je     ffffffff8000a8bc <get_memmap_type_name+0x5c>
ffffffff8000a875:	eb 00                	jmp    ffffffff8000a877 <get_memmap_type_name+0x17>
ffffffff8000a877:	89 c1                	mov    %eax,%ecx
ffffffff8000a879:	83 e9 02             	sub    $0x2,%ecx
ffffffff8000a87c:	74 48                	je     ffffffff8000a8c6 <get_memmap_type_name+0x66>
ffffffff8000a87e:	eb 00                	jmp    ffffffff8000a880 <get_memmap_type_name+0x20>
ffffffff8000a880:	89 c1                	mov    %eax,%ecx
ffffffff8000a882:	83 e9 03             	sub    $0x3,%ecx
ffffffff8000a885:	74 49                	je     ffffffff8000a8d0 <get_memmap_type_name+0x70>
ffffffff8000a887:	eb 00                	jmp    ffffffff8000a889 <get_memmap_type_name+0x29>
ffffffff8000a889:	89 c1                	mov    %eax,%ecx
ffffffff8000a88b:	83 e9 04             	sub    $0x4,%ecx
ffffffff8000a88e:	74 4a                	je     ffffffff8000a8da <get_memmap_type_name+0x7a>
ffffffff8000a890:	eb 00                	jmp    ffffffff8000a892 <get_memmap_type_name+0x32>
ffffffff8000a892:	89 c1                	mov    %eax,%ecx
ffffffff8000a894:	83 e9 05             	sub    $0x5,%ecx
ffffffff8000a897:	74 4b                	je     ffffffff8000a8e4 <get_memmap_type_name+0x84>
ffffffff8000a899:	eb 00                	jmp    ffffffff8000a89b <get_memmap_type_name+0x3b>
ffffffff8000a89b:	89 c1                	mov    %eax,%ecx
ffffffff8000a89d:	81 e9 00 10 00 00    	sub    $0x1000,%ecx
ffffffff8000a8a3:	74 49                	je     ffffffff8000a8ee <get_memmap_type_name+0x8e>
ffffffff8000a8a5:	eb 00                	jmp    ffffffff8000a8a7 <get_memmap_type_name+0x47>
ffffffff8000a8a7:	89 c1                	mov    %eax,%ecx
ffffffff8000a8a9:	81 e9 01 10 00 00    	sub    $0x1001,%ecx
ffffffff8000a8af:	74 47                	je     ffffffff8000a8f8 <get_memmap_type_name+0x98>
ffffffff8000a8b1:	eb 00                	jmp    ffffffff8000a8b3 <get_memmap_type_name+0x53>
ffffffff8000a8b3:	2d 02 10 00 00       	sub    $0x1002,%eax
ffffffff8000a8b8:	74 48                	je     ffffffff8000a902 <get_memmap_type_name+0xa2>
ffffffff8000a8ba:	eb 50                	jmp    ffffffff8000a90c <get_memmap_type_name+0xac>
ffffffff8000a8bc:	48 c7 45 f8 ff 9d 01 	movq   $0xffffffff80019dff,-0x8(%rbp)
ffffffff8000a8c3:	80 
ffffffff8000a8c4:	eb 4e                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a8c6:	48 c7 45 f8 4f 8f 01 	movq   $0xffffffff80018f4f,-0x8(%rbp)
ffffffff8000a8cd:	80 
ffffffff8000a8ce:	eb 44                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a8d0:	48 c7 45 f8 6e 9e 01 	movq   $0xffffffff80019e6e,-0x8(%rbp)
ffffffff8000a8d7:	80 
ffffffff8000a8d8:	eb 3a                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a8da:	48 c7 45 f8 ab 8c 01 	movq   $0xffffffff80018cab,-0x8(%rbp)
ffffffff8000a8e1:	80 
ffffffff8000a8e2:	eb 30                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a8e4:	48 c7 45 f8 80 9f 01 	movq   $0xffffffff80019f80,-0x8(%rbp)
ffffffff8000a8eb:	80 
ffffffff8000a8ec:	eb 26                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a8ee:	48 c7 45 f8 98 9a 01 	movq   $0xffffffff80019a98,-0x8(%rbp)
ffffffff8000a8f5:	80 
ffffffff8000a8f6:	eb 1c                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a8f8:	48 c7 45 f8 08 9c 01 	movq   $0xffffffff80019c08,-0x8(%rbp)
ffffffff8000a8ff:	80 
ffffffff8000a900:	eb 12                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a902:	48 c7 45 f8 1e 97 01 	movq   $0xffffffff8001971e,-0x8(%rbp)
ffffffff8000a909:	80 
ffffffff8000a90a:	eb 08                	jmp    ffffffff8000a914 <get_memmap_type_name+0xb4>
ffffffff8000a90c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000a913:	00 
ffffffff8000a914:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000a918:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000a91c:	5d                   	pop    %rbp
ffffffff8000a91d:	c3                   	ret    
ffffffff8000a91e:	cc                   	int3   
ffffffff8000a91f:	cc                   	int3   

ffffffff8000a920 <vmm_map>:
ffffffff8000a920:	55                   	push   %rbp
ffffffff8000a921:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000a924:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8000a928:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000a92c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8000a930:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8000a934:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff8000a937:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff8000a93e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000a942:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000a946:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a94a:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000a94e:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8000a952:	48 c1 e2 0c          	shl    $0xc,%rdx
ffffffff8000a956:	48 01 d1             	add    %rdx,%rcx
ffffffff8000a959:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000a95c:	0f 83 e6 02 00 00    	jae    ffffffff8000ac48 <vmm_map+0x328>
ffffffff8000a962:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a966:	48 c1 e8 27          	shr    $0x27,%rax
ffffffff8000a96a:	48 25 ff 01 00 00    	and    $0x1ff,%rax
ffffffff8000a970:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000a974:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a978:	48 c1 e8 1e          	shr    $0x1e,%rax
ffffffff8000a97c:	48 25 ff ff 03 00    	and    $0x3ffff,%rax
ffffffff8000a982:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000a986:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a98a:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8000a98e:	48 25 ff ff ff 07    	and    $0x7ffffff,%rax
ffffffff8000a994:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000a998:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000a99c:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff8000a9a0:	48 b9 ff ff ff ff 0f 	movabs $0xfffffffff,%rcx
ffffffff8000a9a7:	00 00 00 
ffffffff8000a9aa:	48 21 c8             	and    %rcx,%rax
ffffffff8000a9ad:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000a9b1:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8000a9b5:	48 bf 00 e0 df bf 7f 	movabs $0xffffff7fbfdfe000,%rdi
ffffffff8000a9bc:	ff ff ff 
ffffffff8000a9bf:	48 be 00 00 c0 bf 7f 	movabs $0xffffff7fbfc00000,%rsi
ffffffff8000a9c6:	ff ff ff 
ffffffff8000a9c9:	e8 12 03 00 00       	call   ffffffff8000ace0 <vmm_setup_level>
ffffffff8000a9ce:	a8 01                	test   $0x1,%al
ffffffff8000a9d0:	75 3b                	jne    ffffffff8000aa0d <vmm_map+0xed>
ffffffff8000a9d2:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%rbp)
ffffffff8000a9d9:	31 c0                	xor    %eax,%eax
ffffffff8000a9db:	e8 10 ef ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000a9e0:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff8000a9e3:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000a9ea:	48 89 c6             	mov    %rax,%rsi
ffffffff8000a9ed:	48 c7 c1 a5 9d 01 80 	mov    $0xffffffff80019da5,%rcx
ffffffff8000a9f4:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000a9fb:	41 b9 0f 01 00 00    	mov    $0x10f,%r9d
ffffffff8000aa01:	31 c0                	xor    %eax,%eax
ffffffff8000aa03:	e8 38 6f 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000aa08:	e9 3d 02 00 00       	jmp    ffffffff8000ac4a <vmm_map+0x32a>
ffffffff8000aa0d:	eb 00                	jmp    ffffffff8000aa0f <vmm_map+0xef>
ffffffff8000aa0f:	eb 00                	jmp    ffffffff8000aa11 <vmm_map+0xf1>
ffffffff8000aa11:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8000aa15:	48 bf 00 00 c0 bf 7f 	movabs $0xffffff7fbfc00000,%rdi
ffffffff8000aa1c:	ff ff ff 
ffffffff8000aa1f:	48 be 00 00 00 80 7f 	movabs $0xffffff7f80000000,%rsi
ffffffff8000aa26:	ff ff ff 
ffffffff8000aa29:	e8 b2 02 00 00       	call   ffffffff8000ace0 <vmm_setup_level>
ffffffff8000aa2e:	a8 01                	test   $0x1,%al
ffffffff8000aa30:	75 3b                	jne    ffffffff8000aa6d <vmm_map+0x14d>
ffffffff8000aa32:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%rbp)
ffffffff8000aa39:	31 c0                	xor    %eax,%eax
ffffffff8000aa3b:	e8 b0 ee ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000aa40:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff8000aa43:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000aa4a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000aa4d:	48 c7 c1 a5 9d 01 80 	mov    $0xffffffff80019da5,%rcx
ffffffff8000aa54:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000aa5b:	41 b9 10 01 00 00    	mov    $0x110,%r9d
ffffffff8000aa61:	31 c0                	xor    %eax,%eax
ffffffff8000aa63:	e8 d8 6e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000aa68:	e9 dd 01 00 00       	jmp    ffffffff8000ac4a <vmm_map+0x32a>
ffffffff8000aa6d:	eb 00                	jmp    ffffffff8000aa6f <vmm_map+0x14f>
ffffffff8000aa6f:	eb 00                	jmp    ffffffff8000aa71 <vmm_map+0x151>
ffffffff8000aa71:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8000aa75:	48 bf 00 00 00 80 7f 	movabs $0xffffff7f80000000,%rdi
ffffffff8000aa7c:	ff ff ff 
ffffffff8000aa7f:	48 be 00 00 00 00 00 	movabs $0xffffff0000000000,%rsi
ffffffff8000aa86:	ff ff ff 
ffffffff8000aa89:	e8 52 02 00 00       	call   ffffffff8000ace0 <vmm_setup_level>
ffffffff8000aa8e:	a8 01                	test   $0x1,%al
ffffffff8000aa90:	75 3b                	jne    ffffffff8000aacd <vmm_map+0x1ad>
ffffffff8000aa92:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%rbp)
ffffffff8000aa99:	31 c0                	xor    %eax,%eax
ffffffff8000aa9b:	e8 50 ee ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000aaa0:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff8000aaa3:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000aaaa:	48 89 c6             	mov    %rax,%rsi
ffffffff8000aaad:	48 c7 c1 a5 9d 01 80 	mov    $0xffffffff80019da5,%rcx
ffffffff8000aab4:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000aabb:	41 b9 11 01 00 00    	mov    $0x111,%r9d
ffffffff8000aac1:	31 c0                	xor    %eax,%eax
ffffffff8000aac3:	e8 78 6e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000aac8:	e9 7d 01 00 00       	jmp    ffffffff8000ac4a <vmm_map+0x32a>
ffffffff8000aacd:	eb 00                	jmp    ffffffff8000aacf <vmm_map+0x1af>
ffffffff8000aacf:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000aad3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000aad7:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffff8000aadb:	48 83 c9 01          	or     $0x1,%rcx
ffffffff8000aadf:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000aae3:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff8000aae6:	83 e1 01             	and    $0x1,%ecx
ffffffff8000aae9:	31 d2                	xor    %edx,%edx
ffffffff8000aaeb:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000aaf0:	83 f9 00             	cmp    $0x0,%ecx
ffffffff8000aaf3:	0f 45 d6             	cmovne %esi,%edx
ffffffff8000aaf6:	89 d1                	mov    %edx,%ecx
ffffffff8000aaf8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000aafc:	48 83 e1 01          	and    $0x1,%rcx
ffffffff8000ab00:	48 c1 e1 01          	shl    $0x1,%rcx
ffffffff8000ab04:	48 83 e2 fd          	and    $0xfffffffffffffffd,%rdx
ffffffff8000ab08:	48 09 ca             	or     %rcx,%rdx
ffffffff8000ab0b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ab0f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab13:	48 83 e1 fb          	and    $0xfffffffffffffffb,%rcx
ffffffff8000ab17:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab1b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab1f:	48 83 e1 f7          	and    $0xfffffffffffffff7,%rcx
ffffffff8000ab23:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab27:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab2b:	48 83 e1 ef          	and    $0xffffffffffffffef,%rcx
ffffffff8000ab2f:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab33:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab37:	48 83 e1 df          	and    $0xffffffffffffffdf,%rcx
ffffffff8000ab3b:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab3f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab43:	48 83 e1 bf          	and    $0xffffffffffffffbf,%rcx
ffffffff8000ab47:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab4b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab4f:	48 81 e1 7f ff ff ff 	and    $0xffffffffffffff7f,%rcx
ffffffff8000ab56:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab5a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab5e:	48 81 e1 ff fe ff ff 	and    $0xfffffffffffffeff,%rcx
ffffffff8000ab65:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab69:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ab6d:	48 81 e1 ff f1 ff ff 	and    $0xfffffffffffff1ff,%rcx
ffffffff8000ab74:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000ab78:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000ab7c:	48 c1 e9 0c          	shr    $0xc,%rcx
ffffffff8000ab80:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ab84:	48 be ff ff ff ff ff 	movabs $0xffffffffff,%rsi
ffffffff8000ab8b:	00 00 00 
ffffffff8000ab8e:	48 21 f1             	and    %rsi,%rcx
ffffffff8000ab91:	48 c1 e1 0c          	shl    $0xc,%rcx
ffffffff8000ab95:	48 be ff 0f 00 00 00 	movabs $0xfff0000000000fff,%rsi
ffffffff8000ab9c:	00 f0 ff 
ffffffff8000ab9f:	48 21 f2             	and    %rsi,%rdx
ffffffff8000aba2:	48 09 ca             	or     %rcx,%rdx
ffffffff8000aba5:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000aba9:	48 b9 ff ff ff ff ff 	movabs $0x800fffffffffffff,%rcx
ffffffff8000abb0:	ff 0f 80 
ffffffff8000abb3:	48 23 4d f8          	and    -0x8(%rbp),%rcx
ffffffff8000abb7:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000abbb:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff8000abbe:	83 e1 02             	and    $0x2,%ecx
ffffffff8000abc1:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000abc6:	31 f6                	xor    %esi,%esi
ffffffff8000abc8:	83 f9 00             	cmp    $0x0,%ecx
ffffffff8000abcb:	0f 45 d6             	cmovne %esi,%edx
ffffffff8000abce:	89 d1                	mov    %edx,%ecx
ffffffff8000abd0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000abd4:	48 83 e1 01          	and    $0x1,%rcx
ffffffff8000abd8:	48 c1 e1 3f          	shl    $0x3f,%rcx
ffffffff8000abdc:	48 be ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rsi
ffffffff8000abe3:	ff ff 7f 
ffffffff8000abe6:	48 21 f2             	and    %rsi,%rdx
ffffffff8000abe9:	48 09 ca             	or     %rcx,%rdx
ffffffff8000abec:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000abf0:	48 b9 00 00 00 00 00 	movabs $0xffffff0000000000,%rcx
ffffffff8000abf7:	ff ff ff 
ffffffff8000abfa:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000abfe:	48 89 14 c1          	mov    %rdx,(%rcx,%rax,8)
ffffffff8000ac02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000ac06:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000ac0a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000ac0e:	0f 01 38             	invlpg (%rax)
ffffffff8000ac11:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff8000ac14:	83 e0 04             	and    $0x4,%eax
ffffffff8000ac17:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ac1a:	74 09                	je     ffffffff8000ac25 <vmm_map+0x305>
ffffffff8000ac1c:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000ac20:	e8 3b 02 00 00       	call   ffffffff8000ae60 <vmm_unmap_direct_page>
ffffffff8000ac25:	eb 00                	jmp    ffffffff8000ac27 <vmm_map+0x307>
ffffffff8000ac27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000ac2b:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff8000ac31:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000ac35:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000ac39:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff8000ac3f:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000ac43:	e9 fe fc ff ff       	jmp    ffffffff8000a946 <vmm_map+0x26>
ffffffff8000ac48:	eb 00                	jmp    ffffffff8000ac4a <vmm_map+0x32a>
ffffffff8000ac4a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000ac4d:	48 83 c4 60          	add    $0x60,%rsp
ffffffff8000ac51:	5d                   	pop    %rbp
ffffffff8000ac52:	c3                   	ret    
ffffffff8000ac53:	cc                   	int3   
ffffffff8000ac54:	cc                   	int3   
ffffffff8000ac55:	cc                   	int3   
ffffffff8000ac56:	cc                   	int3   
ffffffff8000ac57:	cc                   	int3   
ffffffff8000ac58:	cc                   	int3   
ffffffff8000ac59:	cc                   	int3   
ffffffff8000ac5a:	cc                   	int3   
ffffffff8000ac5b:	cc                   	int3   
ffffffff8000ac5c:	cc                   	int3   
ffffffff8000ac5d:	cc                   	int3   
ffffffff8000ac5e:	cc                   	int3   
ffffffff8000ac5f:	cc                   	int3   

ffffffff8000ac60 <init_vmm_per_cpu>:
ffffffff8000ac60:	55                   	push   %rbp
ffffffff8000ac61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ac64:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000ac68:	c7 45 ec 80 00 00 c0 	movl   $0xc0000080,-0x14(%rbp)
ffffffff8000ac6f:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff8000ac72:	0f 32                	rdmsr  
ffffffff8000ac74:	89 55 f4             	mov    %edx,-0xc(%rbp)
ffffffff8000ac77:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff8000ac7a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000ac7d:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff8000ac81:	8b 4d f0             	mov    -0x10(%rbp),%ecx
ffffffff8000ac84:	48 09 c8             	or     %rcx,%rax
ffffffff8000ac87:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ac8b:	8a 45 f9             	mov    -0x7(%rbp),%al
ffffffff8000ac8e:	0c 08                	or     $0x8,%al
ffffffff8000ac90:	88 45 f9             	mov    %al,-0x7(%rbp)
ffffffff8000ac93:	8a 45 f8             	mov    -0x8(%rbp),%al
ffffffff8000ac96:	24 fe                	and    $0xfe,%al
ffffffff8000ac98:	88 45 f8             	mov    %al,-0x8(%rbp)
ffffffff8000ac9b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ac9f:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff8000aca4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff8000aca8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000acac:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000acb0:	48 89 c2             	mov    %rax,%rdx
ffffffff8000acb3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8000acb7:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000acbb:	0f 30                	wrmsr  
ffffffff8000acbd:	48 8b 05 ec 08 01 00 	mov    0x108ec(%rip),%rax        # ffffffff8001b5b0 <m_pml4_pa>
ffffffff8000acc4:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000acc8:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff8000accf:	00 00 00 
ffffffff8000acd2:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff8000acd6:	0f 22 d8             	mov    %rax,%cr3
ffffffff8000acd9:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000acdd:	5d                   	pop    %rbp
ffffffff8000acde:	c3                   	ret    
ffffffff8000acdf:	cc                   	int3   

ffffffff8000ace0 <vmm_setup_level>:
ffffffff8000ace0:	55                   	push   %rbp
ffffffff8000ace1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ace4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8000ace8:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff8000acec:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
ffffffff8000acf0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000acf4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000acf8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000acfc:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff8000ad00:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000ad04:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000ad08:	0f 85 3b 01 00 00    	jne    ffffffff8000ae49 <vmm_setup_level+0x169>
ffffffff8000ad0e:	e8 7d 03 00 00       	call   ffffffff8000b090 <vmm_alloc_page>
ffffffff8000ad13:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000ad17:	48 83 7d d8 ff       	cmpq   $0xffffffffffffffff,-0x28(%rbp)
ffffffff8000ad1c:	75 09                	jne    ffffffff8000ad27 <vmm_setup_level+0x47>
ffffffff8000ad1e:	c6 45 f7 00          	movb   $0x0,-0x9(%rbp)
ffffffff8000ad22:	e9 26 01 00 00       	jmp    ffffffff8000ae4d <vmm_setup_level+0x16d>
ffffffff8000ad27:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000ad2b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000ad2f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad33:	48 83 e2 fe          	and    $0xfffffffffffffffe,%rdx
ffffffff8000ad37:	48 83 ca 01          	or     $0x1,%rdx
ffffffff8000ad3b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad3f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad43:	48 83 e2 fd          	and    $0xfffffffffffffffd,%rdx
ffffffff8000ad47:	48 83 ca 02          	or     $0x2,%rdx
ffffffff8000ad4b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad4f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad53:	48 83 e2 fb          	and    $0xfffffffffffffffb,%rdx
ffffffff8000ad57:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad5b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad5f:	48 83 e2 f7          	and    $0xfffffffffffffff7,%rdx
ffffffff8000ad63:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad67:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad6b:	48 83 e2 ef          	and    $0xffffffffffffffef,%rdx
ffffffff8000ad6f:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad73:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad77:	48 83 e2 df          	and    $0xffffffffffffffdf,%rdx
ffffffff8000ad7b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad7f:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad83:	48 83 e2 bf          	and    $0xffffffffffffffbf,%rdx
ffffffff8000ad87:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad8b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad8f:	48 81 e2 7f ff ff ff 	and    $0xffffffffffffff7f,%rdx
ffffffff8000ad96:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ad9a:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ad9e:	48 81 e2 ff fe ff ff 	and    $0xfffffffffffffeff,%rdx
ffffffff8000ada5:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ada9:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000adad:	48 81 e2 ff f1 ff ff 	and    $0xfffffffffffff1ff,%rdx
ffffffff8000adb4:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000adb8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8000adbc:	48 c1 ea 0c          	shr    $0xc,%rdx
ffffffff8000adc0:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000adc4:	48 bf ff ff ff ff ff 	movabs $0xffffffffff,%rdi
ffffffff8000adcb:	00 00 00 
ffffffff8000adce:	48 21 fa             	and    %rdi,%rdx
ffffffff8000add1:	48 c1 e2 0c          	shl    $0xc,%rdx
ffffffff8000add5:	48 bf ff 0f 00 00 00 	movabs $0xfff0000000000fff,%rdi
ffffffff8000addc:	00 f0 ff 
ffffffff8000addf:	48 21 fe             	and    %rdi,%rsi
ffffffff8000ade2:	48 09 d6             	or     %rdx,%rsi
ffffffff8000ade5:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000ade9:	48 ba ff ff ff ff ff 	movabs $0x800fffffffffffff,%rdx
ffffffff8000adf0:	ff 0f 80 
ffffffff8000adf3:	48 23 55 f8          	and    -0x8(%rbp),%rdx
ffffffff8000adf7:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000adfb:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff8000ae02:	ff ff 7f 
ffffffff8000ae05:	48 23 55 f8          	and    -0x8(%rbp),%rdx
ffffffff8000ae09:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ae0d:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ae11:	48 89 14 c8          	mov    %rdx,(%rax,%rcx,8)
ffffffff8000ae15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000ae19:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000ae1d:	48 c1 e1 0c          	shl    $0xc,%rcx
ffffffff8000ae21:	48 01 c8             	add    %rcx,%rax
ffffffff8000ae24:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ae28:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000ae2c:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000ae30:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000ae34:	0f 01 38             	invlpg (%rax)
ffffffff8000ae37:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000ae3b:	31 c0                	xor    %eax,%eax
ffffffff8000ae3d:	31 f6                	xor    %esi,%esi
ffffffff8000ae3f:	ba 00 10 00 00       	mov    $0x1000,%edx
ffffffff8000ae44:	e8 d7 4a 00 00       	call   ffffffff8000f920 <memset>
ffffffff8000ae49:	c6 45 f7 01          	movb   $0x1,-0x9(%rbp)
ffffffff8000ae4d:	8a 45 f7             	mov    -0x9(%rbp),%al
ffffffff8000ae50:	24 01                	and    $0x1,%al
ffffffff8000ae52:	0f b6 c0             	movzbl %al,%eax
ffffffff8000ae55:	48 83 c4 40          	add    $0x40,%rsp
ffffffff8000ae59:	5d                   	pop    %rbp
ffffffff8000ae5a:	c3                   	ret    
ffffffff8000ae5b:	cc                   	int3   
ffffffff8000ae5c:	cc                   	int3   
ffffffff8000ae5d:	cc                   	int3   
ffffffff8000ae5e:	cc                   	int3   
ffffffff8000ae5f:	cc                   	int3   

ffffffff8000ae60 <vmm_unmap_direct_page>:
ffffffff8000ae60:	55                   	push   %rbp
ffffffff8000ae61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ae64:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8000ae68:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8000ae6c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000ae70:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ae74:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff8000ae7b:	00 00 00 
ffffffff8000ae7e:	48 39 45 e0          	cmp    %rax,-0x20(%rbp)
ffffffff8000ae82:	76 2e                	jbe    ffffffff8000aeb2 <vmm_unmap_direct_page+0x52>
ffffffff8000ae84:	31 c0                	xor    %eax,%eax
ffffffff8000ae86:	e8 65 ea ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000ae8b:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000ae92:	48 89 c6             	mov    %rax,%rsi
ffffffff8000ae95:	48 c7 c2 9f 98 01 80 	mov    $0xffffffff8001989f,%rdx
ffffffff8000ae9c:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000aea3:	41 b8 be 00 00 00    	mov    $0xbe,%r8d
ffffffff8000aea9:	31 c0                	xor    %eax,%eax
ffffffff8000aeab:	e8 90 6a 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000aeb0:	0f 0b                	ud2    
ffffffff8000aeb2:	eb 00                	jmp    ffffffff8000aeb4 <vmm_unmap_direct_page+0x54>
ffffffff8000aeb4:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000aebb:	80 ff ff 
ffffffff8000aebe:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff8000aec2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000aec6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000aeca:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000aece:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000aed2:	48 c1 e8 27          	shr    $0x27,%rax
ffffffff8000aed6:	48 25 ff 01 00 00    	and    $0x1ff,%rax
ffffffff8000aedc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000aee0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000aee4:	48 c1 e8 1e          	shr    $0x1e,%rax
ffffffff8000aee8:	48 25 ff ff 03 00    	and    $0x3ffff,%rax
ffffffff8000aeee:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000aef2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000aef6:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff8000aefa:	48 25 ff ff ff 07    	and    $0x7ffffff,%rax
ffffffff8000af00:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000af04:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000af08:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff8000af0c:	48 b9 ff ff ff ff 0f 	movabs $0xfffffffff,%rcx
ffffffff8000af13:	00 00 00 
ffffffff8000af16:	48 21 c8             	and    %rcx,%rax
ffffffff8000af19:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000af1d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000af21:	48 b9 00 e0 df bf 7f 	movabs $0xffffff7fbfdfe000,%rcx
ffffffff8000af28:	ff ff ff 
ffffffff8000af2b:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
ffffffff8000af2f:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000af33:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000af37:	75 05                	jne    ffffffff8000af3e <vmm_unmap_direct_page+0xde>
ffffffff8000af39:	e9 3f 01 00 00       	jmp    ffffffff8000b07d <vmm_unmap_direct_page+0x21d>
ffffffff8000af3e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000af42:	48 b9 00 00 c0 bf 7f 	movabs $0xffffff7fbfc00000,%rcx
ffffffff8000af49:	ff ff ff 
ffffffff8000af4c:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
ffffffff8000af50:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000af54:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000af58:	75 05                	jne    ffffffff8000af5f <vmm_unmap_direct_page+0xff>
ffffffff8000af5a:	e9 1e 01 00 00       	jmp    ffffffff8000b07d <vmm_unmap_direct_page+0x21d>
ffffffff8000af5f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000af63:	48 b9 00 00 00 80 7f 	movabs $0xffffff7f80000000,%rcx
ffffffff8000af6a:	ff ff ff 
ffffffff8000af6d:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
ffffffff8000af71:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000af75:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000af79:	75 05                	jne    ffffffff8000af80 <vmm_unmap_direct_page+0x120>
ffffffff8000af7b:	e9 fd 00 00 00       	jmp    ffffffff8000b07d <vmm_unmap_direct_page+0x21d>
ffffffff8000af80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000af84:	48 b9 00 00 00 00 00 	movabs $0xffffff0000000000,%rcx
ffffffff8000af8b:	ff ff ff 
ffffffff8000af8e:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
ffffffff8000af92:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000af96:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000af9a:	75 05                	jne    ffffffff8000afa1 <vmm_unmap_direct_page+0x141>
ffffffff8000af9c:	e9 dc 00 00 00       	jmp    ffffffff8000b07d <vmm_unmap_direct_page+0x21d>
ffffffff8000afa1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000afa5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000afa9:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffff8000afad:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000afb1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000afb5:	48 83 e1 fd          	and    $0xfffffffffffffffd,%rcx
ffffffff8000afb9:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000afbd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000afc1:	48 83 e1 fb          	and    $0xfffffffffffffffb,%rcx
ffffffff8000afc5:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000afc9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000afcd:	48 83 e1 f7          	and    $0xfffffffffffffff7,%rcx
ffffffff8000afd1:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000afd5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000afd9:	48 83 e1 ef          	and    $0xffffffffffffffef,%rcx
ffffffff8000afdd:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000afe1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000afe5:	48 83 e1 df          	and    $0xffffffffffffffdf,%rcx
ffffffff8000afe9:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000afed:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000aff1:	48 83 e1 bf          	and    $0xffffffffffffffbf,%rcx
ffffffff8000aff5:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000aff9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000affd:	48 81 e1 7f ff ff ff 	and    $0xffffffffffffff7f,%rcx
ffffffff8000b004:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000b008:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000b00c:	48 81 e1 ff fe ff ff 	and    $0xfffffffffffffeff,%rcx
ffffffff8000b013:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000b017:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000b01b:	48 81 e1 ff f1 ff ff 	and    $0xfffffffffffff1ff,%rcx
ffffffff8000b022:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000b026:	48 b9 ff 0f 00 00 00 	movabs $0xfff0000000000fff,%rcx
ffffffff8000b02d:	00 f0 ff 
ffffffff8000b030:	48 23 4d f8          	and    -0x8(%rbp),%rcx
ffffffff8000b034:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000b038:	48 b9 ff ff ff ff ff 	movabs $0x800fffffffffffff,%rcx
ffffffff8000b03f:	ff 0f 80 
ffffffff8000b042:	48 23 4d f8          	and    -0x8(%rbp),%rcx
ffffffff8000b046:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000b04a:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff8000b051:	ff ff 7f 
ffffffff8000b054:	48 23 4d f8          	and    -0x8(%rbp),%rcx
ffffffff8000b058:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000b05c:	48 b9 00 00 00 00 00 	movabs $0xffffff0000000000,%rcx
ffffffff8000b063:	ff ff ff 
ffffffff8000b066:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000b06a:	48 89 14 c1          	mov    %rdx,(%rcx,%rax,8)
ffffffff8000b06e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b072:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000b076:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000b07a:	0f 01 38             	invlpg (%rax)
ffffffff8000b07d:	48 83 c4 50          	add    $0x50,%rsp
ffffffff8000b081:	5d                   	pop    %rbp
ffffffff8000b082:	c3                   	ret    
ffffffff8000b083:	cc                   	int3   
ffffffff8000b084:	cc                   	int3   
ffffffff8000b085:	cc                   	int3   
ffffffff8000b086:	cc                   	int3   
ffffffff8000b087:	cc                   	int3   
ffffffff8000b088:	cc                   	int3   
ffffffff8000b089:	cc                   	int3   
ffffffff8000b08a:	cc                   	int3   
ffffffff8000b08b:	cc                   	int3   
ffffffff8000b08c:	cc                   	int3   
ffffffff8000b08d:	cc                   	int3   
ffffffff8000b08e:	cc                   	int3   
ffffffff8000b08f:	cc                   	int3   

ffffffff8000b090 <vmm_alloc_page>:
ffffffff8000b090:	55                   	push   %rbp
ffffffff8000b091:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b094:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000b098:	48 c7 45 f8 ff ff ff 	movq   $0xffffffffffffffff,-0x8(%rbp)
ffffffff8000b09f:	ff 
ffffffff8000b0a0:	8a 0d 3b 21 21 00    	mov    0x21213b(%rip),%cl        # ffffffff8021d1e1 <m_early_alloc>
ffffffff8000b0a6:	31 c0                	xor    %eax,%eax
ffffffff8000b0a8:	f6 c1 01             	test   $0x1,%cl
ffffffff8000b0ab:	75 02                	jne    ffffffff8000b0af <vmm_alloc_page+0x1f>
ffffffff8000b0ad:	b0 01                	mov    $0x1,%al
ffffffff8000b0af:	a8 01                	test   $0x1,%al
ffffffff8000b0b1:	74 10                	je     ffffffff8000b0c3 <vmm_alloc_page+0x33>
ffffffff8000b0b3:	31 c0                	xor    %eax,%eax
ffffffff8000b0b5:	e8 06 1f 00 00       	call   ffffffff8000cfc0 <early_alloc_page_phys>
ffffffff8000b0ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b0be:	e9 97 00 00 00       	jmp    ffffffff8000b15a <vmm_alloc_page+0xca>
ffffffff8000b0c3:	bf 00 10 00 00       	mov    $0x1000,%edi
ffffffff8000b0c8:	e8 83 3c 00 00       	call   ffffffff8000ed50 <palloc>
ffffffff8000b0cd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000b0d1:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000b0d6:	75 0d                	jne    ffffffff8000b0e5 <vmm_alloc_page+0x55>
ffffffff8000b0d8:	48 c7 45 e0 ff ff ff 	movq   $0xffffffffffffffff,-0x20(%rbp)
ffffffff8000b0df:	ff 
ffffffff8000b0e0:	e9 86 00 00 00       	jmp    ffffffff8000b16b <vmm_alloc_page+0xdb>
ffffffff8000b0e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000b0e9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000b0ed:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000b0f4:	80 ff ff 
ffffffff8000b0f7:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8000b0fb:	77 10                	ja     ffffffff8000b10d <vmm_alloc_page+0x7d>
ffffffff8000b0fd:	48 b8 00 00 00 00 80 	movabs $0xffff808000000000,%rax
ffffffff8000b104:	80 ff ff 
ffffffff8000b107:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8000b10b:	76 2e                	jbe    ffffffff8000b13b <vmm_alloc_page+0xab>
ffffffff8000b10d:	31 c0                	xor    %eax,%eax
ffffffff8000b10f:	e8 dc e7 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b114:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000b11b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b11e:	48 c7 c2 38 8c 01 80 	mov    $0xffffffff80018c38,%rdx
ffffffff8000b125:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000b12c:	41 b8 dc 00 00 00    	mov    $0xdc,%r8d
ffffffff8000b132:	31 c0                	xor    %eax,%eax
ffffffff8000b134:	e8 07 68 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b139:	0f 0b                	ud2    
ffffffff8000b13b:	eb 00                	jmp    ffffffff8000b13d <vmm_alloc_page+0xad>
ffffffff8000b13d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b141:	48 b9 00 00 00 00 00 	movabs $0xffff800000000000,%rcx
ffffffff8000b148:	80 ff ff 
ffffffff8000b14b:	48 29 c8             	sub    %rcx,%rax
ffffffff8000b14e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000b152:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000b156:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b15a:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000b15e:	e8 fd fc ff ff       	call   ffffffff8000ae60 <vmm_unmap_direct_page>
ffffffff8000b163:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b167:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000b16b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000b16f:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000b173:	5d                   	pop    %rbp
ffffffff8000b174:	c3                   	ret    
ffffffff8000b175:	cc                   	int3   
ffffffff8000b176:	cc                   	int3   
ffffffff8000b177:	cc                   	int3   
ffffffff8000b178:	cc                   	int3   
ffffffff8000b179:	cc                   	int3   
ffffffff8000b17a:	cc                   	int3   
ffffffff8000b17b:	cc                   	int3   
ffffffff8000b17c:	cc                   	int3   
ffffffff8000b17d:	cc                   	int3   
ffffffff8000b17e:	cc                   	int3   
ffffffff8000b17f:	cc                   	int3   

ffffffff8000b180 <vmm_switch_allocator>:
ffffffff8000b180:	55                   	push   %rbp
ffffffff8000b181:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b184:	c6 05 56 20 21 00 01 	movb   $0x1,0x212056(%rip)        # ffffffff8021d1e1 <m_early_alloc>
ffffffff8000b18b:	5d                   	pop    %rbp
ffffffff8000b18c:	c3                   	ret    
ffffffff8000b18d:	cc                   	int3   
ffffffff8000b18e:	cc                   	int3   
ffffffff8000b18f:	cc                   	int3   

ffffffff8000b190 <vmm_alloc>:
ffffffff8000b190:	55                   	push   %rbp
ffffffff8000b191:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b194:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000b198:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000b19c:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8000b1a0:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%rbp)
ffffffff8000b1a7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000b1ae:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000b1b5:	00 
ffffffff8000b1b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000b1ba:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000b1be:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b1c2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000b1c6:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8000b1ca:	48 c1 e2 0c          	shl    $0xc,%rdx
ffffffff8000b1ce:	48 01 d1             	add    %rdx,%rcx
ffffffff8000b1d1:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000b1d4:	0f 83 af 00 00 00    	jae    ffffffff8000b289 <vmm_alloc+0xf9>
ffffffff8000b1da:	e8 b1 fe ff ff       	call   ffffffff8000b090 <vmm_alloc_page>
ffffffff8000b1df:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000b1e3:	48 83 7d e0 ff       	cmpq   $0xffffffffffffffff,-0x20(%rbp)
ffffffff8000b1e8:	75 38                	jne    ffffffff8000b222 <vmm_alloc+0x92>
ffffffff8000b1ea:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000b1f1:	31 c0                	xor    %eax,%eax
ffffffff8000b1f3:	e8 f8 e6 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b1f8:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000b1fb:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000b202:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b205:	48 c7 c1 b5 a1 01 80 	mov    $0xffffffff8001a1b5,%rcx
ffffffff8000b20c:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000b213:	41 b9 42 01 00 00    	mov    $0x142,%r9d
ffffffff8000b219:	31 c0                	xor    %eax,%eax
ffffffff8000b21b:	e8 20 67 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b220:	eb 69                	jmp    ffffffff8000b28b <vmm_alloc+0xfb>
ffffffff8000b222:	eb 00                	jmp    ffffffff8000b224 <vmm_alloc+0x94>
ffffffff8000b224:	eb 00                	jmp    ffffffff8000b226 <vmm_alloc+0x96>
ffffffff8000b226:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000b22a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000b22e:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff8000b231:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000b236:	e8 e5 f6 ff ff       	call   ffffffff8000a920 <vmm_map>
ffffffff8000b23b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000b23e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000b242:	74 2e                	je     ffffffff8000b272 <vmm_alloc+0xe2>
ffffffff8000b244:	31 c0                	xor    %eax,%eax
ffffffff8000b246:	e8 a5 e6 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b24b:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000b252:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b255:	48 c7 c2 b5 a1 01 80 	mov    $0xffffffff8001a1b5,%rdx
ffffffff8000b25c:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000b263:	41 b8 43 01 00 00    	mov    $0x143,%r8d
ffffffff8000b269:	31 c0                	xor    %eax,%eax
ffffffff8000b26b:	e8 d0 66 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b270:	eb 19                	jmp    ffffffff8000b28b <vmm_alloc+0xfb>
ffffffff8000b272:	eb 00                	jmp    ffffffff8000b274 <vmm_alloc+0xe4>
ffffffff8000b274:	eb 00                	jmp    ffffffff8000b276 <vmm_alloc+0xe6>
ffffffff8000b276:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b27a:	48 05 00 10 00 00    	add    $0x1000,%rax
ffffffff8000b280:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000b284:	e9 35 ff ff ff       	jmp    ffffffff8000b1be <vmm_alloc+0x2e>
ffffffff8000b289:	eb 00                	jmp    ffffffff8000b28b <vmm_alloc+0xfb>
ffffffff8000b28b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000b28e:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000b292:	5d                   	pop    %rbp
ffffffff8000b293:	c3                   	ret    
ffffffff8000b294:	cc                   	int3   
ffffffff8000b295:	cc                   	int3   
ffffffff8000b296:	cc                   	int3   
ffffffff8000b297:	cc                   	int3   
ffffffff8000b298:	cc                   	int3   
ffffffff8000b299:	cc                   	int3   
ffffffff8000b29a:	cc                   	int3   
ffffffff8000b29b:	cc                   	int3   
ffffffff8000b29c:	cc                   	int3   
ffffffff8000b29d:	cc                   	int3   
ffffffff8000b29e:	cc                   	int3   
ffffffff8000b29f:	cc                   	int3   

ffffffff8000b2a0 <vmm_page_fault_handler>:
ffffffff8000b2a0:	55                   	push   %rbp
ffffffff8000b2a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b2a4:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8000b2a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000b2ac:	40 80 e6 01          	and    $0x1,%sil
ffffffff8000b2b0:	40 88 75 ef          	mov    %sil,-0x11(%rbp)
ffffffff8000b2b4:	80 e2 01             	and    $0x1,%dl
ffffffff8000b2b7:	88 55 fb             	mov    %dl,-0x5(%rbp)
ffffffff8000b2ba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000b2c1:	48 b8 00 00 00 80 b0 	movabs $0xffffffb080000000,%rax
ffffffff8000b2c8:	ff ff ff 
ffffffff8000b2cb:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8000b2cf:	0f 87 d4 00 00 00    	ja     ffffffff8000b3a9 <vmm_page_fault_handler+0x109>
ffffffff8000b2d5:	48 b8 00 00 00 80 b1 	movabs $0xffffffb180000000,%rax
ffffffff8000b2dc:	ff ff ff 
ffffffff8000b2df:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8000b2e3:	0f 83 c0 00 00 00    	jae    ffffffff8000b3a9 <vmm_page_fault_handler+0x109>
ffffffff8000b2e9:	eb 00                	jmp    ffffffff8000b2eb <vmm_page_fault_handler+0x4b>
ffffffff8000b2eb:	f6 45 fb 01          	testb  $0x1,-0x5(%rbp)
ffffffff8000b2ef:	74 3b                	je     ffffffff8000b32c <vmm_page_fault_handler+0x8c>
ffffffff8000b2f1:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000b2f8:	31 c0                	xor    %eax,%eax
ffffffff8000b2fa:	e8 f1 e5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b2ff:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000b302:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000b309:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b30c:	48 c7 c1 ad 9d 01 80 	mov    $0xffffffff80019dad,%rcx
ffffffff8000b313:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000b31a:	41 b9 65 01 00 00    	mov    $0x165,%r9d
ffffffff8000b320:	31 c0                	xor    %eax,%eax
ffffffff8000b322:	e8 19 66 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b327:	e9 66 02 00 00       	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b32c:	eb 00                	jmp    ffffffff8000b32e <vmm_page_fault_handler+0x8e>
ffffffff8000b32e:	eb 00                	jmp    ffffffff8000b330 <vmm_page_fault_handler+0x90>
ffffffff8000b330:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b334:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000b338:	48 c7 45 98 00 10 00 	movq   $0x1000,-0x68(%rbp)
ffffffff8000b33f:	00 
ffffffff8000b340:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000b344:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000b348:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff8000b34c:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000b350:	48 21 d1             	and    %rdx,%rcx
ffffffff8000b353:	48 29 c8             	sub    %rcx,%rax
ffffffff8000b356:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000b35a:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
ffffffff8000b35e:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000b363:	e8 28 fe ff ff       	call   ffffffff8000b190 <vmm_alloc>
ffffffff8000b368:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000b36b:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000b36f:	74 31                	je     ffffffff8000b3a2 <vmm_page_fault_handler+0x102>
ffffffff8000b371:	31 c0                	xor    %eax,%eax
ffffffff8000b373:	e8 78 e5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b378:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000b37f:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b382:	48 c7 c2 ad 9d 01 80 	mov    $0xffffffff80019dad,%rdx
ffffffff8000b389:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000b390:	41 b8 68 01 00 00    	mov    $0x168,%r8d
ffffffff8000b396:	31 c0                	xor    %eax,%eax
ffffffff8000b398:	e8 a3 65 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b39d:	e9 f0 01 00 00       	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b3a2:	eb 00                	jmp    ffffffff8000b3a4 <vmm_page_fault_handler+0x104>
ffffffff8000b3a4:	e9 e7 01 00 00       	jmp    ffffffff8000b590 <vmm_page_fault_handler+0x2f0>
ffffffff8000b3a9:	48 b8 00 00 00 40 80 	movabs $0xffffff8040000000,%rax
ffffffff8000b3b0:	ff ff ff 
ffffffff8000b3b3:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8000b3b7:	0f 87 7b 01 00 00    	ja     ffffffff8000b538 <vmm_page_fault_handler+0x298>
ffffffff8000b3bd:	48 b8 00 00 00 40 b0 	movabs $0xffffffb040000000,%rax
ffffffff8000b3c4:	ff ff ff 
ffffffff8000b3c7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8000b3cb:	0f 83 67 01 00 00    	jae    ffffffff8000b538 <vmm_page_fault_handler+0x298>
ffffffff8000b3d1:	eb 00                	jmp    ffffffff8000b3d3 <vmm_page_fault_handler+0x133>
ffffffff8000b3d3:	f6 45 fb 01          	testb  $0x1,-0x5(%rbp)
ffffffff8000b3d7:	74 3b                	je     ffffffff8000b414 <vmm_page_fault_handler+0x174>
ffffffff8000b3d9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000b3e0:	31 c0                	xor    %eax,%eax
ffffffff8000b3e2:	e8 09 e5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b3e7:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000b3ea:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000b3f1:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b3f4:	48 c7 c1 ad 9d 01 80 	mov    $0xffffffff80019dad,%rcx
ffffffff8000b3fb:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000b402:	41 b9 6c 01 00 00    	mov    $0x16c,%r9d
ffffffff8000b408:	31 c0                	xor    %eax,%eax
ffffffff8000b40a:	e8 31 65 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b40f:	e9 7e 01 00 00       	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b414:	eb 00                	jmp    ffffffff8000b416 <vmm_page_fault_handler+0x176>
ffffffff8000b416:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b41a:	48 b9 00 00 00 40 80 	movabs $0xffffff8040000000,%rcx
ffffffff8000b421:	ff ff ff 
ffffffff8000b424:	48 29 c8             	sub    %rcx,%rax
ffffffff8000b427:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000b42b:	48 c7 45 a8 00 00 10 	movq   $0x100000,-0x58(%rbp)
ffffffff8000b432:	00 
ffffffff8000b433:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000b437:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000b43b:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8000b43f:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000b443:	48 21 d1             	and    %rdx,%rcx
ffffffff8000b446:	48 29 c8             	sub    %rcx,%rax
ffffffff8000b449:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000b44d:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000b451:	48 c1 e8 14          	shr    $0x14,%rax
ffffffff8000b455:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff8000b45a:	31 d2                	xor    %edx,%edx
ffffffff8000b45c:	48 f7 f1             	div    %rcx
ffffffff8000b45f:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
ffffffff8000b463:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8000b468:	75 57                	jne    ffffffff8000b4c1 <vmm_page_fault_handler+0x221>
ffffffff8000b46a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000b471:	31 c0                	xor    %eax,%eax
ffffffff8000b473:	e8 78 e4 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b478:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8000b47c:	48 c7 c7 c4 9d 01 80 	mov    $0xffffffff80019dc4,%rdi
ffffffff8000b483:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b486:	31 c0                	xor    %eax,%eax
ffffffff8000b488:	e8 b3 64 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b48d:	31 c0                	xor    %eax,%eax
ffffffff8000b48f:	e8 5c e4 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b494:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000b497:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000b49e:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b4a1:	48 c7 c1 ad 9d 01 80 	mov    $0xffffffff80019dad,%rcx
ffffffff8000b4a8:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000b4af:	41 b9 71 01 00 00    	mov    $0x171,%r9d
ffffffff8000b4b5:	31 c0                	xor    %eax,%eax
ffffffff8000b4b7:	e8 84 64 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b4bc:	e9 d1 00 00 00       	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b4c1:	eb 00                	jmp    ffffffff8000b4c3 <vmm_page_fault_handler+0x223>
ffffffff8000b4c3:	eb 00                	jmp    ffffffff8000b4c5 <vmm_page_fault_handler+0x225>
ffffffff8000b4c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b4c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000b4cd:	48 c7 45 b8 00 10 00 	movq   $0x1000,-0x48(%rbp)
ffffffff8000b4d4:	00 
ffffffff8000b4d5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000b4d9:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000b4dd:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff8000b4e1:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000b4e5:	48 21 d1             	and    %rdx,%rcx
ffffffff8000b4e8:	48 29 c8             	sub    %rcx,%rax
ffffffff8000b4eb:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000b4ef:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000b4f3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8000b4f8:	e8 93 fc ff ff       	call   ffffffff8000b190 <vmm_alloc>
ffffffff8000b4fd:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000b500:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000b504:	74 2e                	je     ffffffff8000b534 <vmm_page_fault_handler+0x294>
ffffffff8000b506:	31 c0                	xor    %eax,%eax
ffffffff8000b508:	e8 e3 e3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b50d:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000b514:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b517:	48 c7 c2 ad 9d 01 80 	mov    $0xffffffff80019dad,%rdx
ffffffff8000b51e:	48 c7 c1 a0 99 01 80 	mov    $0xffffffff800199a0,%rcx
ffffffff8000b525:	41 b8 74 01 00 00    	mov    $0x174,%r8d
ffffffff8000b52b:	31 c0                	xor    %eax,%eax
ffffffff8000b52d:	e8 0e 64 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b532:	eb 5e                	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b534:	eb 00                	jmp    ffffffff8000b536 <vmm_page_fault_handler+0x296>
ffffffff8000b536:	eb 56                	jmp    ffffffff8000b58e <vmm_page_fault_handler+0x2ee>
ffffffff8000b538:	eb 00                	jmp    ffffffff8000b53a <vmm_page_fault_handler+0x29a>
ffffffff8000b53a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000b541:	31 c0                	xor    %eax,%eax
ffffffff8000b543:	e8 a8 e3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b548:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000b54c:	48 c7 c7 29 91 01 80 	mov    $0xffffffff80019129,%rdi
ffffffff8000b553:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b556:	31 c0                	xor    %eax,%eax
ffffffff8000b558:	e8 e3 63 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b55d:	31 c0                	xor    %eax,%eax
ffffffff8000b55f:	e8 8c e3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b564:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000b567:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000b56e:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b571:	48 c7 c1 ad 9d 01 80 	mov    $0xffffffff80019dad,%rcx
ffffffff8000b578:	49 c7 c0 a0 99 01 80 	mov    $0xffffffff800199a0,%r8
ffffffff8000b57f:	41 b9 76 01 00 00    	mov    $0x176,%r9d
ffffffff8000b585:	31 c0                	xor    %eax,%eax
ffffffff8000b587:	e8 b4 63 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b58c:	eb 04                	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b58e:	eb 00                	jmp    ffffffff8000b590 <vmm_page_fault_handler+0x2f0>
ffffffff8000b590:	eb 00                	jmp    ffffffff8000b592 <vmm_page_fault_handler+0x2f2>
ffffffff8000b592:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000b595:	48 83 c4 70          	add    $0x70,%rsp
ffffffff8000b599:	5d                   	pop    %rbp
ffffffff8000b59a:	c3                   	ret    
ffffffff8000b59b:	cc                   	int3   
ffffffff8000b59c:	cc                   	int3   
ffffffff8000b59d:	cc                   	int3   
ffffffff8000b59e:	cc                   	int3   
ffffffff8000b59f:	cc                   	int3   

ffffffff8000b5a0 <alloc_stack>:
ffffffff8000b5a0:	55                   	push   %rbp
ffffffff8000b5a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b5a4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000b5a8:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000b5af:	00 
ffffffff8000b5b0:	48 c7 c7 e2 d1 21 80 	mov    $0xffffffff8021d1e2,%rdi
ffffffff8000b5b7:	e8 94 54 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000b5bc:	e8 2f 63 00 00       	call   ffffffff800118f0 <list_pop>
ffffffff8000b5c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000b5c5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000b5ca:	74 0e                	je     ffffffff8000b5da <alloc_stack+0x3a>
ffffffff8000b5cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b5d0:	48 83 c0 10          	add    $0x10,%rax
ffffffff8000b5d4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b5d8:	eb 4b                	jmp    ffffffff8000b625 <alloc_stack+0x85>
ffffffff8000b5da:	48 8b 05 e7 ff 00 00 	mov    0xffe7(%rip),%rax        # ffffffff8001b5c8 <m_next_stack>
ffffffff8000b5e1:	48 05 00 00 30 00    	add    $0x300000,%rax
ffffffff8000b5e7:	48 b9 00 00 00 40 b0 	movabs $0xffffffb040000000,%rcx
ffffffff8000b5ee:	ff ff ff 
ffffffff8000b5f1:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000b5f4:	72 02                	jb     ffffffff8000b5f8 <alloc_stack+0x58>
ffffffff8000b5f6:	eb 2d                	jmp    ffffffff8000b625 <alloc_stack+0x85>
ffffffff8000b5f8:	48 8b 05 c9 ff 00 00 	mov    0xffc9(%rip),%rax        # ffffffff8001b5c8 <m_next_stack>
ffffffff8000b5ff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b603:	48 8b 05 be ff 00 00 	mov    0xffbe(%rip),%rax        # ffffffff8001b5c8 <m_next_stack>
ffffffff8000b60a:	48 05 00 00 30 00    	add    $0x300000,%rax
ffffffff8000b610:	48 89 05 b1 ff 00 00 	mov    %rax,0xffb1(%rip)        # ffffffff8001b5c8 <m_next_stack>
ffffffff8000b617:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b61b:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff8000b621:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b625:	48 c7 c7 e2 d1 21 80 	mov    $0xffffffff8021d1e2,%rdi
ffffffff8000b62c:	e8 0f 55 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000b631:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000b636:	74 0d                	je     ffffffff8000b645 <alloc_stack+0xa5>
ffffffff8000b638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b63c:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
ffffffff8000b640:	31 c9                	xor    %ecx,%ecx
ffffffff8000b642:	c6 00 00             	movb   $0x0,(%rax)
ffffffff8000b645:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b649:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000b64d:	5d                   	pop    %rbp
ffffffff8000b64e:	c3                   	ret    
ffffffff8000b64f:	cc                   	int3   

ffffffff8000b650 <tlsf_size>:
ffffffff8000b650:	55                   	push   %rbp
ffffffff8000b651:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b654:	5d                   	pop    %rbp
ffffffff8000b655:	c3                   	ret    
ffffffff8000b656:	cc                   	int3   
ffffffff8000b657:	cc                   	int3   
ffffffff8000b658:	cc                   	int3   
ffffffff8000b659:	cc                   	int3   
ffffffff8000b65a:	cc                   	int3   
ffffffff8000b65b:	cc                   	int3   
ffffffff8000b65c:	cc                   	int3   
ffffffff8000b65d:	cc                   	int3   
ffffffff8000b65e:	cc                   	int3   
ffffffff8000b65f:	cc                   	int3   

ffffffff8000b660 <tlsf_pool_overhead>:
ffffffff8000b660:	55                   	push   %rbp
ffffffff8000b661:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b664:	5d                   	pop    %rbp
ffffffff8000b665:	c3                   	ret    
ffffffff8000b666:	cc                   	int3   
ffffffff8000b667:	cc                   	int3   
ffffffff8000b668:	cc                   	int3   
ffffffff8000b669:	cc                   	int3   
ffffffff8000b66a:	cc                   	int3   
ffffffff8000b66b:	cc                   	int3   
ffffffff8000b66c:	cc                   	int3   
ffffffff8000b66d:	cc                   	int3   
ffffffff8000b66e:	cc                   	int3   
ffffffff8000b66f:	cc                   	int3   

ffffffff8000b670 <tlsf_add_pool>:
ffffffff8000b670:	55                   	push   %rbp
ffffffff8000b671:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b674:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8000b678:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
ffffffff8000b67c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff8000b680:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8000b684:	e8 d7 ff ff ff       	call   ffffffff8000b660 <tlsf_pool_overhead>
ffffffff8000b689:	48 c7 45 e8 10 00 00 	movq   $0x10,-0x18(%rbp)
ffffffff8000b690:	00 
ffffffff8000b691:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000b695:	48 2b 7d e8          	sub    -0x18(%rbp),%rdi
ffffffff8000b699:	e8 02 01 00 00       	call   ffffffff8000b7a0 <align_down>
ffffffff8000b69e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000b6a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000b6a6:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffff8000b6ab:	48 99                	cqto   
ffffffff8000b6ad:	48 f7 f9             	idiv   %rcx
ffffffff8000b6b0:	48 83 fa 00          	cmp    $0x0,%rdx
ffffffff8000b6b4:	74 20                	je     ffffffff8000b6d6 <tlsf_add_pool+0x66>
ffffffff8000b6b6:	48 c7 c7 47 8c 01 80 	mov    $0xffffffff80018c47,%rdi
ffffffff8000b6bd:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000b6c2:	31 c0                	xor    %eax,%eax
ffffffff8000b6c4:	e8 77 62 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b6c9:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff8000b6d0:	00 
ffffffff8000b6d1:	e9 bb 00 00 00       	jmp    ffffffff8000b791 <tlsf_add_pool+0x121>
ffffffff8000b6d6:	48 83 7d f0 18       	cmpq   $0x18,-0x10(%rbp)
ffffffff8000b6db:	72 10                	jb     ffffffff8000b6ed <tlsf_add_pool+0x7d>
ffffffff8000b6dd:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
ffffffff8000b6e4:	00 00 00 
ffffffff8000b6e7:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8000b6eb:	76 32                	jbe    ffffffff8000b71f <tlsf_add_pool+0xaf>
ffffffff8000b6ed:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000b6f1:	48 83 c6 18          	add    $0x18,%rsi
ffffffff8000b6f5:	48 ba 00 00 00 00 01 	movabs $0x100000000,%rdx
ffffffff8000b6fc:	00 00 00 
ffffffff8000b6ff:	48 03 55 e8          	add    -0x18(%rbp),%rdx
ffffffff8000b703:	48 c1 ea 08          	shr    $0x8,%rdx
ffffffff8000b707:	48 c7 c7 b1 99 01 80 	mov    $0xffffffff800199b1,%rdi
ffffffff8000b70e:	31 c0                	xor    %eax,%eax
ffffffff8000b710:	e8 2b 62 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b715:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff8000b71c:	00 
ffffffff8000b71d:	eb 72                	jmp    ffffffff8000b791 <tlsf_add_pool+0x121>
ffffffff8000b71f:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000b723:	48 c7 c6 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rsi
ffffffff8000b72a:	e8 f1 00 00 00       	call   ffffffff8000b820 <offset_to_block>
ffffffff8000b72f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b733:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000b737:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000b73b:	e8 00 01 00 00       	call   ffffffff8000b840 <block_set_size>
ffffffff8000b740:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000b744:	e8 37 01 00 00       	call   ffffffff8000b880 <block_set_free>
ffffffff8000b749:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000b74d:	e8 4e 01 00 00       	call   ffffffff8000b8a0 <block_set_prev_used>
ffffffff8000b752:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000b756:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000b75a:	e8 61 01 00 00       	call   ffffffff8000b8c0 <block_insert>
ffffffff8000b75f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000b763:	e8 a8 01 00 00       	call   ffffffff8000b910 <block_link_next>
ffffffff8000b768:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000b76c:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000b770:	31 f6                	xor    %esi,%esi
ffffffff8000b772:	e8 c9 00 00 00       	call   ffffffff8000b840 <block_set_size>
ffffffff8000b777:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000b77b:	e8 c0 01 00 00       	call   ffffffff8000b940 <block_set_used>
ffffffff8000b780:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000b784:	e8 d7 01 00 00       	call   ffffffff8000b960 <block_set_prev_free>
ffffffff8000b789:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000b78d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000b791:	48 83 c4 40          	add    $0x40,%rsp
ffffffff8000b795:	5d                   	pop    %rbp
ffffffff8000b796:	c3                   	ret    
ffffffff8000b797:	cc                   	int3   
ffffffff8000b798:	cc                   	int3   
ffffffff8000b799:	cc                   	int3   
ffffffff8000b79a:	cc                   	int3   
ffffffff8000b79b:	cc                   	int3   
ffffffff8000b79c:	cc                   	int3   
ffffffff8000b79d:	cc                   	int3   
ffffffff8000b79e:	cc                   	int3   
ffffffff8000b79f:	cc                   	int3   

ffffffff8000b7a0 <align_down>:
ffffffff8000b7a0:	55                   	push   %rbp
ffffffff8000b7a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b7a4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000b7a8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000b7ac:	48 c7 45 f8 08 00 00 	movq   $0x8,-0x8(%rbp)
ffffffff8000b7b3:	00 
ffffffff8000b7b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b7b8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000b7bc:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000b7c0:	48 21 c8             	and    %rcx,%rax
ffffffff8000b7c3:	31 c9                	xor    %ecx,%ecx
ffffffff8000b7c5:	48 39 c1             	cmp    %rax,%rcx
ffffffff8000b7c8:	75 02                	jne    ffffffff8000b7cc <align_down+0x2c>
ffffffff8000b7ca:	eb 2e                	jmp    ffffffff8000b7fa <align_down+0x5a>
ffffffff8000b7cc:	31 c0                	xor    %eax,%eax
ffffffff8000b7ce:	e8 1d e1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b7d3:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000b7da:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b7dd:	48 c7 c2 e9 93 01 80 	mov    $0xffffffff800193e9,%rdx
ffffffff8000b7e4:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000b7eb:	41 b8 db 01 00 00    	mov    $0x1db,%r8d
ffffffff8000b7f1:	31 c0                	xor    %eax,%eax
ffffffff8000b7f3:	e8 48 61 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b7f8:	0f 0b                	ud2    
ffffffff8000b7fa:	eb 00                	jmp    ffffffff8000b7fc <align_down+0x5c>
ffffffff8000b7fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b800:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000b804:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000b808:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8000b80c:	48 21 d1             	and    %rdx,%rcx
ffffffff8000b80f:	48 29 c8             	sub    %rcx,%rax
ffffffff8000b812:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000b816:	5d                   	pop    %rbp
ffffffff8000b817:	c3                   	ret    
ffffffff8000b818:	cc                   	int3   
ffffffff8000b819:	cc                   	int3   
ffffffff8000b81a:	cc                   	int3   
ffffffff8000b81b:	cc                   	int3   
ffffffff8000b81c:	cc                   	int3   
ffffffff8000b81d:	cc                   	int3   
ffffffff8000b81e:	cc                   	int3   
ffffffff8000b81f:	cc                   	int3   

ffffffff8000b820 <offset_to_block>:
ffffffff8000b820:	55                   	push   %rbp
ffffffff8000b821:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b824:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000b828:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000b82c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000b830:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b834:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8000b838:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000b83c:	5d                   	pop    %rbp
ffffffff8000b83d:	c3                   	ret    
ffffffff8000b83e:	cc                   	int3   
ffffffff8000b83f:	cc                   	int3   

ffffffff8000b840 <block_set_size>:
ffffffff8000b840:	55                   	push   %rbp
ffffffff8000b841:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b844:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000b848:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000b84c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000b850:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b854:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000b858:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000b85c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000b860:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000b864:	48 83 e1 03          	and    $0x3,%rcx
ffffffff8000b868:	48 09 c8             	or     %rcx,%rax
ffffffff8000b86b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000b86f:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff8000b873:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000b877:	5d                   	pop    %rbp
ffffffff8000b878:	c3                   	ret    
ffffffff8000b879:	cc                   	int3   
ffffffff8000b87a:	cc                   	int3   
ffffffff8000b87b:	cc                   	int3   
ffffffff8000b87c:	cc                   	int3   
ffffffff8000b87d:	cc                   	int3   
ffffffff8000b87e:	cc                   	int3   
ffffffff8000b87f:	cc                   	int3   

ffffffff8000b880 <block_set_free>:
ffffffff8000b880:	55                   	push   %rbp
ffffffff8000b881:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b884:	50                   	push   %rax
ffffffff8000b885:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000b889:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b88d:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8000b891:	48 83 c9 01          	or     $0x1,%rcx
ffffffff8000b895:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000b899:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000b89d:	5d                   	pop    %rbp
ffffffff8000b89e:	c3                   	ret    
ffffffff8000b89f:	cc                   	int3   

ffffffff8000b8a0 <block_set_prev_used>:
ffffffff8000b8a0:	55                   	push   %rbp
ffffffff8000b8a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b8a4:	50                   	push   %rax
ffffffff8000b8a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000b8a9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b8ad:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8000b8b1:	48 83 e1 fd          	and    $0xfffffffffffffffd,%rcx
ffffffff8000b8b5:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000b8b9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000b8bd:	5d                   	pop    %rbp
ffffffff8000b8be:	c3                   	ret    
ffffffff8000b8bf:	cc                   	int3   

ffffffff8000b8c0 <block_insert>:
ffffffff8000b8c0:	55                   	push   %rbp
ffffffff8000b8c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b8c4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000b8c8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000b8cc:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000b8d0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000b8d4:	e8 47 01 00 00       	call   ffffffff8000ba20 <block_size>
ffffffff8000b8d9:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
ffffffff8000b8dd:	48 8d 55 fc          	lea    -0x4(%rbp),%rdx
ffffffff8000b8e1:	48 89 c7             	mov    %rax,%rdi
ffffffff8000b8e4:	e8 87 01 00 00       	call   ffffffff8000ba70 <mapping_insert>
ffffffff8000b8e9:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000b8ed:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000b8f1:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff8000b8f4:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8000b8f7:	e8 f4 01 00 00       	call   ffffffff8000baf0 <insert_free_block>
ffffffff8000b8fc:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000b900:	5d                   	pop    %rbp
ffffffff8000b901:	c3                   	ret    
ffffffff8000b902:	cc                   	int3   
ffffffff8000b903:	cc                   	int3   
ffffffff8000b904:	cc                   	int3   
ffffffff8000b905:	cc                   	int3   
ffffffff8000b906:	cc                   	int3   
ffffffff8000b907:	cc                   	int3   
ffffffff8000b908:	cc                   	int3   
ffffffff8000b909:	cc                   	int3   
ffffffff8000b90a:	cc                   	int3   
ffffffff8000b90b:	cc                   	int3   
ffffffff8000b90c:	cc                   	int3   
ffffffff8000b90d:	cc                   	int3   
ffffffff8000b90e:	cc                   	int3   
ffffffff8000b90f:	cc                   	int3   

ffffffff8000b910 <block_link_next>:
ffffffff8000b910:	55                   	push   %rbp
ffffffff8000b911:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b914:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000b918:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000b91c:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000b920:	e8 5b 00 00 00       	call   ffffffff8000b980 <block_next>
ffffffff8000b925:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000b929:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000b92d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000b931:	48 89 01             	mov    %rax,(%rcx)
ffffffff8000b934:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b938:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000b93c:	5d                   	pop    %rbp
ffffffff8000b93d:	c3                   	ret    
ffffffff8000b93e:	cc                   	int3   
ffffffff8000b93f:	cc                   	int3   

ffffffff8000b940 <block_set_used>:
ffffffff8000b940:	55                   	push   %rbp
ffffffff8000b941:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b944:	50                   	push   %rax
ffffffff8000b945:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000b949:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b94d:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8000b951:	48 83 e1 fe          	and    $0xfffffffffffffffe,%rcx
ffffffff8000b955:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000b959:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000b95d:	5d                   	pop    %rbp
ffffffff8000b95e:	c3                   	ret    
ffffffff8000b95f:	cc                   	int3   

ffffffff8000b960 <block_set_prev_free>:
ffffffff8000b960:	55                   	push   %rbp
ffffffff8000b961:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b964:	50                   	push   %rax
ffffffff8000b965:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000b969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000b96d:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8000b971:	48 83 c9 02          	or     $0x2,%rcx
ffffffff8000b975:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000b979:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000b97d:	5d                   	pop    %rbp
ffffffff8000b97e:	c3                   	ret    
ffffffff8000b97f:	cc                   	int3   

ffffffff8000b980 <block_next>:
ffffffff8000b980:	55                   	push   %rbp
ffffffff8000b981:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000b984:	53                   	push   %rbx
ffffffff8000b985:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000b989:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000b98d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000b991:	e8 6a 00 00 00       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000b996:	48 89 c3             	mov    %rax,%rbx
ffffffff8000b999:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000b99d:	e8 7e 00 00 00       	call   ffffffff8000ba20 <block_size>
ffffffff8000b9a2:	48 83 e8 08          	sub    $0x8,%rax
ffffffff8000b9a6:	48 89 df             	mov    %rbx,%rdi
ffffffff8000b9a9:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b9ac:	e8 6f fe ff ff       	call   ffffffff8000b820 <offset_to_block>
ffffffff8000b9b1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000b9b5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000b9b9:	e8 82 00 00 00       	call   ffffffff8000ba40 <block_is_last>
ffffffff8000b9be:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000b9c1:	74 2e                	je     ffffffff8000b9f1 <block_next+0x71>
ffffffff8000b9c3:	31 c0                	xor    %eax,%eax
ffffffff8000b9c5:	e8 26 df ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000b9ca:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000b9d1:	48 89 c6             	mov    %rax,%rsi
ffffffff8000b9d4:	48 c7 c2 02 8e 01 80 	mov    $0xffffffff80018e02,%rdx
ffffffff8000b9db:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000b9e2:	41 b8 b8 01 00 00    	mov    $0x1b8,%r8d
ffffffff8000b9e8:	31 c0                	xor    %eax,%eax
ffffffff8000b9ea:	e8 51 5f 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000b9ef:	0f 0b                	ud2    
ffffffff8000b9f1:	eb 00                	jmp    ffffffff8000b9f3 <block_next+0x73>
ffffffff8000b9f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000b9f7:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000b9fb:	5b                   	pop    %rbx
ffffffff8000b9fc:	5d                   	pop    %rbp
ffffffff8000b9fd:	c3                   	ret    
ffffffff8000b9fe:	cc                   	int3   
ffffffff8000b9ff:	cc                   	int3   

ffffffff8000ba00 <block_to_ptr>:
ffffffff8000ba00:	55                   	push   %rbp
ffffffff8000ba01:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ba04:	50                   	push   %rax
ffffffff8000ba05:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000ba09:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ba0d:	48 83 c0 10          	add    $0x10,%rax
ffffffff8000ba11:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000ba15:	5d                   	pop    %rbp
ffffffff8000ba16:	c3                   	ret    
ffffffff8000ba17:	cc                   	int3   
ffffffff8000ba18:	cc                   	int3   
ffffffff8000ba19:	cc                   	int3   
ffffffff8000ba1a:	cc                   	int3   
ffffffff8000ba1b:	cc                   	int3   
ffffffff8000ba1c:	cc                   	int3   
ffffffff8000ba1d:	cc                   	int3   
ffffffff8000ba1e:	cc                   	int3   
ffffffff8000ba1f:	cc                   	int3   

ffffffff8000ba20 <block_size>:
ffffffff8000ba20:	55                   	push   %rbp
ffffffff8000ba21:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ba24:	50                   	push   %rax
ffffffff8000ba25:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000ba29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ba2d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000ba31:	48 83 e0 fc          	and    $0xfffffffffffffffc,%rax
ffffffff8000ba35:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000ba39:	5d                   	pop    %rbp
ffffffff8000ba3a:	c3                   	ret    
ffffffff8000ba3b:	cc                   	int3   
ffffffff8000ba3c:	cc                   	int3   
ffffffff8000ba3d:	cc                   	int3   
ffffffff8000ba3e:	cc                   	int3   
ffffffff8000ba3f:	cc                   	int3   

ffffffff8000ba40 <block_is_last>:
ffffffff8000ba40:	55                   	push   %rbp
ffffffff8000ba41:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ba44:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000ba48:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000ba4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000ba50:	e8 cb ff ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000ba55:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000ba59:	0f 94 c0             	sete   %al
ffffffff8000ba5c:	24 01                	and    $0x1,%al
ffffffff8000ba5e:	0f b6 c0             	movzbl %al,%eax
ffffffff8000ba61:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000ba65:	5d                   	pop    %rbp
ffffffff8000ba66:	c3                   	ret    
ffffffff8000ba67:	cc                   	int3   
ffffffff8000ba68:	cc                   	int3   
ffffffff8000ba69:	cc                   	int3   
ffffffff8000ba6a:	cc                   	int3   
ffffffff8000ba6b:	cc                   	int3   
ffffffff8000ba6c:	cc                   	int3   
ffffffff8000ba6d:	cc                   	int3   
ffffffff8000ba6e:	cc                   	int3   
ffffffff8000ba6f:	cc                   	int3   

ffffffff8000ba70 <mapping_insert>:
ffffffff8000ba70:	55                   	push   %rbp
ffffffff8000ba71:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ba74:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000ba78:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000ba7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8000ba80:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000ba84:	48 81 7d f0 00 01 00 	cmpq   $0x100,-0x10(%rbp)
ffffffff8000ba8b:	00 
ffffffff8000ba8c:	73 18                	jae    ffffffff8000baa6 <mapping_insert+0x36>
ffffffff8000ba8e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000ba95:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ba99:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffff8000ba9e:	99                   	cltd   
ffffffff8000ba9f:	f7 f9                	idiv   %ecx
ffffffff8000baa1:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000baa4:	eb 2a                	jmp    ffffffff8000bad0 <mapping_insert+0x60>
ffffffff8000baa6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000baaa:	e8 51 02 00 00       	call   ffffffff8000bd00 <tlsf_fls_sizet>
ffffffff8000baaf:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000bab2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000bab6:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8000bab9:	83 e9 05             	sub    $0x5,%ecx
ffffffff8000babc:	89 c9                	mov    %ecx,%ecx
ffffffff8000babe:	48 d3 e8             	shr    %cl,%rax
ffffffff8000bac1:	83 f0 20             	xor    $0x20,%eax
ffffffff8000bac4:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000bac7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000baca:	83 e8 07             	sub    $0x7,%eax
ffffffff8000bacd:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000bad0:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000bad3:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000bad7:	89 01                	mov    %eax,(%rcx)
ffffffff8000bad9:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000badc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000bae0:	89 01                	mov    %eax,(%rcx)
ffffffff8000bae2:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000bae6:	5d                   	pop    %rbp
ffffffff8000bae7:	c3                   	ret    
ffffffff8000bae8:	cc                   	int3   
ffffffff8000bae9:	cc                   	int3   
ffffffff8000baea:	cc                   	int3   
ffffffff8000baeb:	cc                   	int3   
ffffffff8000baec:	cc                   	int3   
ffffffff8000baed:	cc                   	int3   
ffffffff8000baee:	cc                   	int3   
ffffffff8000baef:	cc                   	int3   

ffffffff8000baf0 <insert_free_block>:
ffffffff8000baf0:	55                   	push   %rbp
ffffffff8000baf1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000baf4:	53                   	push   %rbx
ffffffff8000baf5:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8000baf9:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000bafd:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000bb01:	89 55 f4             	mov    %edx,-0xc(%rbp)
ffffffff8000bb04:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff8000bb07:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000bb0b:	48 05 88 00 00 00    	add    $0x88,%rax
ffffffff8000bb11:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff8000bb15:	48 c1 e1 08          	shl    $0x8,%rcx
ffffffff8000bb19:	48 01 c8             	add    %rcx,%rax
ffffffff8000bb1c:	48 63 4d e4          	movslq -0x1c(%rbp),%rcx
ffffffff8000bb20:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff8000bb24:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000bb28:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8000bb2d:	74 02                	je     ffffffff8000bb31 <insert_free_block+0x41>
ffffffff8000bb2f:	eb 2e                	jmp    ffffffff8000bb5f <insert_free_block+0x6f>
ffffffff8000bb31:	31 c0                	xor    %eax,%eax
ffffffff8000bb33:	e8 b8 dd ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000bb38:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000bb3f:	48 89 c6             	mov    %rax,%rsi
ffffffff8000bb42:	48 c7 c2 58 8f 01 80 	mov    $0xffffffff80018f58,%rdx
ffffffff8000bb49:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000bb50:	41 b8 5f 02 00 00    	mov    $0x25f,%r8d
ffffffff8000bb56:	31 c0                	xor    %eax,%eax
ffffffff8000bb58:	e8 e3 5d 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000bb5d:	0f 0b                	ud2    
ffffffff8000bb5f:	eb 00                	jmp    ffffffff8000bb61 <insert_free_block+0x71>
ffffffff8000bb61:	eb 00                	jmp    ffffffff8000bb63 <insert_free_block+0x73>
ffffffff8000bb63:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000bb68:	74 02                	je     ffffffff8000bb6c <insert_free_block+0x7c>
ffffffff8000bb6a:	eb 2e                	jmp    ffffffff8000bb9a <insert_free_block+0xaa>
ffffffff8000bb6c:	31 c0                	xor    %eax,%eax
ffffffff8000bb6e:	e8 7d dd ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000bb73:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000bb7a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000bb7d:	48 c7 c2 58 8f 01 80 	mov    $0xffffffff80018f58,%rdx
ffffffff8000bb84:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000bb8b:	41 b8 60 02 00 00    	mov    $0x260,%r8d
ffffffff8000bb91:	31 c0                	xor    %eax,%eax
ffffffff8000bb93:	e8 a8 5d 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000bb98:	0f 0b                	ud2    
ffffffff8000bb9a:	eb 00                	jmp    ffffffff8000bb9c <insert_free_block+0xac>
ffffffff8000bb9c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000bba0:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000bba4:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff8000bba8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000bbac:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000bbb0:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000bbb4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000bbb8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000bbbc:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000bbc0:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000bbc4:	e8 37 fe ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000bbc9:	48 89 c3             	mov    %rax,%rbx
ffffffff8000bbcc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000bbd0:	e8 2b fe ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000bbd5:	48 89 c7             	mov    %rax,%rdi
ffffffff8000bbd8:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000bbdd:	e8 8e 00 00 00       	call   ffffffff8000bc70 <align_ptr>
ffffffff8000bbe2:	48 39 c3             	cmp    %rax,%rbx
ffffffff8000bbe5:	75 02                	jne    ffffffff8000bbe9 <insert_free_block+0xf9>
ffffffff8000bbe7:	eb 2e                	jmp    ffffffff8000bc17 <insert_free_block+0x127>
ffffffff8000bbe9:	31 c0                	xor    %eax,%eax
ffffffff8000bbeb:	e8 00 dd ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000bbf0:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000bbf7:	48 89 c6             	mov    %rax,%rsi
ffffffff8000bbfa:	48 c7 c2 58 8f 01 80 	mov    $0xffffffff80018f58,%rdx
ffffffff8000bc01:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000bc08:	41 b8 66 02 00 00    	mov    $0x266,%r8d
ffffffff8000bc0e:	31 c0                	xor    %eax,%eax
ffffffff8000bc10:	e8 2b 5d 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000bc15:	0f 0b                	ud2    
ffffffff8000bc17:	eb 00                	jmp    ffffffff8000bc19 <insert_free_block+0x129>
ffffffff8000bc19:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000bc1d:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000bc21:	48 81 c1 88 00 00 00 	add    $0x88,%rcx
ffffffff8000bc28:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
ffffffff8000bc2c:	48 c1 e2 08          	shl    $0x8,%rdx
ffffffff8000bc30:	48 01 d1             	add    %rdx,%rcx
ffffffff8000bc33:	48 63 55 e4          	movslq -0x1c(%rbp),%rdx
ffffffff8000bc37:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff8000bc3b:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff8000bc3e:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000bc43:	d3 e0                	shl    %cl,%eax
ffffffff8000bc45:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000bc49:	0b 41 20             	or     0x20(%rcx),%eax
ffffffff8000bc4c:	89 41 20             	mov    %eax,0x20(%rcx)
ffffffff8000bc4f:	8b 4d e4             	mov    -0x1c(%rbp),%ecx
ffffffff8000bc52:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000bc57:	d3 e0                	shl    %cl,%eax
ffffffff8000bc59:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000bc5d:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
ffffffff8000bc61:	0b 44 91 24          	or     0x24(%rcx,%rdx,4),%eax
ffffffff8000bc65:	89 44 91 24          	mov    %eax,0x24(%rcx,%rdx,4)
ffffffff8000bc69:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8000bc6d:	5b                   	pop    %rbx
ffffffff8000bc6e:	5d                   	pop    %rbp
ffffffff8000bc6f:	c3                   	ret    

ffffffff8000bc70 <align_ptr>:
ffffffff8000bc70:	55                   	push   %rbp
ffffffff8000bc71:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bc74:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000bc78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000bc7c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000bc80:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000bc84:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000bc88:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000bc8c:	48 01 c8             	add    %rcx,%rax
ffffffff8000bc8f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000bc93:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000bc97:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
ffffffff8000bc9b:	48 21 c8             	and    %rcx,%rax
ffffffff8000bc9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000bca2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000bca6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000bcaa:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000bcae:	48 21 c8             	and    %rcx,%rax
ffffffff8000bcb1:	31 c9                	xor    %ecx,%ecx
ffffffff8000bcb3:	48 39 c1             	cmp    %rax,%rcx
ffffffff8000bcb6:	75 02                	jne    ffffffff8000bcba <align_ptr+0x4a>
ffffffff8000bcb8:	eb 2e                	jmp    ffffffff8000bce8 <align_ptr+0x78>
ffffffff8000bcba:	31 c0                	xor    %eax,%eax
ffffffff8000bcbc:	e8 2f dc ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000bcc1:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000bcc8:	48 89 c6             	mov    %rax,%rsi
ffffffff8000bccb:	48 c7 c2 bd a0 01 80 	mov    $0xffffffff8001a0bd,%rdx
ffffffff8000bcd2:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000bcd9:	41 b8 e3 01 00 00    	mov    $0x1e3,%r8d
ffffffff8000bcdf:	31 c0                	xor    %eax,%eax
ffffffff8000bce1:	e8 5a 5c 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000bce6:	0f 0b                	ud2    
ffffffff8000bce8:	eb 00                	jmp    ffffffff8000bcea <align_ptr+0x7a>
ffffffff8000bcea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000bcee:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000bcf2:	5d                   	pop    %rbp
ffffffff8000bcf3:	c3                   	ret    
ffffffff8000bcf4:	cc                   	int3   
ffffffff8000bcf5:	cc                   	int3   
ffffffff8000bcf6:	cc                   	int3   
ffffffff8000bcf7:	cc                   	int3   
ffffffff8000bcf8:	cc                   	int3   
ffffffff8000bcf9:	cc                   	int3   
ffffffff8000bcfa:	cc                   	int3   
ffffffff8000bcfb:	cc                   	int3   
ffffffff8000bcfc:	cc                   	int3   
ffffffff8000bcfd:	cc                   	int3   
ffffffff8000bcfe:	cc                   	int3   
ffffffff8000bcff:	cc                   	int3   

ffffffff8000bd00 <tlsf_fls_sizet>:
ffffffff8000bd00:	55                   	push   %rbp
ffffffff8000bd01:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bd04:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000bd08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000bd0c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000bd10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8000bd14:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000bd17:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000bd1e:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000bd22:	74 10                	je     ffffffff8000bd34 <tlsf_fls_sizet+0x34>
ffffffff8000bd24:	8b 7d f8             	mov    -0x8(%rbp),%edi
ffffffff8000bd27:	e8 24 00 00 00       	call   ffffffff8000bd50 <tlsf_fls>
ffffffff8000bd2c:	83 c0 20             	add    $0x20,%eax
ffffffff8000bd2f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000bd32:	eb 0c                	jmp    ffffffff8000bd40 <tlsf_fls_sizet+0x40>
ffffffff8000bd34:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000bd38:	e8 13 00 00 00       	call   ffffffff8000bd50 <tlsf_fls>
ffffffff8000bd3d:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000bd40:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000bd43:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000bd47:	5d                   	pop    %rbp
ffffffff8000bd48:	c3                   	ret    
ffffffff8000bd49:	cc                   	int3   
ffffffff8000bd4a:	cc                   	int3   
ffffffff8000bd4b:	cc                   	int3   
ffffffff8000bd4c:	cc                   	int3   
ffffffff8000bd4d:	cc                   	int3   
ffffffff8000bd4e:	cc                   	int3   
ffffffff8000bd4f:	cc                   	int3   

ffffffff8000bd50 <tlsf_fls>:
ffffffff8000bd50:	55                   	push   %rbp
ffffffff8000bd51:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bd54:	50                   	push   %rax
ffffffff8000bd55:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff8000bd58:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000bd5c:	74 12                	je     ffffffff8000bd70 <tlsf_fls+0x20>
ffffffff8000bd5e:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000bd61:	0f bd c8             	bsr    %eax,%ecx
ffffffff8000bd64:	83 f1 1f             	xor    $0x1f,%ecx
ffffffff8000bd67:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff8000bd6c:	29 c8                	sub    %ecx,%eax
ffffffff8000bd6e:	eb 04                	jmp    ffffffff8000bd74 <tlsf_fls+0x24>
ffffffff8000bd70:	31 c0                	xor    %eax,%eax
ffffffff8000bd72:	eb 00                	jmp    ffffffff8000bd74 <tlsf_fls+0x24>
ffffffff8000bd74:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000bd77:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000bd7a:	83 e8 01             	sub    $0x1,%eax
ffffffff8000bd7d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000bd81:	5d                   	pop    %rbp
ffffffff8000bd82:	c3                   	ret    
ffffffff8000bd83:	cc                   	int3   
ffffffff8000bd84:	cc                   	int3   
ffffffff8000bd85:	cc                   	int3   
ffffffff8000bd86:	cc                   	int3   
ffffffff8000bd87:	cc                   	int3   
ffffffff8000bd88:	cc                   	int3   
ffffffff8000bd89:	cc                   	int3   
ffffffff8000bd8a:	cc                   	int3   
ffffffff8000bd8b:	cc                   	int3   
ffffffff8000bd8c:	cc                   	int3   
ffffffff8000bd8d:	cc                   	int3   
ffffffff8000bd8e:	cc                   	int3   
ffffffff8000bd8f:	cc                   	int3   

ffffffff8000bd90 <tlsf_create>:
ffffffff8000bd90:	55                   	push   %rbp
ffffffff8000bd91:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bd94:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000bd98:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000bd9c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000bda0:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffff8000bda5:	48 99                	cqto   
ffffffff8000bda7:	48 f7 f9             	idiv   %rcx
ffffffff8000bdaa:	48 83 fa 00          	cmp    $0x0,%rdx
ffffffff8000bdae:	74 1d                	je     ffffffff8000bdcd <tlsf_create+0x3d>
ffffffff8000bdb0:	48 c7 c7 19 90 01 80 	mov    $0xffffffff80019019,%rdi
ffffffff8000bdb7:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000bdbc:	31 c0                	xor    %eax,%eax
ffffffff8000bdbe:	e8 7d 5b 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000bdc3:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000bdca:	00 
ffffffff8000bdcb:	eb 11                	jmp    ffffffff8000bdde <tlsf_create+0x4e>
ffffffff8000bdcd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000bdd1:	e8 1a 00 00 00       	call   ffffffff8000bdf0 <control_construct>
ffffffff8000bdd6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000bdda:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000bdde:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000bde2:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000bde6:	5d                   	pop    %rbp
ffffffff8000bde7:	c3                   	ret    
ffffffff8000bde8:	cc                   	int3   
ffffffff8000bde9:	cc                   	int3   
ffffffff8000bdea:	cc                   	int3   
ffffffff8000bdeb:	cc                   	int3   
ffffffff8000bdec:	cc                   	int3   
ffffffff8000bded:	cc                   	int3   
ffffffff8000bdee:	cc                   	int3   
ffffffff8000bdef:	cc                   	int3   

ffffffff8000bdf0 <control_construct>:
ffffffff8000bdf0:	55                   	push   %rbp
ffffffff8000bdf1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bdf4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000bdf8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000bdfc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000be00:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000be04:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff8000be08:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000be0c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000be10:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000be14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000be18:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%rax)
ffffffff8000be1f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000be26:	83 7d fc 19          	cmpl   $0x19,-0x4(%rbp)
ffffffff8000be2a:	7d 57                	jge    ffffffff8000be83 <control_construct+0x93>
ffffffff8000be2c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000be30:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000be34:	c7 44 88 24 00 00 00 	movl   $0x0,0x24(%rax,%rcx,4)
ffffffff8000be3b:	00 
ffffffff8000be3c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000be43:	83 7d f8 20          	cmpl   $0x20,-0x8(%rbp)
ffffffff8000be47:	7d 2d                	jge    ffffffff8000be76 <control_construct+0x86>
ffffffff8000be49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000be4d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000be51:	48 81 c1 88 00 00 00 	add    $0x88,%rcx
ffffffff8000be58:	48 63 55 fc          	movslq -0x4(%rbp),%rdx
ffffffff8000be5c:	48 c1 e2 08          	shl    $0x8,%rdx
ffffffff8000be60:	48 01 d1             	add    %rdx,%rcx
ffffffff8000be63:	48 63 55 f8          	movslq -0x8(%rbp),%rdx
ffffffff8000be67:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff8000be6b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000be6e:	83 c0 01             	add    $0x1,%eax
ffffffff8000be71:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000be74:	eb cd                	jmp    ffffffff8000be43 <control_construct+0x53>
ffffffff8000be76:	eb 00                	jmp    ffffffff8000be78 <control_construct+0x88>
ffffffff8000be78:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000be7b:	83 c0 01             	add    $0x1,%eax
ffffffff8000be7e:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000be81:	eb a3                	jmp    ffffffff8000be26 <control_construct+0x36>
ffffffff8000be83:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000be87:	5d                   	pop    %rbp
ffffffff8000be88:	c3                   	ret    
ffffffff8000be89:	cc                   	int3   
ffffffff8000be8a:	cc                   	int3   
ffffffff8000be8b:	cc                   	int3   
ffffffff8000be8c:	cc                   	int3   
ffffffff8000be8d:	cc                   	int3   
ffffffff8000be8e:	cc                   	int3   
ffffffff8000be8f:	cc                   	int3   

ffffffff8000be90 <tlsf_create_with_pool>:
ffffffff8000be90:	55                   	push   %rbp
ffffffff8000be91:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000be94:	41 57                	push   %r15
ffffffff8000be96:	41 56                	push   %r14
ffffffff8000be98:	53                   	push   %rbx
ffffffff8000be99:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000be9d:	48 b8 00 00 00 80 b0 	movabs $0xffffffb080000000,%rax
ffffffff8000bea4:	ff ff ff 
ffffffff8000bea7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000beab:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
ffffffff8000beb2:	00 00 00 
ffffffff8000beb5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000beb9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000bebd:	e8 ce fe ff ff       	call   ffffffff8000bd90 <tlsf_create>
ffffffff8000bec2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000bec6:	4c 8b 75 e0          	mov    -0x20(%rbp),%r14
ffffffff8000beca:	4c 8b 7d d8          	mov    -0x28(%rbp),%r15
ffffffff8000bece:	e8 7d f7 ff ff       	call   ffffffff8000b650 <tlsf_size>
ffffffff8000bed3:	49 81 c7 88 19 00 00 	add    $0x1988,%r15
ffffffff8000beda:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
ffffffff8000bede:	e8 6d f7 ff ff       	call   ffffffff8000b650 <tlsf_size>
ffffffff8000bee3:	48 81 eb 88 19 00 00 	sub    $0x1988,%rbx
ffffffff8000beea:	4c 89 f7             	mov    %r14,%rdi
ffffffff8000beed:	4c 89 fe             	mov    %r15,%rsi
ffffffff8000bef0:	48 89 da             	mov    %rbx,%rdx
ffffffff8000bef3:	e8 78 f7 ff ff       	call   ffffffff8000b670 <tlsf_add_pool>
ffffffff8000bef8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000befc:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000bf00:	5b                   	pop    %rbx
ffffffff8000bf01:	41 5e                	pop    %r14
ffffffff8000bf03:	41 5f                	pop    %r15
ffffffff8000bf05:	5d                   	pop    %rbp
ffffffff8000bf06:	c3                   	ret    
ffffffff8000bf07:	cc                   	int3   
ffffffff8000bf08:	cc                   	int3   
ffffffff8000bf09:	cc                   	int3   
ffffffff8000bf0a:	cc                   	int3   
ffffffff8000bf0b:	cc                   	int3   
ffffffff8000bf0c:	cc                   	int3   
ffffffff8000bf0d:	cc                   	int3   
ffffffff8000bf0e:	cc                   	int3   
ffffffff8000bf0f:	cc                   	int3   

ffffffff8000bf10 <tlsf_malloc>:
ffffffff8000bf10:	55                   	push   %rbp
ffffffff8000bf11:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bf14:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000bf18:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000bf1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8000bf20:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000bf24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000bf28:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000bf2c:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000bf31:	e8 3a 00 00 00       	call   ffffffff8000bf70 <adjust_request_size>
ffffffff8000bf36:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000bf3a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000bf3e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000bf42:	e8 99 00 00 00       	call   ffffffff8000bfe0 <block_locate_free>
ffffffff8000bf47:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000bf4b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000bf4f:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000bf53:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000bf57:	e8 44 01 00 00       	call   ffffffff8000c0a0 <block_prepare_used>
ffffffff8000bf5c:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000bf60:	5d                   	pop    %rbp
ffffffff8000bf61:	c3                   	ret    
ffffffff8000bf62:	cc                   	int3   
ffffffff8000bf63:	cc                   	int3   
ffffffff8000bf64:	cc                   	int3   
ffffffff8000bf65:	cc                   	int3   
ffffffff8000bf66:	cc                   	int3   
ffffffff8000bf67:	cc                   	int3   
ffffffff8000bf68:	cc                   	int3   
ffffffff8000bf69:	cc                   	int3   
ffffffff8000bf6a:	cc                   	int3   
ffffffff8000bf6b:	cc                   	int3   
ffffffff8000bf6c:	cc                   	int3   
ffffffff8000bf6d:	cc                   	int3   
ffffffff8000bf6e:	cc                   	int3   
ffffffff8000bf6f:	cc                   	int3   

ffffffff8000bf70 <adjust_request_size>:
ffffffff8000bf70:	55                   	push   %rbp
ffffffff8000bf71:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bf74:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000bf78:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000bf7c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8000bf80:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000bf87:	00 
ffffffff8000bf88:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000bf8d:	74 3b                	je     ffffffff8000bfca <adjust_request_size+0x5a>
ffffffff8000bf8f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000bf93:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8000bf97:	e8 74 07 00 00       	call   ffffffff8000c710 <align_up>
ffffffff8000bf9c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000bfa0:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
ffffffff8000bfa7:	00 00 00 
ffffffff8000bfaa:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8000bfae:	73 18                	jae    ffffffff8000bfc8 <adjust_request_size+0x58>
ffffffff8000bfb0:	48 83 7d f8 18       	cmpq   $0x18,-0x8(%rbp)
ffffffff8000bfb5:	76 06                	jbe    ffffffff8000bfbd <adjust_request_size+0x4d>
ffffffff8000bfb7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000bfbb:	eb 07                	jmp    ffffffff8000bfc4 <adjust_request_size+0x54>
ffffffff8000bfbd:	b8 18 00 00 00       	mov    $0x18,%eax
ffffffff8000bfc2:	eb 00                	jmp    ffffffff8000bfc4 <adjust_request_size+0x54>
ffffffff8000bfc4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000bfc8:	eb 00                	jmp    ffffffff8000bfca <adjust_request_size+0x5a>
ffffffff8000bfca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000bfce:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000bfd2:	5d                   	pop    %rbp
ffffffff8000bfd3:	c3                   	ret    
ffffffff8000bfd4:	cc                   	int3   
ffffffff8000bfd5:	cc                   	int3   
ffffffff8000bfd6:	cc                   	int3   
ffffffff8000bfd7:	cc                   	int3   
ffffffff8000bfd8:	cc                   	int3   
ffffffff8000bfd9:	cc                   	int3   
ffffffff8000bfda:	cc                   	int3   
ffffffff8000bfdb:	cc                   	int3   
ffffffff8000bfdc:	cc                   	int3   
ffffffff8000bfdd:	cc                   	int3   
ffffffff8000bfde:	cc                   	int3   
ffffffff8000bfdf:	cc                   	int3   

ffffffff8000bfe0 <block_locate_free>:
ffffffff8000bfe0:	55                   	push   %rbp
ffffffff8000bfe1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000bfe4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000bfe8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000bfec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000bff0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000bff7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000bffe:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000c005:	00 
ffffffff8000c006:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000c00b:	74 2e                	je     ffffffff8000c03b <block_locate_free+0x5b>
ffffffff8000c00d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000c011:	48 8d 75 fc          	lea    -0x4(%rbp),%rsi
ffffffff8000c015:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
ffffffff8000c019:	e8 f2 03 00 00       	call   ffffffff8000c410 <mapping_search>
ffffffff8000c01e:	83 7d fc 19          	cmpl   $0x19,-0x4(%rbp)
ffffffff8000c022:	7d 15                	jge    ffffffff8000c039 <block_locate_free+0x59>
ffffffff8000c024:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c028:	48 8d 75 fc          	lea    -0x4(%rbp),%rsi
ffffffff8000c02c:	48 8d 55 f8          	lea    -0x8(%rbp),%rdx
ffffffff8000c030:	e8 3b 04 00 00       	call   ffffffff8000c470 <search_suitable_block>
ffffffff8000c035:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c039:	eb 00                	jmp    ffffffff8000c03b <block_locate_free+0x5b>
ffffffff8000c03b:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000c040:	74 54                	je     ffffffff8000c096 <block_locate_free+0xb6>
ffffffff8000c042:	eb 00                	jmp    ffffffff8000c044 <block_locate_free+0x64>
ffffffff8000c044:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c048:	e8 d3 f9 ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000c04d:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000c051:	73 2e                	jae    ffffffff8000c081 <block_locate_free+0xa1>
ffffffff8000c053:	31 c0                	xor    %eax,%eax
ffffffff8000c055:	e8 96 d8 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c05a:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c061:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c064:	48 c7 c2 30 96 01 80 	mov    $0xffffffff80019630,%rdx
ffffffff8000c06b:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c072:	41 b8 07 03 00 00    	mov    $0x307,%r8d
ffffffff8000c078:	31 c0                	xor    %eax,%eax
ffffffff8000c07a:	e8 c1 58 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c07f:	0f 0b                	ud2    
ffffffff8000c081:	eb 00                	jmp    ffffffff8000c083 <block_locate_free+0xa3>
ffffffff8000c083:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c087:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000c08b:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000c08e:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff8000c091:	e8 ea 04 00 00       	call   ffffffff8000c580 <remove_free_block>
ffffffff8000c096:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c09a:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000c09e:	5d                   	pop    %rbp
ffffffff8000c09f:	c3                   	ret    

ffffffff8000c0a0 <block_prepare_used>:
ffffffff8000c0a0:	55                   	push   %rbp
ffffffff8000c0a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c0a4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000c0a8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000c0ac:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000c0b0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000c0b4:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000c0bb:	00 
ffffffff8000c0bc:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000c0c1:	74 62                	je     ffffffff8000c125 <block_prepare_used+0x85>
ffffffff8000c0c3:	eb 00                	jmp    ffffffff8000c0c5 <block_prepare_used+0x25>
ffffffff8000c0c5:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000c0ca:	74 02                	je     ffffffff8000c0ce <block_prepare_used+0x2e>
ffffffff8000c0cc:	eb 2e                	jmp    ffffffff8000c0fc <block_prepare_used+0x5c>
ffffffff8000c0ce:	31 c0                	xor    %eax,%eax
ffffffff8000c0d0:	e8 1b d8 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c0d5:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c0dc:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c0df:	48 c7 c2 88 9e 01 80 	mov    $0xffffffff80019e88,%rdx
ffffffff8000c0e6:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c0ed:	41 b8 13 03 00 00    	mov    $0x313,%r8d
ffffffff8000c0f3:	31 c0                	xor    %eax,%eax
ffffffff8000c0f5:	e8 46 58 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c0fa:	0f 0b                	ud2    
ffffffff8000c0fc:	eb 00                	jmp    ffffffff8000c0fe <block_prepare_used+0x5e>
ffffffff8000c0fe:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c102:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000c106:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000c10a:	e8 21 00 00 00       	call   ffffffff8000c130 <block_trim_free>
ffffffff8000c10f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c113:	e8 b8 00 00 00       	call   ffffffff8000c1d0 <block_mark_as_used>
ffffffff8000c118:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c11c:	e8 df f8 ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000c121:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c125:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c129:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000c12d:	5d                   	pop    %rbp
ffffffff8000c12e:	c3                   	ret    
ffffffff8000c12f:	cc                   	int3   

ffffffff8000c130 <block_trim_free>:
ffffffff8000c130:	55                   	push   %rbp
ffffffff8000c131:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c134:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000c138:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000c13c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000c140:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000c144:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c148:	e8 c3 00 00 00       	call   ffffffff8000c210 <block_is_free>
ffffffff8000c14d:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000c150:	74 02                	je     ffffffff8000c154 <block_trim_free+0x24>
ffffffff8000c152:	eb 2e                	jmp    ffffffff8000c182 <block_trim_free+0x52>
ffffffff8000c154:	31 c0                	xor    %eax,%eax
ffffffff8000c156:	e8 95 d7 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c15b:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c162:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c165:	48 c7 c2 ad a0 01 80 	mov    $0xffffffff8001a0ad,%rdx
ffffffff8000c16c:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c173:	41 b8 c7 02 00 00    	mov    $0x2c7,%r8d
ffffffff8000c179:	31 c0                	xor    %eax,%eax
ffffffff8000c17b:	e8 c0 57 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c180:	0f 0b                	ud2    
ffffffff8000c182:	eb 00                	jmp    ffffffff8000c184 <block_trim_free+0x54>
ffffffff8000c184:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c188:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c18c:	e8 9f 00 00 00       	call   ffffffff8000c230 <block_can_split>
ffffffff8000c191:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000c194:	74 30                	je     ffffffff8000c1c6 <block_trim_free+0x96>
ffffffff8000c196:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c19a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c19e:	e8 cd 00 00 00       	call   ffffffff8000c270 <block_split>
ffffffff8000c1a3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c1a7:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c1ab:	e8 60 f7 ff ff       	call   ffffffff8000b910 <block_link_next>
ffffffff8000c1b0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c1b4:	e8 a7 f7 ff ff       	call   ffffffff8000b960 <block_set_prev_free>
ffffffff8000c1b9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c1bd:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000c1c1:	e8 fa f6 ff ff       	call   ffffffff8000b8c0 <block_insert>
ffffffff8000c1c6:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000c1ca:	5d                   	pop    %rbp
ffffffff8000c1cb:	c3                   	ret    
ffffffff8000c1cc:	cc                   	int3   
ffffffff8000c1cd:	cc                   	int3   
ffffffff8000c1ce:	cc                   	int3   
ffffffff8000c1cf:	cc                   	int3   

ffffffff8000c1d0 <block_mark_as_used>:
ffffffff8000c1d0:	55                   	push   %rbp
ffffffff8000c1d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c1d4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000c1d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000c1dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c1e0:	e8 9b f7 ff ff       	call   ffffffff8000b980 <block_next>
ffffffff8000c1e5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c1e9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c1ed:	e8 ae f6 ff ff       	call   ffffffff8000b8a0 <block_set_prev_used>
ffffffff8000c1f2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c1f6:	e8 45 f7 ff ff       	call   ffffffff8000b940 <block_set_used>
ffffffff8000c1fb:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000c1ff:	5d                   	pop    %rbp
ffffffff8000c200:	c3                   	ret    
ffffffff8000c201:	cc                   	int3   
ffffffff8000c202:	cc                   	int3   
ffffffff8000c203:	cc                   	int3   
ffffffff8000c204:	cc                   	int3   
ffffffff8000c205:	cc                   	int3   
ffffffff8000c206:	cc                   	int3   
ffffffff8000c207:	cc                   	int3   
ffffffff8000c208:	cc                   	int3   
ffffffff8000c209:	cc                   	int3   
ffffffff8000c20a:	cc                   	int3   
ffffffff8000c20b:	cc                   	int3   
ffffffff8000c20c:	cc                   	int3   
ffffffff8000c20d:	cc                   	int3   
ffffffff8000c20e:	cc                   	int3   
ffffffff8000c20f:	cc                   	int3   

ffffffff8000c210 <block_is_free>:
ffffffff8000c210:	55                   	push   %rbp
ffffffff8000c211:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c214:	50                   	push   %rax
ffffffff8000c215:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000c219:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000c21d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000c221:	48 83 e0 01          	and    $0x1,%rax
ffffffff8000c225:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000c229:	5d                   	pop    %rbp
ffffffff8000c22a:	c3                   	ret    
ffffffff8000c22b:	cc                   	int3   
ffffffff8000c22c:	cc                   	int3   
ffffffff8000c22d:	cc                   	int3   
ffffffff8000c22e:	cc                   	int3   
ffffffff8000c22f:	cc                   	int3   

ffffffff8000c230 <block_can_split>:
ffffffff8000c230:	55                   	push   %rbp
ffffffff8000c231:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c234:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000c238:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000c23c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000c240:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c244:	e8 d7 f7 ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000c249:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000c24d:	48 83 c1 20          	add    $0x20,%rcx
ffffffff8000c251:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000c254:	0f 93 c0             	setae  %al
ffffffff8000c257:	24 01                	and    $0x1,%al
ffffffff8000c259:	0f b6 c0             	movzbl %al,%eax
ffffffff8000c25c:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000c260:	5d                   	pop    %rbp
ffffffff8000c261:	c3                   	ret    
ffffffff8000c262:	cc                   	int3   
ffffffff8000c263:	cc                   	int3   
ffffffff8000c264:	cc                   	int3   
ffffffff8000c265:	cc                   	int3   
ffffffff8000c266:	cc                   	int3   
ffffffff8000c267:	cc                   	int3   
ffffffff8000c268:	cc                   	int3   
ffffffff8000c269:	cc                   	int3   
ffffffff8000c26a:	cc                   	int3   
ffffffff8000c26b:	cc                   	int3   
ffffffff8000c26c:	cc                   	int3   
ffffffff8000c26d:	cc                   	int3   
ffffffff8000c26e:	cc                   	int3   
ffffffff8000c26f:	cc                   	int3   

ffffffff8000c270 <block_split>:
ffffffff8000c270:	55                   	push   %rbp
ffffffff8000c271:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c274:	53                   	push   %rbx
ffffffff8000c275:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8000c279:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000c27d:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000c281:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c285:	e8 76 f7 ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000c28a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c28e:	48 83 ee 08          	sub    $0x8,%rsi
ffffffff8000c292:	48 89 c7             	mov    %rax,%rdi
ffffffff8000c295:	e8 86 f5 ff ff       	call   ffffffff8000b820 <offset_to_block>
ffffffff8000c29a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c29e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c2a2:	e8 79 f7 ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000c2a7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000c2ab:	48 83 c1 08          	add    $0x8,%rcx
ffffffff8000c2af:	48 29 c8             	sub    %rcx,%rax
ffffffff8000c2b2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000c2b6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c2ba:	e8 41 f7 ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000c2bf:	48 89 c3             	mov    %rax,%rbx
ffffffff8000c2c2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c2c6:	e8 35 f7 ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000c2cb:	48 89 c7             	mov    %rax,%rdi
ffffffff8000c2ce:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000c2d3:	e8 98 f9 ff ff       	call   ffffffff8000bc70 <align_ptr>
ffffffff8000c2d8:	48 39 c3             	cmp    %rax,%rbx
ffffffff8000c2db:	75 02                	jne    ffffffff8000c2df <block_split+0x6f>
ffffffff8000c2dd:	eb 2e                	jmp    ffffffff8000c30d <block_split+0x9d>
ffffffff8000c2df:	31 c0                	xor    %eax,%eax
ffffffff8000c2e1:	e8 0a d6 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c2e6:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c2ed:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c2f0:	48 c7 c2 2f 9f 01 80 	mov    $0xffffffff80019f2f,%rdx
ffffffff8000c2f7:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c2fe:	41 b8 8f 02 00 00    	mov    $0x28f,%r8d
ffffffff8000c304:	31 c0                	xor    %eax,%eax
ffffffff8000c306:	e8 35 56 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c30b:	0f 0b                	ud2    
ffffffff8000c30d:	eb 00                	jmp    ffffffff8000c30f <block_split+0x9f>
ffffffff8000c30f:	eb 00                	jmp    ffffffff8000c311 <block_split+0xa1>
ffffffff8000c311:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c315:	e8 06 f7 ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000c31a:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000c31e:	48 03 4d e8          	add    -0x18(%rbp),%rcx
ffffffff8000c322:	48 83 c1 08          	add    $0x8,%rcx
ffffffff8000c326:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000c329:	74 2e                	je     ffffffff8000c359 <block_split+0xe9>
ffffffff8000c32b:	31 c0                	xor    %eax,%eax
ffffffff8000c32d:	e8 be d5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c332:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c339:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c33c:	48 c7 c2 2f 9f 01 80 	mov    $0xffffffff80019f2f,%rdx
ffffffff8000c343:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c34a:	41 b8 91 02 00 00    	mov    $0x291,%r8d
ffffffff8000c350:	31 c0                	xor    %eax,%eax
ffffffff8000c352:	e8 e9 55 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c357:	0f 0b                	ud2    
ffffffff8000c359:	eb 00                	jmp    ffffffff8000c35b <block_split+0xeb>
ffffffff8000c35b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c35f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000c363:	e8 d8 f4 ff ff       	call   ffffffff8000b840 <block_set_size>
ffffffff8000c368:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c36c:	e8 af f6 ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000c371:	48 83 f8 18          	cmp    $0x18,%rax
ffffffff8000c375:	72 02                	jb     ffffffff8000c379 <block_split+0x109>
ffffffff8000c377:	eb 2e                	jmp    ffffffff8000c3a7 <block_split+0x137>
ffffffff8000c379:	31 c0                	xor    %eax,%eax
ffffffff8000c37b:	e8 70 d5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c380:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c387:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c38a:	48 c7 c2 2f 9f 01 80 	mov    $0xffffffff80019f2f,%rdx
ffffffff8000c391:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c398:	41 b8 93 02 00 00    	mov    $0x293,%r8d
ffffffff8000c39e:	31 c0                	xor    %eax,%eax
ffffffff8000c3a0:	e8 9b 55 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c3a5:	0f 0b                	ud2    
ffffffff8000c3a7:	eb 00                	jmp    ffffffff8000c3a9 <block_split+0x139>
ffffffff8000c3a9:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c3ad:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c3b1:	e8 8a f4 ff ff       	call   ffffffff8000b840 <block_set_size>
ffffffff8000c3b6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c3ba:	e8 11 00 00 00       	call   ffffffff8000c3d0 <block_mark_as_free>
ffffffff8000c3bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c3c3:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8000c3c7:	5b                   	pop    %rbx
ffffffff8000c3c8:	5d                   	pop    %rbp
ffffffff8000c3c9:	c3                   	ret    
ffffffff8000c3ca:	cc                   	int3   
ffffffff8000c3cb:	cc                   	int3   
ffffffff8000c3cc:	cc                   	int3   
ffffffff8000c3cd:	cc                   	int3   
ffffffff8000c3ce:	cc                   	int3   
ffffffff8000c3cf:	cc                   	int3   

ffffffff8000c3d0 <block_mark_as_free>:
ffffffff8000c3d0:	55                   	push   %rbp
ffffffff8000c3d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c3d4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000c3d8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000c3dc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c3e0:	e8 2b f5 ff ff       	call   ffffffff8000b910 <block_link_next>
ffffffff8000c3e5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c3e9:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c3ed:	e8 6e f5 ff ff       	call   ffffffff8000b960 <block_set_prev_free>
ffffffff8000c3f2:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c3f6:	e8 85 f4 ff ff       	call   ffffffff8000b880 <block_set_free>
ffffffff8000c3fb:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000c3ff:	5d                   	pop    %rbp
ffffffff8000c400:	c3                   	ret    
ffffffff8000c401:	cc                   	int3   
ffffffff8000c402:	cc                   	int3   
ffffffff8000c403:	cc                   	int3   
ffffffff8000c404:	cc                   	int3   
ffffffff8000c405:	cc                   	int3   
ffffffff8000c406:	cc                   	int3   
ffffffff8000c407:	cc                   	int3   
ffffffff8000c408:	cc                   	int3   
ffffffff8000c409:	cc                   	int3   
ffffffff8000c40a:	cc                   	int3   
ffffffff8000c40b:	cc                   	int3   
ffffffff8000c40c:	cc                   	int3   
ffffffff8000c40d:	cc                   	int3   
ffffffff8000c40e:	cc                   	int3   
ffffffff8000c40f:	cc                   	int3   

ffffffff8000c410 <mapping_search>:
ffffffff8000c410:	55                   	push   %rbp
ffffffff8000c411:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c414:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000c418:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000c41c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8000c420:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000c424:	48 81 7d f8 00 01 00 	cmpq   $0x100,-0x8(%rbp)
ffffffff8000c42b:	00 
ffffffff8000c42c:	72 2b                	jb     ffffffff8000c459 <mapping_search+0x49>
ffffffff8000c42e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c432:	e8 c9 f8 ff ff       	call   ffffffff8000bd00 <tlsf_fls_sizet>
ffffffff8000c437:	83 e8 05             	sub    $0x5,%eax
ffffffff8000c43a:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000c43f:	89 c1                	mov    %eax,%ecx
ffffffff8000c441:	d3 e2                	shl    %cl,%edx
ffffffff8000c443:	83 ea 01             	sub    $0x1,%edx
ffffffff8000c446:	48 63 c2             	movslq %edx,%rax
ffffffff8000c449:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c44d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c451:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8000c455:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000c459:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c45d:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8000c461:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000c465:	e8 06 f6 ff ff       	call   ffffffff8000ba70 <mapping_insert>
ffffffff8000c46a:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000c46e:	5d                   	pop    %rbp
ffffffff8000c46f:	c3                   	ret    

ffffffff8000c470 <search_suitable_block>:
ffffffff8000c470:	55                   	push   %rbp
ffffffff8000c471:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c474:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000c478:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000c47c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff8000c480:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff8000c484:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000c488:	8b 00                	mov    (%rax),%eax
ffffffff8000c48a:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000c48d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000c491:	8b 00                	mov    (%rax),%eax
ffffffff8000c493:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000c496:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c49a:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000c49e:	8b 44 88 24          	mov    0x24(%rax,%rcx,4),%eax
ffffffff8000c4a2:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff8000c4a5:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff8000c4aa:	d3 e2                	shl    %cl,%edx
ffffffff8000c4ac:	21 d0                	and    %edx,%eax
ffffffff8000c4ae:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000c4b1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000c4b5:	75 4f                	jne    ffffffff8000c506 <search_suitable_block+0x96>
ffffffff8000c4b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c4bb:	8b 40 20             	mov    0x20(%rax),%eax
ffffffff8000c4be:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8000c4c1:	83 c1 01             	add    $0x1,%ecx
ffffffff8000c4c4:	ba ff ff ff ff       	mov    $0xffffffff,%edx
ffffffff8000c4c9:	d3 e2                	shl    %cl,%edx
ffffffff8000c4cb:	21 d0                	and    %edx,%eax
ffffffff8000c4cd:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff8000c4d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
ffffffff8000c4d4:	75 0d                	jne    ffffffff8000c4e3 <search_suitable_block+0x73>
ffffffff8000c4d6:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff8000c4dd:	00 
ffffffff8000c4de:	e9 92 00 00 00       	jmp    ffffffff8000c575 <search_suitable_block+0x105>
ffffffff8000c4e3:	8b 7d f0             	mov    -0x10(%rbp),%edi
ffffffff8000c4e6:	e8 f5 01 00 00       	call   ffffffff8000c6e0 <tlsf_ffs>
ffffffff8000c4eb:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000c4ee:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000c4f1:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000c4f5:	89 01                	mov    %eax,(%rcx)
ffffffff8000c4f7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c4fb:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000c4ff:	8b 44 88 24          	mov    0x24(%rax,%rcx,4),%eax
ffffffff8000c503:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000c506:	eb 00                	jmp    ffffffff8000c508 <search_suitable_block+0x98>
ffffffff8000c508:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000c50c:	74 02                	je     ffffffff8000c510 <search_suitable_block+0xa0>
ffffffff8000c50e:	eb 2e                	jmp    ffffffff8000c53e <search_suitable_block+0xce>
ffffffff8000c510:	31 c0                	xor    %eax,%eax
ffffffff8000c512:	e8 d9 d3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c517:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c51e:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c521:	48 c7 c2 8b 9f 01 80 	mov    $0xffffffff80019f8b,%rdx
ffffffff8000c528:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c52f:	41 b8 36 02 00 00    	mov    $0x236,%r8d
ffffffff8000c535:	31 c0                	xor    %eax,%eax
ffffffff8000c537:	e8 04 54 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c53c:	0f 0b                	ud2    
ffffffff8000c53e:	eb 00                	jmp    ffffffff8000c540 <search_suitable_block+0xd0>
ffffffff8000c540:	8b 7d f8             	mov    -0x8(%rbp),%edi
ffffffff8000c543:	e8 98 01 00 00       	call   ffffffff8000c6e0 <tlsf_ffs>
ffffffff8000c548:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000c54b:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000c54e:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000c552:	89 01                	mov    %eax,(%rcx)
ffffffff8000c554:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c558:	48 05 88 00 00 00    	add    $0x88,%rax
ffffffff8000c55e:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000c562:	48 c1 e1 08          	shl    $0x8,%rcx
ffffffff8000c566:	48 01 c8             	add    %rcx,%rax
ffffffff8000c569:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff8000c56d:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff8000c571:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000c575:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000c579:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000c57d:	5d                   	pop    %rbp
ffffffff8000c57e:	c3                   	ret    
ffffffff8000c57f:	cc                   	int3   

ffffffff8000c580 <remove_free_block>:
ffffffff8000c580:	55                   	push   %rbp
ffffffff8000c581:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c584:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000c588:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000c58c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff8000c590:	89 55 fc             	mov    %edx,-0x4(%rbp)
ffffffff8000c593:	89 4d f8             	mov    %ecx,-0x8(%rbp)
ffffffff8000c596:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000c59a:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff8000c59e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000c5a2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000c5a6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8000c5aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000c5ae:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8000c5b3:	74 02                	je     ffffffff8000c5b7 <remove_free_block+0x37>
ffffffff8000c5b5:	eb 2e                	jmp    ffffffff8000c5e5 <remove_free_block+0x65>
ffffffff8000c5b7:	31 c0                	xor    %eax,%eax
ffffffff8000c5b9:	e8 32 d3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c5be:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c5c5:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c5c8:	48 c7 c2 9c 91 01 80 	mov    $0xffffffff8001919c,%rdx
ffffffff8000c5cf:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c5d6:	41 b8 43 02 00 00    	mov    $0x243,%r8d
ffffffff8000c5dc:	31 c0                	xor    %eax,%eax
ffffffff8000c5de:	e8 5d 53 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c5e3:	0f 0b                	ud2    
ffffffff8000c5e5:	eb 00                	jmp    ffffffff8000c5e7 <remove_free_block+0x67>
ffffffff8000c5e7:	eb 00                	jmp    ffffffff8000c5e9 <remove_free_block+0x69>
ffffffff8000c5e9:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000c5ee:	74 02                	je     ffffffff8000c5f2 <remove_free_block+0x72>
ffffffff8000c5f0:	eb 2e                	jmp    ffffffff8000c620 <remove_free_block+0xa0>
ffffffff8000c5f2:	31 c0                	xor    %eax,%eax
ffffffff8000c5f4:	e8 f7 d2 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c5f9:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c600:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c603:	48 c7 c2 9c 91 01 80 	mov    $0xffffffff8001919c,%rdx
ffffffff8000c60a:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c611:	41 b8 44 02 00 00    	mov    $0x244,%r8d
ffffffff8000c617:	31 c0                	xor    %eax,%eax
ffffffff8000c619:	e8 22 53 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c61e:	0f 0b                	ud2    
ffffffff8000c620:	eb 00                	jmp    ffffffff8000c622 <remove_free_block+0xa2>
ffffffff8000c622:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000c626:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000c62a:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8000c62e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c632:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000c636:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff8000c63a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c63e:	48 05 88 00 00 00    	add    $0x88,%rax
ffffffff8000c644:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000c648:	48 c1 e1 08          	shl    $0x8,%rcx
ffffffff8000c64c:	48 01 c8             	add    %rcx,%rax
ffffffff8000c64f:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff8000c653:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff8000c657:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000c65b:	75 76                	jne    ffffffff8000c6d3 <remove_free_block+0x153>
ffffffff8000c65d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c661:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000c665:	48 81 c1 88 00 00 00 	add    $0x88,%rcx
ffffffff8000c66c:	48 63 55 fc          	movslq -0x4(%rbp),%rdx
ffffffff8000c670:	48 c1 e2 08          	shl    $0x8,%rdx
ffffffff8000c674:	48 01 d1             	add    %rdx,%rcx
ffffffff8000c677:	48 63 55 f8          	movslq -0x8(%rbp),%rdx
ffffffff8000c67b:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff8000c67f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000c683:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000c687:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000c68a:	75 45                	jne    ffffffff8000c6d1 <remove_free_block+0x151>
ffffffff8000c68c:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff8000c68f:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000c694:	d3 e0                	shl    %cl,%eax
ffffffff8000c696:	83 f0 ff             	xor    $0xffffffff,%eax
ffffffff8000c699:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000c69d:	48 63 55 fc          	movslq -0x4(%rbp),%rdx
ffffffff8000c6a1:	23 44 91 24          	and    0x24(%rcx,%rdx,4),%eax
ffffffff8000c6a5:	89 44 91 24          	mov    %eax,0x24(%rcx,%rdx,4)
ffffffff8000c6a9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c6ad:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000c6b1:	83 7c 88 24 00       	cmpl   $0x0,0x24(%rax,%rcx,4)
ffffffff8000c6b6:	75 17                	jne    ffffffff8000c6cf <remove_free_block+0x14f>
ffffffff8000c6b8:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8000c6bb:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000c6c0:	d3 e0                	shl    %cl,%eax
ffffffff8000c6c2:	83 f0 ff             	xor    $0xffffffff,%eax
ffffffff8000c6c5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000c6c9:	23 41 20             	and    0x20(%rcx),%eax
ffffffff8000c6cc:	89 41 20             	mov    %eax,0x20(%rcx)
ffffffff8000c6cf:	eb 00                	jmp    ffffffff8000c6d1 <remove_free_block+0x151>
ffffffff8000c6d1:	eb 00                	jmp    ffffffff8000c6d3 <remove_free_block+0x153>
ffffffff8000c6d3:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000c6d7:	5d                   	pop    %rbp
ffffffff8000c6d8:	c3                   	ret    
ffffffff8000c6d9:	cc                   	int3   
ffffffff8000c6da:	cc                   	int3   
ffffffff8000c6db:	cc                   	int3   
ffffffff8000c6dc:	cc                   	int3   
ffffffff8000c6dd:	cc                   	int3   
ffffffff8000c6de:	cc                   	int3   
ffffffff8000c6df:	cc                   	int3   

ffffffff8000c6e0 <tlsf_ffs>:
ffffffff8000c6e0:	55                   	push   %rbp
ffffffff8000c6e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c6e4:	48 83 ec 04          	sub    $0x4,%rsp
ffffffff8000c6e8:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff8000c6eb:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8000c6ee:	0f bc c1             	bsf    %ecx,%eax
ffffffff8000c6f1:	83 c0 01             	add    $0x1,%eax
ffffffff8000c6f4:	31 d2                	xor    %edx,%edx
ffffffff8000c6f6:	83 f9 00             	cmp    $0x0,%ecx
ffffffff8000c6f9:	0f 44 c2             	cmove  %edx,%eax
ffffffff8000c6fc:	83 e8 01             	sub    $0x1,%eax
ffffffff8000c6ff:	48 83 c4 04          	add    $0x4,%rsp
ffffffff8000c703:	5d                   	pop    %rbp
ffffffff8000c704:	c3                   	ret    
ffffffff8000c705:	cc                   	int3   
ffffffff8000c706:	cc                   	int3   
ffffffff8000c707:	cc                   	int3   
ffffffff8000c708:	cc                   	int3   
ffffffff8000c709:	cc                   	int3   
ffffffff8000c70a:	cc                   	int3   
ffffffff8000c70b:	cc                   	int3   
ffffffff8000c70c:	cc                   	int3   
ffffffff8000c70d:	cc                   	int3   
ffffffff8000c70e:	cc                   	int3   
ffffffff8000c70f:	cc                   	int3   

ffffffff8000c710 <align_up>:
ffffffff8000c710:	55                   	push   %rbp
ffffffff8000c711:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c714:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000c718:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000c71c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000c720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000c724:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000c728:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000c72c:	48 21 c8             	and    %rcx,%rax
ffffffff8000c72f:	31 c9                	xor    %ecx,%ecx
ffffffff8000c731:	48 39 c1             	cmp    %rax,%rcx
ffffffff8000c734:	75 02                	jne    ffffffff8000c738 <align_up+0x28>
ffffffff8000c736:	eb 2e                	jmp    ffffffff8000c766 <align_up+0x56>
ffffffff8000c738:	31 c0                	xor    %eax,%eax
ffffffff8000c73a:	e8 b1 d1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c73f:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c746:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c749:	48 c7 c2 7f 9e 01 80 	mov    $0xffffffff80019e7f,%rdx
ffffffff8000c750:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c757:	41 b8 d5 01 00 00    	mov    $0x1d5,%r8d
ffffffff8000c75d:	31 c0                	xor    %eax,%eax
ffffffff8000c75f:	e8 dc 51 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c764:	0f 0b                	ud2    
ffffffff8000c766:	eb 00                	jmp    ffffffff8000c768 <align_up+0x58>
ffffffff8000c768:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c76c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000c770:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000c774:	48 01 c8             	add    %rcx,%rax
ffffffff8000c777:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000c77b:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000c77f:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
ffffffff8000c783:	48 21 c8             	and    %rcx,%rax
ffffffff8000c786:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000c78a:	5d                   	pop    %rbp
ffffffff8000c78b:	c3                   	ret    
ffffffff8000c78c:	cc                   	int3   
ffffffff8000c78d:	cc                   	int3   
ffffffff8000c78e:	cc                   	int3   
ffffffff8000c78f:	cc                   	int3   

ffffffff8000c790 <tlsf_memalign>:
ffffffff8000c790:	55                   	push   %rbp
ffffffff8000c791:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c794:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
ffffffff8000c79b:	48 89 7d 90          	mov    %rdi,-0x70(%rbp)
ffffffff8000c79f:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000c7a3:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8000c7a7:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8000c7ab:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000c7af:	48 8b 7d 98          	mov    -0x68(%rbp),%rdi
ffffffff8000c7b3:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000c7b8:	e8 b3 f7 ff ff       	call   ffffffff8000bf70 <adjust_request_size>
ffffffff8000c7bd:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000c7c1:	48 c7 45 88 20 00 00 	movq   $0x20,-0x78(%rbp)
ffffffff8000c7c8:	00 
ffffffff8000c7c9:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000c7cd:	48 03 7d f0          	add    -0x10(%rbp),%rdi
ffffffff8000c7d1:	48 83 c7 20          	add    $0x20,%rdi
ffffffff8000c7d5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000c7d9:	e8 92 f7 ff ff       	call   ffffffff8000bf70 <adjust_request_size>
ffffffff8000c7de:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000c7e2:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8000c7e7:	74 0d                	je     ffffffff8000c7f6 <tlsf_memalign+0x66>
ffffffff8000c7e9:	48 83 7d f0 08       	cmpq   $0x8,-0x10(%rbp)
ffffffff8000c7ee:	76 06                	jbe    ffffffff8000c7f6 <tlsf_memalign+0x66>
ffffffff8000c7f0:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000c7f4:	eb 04                	jmp    ffffffff8000c7fa <tlsf_memalign+0x6a>
ffffffff8000c7f6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000c7fa:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000c7fe:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000c802:	48 8b 75 a8          	mov    -0x58(%rbp),%rsi
ffffffff8000c806:	e8 d5 f7 ff ff       	call   ffffffff8000bfe0 <block_locate_free>
ffffffff8000c80b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000c80f:	eb 00                	jmp    ffffffff8000c811 <tlsf_memalign+0x81>
ffffffff8000c811:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000c816:	0f 84 e5 00 00 00    	je     ffffffff8000c901 <tlsf_memalign+0x171>
ffffffff8000c81c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000c820:	e8 db f1 ff ff       	call   ffffffff8000ba00 <block_to_ptr>
ffffffff8000c825:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000c829:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000c82d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000c831:	e8 3a f4 ff ff       	call   ffffffff8000bc70 <align_ptr>
ffffffff8000c836:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000c83a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000c83e:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000c842:	48 29 c8             	sub    %rcx,%rax
ffffffff8000c845:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000c849:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000c84e:	74 58                	je     ffffffff8000c8a8 <tlsf_memalign+0x118>
ffffffff8000c850:	48 83 7d f8 20       	cmpq   $0x20,-0x8(%rbp)
ffffffff8000c855:	73 51                	jae    ffffffff8000c8a8 <tlsf_memalign+0x118>
ffffffff8000c857:	b8 20 00 00 00       	mov    $0x20,%eax
ffffffff8000c85c:	48 2b 45 f8          	sub    -0x8(%rbp),%rax
ffffffff8000c860:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000c864:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000c868:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8000c86c:	76 06                	jbe    ffffffff8000c874 <tlsf_memalign+0xe4>
ffffffff8000c86e:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000c872:	eb 04                	jmp    ffffffff8000c878 <tlsf_memalign+0xe8>
ffffffff8000c874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c878:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000c87c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000c880:	48 03 45 b0          	add    -0x50(%rbp),%rax
ffffffff8000c884:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000c888:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff8000c88c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000c890:	e8 db f3 ff ff       	call   ffffffff8000bc70 <align_ptr>
ffffffff8000c895:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000c899:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000c89d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000c8a1:	48 29 c8             	sub    %rcx,%rax
ffffffff8000c8a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000c8a8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000c8ad:	74 50                	je     ffffffff8000c8ff <tlsf_memalign+0x16f>
ffffffff8000c8af:	eb 00                	jmp    ffffffff8000c8b1 <tlsf_memalign+0x121>
ffffffff8000c8b1:	48 83 7d f8 20       	cmpq   $0x20,-0x8(%rbp)
ffffffff8000c8b6:	72 02                	jb     ffffffff8000c8ba <tlsf_memalign+0x12a>
ffffffff8000c8b8:	eb 2e                	jmp    ffffffff8000c8e8 <tlsf_memalign+0x158>
ffffffff8000c8ba:	31 c0                	xor    %eax,%eax
ffffffff8000c8bc:	e8 2f d0 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c8c1:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c8c8:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c8cb:	48 c7 c2 bf a1 01 80 	mov    $0xffffffff8001a1bf,%rdx
ffffffff8000c8d2:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c8d9:	41 b8 93 04 00 00    	mov    $0x493,%r8d
ffffffff8000c8df:	31 c0                	xor    %eax,%eax
ffffffff8000c8e1:	e8 5a 50 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c8e6:	0f 0b                	ud2    
ffffffff8000c8e8:	eb 00                	jmp    ffffffff8000c8ea <tlsf_memalign+0x15a>
ffffffff8000c8ea:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000c8ee:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c8f2:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000c8f6:	e8 25 00 00 00       	call   ffffffff8000c920 <block_trim_free_leading>
ffffffff8000c8fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000c8ff:	eb 00                	jmp    ffffffff8000c901 <tlsf_memalign+0x171>
ffffffff8000c901:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000c905:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c909:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8000c90d:	e8 8e f7 ff ff       	call   ffffffff8000c0a0 <block_prepare_used>
ffffffff8000c912:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
ffffffff8000c919:	5d                   	pop    %rbp
ffffffff8000c91a:	c3                   	ret    
ffffffff8000c91b:	cc                   	int3   
ffffffff8000c91c:	cc                   	int3   
ffffffff8000c91d:	cc                   	int3   
ffffffff8000c91e:	cc                   	int3   
ffffffff8000c91f:	cc                   	int3   

ffffffff8000c920 <block_trim_free_leading>:
ffffffff8000c920:	55                   	push   %rbp
ffffffff8000c921:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c924:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000c928:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000c92c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000c930:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000c934:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000c938:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c93c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c940:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c944:	e8 e7 f8 ff ff       	call   ffffffff8000c230 <block_can_split>
ffffffff8000c949:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000c94c:	74 34                	je     ffffffff8000c982 <block_trim_free_leading+0x62>
ffffffff8000c94e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c952:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000c956:	48 83 ee 08          	sub    $0x8,%rsi
ffffffff8000c95a:	e8 11 f9 ff ff       	call   ffffffff8000c270 <block_split>
ffffffff8000c95f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c963:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000c967:	e8 f4 ef ff ff       	call   ffffffff8000b960 <block_set_prev_free>
ffffffff8000c96c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c970:	e8 9b ef ff ff       	call   ffffffff8000b910 <block_link_next>
ffffffff8000c975:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000c979:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000c97d:	e8 3e ef ff ff       	call   ffffffff8000b8c0 <block_insert>
ffffffff8000c982:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000c986:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000c98a:	5d                   	pop    %rbp
ffffffff8000c98b:	c3                   	ret    
ffffffff8000c98c:	cc                   	int3   
ffffffff8000c98d:	cc                   	int3   
ffffffff8000c98e:	cc                   	int3   
ffffffff8000c98f:	cc                   	int3   

ffffffff8000c990 <tlsf_free>:
ffffffff8000c990:	55                   	push   %rbp
ffffffff8000c991:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000c994:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000c998:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000c99c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000c9a0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000c9a5:	0f 84 8d 00 00 00    	je     ffffffff8000ca38 <tlsf_free+0xa8>
ffffffff8000c9ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000c9af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000c9b3:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000c9b7:	e8 84 00 00 00       	call   ffffffff8000ca40 <block_from_ptr>
ffffffff8000c9bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000c9c0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000c9c4:	e8 47 f8 ff ff       	call   ffffffff8000c210 <block_is_free>
ffffffff8000c9c9:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000c9cc:	75 02                	jne    ffffffff8000c9d0 <tlsf_free+0x40>
ffffffff8000c9ce:	eb 2e                	jmp    ffffffff8000c9fe <tlsf_free+0x6e>
ffffffff8000c9d0:	31 c0                	xor    %eax,%eax
ffffffff8000c9d2:	e8 19 cf ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000c9d7:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000c9de:	48 89 c6             	mov    %rax,%rsi
ffffffff8000c9e1:	48 c7 c2 2c 8a 01 80 	mov    $0xffffffff80018a2c,%rdx
ffffffff8000c9e8:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000c9ef:	41 b8 a2 04 00 00    	mov    $0x4a2,%r8d
ffffffff8000c9f5:	31 c0                	xor    %eax,%eax
ffffffff8000c9f7:	e8 44 4f 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000c9fc:	0f 0b                	ud2    
ffffffff8000c9fe:	eb 00                	jmp    ffffffff8000ca00 <tlsf_free+0x70>
ffffffff8000ca00:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000ca04:	e8 c7 f9 ff ff       	call   ffffffff8000c3d0 <block_mark_as_free>
ffffffff8000ca09:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ca0d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ca11:	e8 4a 00 00 00       	call   ffffffff8000ca60 <block_merge_prev>
ffffffff8000ca16:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ca1a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ca1e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ca22:	e8 19 01 00 00       	call   ffffffff8000cb40 <block_merge_next>
ffffffff8000ca27:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ca2b:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ca2f:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ca33:	e8 88 ee ff ff       	call   ffffffff8000b8c0 <block_insert>
ffffffff8000ca38:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000ca3c:	5d                   	pop    %rbp
ffffffff8000ca3d:	c3                   	ret    
ffffffff8000ca3e:	cc                   	int3   
ffffffff8000ca3f:	cc                   	int3   

ffffffff8000ca40 <block_from_ptr>:
ffffffff8000ca40:	55                   	push   %rbp
ffffffff8000ca41:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ca44:	50                   	push   %rax
ffffffff8000ca45:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000ca49:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ca4d:	48 83 c0 f0          	add    $0xfffffffffffffff0,%rax
ffffffff8000ca51:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000ca55:	5d                   	pop    %rbp
ffffffff8000ca56:	c3                   	ret    
ffffffff8000ca57:	cc                   	int3   
ffffffff8000ca58:	cc                   	int3   
ffffffff8000ca59:	cc                   	int3   
ffffffff8000ca5a:	cc                   	int3   
ffffffff8000ca5b:	cc                   	int3   
ffffffff8000ca5c:	cc                   	int3   
ffffffff8000ca5d:	cc                   	int3   
ffffffff8000ca5e:	cc                   	int3   
ffffffff8000ca5f:	cc                   	int3   

ffffffff8000ca60 <block_merge_prev>:
ffffffff8000ca60:	55                   	push   %rbp
ffffffff8000ca61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ca64:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000ca68:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000ca6c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000ca70:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000ca74:	e8 67 02 00 00       	call   ffffffff8000cce0 <block_is_prev_free>
ffffffff8000ca79:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ca7c:	0f 84 a6 00 00 00    	je     ffffffff8000cb28 <block_merge_prev+0xc8>
ffffffff8000ca82:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000ca86:	e8 75 02 00 00       	call   ffffffff8000cd00 <block_prev>
ffffffff8000ca8b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ca8f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000ca94:	74 02                	je     ffffffff8000ca98 <block_merge_prev+0x38>
ffffffff8000ca96:	eb 2e                	jmp    ffffffff8000cac6 <block_merge_prev+0x66>
ffffffff8000ca98:	31 c0                	xor    %eax,%eax
ffffffff8000ca9a:	e8 51 ce ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000ca9f:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000caa6:	48 89 c6             	mov    %rax,%rsi
ffffffff8000caa9:	48 c7 c2 9b 9e 01 80 	mov    $0xffffffff80019e9b,%rdx
ffffffff8000cab0:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000cab7:	41 b8 ab 02 00 00    	mov    $0x2ab,%r8d
ffffffff8000cabd:	31 c0                	xor    %eax,%eax
ffffffff8000cabf:	e8 7c 4e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000cac4:	0f 0b                	ud2    
ffffffff8000cac6:	eb 00                	jmp    ffffffff8000cac8 <block_merge_prev+0x68>
ffffffff8000cac8:	eb 00                	jmp    ffffffff8000caca <block_merge_prev+0x6a>
ffffffff8000caca:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cace:	e8 3d f7 ff ff       	call   ffffffff8000c210 <block_is_free>
ffffffff8000cad3:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cad6:	74 02                	je     ffffffff8000cada <block_merge_prev+0x7a>
ffffffff8000cad8:	eb 2e                	jmp    ffffffff8000cb08 <block_merge_prev+0xa8>
ffffffff8000cada:	31 c0                	xor    %eax,%eax
ffffffff8000cadc:	e8 0f ce ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cae1:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000cae8:	48 89 c6             	mov    %rax,%rsi
ffffffff8000caeb:	48 c7 c2 9b 9e 01 80 	mov    $0xffffffff80019e9b,%rdx
ffffffff8000caf2:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000caf9:	41 b8 ac 02 00 00    	mov    $0x2ac,%r8d
ffffffff8000caff:	31 c0                	xor    %eax,%eax
ffffffff8000cb01:	e8 3a 4e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000cb06:	0f 0b                	ud2    
ffffffff8000cb08:	eb 00                	jmp    ffffffff8000cb0a <block_merge_prev+0xaa>
ffffffff8000cb0a:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000cb0e:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cb12:	e8 f9 00 00 00       	call   ffffffff8000cc10 <block_remove>
ffffffff8000cb17:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cb1b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000cb1f:	e8 3c 01 00 00       	call   ffffffff8000cc60 <block_absorb>
ffffffff8000cb24:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000cb28:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000cb2c:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000cb30:	5d                   	pop    %rbp
ffffffff8000cb31:	c3                   	ret    
ffffffff8000cb32:	cc                   	int3   
ffffffff8000cb33:	cc                   	int3   
ffffffff8000cb34:	cc                   	int3   
ffffffff8000cb35:	cc                   	int3   
ffffffff8000cb36:	cc                   	int3   
ffffffff8000cb37:	cc                   	int3   
ffffffff8000cb38:	cc                   	int3   
ffffffff8000cb39:	cc                   	int3   
ffffffff8000cb3a:	cc                   	int3   
ffffffff8000cb3b:	cc                   	int3   
ffffffff8000cb3c:	cc                   	int3   
ffffffff8000cb3d:	cc                   	int3   
ffffffff8000cb3e:	cc                   	int3   
ffffffff8000cb3f:	cc                   	int3   

ffffffff8000cb40 <block_merge_next>:
ffffffff8000cb40:	55                   	push   %rbp
ffffffff8000cb41:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cb44:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000cb48:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000cb4c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000cb50:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cb54:	e8 27 ee ff ff       	call   ffffffff8000b980 <block_next>
ffffffff8000cb59:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000cb5d:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000cb62:	74 02                	je     ffffffff8000cb66 <block_merge_next+0x26>
ffffffff8000cb64:	eb 2e                	jmp    ffffffff8000cb94 <block_merge_next+0x54>
ffffffff8000cb66:	31 c0                	xor    %eax,%eax
ffffffff8000cb68:	e8 83 cd ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cb6d:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000cb74:	48 89 c6             	mov    %rax,%rsi
ffffffff8000cb77:	48 c7 c2 ae 91 01 80 	mov    $0xffffffff800191ae,%rdx
ffffffff8000cb7e:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000cb85:	41 b8 b8 02 00 00    	mov    $0x2b8,%r8d
ffffffff8000cb8b:	31 c0                	xor    %eax,%eax
ffffffff8000cb8d:	e8 ae 4d 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000cb92:	0f 0b                	ud2    
ffffffff8000cb94:	eb 00                	jmp    ffffffff8000cb96 <block_merge_next+0x56>
ffffffff8000cb96:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cb9a:	e8 71 f6 ff ff       	call   ffffffff8000c210 <block_is_free>
ffffffff8000cb9f:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cba2:	74 60                	je     ffffffff8000cc04 <block_merge_next+0xc4>
ffffffff8000cba4:	eb 00                	jmp    ffffffff8000cba6 <block_merge_next+0x66>
ffffffff8000cba6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cbaa:	e8 91 ee ff ff       	call   ffffffff8000ba40 <block_is_last>
ffffffff8000cbaf:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cbb2:	75 02                	jne    ffffffff8000cbb6 <block_merge_next+0x76>
ffffffff8000cbb4:	eb 2e                	jmp    ffffffff8000cbe4 <block_merge_next+0xa4>
ffffffff8000cbb6:	31 c0                	xor    %eax,%eax
ffffffff8000cbb8:	e8 33 cd ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cbbd:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000cbc4:	48 89 c6             	mov    %rax,%rsi
ffffffff8000cbc7:	48 c7 c2 ae 91 01 80 	mov    $0xffffffff800191ae,%rdx
ffffffff8000cbce:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000cbd5:	41 b8 bc 02 00 00    	mov    $0x2bc,%r8d
ffffffff8000cbdb:	31 c0                	xor    %eax,%eax
ffffffff8000cbdd:	e8 5e 4d 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000cbe2:	0f 0b                	ud2    
ffffffff8000cbe4:	eb 00                	jmp    ffffffff8000cbe6 <block_merge_next+0xa6>
ffffffff8000cbe6:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000cbea:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cbee:	e8 1d 00 00 00       	call   ffffffff8000cc10 <block_remove>
ffffffff8000cbf3:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cbf7:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cbfb:	e8 60 00 00 00       	call   ffffffff8000cc60 <block_absorb>
ffffffff8000cc00:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000cc04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000cc08:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000cc0c:	5d                   	pop    %rbp
ffffffff8000cc0d:	c3                   	ret    
ffffffff8000cc0e:	cc                   	int3   
ffffffff8000cc0f:	cc                   	int3   

ffffffff8000cc10 <block_remove>:
ffffffff8000cc10:	55                   	push   %rbp
ffffffff8000cc11:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cc14:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000cc18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000cc1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000cc20:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cc24:	e8 f7 ed ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000cc29:	48 8d 75 f8          	lea    -0x8(%rbp),%rsi
ffffffff8000cc2d:	48 8d 55 fc          	lea    -0x4(%rbp),%rdx
ffffffff8000cc31:	48 89 c7             	mov    %rax,%rdi
ffffffff8000cc34:	e8 37 ee ff ff       	call   ffffffff8000ba70 <mapping_insert>
ffffffff8000cc39:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000cc3d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cc41:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff8000cc44:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8000cc47:	e8 34 f9 ff ff       	call   ffffffff8000c580 <remove_free_block>
ffffffff8000cc4c:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000cc50:	5d                   	pop    %rbp
ffffffff8000cc51:	c3                   	ret    
ffffffff8000cc52:	cc                   	int3   
ffffffff8000cc53:	cc                   	int3   
ffffffff8000cc54:	cc                   	int3   
ffffffff8000cc55:	cc                   	int3   
ffffffff8000cc56:	cc                   	int3   
ffffffff8000cc57:	cc                   	int3   
ffffffff8000cc58:	cc                   	int3   
ffffffff8000cc59:	cc                   	int3   
ffffffff8000cc5a:	cc                   	int3   
ffffffff8000cc5b:	cc                   	int3   
ffffffff8000cc5c:	cc                   	int3   
ffffffff8000cc5d:	cc                   	int3   
ffffffff8000cc5e:	cc                   	int3   
ffffffff8000cc5f:	cc                   	int3   

ffffffff8000cc60 <block_absorb>:
ffffffff8000cc60:	55                   	push   %rbp
ffffffff8000cc61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cc64:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000cc68:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000cc6c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000cc70:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cc74:	e8 c7 ed ff ff       	call   ffffffff8000ba40 <block_is_last>
ffffffff8000cc79:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cc7c:	75 02                	jne    ffffffff8000cc80 <block_absorb+0x20>
ffffffff8000cc7e:	eb 2e                	jmp    ffffffff8000ccae <block_absorb+0x4e>
ffffffff8000cc80:	31 c0                	xor    %eax,%eax
ffffffff8000cc82:	e8 69 cc ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cc87:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000cc8e:	48 89 c6             	mov    %rax,%rsi
ffffffff8000cc91:	48 c7 c2 c7 a0 01 80 	mov    $0xffffffff8001a0c7,%rdx
ffffffff8000cc98:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000cc9f:	41 b8 9e 02 00 00    	mov    $0x29e,%r8d
ffffffff8000cca5:	31 c0                	xor    %eax,%eax
ffffffff8000cca7:	e8 94 4c 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000ccac:	0f 0b                	ud2    
ffffffff8000ccae:	eb 00                	jmp    ffffffff8000ccb0 <block_absorb+0x50>
ffffffff8000ccb0:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ccb4:	e8 67 ed ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000ccb9:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000ccbd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ccc1:	48 03 41 08          	add    0x8(%rcx),%rax
ffffffff8000ccc5:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff8000ccc9:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cccd:	e8 3e ec ff ff       	call   ffffffff8000b910 <block_link_next>
ffffffff8000ccd2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ccd6:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000ccda:	5d                   	pop    %rbp
ffffffff8000ccdb:	c3                   	ret    
ffffffff8000ccdc:	cc                   	int3   
ffffffff8000ccdd:	cc                   	int3   
ffffffff8000ccde:	cc                   	int3   
ffffffff8000ccdf:	cc                   	int3   

ffffffff8000cce0 <block_is_prev_free>:
ffffffff8000cce0:	55                   	push   %rbp
ffffffff8000cce1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cce4:	50                   	push   %rax
ffffffff8000cce5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000cce9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000cced:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000ccf1:	48 83 e0 02          	and    $0x2,%rax
ffffffff8000ccf5:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000ccf9:	5d                   	pop    %rbp
ffffffff8000ccfa:	c3                   	ret    
ffffffff8000ccfb:	cc                   	int3   
ffffffff8000ccfc:	cc                   	int3   
ffffffff8000ccfd:	cc                   	int3   
ffffffff8000ccfe:	cc                   	int3   
ffffffff8000ccff:	cc                   	int3   

ffffffff8000cd00 <block_prev>:
ffffffff8000cd00:	55                   	push   %rbp
ffffffff8000cd01:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cd04:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000cd08:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000cd0c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cd10:	e8 cb ff ff ff       	call   ffffffff8000cce0 <block_is_prev_free>
ffffffff8000cd15:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cd18:	74 02                	je     ffffffff8000cd1c <block_prev+0x1c>
ffffffff8000cd1a:	eb 2e                	jmp    ffffffff8000cd4a <block_prev+0x4a>
ffffffff8000cd1c:	31 c0                	xor    %eax,%eax
ffffffff8000cd1e:	e8 cd cb ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cd23:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000cd2a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000cd2d:	48 c7 c2 17 9c 01 80 	mov    $0xffffffff80019c17,%rdx
ffffffff8000cd34:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000cd3b:	41 b8 af 01 00 00    	mov    $0x1af,%r8d
ffffffff8000cd41:	31 c0                	xor    %eax,%eax
ffffffff8000cd43:	e8 f8 4b 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000cd48:	0f 0b                	ud2    
ffffffff8000cd4a:	eb 00                	jmp    ffffffff8000cd4c <block_prev+0x4c>
ffffffff8000cd4c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000cd50:	48 8b 00             	mov    (%rax),%rax
ffffffff8000cd53:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000cd57:	5d                   	pop    %rbp
ffffffff8000cd58:	c3                   	ret    
ffffffff8000cd59:	cc                   	int3   
ffffffff8000cd5a:	cc                   	int3   
ffffffff8000cd5b:	cc                   	int3   
ffffffff8000cd5c:	cc                   	int3   
ffffffff8000cd5d:	cc                   	int3   
ffffffff8000cd5e:	cc                   	int3   
ffffffff8000cd5f:	cc                   	int3   

ffffffff8000cd60 <tlsf_realloc>:
ffffffff8000cd60:	55                   	push   %rbp
ffffffff8000cd61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cd64:	53                   	push   %rbx
ffffffff8000cd65:	48 83 ec 58          	sub    $0x58,%rsp
ffffffff8000cd69:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000cd6d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000cd71:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8000cd75:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000cd79:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000cd7d:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8000cd84:	00 
ffffffff8000cd85:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000cd8a:	74 19                	je     ffffffff8000cda5 <tlsf_realloc+0x45>
ffffffff8000cd8c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8000cd91:	75 12                	jne    ffffffff8000cda5 <tlsf_realloc+0x45>
ffffffff8000cd93:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000cd97:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cd9b:	e8 f0 fb ff ff       	call   ffffffff8000c990 <tlsf_free>
ffffffff8000cda0:	e9 5d 01 00 00       	jmp    ffffffff8000cf02 <tlsf_realloc+0x1a2>
ffffffff8000cda5:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000cdaa:	75 16                	jne    ffffffff8000cdc2 <tlsf_realloc+0x62>
ffffffff8000cdac:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000cdb0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000cdb4:	e8 57 f1 ff ff       	call   ffffffff8000bf10 <tlsf_malloc>
ffffffff8000cdb9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000cdbd:	e9 3e 01 00 00       	jmp    ffffffff8000cf00 <tlsf_realloc+0x1a0>
ffffffff8000cdc2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cdc6:	e8 75 fc ff ff       	call   ffffffff8000ca40 <block_from_ptr>
ffffffff8000cdcb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000cdcf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000cdd3:	e8 a8 eb ff ff       	call   ffffffff8000b980 <block_next>
ffffffff8000cdd8:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000cddc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000cde0:	e8 3b ec ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000cde5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000cde9:	48 8b 5d d0          	mov    -0x30(%rbp),%rbx
ffffffff8000cded:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff8000cdf1:	e8 2a ec ff ff       	call   ffffffff8000ba20 <block_size>
ffffffff8000cdf6:	48 01 c3             	add    %rax,%rbx
ffffffff8000cdf9:	48 83 c3 08          	add    $0x8,%rbx
ffffffff8000cdfd:	48 89 5d a0          	mov    %rbx,-0x60(%rbp)
ffffffff8000ce01:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000ce05:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8000ce0a:	e8 61 f1 ff ff       	call   ffffffff8000bf70 <adjust_request_size>
ffffffff8000ce0f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000ce13:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000ce17:	e8 f4 f3 ff ff       	call   ffffffff8000c210 <block_is_free>
ffffffff8000ce1c:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ce1f:	75 02                	jne    ffffffff8000ce23 <tlsf_realloc+0xc3>
ffffffff8000ce21:	eb 2e                	jmp    ffffffff8000ce51 <tlsf_realloc+0xf1>
ffffffff8000ce23:	31 c0                	xor    %eax,%eax
ffffffff8000ce25:	e8 c6 ca ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000ce2a:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000ce31:	48 89 c6             	mov    %rax,%rsi
ffffffff8000ce34:	48 c7 c2 23 96 01 80 	mov    $0xffffffff80019623,%rdx
ffffffff8000ce3b:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000ce42:	41 b8 cf 04 00 00    	mov    $0x4cf,%r8d
ffffffff8000ce48:	31 c0                	xor    %eax,%eax
ffffffff8000ce4a:	e8 f1 4a 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000ce4f:	0f 0b                	ud2    
ffffffff8000ce51:	eb 00                	jmp    ffffffff8000ce53 <tlsf_realloc+0xf3>
ffffffff8000ce53:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000ce57:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8000ce5b:	76 68                	jbe    ffffffff8000cec5 <tlsf_realloc+0x165>
ffffffff8000ce5d:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff8000ce61:	e8 aa f3 ff ff       	call   ffffffff8000c210 <block_is_free>
ffffffff8000ce66:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ce69:	74 0a                	je     ffffffff8000ce75 <tlsf_realloc+0x115>
ffffffff8000ce6b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000ce6f:	48 3b 45 a0          	cmp    -0x60(%rbp),%rax
ffffffff8000ce73:	76 50                	jbe    ffffffff8000cec5 <tlsf_realloc+0x165>
ffffffff8000ce75:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000ce79:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000ce7d:	e8 8e f0 ff ff       	call   ffffffff8000bf10 <tlsf_malloc>
ffffffff8000ce82:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ce86:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8000ce8b:	74 36                	je     ffffffff8000cec3 <tlsf_realloc+0x163>
ffffffff8000ce8d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000ce91:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000ce95:	73 06                	jae    ffffffff8000ce9d <tlsf_realloc+0x13d>
ffffffff8000ce97:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000ce9b:	eb 04                	jmp    ffffffff8000cea1 <tlsf_realloc+0x141>
ffffffff8000ce9d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000cea1:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000cea5:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000cea9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cead:	48 8b 55 a8          	mov    -0x58(%rbp),%rdx
ffffffff8000ceb1:	e8 aa 23 00 00       	call   ffffffff8000f260 <memcpy>
ffffffff8000ceb6:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000ceba:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000cebe:	e8 cd fa ff ff       	call   ffffffff8000c990 <tlsf_free>
ffffffff8000cec3:	eb 39                	jmp    ffffffff8000cefe <tlsf_realloc+0x19e>
ffffffff8000cec5:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000cec9:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8000cecd:	76 16                	jbe    ffffffff8000cee5 <tlsf_realloc+0x185>
ffffffff8000cecf:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000ced3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000ced7:	e8 64 fc ff ff       	call   ffffffff8000cb40 <block_merge_next>
ffffffff8000cedc:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000cee0:	e8 eb f2 ff ff       	call   ffffffff8000c1d0 <block_mark_as_used>
ffffffff8000cee5:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000cee9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000ceed:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
ffffffff8000cef1:	e8 1a 00 00 00       	call   ffffffff8000cf10 <block_trim_used>
ffffffff8000cef6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000cefa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000cefe:	eb 00                	jmp    ffffffff8000cf00 <tlsf_realloc+0x1a0>
ffffffff8000cf00:	eb 00                	jmp    ffffffff8000cf02 <tlsf_realloc+0x1a2>
ffffffff8000cf02:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000cf06:	48 83 c4 58          	add    $0x58,%rsp
ffffffff8000cf0a:	5b                   	pop    %rbx
ffffffff8000cf0b:	5d                   	pop    %rbp
ffffffff8000cf0c:	c3                   	ret    
ffffffff8000cf0d:	cc                   	int3   
ffffffff8000cf0e:	cc                   	int3   
ffffffff8000cf0f:	cc                   	int3   

ffffffff8000cf10 <block_trim_used>:
ffffffff8000cf10:	55                   	push   %rbp
ffffffff8000cf11:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cf14:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000cf18:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000cf1c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000cf20:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000cf24:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cf28:	e8 e3 f2 ff ff       	call   ffffffff8000c210 <block_is_free>
ffffffff8000cf2d:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cf30:	75 02                	jne    ffffffff8000cf34 <block_trim_used+0x24>
ffffffff8000cf32:	eb 2e                	jmp    ffffffff8000cf62 <block_trim_used+0x52>
ffffffff8000cf34:	31 c0                	xor    %eax,%eax
ffffffff8000cf36:	e8 b5 c9 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cf3b:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000cf42:	48 89 c6             	mov    %rax,%rsi
ffffffff8000cf45:	48 c7 c2 bf 91 01 80 	mov    $0xffffffff800191bf,%rdx
ffffffff8000cf4c:	48 c7 c1 2a 97 01 80 	mov    $0xffffffff8001972a,%rcx
ffffffff8000cf53:	41 b8 d4 02 00 00    	mov    $0x2d4,%r8d
ffffffff8000cf59:	31 c0                	xor    %eax,%eax
ffffffff8000cf5b:	e8 e0 49 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000cf60:	0f 0b                	ud2    
ffffffff8000cf62:	eb 00                	jmp    ffffffff8000cf64 <block_trim_used+0x54>
ffffffff8000cf64:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cf68:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000cf6c:	e8 bf f2 ff ff       	call   ffffffff8000c230 <block_can_split>
ffffffff8000cf71:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000cf74:	74 38                	je     ffffffff8000cfae <block_trim_used+0x9e>
ffffffff8000cf76:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000cf7a:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000cf7e:	e8 ed f2 ff ff       	call   ffffffff8000c270 <block_split>
ffffffff8000cf83:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000cf87:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000cf8b:	e8 10 e9 ff ff       	call   ffffffff8000b8a0 <block_set_prev_used>
ffffffff8000cf90:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000cf94:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000cf98:	e8 a3 fb ff ff       	call   ffffffff8000cb40 <block_merge_next>
ffffffff8000cf9d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000cfa1:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000cfa5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000cfa9:	e8 12 e9 ff ff       	call   ffffffff8000b8c0 <block_insert>
ffffffff8000cfae:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000cfb2:	5d                   	pop    %rbp
ffffffff8000cfb3:	c3                   	ret    
ffffffff8000cfb4:	cc                   	int3   
ffffffff8000cfb5:	cc                   	int3   
ffffffff8000cfb6:	cc                   	int3   
ffffffff8000cfb7:	cc                   	int3   
ffffffff8000cfb8:	cc                   	int3   
ffffffff8000cfb9:	cc                   	int3   
ffffffff8000cfba:	cc                   	int3   
ffffffff8000cfbb:	cc                   	int3   
ffffffff8000cfbc:	cc                   	int3   
ffffffff8000cfbd:	cc                   	int3   
ffffffff8000cfbe:	cc                   	int3   
ffffffff8000cfbf:	cc                   	int3   

ffffffff8000cfc0 <early_alloc_page_phys>:
ffffffff8000cfc0:	55                   	push   %rbp
ffffffff8000cfc1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000cfc4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000cfc8:	48 8b 05 19 02 21 00 	mov    0x210219(%rip),%rax        # ffffffff8021d1e8 <m_early_alloc_mmap>
ffffffff8000cfcf:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000cfd3:	75 55                	jne    ffffffff8000d02a <early_alloc_page_phys+0x6a>
ffffffff8000cfd5:	48 bf 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rdi
ffffffff8000cfdc:	f7 87 21 
ffffffff8000cfdf:	e8 8c 3b ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff8000cfe4:	48 89 05 fd 01 21 00 	mov    %rax,0x2101fd(%rip)        # ffffffff8021d1e8 <m_early_alloc_mmap>
ffffffff8000cfeb:	48 8b 05 f6 01 21 00 	mov    0x2101f6(%rip),%rax        # ffffffff8021d1e8 <m_early_alloc_mmap>
ffffffff8000cff2:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000cff6:	75 2e                	jne    ffffffff8000d026 <early_alloc_page_phys+0x66>
ffffffff8000cff8:	31 c0                	xor    %eax,%eax
ffffffff8000cffa:	e8 f1 c8 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000cfff:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000d006:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d009:	48 c7 c2 42 96 01 80 	mov    $0xffffffff80019642,%rdx
ffffffff8000d010:	48 c7 c1 6d 9c 01 80 	mov    $0xffffffff80019c6d,%rcx
ffffffff8000d017:	41 b8 0d 00 00 00    	mov    $0xd,%r8d
ffffffff8000d01d:	31 c0                	xor    %eax,%eax
ffffffff8000d01f:	e8 1c 49 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d024:	0f 0b                	ud2    
ffffffff8000d026:	eb 00                	jmp    ffffffff8000d028 <early_alloc_page_phys+0x68>
ffffffff8000d028:	eb 00                	jmp    ffffffff8000d02a <early_alloc_page_phys+0x6a>
ffffffff8000d02a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000d031:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff8000d035:	48 8b 0d ac 01 21 00 	mov    0x2101ac(%rip),%rcx        # ffffffff8021d1e8 <m_early_alloc_mmap>
ffffffff8000d03c:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000d040:	73 7d                	jae    ffffffff8000d0bf <early_alloc_page_phys+0xff>
ffffffff8000d042:	48 8b 05 9f 01 21 00 	mov    0x21019f(%rip),%rax        # ffffffff8021d1e8 <m_early_alloc_mmap>
ffffffff8000d049:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000d04d:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000d051:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000d055:	48 01 c8             	add    %rcx,%rax
ffffffff8000d058:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d05c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d060:	83 78 10 01          	cmpl   $0x1,0x10(%rax)
ffffffff8000d064:	75 49                	jne    ffffffff8000d0af <early_alloc_page_phys+0xef>
ffffffff8000d066:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d06a:	48 81 78 08 00 10 00 	cmpq   $0x1000,0x8(%rax)
ffffffff8000d071:	00 
ffffffff8000d072:	72 39                	jb     ffffffff8000d0ad <early_alloc_page_phys+0xed>
ffffffff8000d074:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d078:	48 8b 00             	mov    (%rax),%rax
ffffffff8000d07b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000d07f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d083:	48 8b 08             	mov    (%rax),%rcx
ffffffff8000d086:	48 81 c1 00 10 00 00 	add    $0x1000,%rcx
ffffffff8000d08d:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000d090:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d094:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8000d098:	48 81 e9 00 10 00 00 	sub    $0x1000,%rcx
ffffffff8000d09f:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff8000d0a3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000d0a7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000d0ab:	eb 42                	jmp    ffffffff8000d0ef <early_alloc_page_phys+0x12f>
ffffffff8000d0ad:	eb 00                	jmp    ffffffff8000d0af <early_alloc_page_phys+0xef>
ffffffff8000d0af:	eb 00                	jmp    ffffffff8000d0b1 <early_alloc_page_phys+0xf1>
ffffffff8000d0b1:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000d0b4:	83 c0 01             	add    $0x1,%eax
ffffffff8000d0b7:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000d0ba:	e9 72 ff ff ff       	jmp    ffffffff8000d031 <early_alloc_page_phys+0x71>
ffffffff8000d0bf:	eb 00                	jmp    ffffffff8000d0c1 <early_alloc_page_phys+0x101>
ffffffff8000d0c1:	31 c0                	xor    %eax,%eax
ffffffff8000d0c3:	e8 28 c8 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d0c8:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000d0cf:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d0d2:	48 c7 c2 42 96 01 80 	mov    $0xffffffff80019642,%rdx
ffffffff8000d0d9:	48 c7 c1 6d 9c 01 80 	mov    $0xffffffff80019c6d,%rcx
ffffffff8000d0e0:	41 b8 1f 00 00 00    	mov    $0x1f,%r8d
ffffffff8000d0e6:	31 c0                	xor    %eax,%eax
ffffffff8000d0e8:	e8 53 48 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d0ed:	0f 0b                	ud2    
ffffffff8000d0ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000d0f3:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000d0f7:	5d                   	pop    %rbp
ffffffff8000d0f8:	c3                   	ret    
ffffffff8000d0f9:	cc                   	int3   
ffffffff8000d0fa:	cc                   	int3   
ffffffff8000d0fb:	cc                   	int3   
ffffffff8000d0fc:	cc                   	int3   
ffffffff8000d0fd:	cc                   	int3   
ffffffff8000d0fe:	cc                   	int3   
ffffffff8000d0ff:	cc                   	int3   

ffffffff8000d100 <init_malloc>:
ffffffff8000d100:	55                   	push   %rbp
ffffffff8000d101:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d104:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d108:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000d10f:	e8 7c ed ff ff       	call   ffffffff8000be90 <tlsf_create_with_pool>
ffffffff8000d114:	48 89 05 d5 00 21 00 	mov    %rax,0x2100d5(%rip)        # ffffffff8021d1f0 <m_tlsf>
ffffffff8000d11b:	48 8b 05 ce 00 21 00 	mov    0x2100ce(%rip),%rax        # ffffffff8021d1f0 <m_tlsf>
ffffffff8000d122:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000d126:	75 38                	jne    ffffffff8000d160 <init_malloc+0x60>
ffffffff8000d128:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000d12f:	31 c0                	xor    %eax,%eax
ffffffff8000d131:	e8 ba c7 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d136:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000d139:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000d140:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d143:	48 c7 c1 0d 8e 01 80 	mov    $0xffffffff80018e0d,%rcx
ffffffff8000d14a:	49 c7 c0 cf 91 01 80 	mov    $0xffffffff800191cf,%r8
ffffffff8000d151:	41 b9 11 00 00 00    	mov    $0x11,%r9d
ffffffff8000d157:	31 c0                	xor    %eax,%eax
ffffffff8000d159:	e8 e2 47 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d15e:	eb 04                	jmp    ffffffff8000d164 <init_malloc+0x64>
ffffffff8000d160:	eb 00                	jmp    ffffffff8000d162 <init_malloc+0x62>
ffffffff8000d162:	eb 00                	jmp    ffffffff8000d164 <init_malloc+0x64>
ffffffff8000d164:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000d167:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d16b:	5d                   	pop    %rbp
ffffffff8000d16c:	c3                   	ret    
ffffffff8000d16d:	cc                   	int3   
ffffffff8000d16e:	cc                   	int3   
ffffffff8000d16f:	cc                   	int3   

ffffffff8000d170 <malloc>:
ffffffff8000d170:	55                   	push   %rbp
ffffffff8000d171:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d174:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d178:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000d17c:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d183:	e8 c8 38 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000d188:	48 8b 3d 61 00 21 00 	mov    0x210061(%rip),%rdi        # ffffffff8021d1f0 <m_tlsf>
ffffffff8000d18f:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000d193:	e8 78 ed ff ff       	call   ffffffff8000bf10 <tlsf_malloc>
ffffffff8000d198:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d19c:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d1a3:	e8 98 39 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000d1a8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000d1ad:	74 11                	je     ffffffff8000d1c0 <malloc+0x50>
ffffffff8000d1af:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000d1b3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000d1b7:	31 c0                	xor    %eax,%eax
ffffffff8000d1b9:	31 f6                	xor    %esi,%esi
ffffffff8000d1bb:	e8 60 27 00 00       	call   ffffffff8000f920 <memset>
ffffffff8000d1c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d1c4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d1c8:	5d                   	pop    %rbp
ffffffff8000d1c9:	c3                   	ret    
ffffffff8000d1ca:	cc                   	int3   
ffffffff8000d1cb:	cc                   	int3   
ffffffff8000d1cc:	cc                   	int3   
ffffffff8000d1cd:	cc                   	int3   
ffffffff8000d1ce:	cc                   	int3   
ffffffff8000d1cf:	cc                   	int3   

ffffffff8000d1d0 <malloc_aligned>:
ffffffff8000d1d0:	55                   	push   %rbp
ffffffff8000d1d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d1d4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000d1d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000d1dc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000d1e0:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d1e7:	e8 64 38 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000d1ec:	48 8b 3d fd ff 20 00 	mov    0x20fffd(%rip),%rdi        # ffffffff8021d1f0 <m_tlsf>
ffffffff8000d1f3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000d1f7:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000d1fb:	e8 90 f5 ff ff       	call   ffffffff8000c790 <tlsf_memalign>
ffffffff8000d200:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d204:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d20b:	e8 30 39 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000d210:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000d215:	74 11                	je     ffffffff8000d228 <malloc_aligned+0x58>
ffffffff8000d217:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000d21b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000d21f:	31 c0                	xor    %eax,%eax
ffffffff8000d221:	31 f6                	xor    %esi,%esi
ffffffff8000d223:	e8 f8 26 00 00       	call   ffffffff8000f920 <memset>
ffffffff8000d228:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d22c:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000d230:	5d                   	pop    %rbp
ffffffff8000d231:	c3                   	ret    
ffffffff8000d232:	cc                   	int3   
ffffffff8000d233:	cc                   	int3   
ffffffff8000d234:	cc                   	int3   
ffffffff8000d235:	cc                   	int3   
ffffffff8000d236:	cc                   	int3   
ffffffff8000d237:	cc                   	int3   
ffffffff8000d238:	cc                   	int3   
ffffffff8000d239:	cc                   	int3   
ffffffff8000d23a:	cc                   	int3   
ffffffff8000d23b:	cc                   	int3   
ffffffff8000d23c:	cc                   	int3   
ffffffff8000d23d:	cc                   	int3   
ffffffff8000d23e:	cc                   	int3   
ffffffff8000d23f:	cc                   	int3   

ffffffff8000d240 <realloc>:
ffffffff8000d240:	55                   	push   %rbp
ffffffff8000d241:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d244:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d248:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000d24c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000d250:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d257:	e8 f4 37 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000d25c:	48 8b 3d 8d ff 20 00 	mov    0x20ff8d(%rip),%rdi        # ffffffff8021d1f0 <m_tlsf>
ffffffff8000d263:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d267:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000d26b:	e8 f0 fa ff ff       	call   ffffffff8000cd60 <tlsf_realloc>
ffffffff8000d270:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d274:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d27b:	e8 c0 38 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000d280:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d284:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d288:	5d                   	pop    %rbp
ffffffff8000d289:	c3                   	ret    
ffffffff8000d28a:	cc                   	int3   
ffffffff8000d28b:	cc                   	int3   
ffffffff8000d28c:	cc                   	int3   
ffffffff8000d28d:	cc                   	int3   
ffffffff8000d28e:	cc                   	int3   
ffffffff8000d28f:	cc                   	int3   

ffffffff8000d290 <free>:
ffffffff8000d290:	55                   	push   %rbp
ffffffff8000d291:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d294:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d298:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000d29c:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d2a3:	e8 a8 37 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000d2a8:	48 8b 3d 41 ff 20 00 	mov    0x20ff41(%rip),%rdi        # ffffffff8021d1f0 <m_tlsf>
ffffffff8000d2af:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d2b3:	e8 d8 f6 ff ff       	call   ffffffff8000c990 <tlsf_free>
ffffffff8000d2b8:	48 c7 c7 f8 d1 21 80 	mov    $0xffffffff8021d1f8,%rdi
ffffffff8000d2bf:	e8 7c 38 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000d2c4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d2c8:	5d                   	pop    %rbp
ffffffff8000d2c9:	c3                   	ret    
ffffffff8000d2ca:	cc                   	int3   
ffffffff8000d2cb:	cc                   	int3   
ffffffff8000d2cc:	cc                   	int3   
ffffffff8000d2cd:	cc                   	int3   
ffffffff8000d2ce:	cc                   	int3   
ffffffff8000d2cf:	cc                   	int3   

ffffffff8000d2d0 <bitset_sizeof>:
ffffffff8000d2d0:	55                   	push   %rbp
ffffffff8000d2d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d2d4:	50                   	push   %rax
ffffffff8000d2d5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000d2d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d2dd:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000d2e1:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000d2e5:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000d2e9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000d2ed:	5d                   	pop    %rbp
ffffffff8000d2ee:	c3                   	ret    
ffffffff8000d2ef:	cc                   	int3   

ffffffff8000d2f0 <buddy_sizeof>:
ffffffff8000d2f0:	55                   	push   %rbp
ffffffff8000d2f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d2f4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d2f8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000d2fc:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff8000d301:	73 2e                	jae    ffffffff8000d331 <buddy_sizeof+0x41>
ffffffff8000d303:	31 c0                	xor    %eax,%eax
ffffffff8000d305:	e8 e6 c5 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d30a:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000d311:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d314:	48 c7 c2 ac 9e 01 80 	mov    $0xffffffff80019eac,%rdx
ffffffff8000d31b:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000d322:	41 b8 e5 01 00 00    	mov    $0x1e5,%r8d
ffffffff8000d328:	31 c0                	xor    %eax,%eax
ffffffff8000d32a:	e8 11 46 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d32f:	0f 0b                	ud2    
ffffffff8000d331:	eb 00                	jmp    ffffffff8000d333 <buddy_sizeof+0x43>
ffffffff8000d333:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000d337:	e8 14 00 00 00       	call   ffffffff8000d350 <buddy_tree_order_for_memory>
ffffffff8000d33c:	0f b6 f8             	movzbl %al,%edi
ffffffff8000d33f:	e8 3c 00 00 00       	call   ffffffff8000d380 <buddy_tree_sizeof>
ffffffff8000d344:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d348:	5d                   	pop    %rbp
ffffffff8000d349:	c3                   	ret    
ffffffff8000d34a:	cc                   	int3   
ffffffff8000d34b:	cc                   	int3   
ffffffff8000d34c:	cc                   	int3   
ffffffff8000d34d:	cc                   	int3   
ffffffff8000d34e:	cc                   	int3   
ffffffff8000d34f:	cc                   	int3   

ffffffff8000d350 <buddy_tree_order_for_memory>:
ffffffff8000d350:	55                   	push   %rbp
ffffffff8000d351:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d354:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d358:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000d35c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d360:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff8000d364:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d368:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000d36c:	e8 df 00 00 00       	call   ffffffff8000d450 <ceiling_power_of_two>
ffffffff8000d371:	48 89 c7             	mov    %rax,%rdi
ffffffff8000d374:	e8 27 01 00 00       	call   ffffffff8000d4a0 <highest_bit_position>
ffffffff8000d379:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d37d:	5d                   	pop    %rbp
ffffffff8000d37e:	c3                   	ret    
ffffffff8000d37f:	cc                   	int3   

ffffffff8000d380 <buddy_tree_sizeof>:
ffffffff8000d380:	55                   	push   %rbp
ffffffff8000d381:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d384:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000d388:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff8000d38c:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8000d38f:	31 c9                	xor    %ecx,%ecx
ffffffff8000d391:	0f b6 f8             	movzbl %al,%edi
ffffffff8000d394:	31 f6                	xor    %esi,%esi
ffffffff8000d396:	e8 55 00 00 00       	call   ffffffff8000d3f0 <size_for_order>
ffffffff8000d39b:	48 89 c7             	mov    %rax,%rdi
ffffffff8000d39e:	e8 2d ff ff ff       	call   ffffffff8000d2d0 <bitset_sizeof>
ffffffff8000d3a3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d3a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d3ab:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000d3af:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000d3b3:	74 10                	je     ffffffff8000d3c5 <buddy_tree_sizeof+0x45>
ffffffff8000d3b5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d3b9:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000d3bd:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff8000d3c1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d3c5:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000d3c9:	83 c0 02             	add    $0x2,%eax
ffffffff8000d3cc:	48 98                	cltq   
ffffffff8000d3ce:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff8000d3d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000d3d6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d3da:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff8000d3de:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000d3e2:	5d                   	pop    %rbp
ffffffff8000d3e3:	c3                   	ret    
ffffffff8000d3e4:	cc                   	int3   
ffffffff8000d3e5:	cc                   	int3   
ffffffff8000d3e6:	cc                   	int3   
ffffffff8000d3e7:	cc                   	int3   
ffffffff8000d3e8:	cc                   	int3   
ffffffff8000d3e9:	cc                   	int3   
ffffffff8000d3ea:	cc                   	int3   
ffffffff8000d3eb:	cc                   	int3   
ffffffff8000d3ec:	cc                   	int3   
ffffffff8000d3ed:	cc                   	int3   
ffffffff8000d3ee:	cc                   	int3   
ffffffff8000d3ef:	cc                   	int3   

ffffffff8000d3f0 <size_for_order>:
ffffffff8000d3f0:	55                   	push   %rbp
ffffffff8000d3f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d3f4:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000d3f8:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff8000d3fc:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
ffffffff8000d400:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8000d407:	00 
ffffffff8000d408:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8000d40f:	00 
ffffffff8000d410:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000d414:	0f b6 4d fe          	movzbl -0x2(%rbp),%ecx
ffffffff8000d418:	39 c8                	cmp    %ecx,%eax
ffffffff8000d41a:	74 27                	je     ffffffff8000d443 <size_for_order+0x53>
ffffffff8000d41c:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000d420:	48 0f af 45 f0       	imul   -0x10(%rbp),%rax
ffffffff8000d425:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff8000d429:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000d42d:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8000d430:	04 ff                	add    $0xff,%al
ffffffff8000d432:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff8000d435:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d439:	48 c1 e0 01          	shl    $0x1,%rax
ffffffff8000d43d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d441:	eb cd                	jmp    ffffffff8000d410 <size_for_order+0x20>
ffffffff8000d443:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000d447:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000d44b:	5d                   	pop    %rbp
ffffffff8000d44c:	c3                   	ret    
ffffffff8000d44d:	cc                   	int3   
ffffffff8000d44e:	cc                   	int3   
ffffffff8000d44f:	cc                   	int3   

ffffffff8000d450 <ceiling_power_of_two>:
ffffffff8000d450:	55                   	push   %rbp
ffffffff8000d451:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d454:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d458:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000d45c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000d461:	0f 95 c0             	setne  %al
ffffffff8000d464:	34 ff                	xor    $0xff,%al
ffffffff8000d466:	24 01                	and    $0x1,%al
ffffffff8000d468:	0f b6 c0             	movzbl %al,%eax
ffffffff8000d46b:	48 98                	cltq   
ffffffff8000d46d:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8000d471:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d475:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000d479:	48 03 7d f8          	add    -0x8(%rbp),%rdi
ffffffff8000d47d:	48 83 ef 01          	sub    $0x1,%rdi
ffffffff8000d481:	e8 1a 00 00 00       	call   ffffffff8000d4a0 <highest_bit_position>
ffffffff8000d486:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000d48a:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000d48f:	48 89 c1             	mov    %rax,%rcx
ffffffff8000d492:	48 d3 e2             	shl    %cl,%rdx
ffffffff8000d495:	48 89 d0             	mov    %rdx,%rax
ffffffff8000d498:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d49c:	5d                   	pop    %rbp
ffffffff8000d49d:	c3                   	ret    
ffffffff8000d49e:	cc                   	int3   
ffffffff8000d49f:	cc                   	int3   

ffffffff8000d4a0 <highest_bit_position>:
ffffffff8000d4a0:	55                   	push   %rbp
ffffffff8000d4a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d4a4:	50                   	push   %rax
ffffffff8000d4a5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000d4a9:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000d4ae:	75 04                	jne    ffffffff8000d4b4 <highest_bit_position+0x14>
ffffffff8000d4b0:	31 c0                	xor    %eax,%eax
ffffffff8000d4b2:	eb 13                	jmp    ffffffff8000d4c7 <highest_bit_position+0x27>
ffffffff8000d4b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d4b8:	48 0f bd c8          	bsr    %rax,%rcx
ffffffff8000d4bc:	48 83 f1 3f          	xor    $0x3f,%rcx
ffffffff8000d4c0:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff8000d4c5:	29 c8                	sub    %ecx,%eax
ffffffff8000d4c7:	48 98                	cltq   
ffffffff8000d4c9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000d4cd:	5d                   	pop    %rbp
ffffffff8000d4ce:	c3                   	ret    
ffffffff8000d4cf:	cc                   	int3   

ffffffff8000d4d0 <init_palloc>:
ffffffff8000d4d0:	55                   	push   %rbp
ffffffff8000d4d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d4d4:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8000d4d8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000d4df:	48 bf 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rdi
ffffffff8000d4e6:	f7 87 21 
ffffffff8000d4e9:	e8 82 36 ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff8000d4ee:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d4f2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000d4f7:	75 3b                	jne    ffffffff8000d534 <init_palloc+0x64>
ffffffff8000d4f9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000d500:	31 c0                	xor    %eax,%eax
ffffffff8000d502:	e8 e9 c3 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d507:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000d50a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000d511:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d514:	48 c7 c1 af 8a 01 80 	mov    $0xffffffff80018aaf,%rcx
ffffffff8000d51b:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000d522:	41 b9 c0 02 00 00    	mov    $0x2c0,%r9d
ffffffff8000d528:	31 c0                	xor    %eax,%eax
ffffffff8000d52a:	e8 11 44 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d52f:	e9 ec 02 00 00       	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d534:	eb 00                	jmp    ffffffff8000d536 <init_palloc+0x66>
ffffffff8000d536:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8000d53d:	00 
ffffffff8000d53e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000d545:	48 63 45 f8          	movslq -0x8(%rbp),%rax
ffffffff8000d549:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000d54d:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000d551:	0f 83 89 00 00 00    	jae    ffffffff8000d5e0 <init_palloc+0x110>
ffffffff8000d557:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d55b:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000d55f:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff8000d563:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000d567:	48 01 c8             	add    %rcx,%rax
ffffffff8000d56a:	48 8b 00             	mov    (%rax),%rax
ffffffff8000d56d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000d571:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d575:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000d579:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff8000d57d:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000d581:	48 01 c8             	add    %rcx,%rax
ffffffff8000d584:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000d588:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000d58c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d590:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000d594:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff8000d598:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000d59c:	48 01 c8             	add    %rcx,%rax
ffffffff8000d59f:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff8000d5a2:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff8000d5a5:	83 7d e4 01          	cmpl   $0x1,-0x1c(%rbp)
ffffffff8000d5a9:	74 09                	je     ffffffff8000d5b4 <init_palloc+0xe4>
ffffffff8000d5ab:	81 7d e4 00 10 00 00 	cmpl   $0x1000,-0x1c(%rbp)
ffffffff8000d5b2:	75 1c                	jne    ffffffff8000d5d0 <init_palloc+0x100>
ffffffff8000d5b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000d5b8:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff8000d5bc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000d5c0:	76 0c                	jbe    ffffffff8000d5ce <init_palloc+0xfe>
ffffffff8000d5c2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000d5c6:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff8000d5ca:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000d5ce:	eb 00                	jmp    ffffffff8000d5d0 <init_palloc+0x100>
ffffffff8000d5d0:	eb 00                	jmp    ffffffff8000d5d2 <init_palloc+0x102>
ffffffff8000d5d2:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000d5d5:	83 c0 01             	add    $0x1,%eax
ffffffff8000d5d8:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000d5db:	e9 65 ff ff ff       	jmp    ffffffff8000d545 <init_palloc+0x75>
ffffffff8000d5e0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000d5e4:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff8000d5e8:	48 c7 45 a0 40 00 00 	movq   $0x40,-0x60(%rbp)
ffffffff8000d5ef:	00 
ffffffff8000d5f0:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8000d5f4:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff8000d5f8:	48 f7 d9             	neg    %rcx
ffffffff8000d5fb:	48 21 c8             	and    %rcx,%rax
ffffffff8000d5fe:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000d602:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000d606:	48 89 05 f3 fb 20 00 	mov    %rax,0x20fbf3(%rip)        # ffffffff8021d200 <m_buddy_memory_size>
ffffffff8000d60d:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000d611:	e8 da fc ff ff       	call   ffffffff8000d2f0 <buddy_sizeof>
ffffffff8000d616:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000d61a:	48 c7 45 b8 00 10 00 	movq   $0x1000,-0x48(%rbp)
ffffffff8000d621:	00 
ffffffff8000d622:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000d626:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8000d62a:	48 8d 44 01 ff       	lea    -0x1(%rcx,%rax,1),%rax
ffffffff8000d62f:	48 f7 d9             	neg    %rcx
ffffffff8000d632:	48 21 c8             	and    %rcx,%rax
ffffffff8000d635:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000d639:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000d63d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000d641:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000d645:	e8 06 fd ff ff       	call   ffffffff8000d350 <buddy_tree_order_for_memory>
ffffffff8000d64a:	88 05 b8 fb 20 00    	mov    %al,0x20fbb8(%rip)        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000d650:	8a 0d b2 fb 20 00    	mov    0x20fbb2(%rip),%cl        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000d656:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000d65b:	d3 e0                	shl    %cl,%eax
ffffffff8000d65d:	48 98                	cltq   
ffffffff8000d65f:	48 89 05 aa fb 20 00 	mov    %rax,0x20fbaa(%rip)        # ffffffff8021d210 <m_buddy_tree_upper_pos_bound>
ffffffff8000d666:	48 8b 05 93 fb 20 00 	mov    0x20fb93(%rip),%rax        # ffffffff8021d200 <m_buddy_memory_size>
ffffffff8000d66d:	48 b9 00 00 00 00 80 	movabs $0x8000000000,%rcx
ffffffff8000d674:	00 00 00 
ffffffff8000d677:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000d67a:	76 3b                	jbe    ffffffff8000d6b7 <init_palloc+0x1e7>
ffffffff8000d67c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000d683:	31 c0                	xor    %eax,%eax
ffffffff8000d685:	e8 66 c2 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d68a:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000d68d:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000d694:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d697:	48 c7 c1 af 8a 01 80 	mov    $0xffffffff80018aaf,%rcx
ffffffff8000d69e:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000d6a5:	41 b9 d8 02 00 00    	mov    $0x2d8,%r9d
ffffffff8000d6ab:	31 c0                	xor    %eax,%eax
ffffffff8000d6ad:	e8 8e 42 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d6b2:	e9 69 01 00 00       	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d6b7:	eb 00                	jmp    ffffffff8000d6b9 <init_palloc+0x1e9>
ffffffff8000d6b9:	eb 00                	jmp    ffffffff8000d6bb <init_palloc+0x1eb>
ffffffff8000d6bb:	48 b8 00 00 00 00 02 	movabs $0x200000000,%rax
ffffffff8000d6c2:	00 00 00 
ffffffff8000d6c5:	48 39 45 d8          	cmp    %rax,-0x28(%rbp)
ffffffff8000d6c9:	76 3b                	jbe    ffffffff8000d706 <init_palloc+0x236>
ffffffff8000d6cb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000d6d2:	31 c0                	xor    %eax,%eax
ffffffff8000d6d4:	e8 17 c2 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d6d9:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000d6dc:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000d6e3:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d6e6:	48 c7 c1 af 8a 01 80 	mov    $0xffffffff80018aaf,%rcx
ffffffff8000d6ed:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000d6f4:	41 b9 d9 02 00 00    	mov    $0x2d9,%r9d
ffffffff8000d6fa:	31 c0                	xor    %eax,%eax
ffffffff8000d6fc:	e8 3f 42 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d701:	e9 1a 01 00 00       	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d706:	eb 00                	jmp    ffffffff8000d708 <init_palloc+0x238>
ffffffff8000d708:	31 c0                	xor    %eax,%eax
ffffffff8000d70a:	e8 e1 c1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d70f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8000d713:	48 c7 c7 4b 90 01 80 	mov    $0xffffffff8001904b,%rdi
ffffffff8000d71a:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d71d:	31 c0                	xor    %eax,%eax
ffffffff8000d71f:	e8 1c 42 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d724:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000d728:	48 c1 ee 0c          	shr    $0xc,%rsi
ffffffff8000d72c:	48 bf 00 00 00 40 80 	movabs $0xffff808040000000,%rdi
ffffffff8000d733:	80 ff ff 
ffffffff8000d736:	e8 55 da ff ff       	call   ffffffff8000b190 <vmm_alloc>
ffffffff8000d73b:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000d73e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000d742:	74 31                	je     ffffffff8000d775 <init_palloc+0x2a5>
ffffffff8000d744:	31 c0                	xor    %eax,%eax
ffffffff8000d746:	e8 a5 c1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d74b:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000d752:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d755:	48 c7 c2 af 8a 01 80 	mov    $0xffffffff80018aaf,%rdx
ffffffff8000d75c:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000d763:	41 b8 dd 02 00 00    	mov    $0x2dd,%r8d
ffffffff8000d769:	31 c0                	xor    %eax,%eax
ffffffff8000d76b:	e8 d0 41 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d770:	e9 ab 00 00 00       	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d775:	eb 00                	jmp    ffffffff8000d777 <init_palloc+0x2a7>
ffffffff8000d777:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8000d77b:	31 c0                	xor    %eax,%eax
ffffffff8000d77d:	48 bf 00 00 00 40 80 	movabs $0xffff808040000000,%rdi
ffffffff8000d784:	80 ff ff 
ffffffff8000d787:	31 f6                	xor    %esi,%esi
ffffffff8000d789:	e8 92 21 00 00       	call   ffffffff8000f920 <memset>
ffffffff8000d78e:	e8 9d 00 00 00       	call   ffffffff8000d830 <buddy_tree_populate_size_for_order>
ffffffff8000d793:	e8 58 01 00 00       	call   ffffffff8000d8f0 <buddy_toggle_virtual_slots>
ffffffff8000d798:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d79c:	e8 8f 02 00 00       	call   ffffffff8000da30 <mark_unusable_ranges>
ffffffff8000d7a1:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000d7a4:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000d7a8:	74 2e                	je     ffffffff8000d7d8 <init_palloc+0x308>
ffffffff8000d7aa:	31 c0                	xor    %eax,%eax
ffffffff8000d7ac:	e8 3f c1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d7b1:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000d7b8:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d7bb:	48 c7 c2 af 8a 01 80 	mov    $0xffffffff80018aaf,%rdx
ffffffff8000d7c2:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000d7c9:	41 b8 e7 02 00 00    	mov    $0x2e7,%r8d
ffffffff8000d7cf:	31 c0                	xor    %eax,%eax
ffffffff8000d7d1:	e8 6a 41 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d7d6:	eb 48                	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d7d8:	eb 00                	jmp    ffffffff8000d7da <init_palloc+0x30a>
ffffffff8000d7da:	eb 00                	jmp    ffffffff8000d7dc <init_palloc+0x30c>
ffffffff8000d7dc:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d7e0:	e8 2b 03 00 00       	call   ffffffff8000db10 <mark_bootloader_reclaim>
ffffffff8000d7e5:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000d7e8:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff8000d7ec:	74 2e                	je     ffffffff8000d81c <init_palloc+0x34c>
ffffffff8000d7ee:	31 c0                	xor    %eax,%eax
ffffffff8000d7f0:	e8 fb c0 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000d7f5:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000d7fc:	48 89 c6             	mov    %rax,%rsi
ffffffff8000d7ff:	48 c7 c2 af 8a 01 80 	mov    $0xffffffff80018aaf,%rdx
ffffffff8000d806:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000d80d:	41 b8 e8 02 00 00    	mov    $0x2e8,%r8d
ffffffff8000d813:	31 c0                	xor    %eax,%eax
ffffffff8000d815:	e8 26 41 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000d81a:	eb 04                	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d81c:	eb 00                	jmp    ffffffff8000d81e <init_palloc+0x34e>
ffffffff8000d81e:	eb 00                	jmp    ffffffff8000d820 <init_palloc+0x350>
ffffffff8000d820:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000d823:	48 83 c4 70          	add    $0x70,%rsp
ffffffff8000d827:	5d                   	pop    %rbp
ffffffff8000d828:	c3                   	ret    
ffffffff8000d829:	cc                   	int3   
ffffffff8000d82a:	cc                   	int3   
ffffffff8000d82b:	cc                   	int3   
ffffffff8000d82c:	cc                   	int3   
ffffffff8000d82d:	cc                   	int3   
ffffffff8000d82e:	cc                   	int3   
ffffffff8000d82f:	cc                   	int3   

ffffffff8000d830 <buddy_tree_populate_size_for_order>:
ffffffff8000d830:	55                   	push   %rbp
ffffffff8000d831:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d834:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000d838:	8a 05 ca f9 20 00    	mov    0x20f9ca(%rip),%al        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000d83e:	31 c9                	xor    %ecx,%ecx
ffffffff8000d840:	0f b6 f8             	movzbl %al,%edi
ffffffff8000d843:	31 f6                	xor    %esi,%esi
ffffffff8000d845:	e8 a6 fb ff ff       	call   ffffffff8000d3f0 <size_for_order>
ffffffff8000d84a:	48 89 c7             	mov    %rax,%rdi
ffffffff8000d84d:	e8 7e fa ff ff       	call   ffffffff8000d2d0 <bitset_sizeof>
ffffffff8000d852:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d856:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d85a:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000d85e:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000d862:	74 10                	je     ffffffff8000d874 <buddy_tree_populate_size_for_order+0x44>
ffffffff8000d864:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d868:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000d86c:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff8000d870:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d874:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000d878:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000d87c:	48 89 05 9d f9 20 00 	mov    %rax,0x20f99d(%rip)        # ffffffff8021d220 <m_buddy_tree_size_for_order_offset>
ffffffff8000d883:	48 8b 05 96 f9 20 00 	mov    0x20f996(%rip),%rax        # ffffffff8021d220 <m_buddy_tree_size_for_order_offset>
ffffffff8000d88a:	48 ff c0             	inc    %rax
ffffffff8000d88d:	48 89 05 8c f9 20 00 	mov    %rax,0x20f98c(%rip)        # ffffffff8021d220 <m_buddy_tree_size_for_order_offset>
ffffffff8000d894:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000d89b:	00 
ffffffff8000d89c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d8a0:	8a 0d 62 f9 20 00    	mov    0x20f962(%rip),%cl        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000d8a6:	0f b6 c9             	movzbl %cl,%ecx
ffffffff8000d8a9:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000d8ac:	77 37                	ja     ffffffff8000d8e5 <buddy_tree_populate_size_for_order+0xb5>
ffffffff8000d8ae:	0f b6 3d 53 f9 20 00 	movzbl 0x20f953(%rip),%edi        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000d8b5:	0f b6 75 f8          	movzbl -0x8(%rbp),%esi
ffffffff8000d8b9:	e8 32 fb ff ff       	call   ffffffff8000d3f0 <size_for_order>
ffffffff8000d8be:	48 8b 0d 5b f9 20 00 	mov    0x20f95b(%rip),%rcx        # ffffffff8021d220 <m_buddy_tree_size_for_order_offset>
ffffffff8000d8c5:	48 03 4d f8          	add    -0x8(%rbp),%rcx
ffffffff8000d8c9:	48 ba 00 00 00 40 80 	movabs $0xffff808040000000,%rdx
ffffffff8000d8d0:	80 ff ff 
ffffffff8000d8d3:	48 89 04 ca          	mov    %rax,(%rdx,%rcx,8)
ffffffff8000d8d7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000d8db:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000d8df:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d8e3:	eb b7                	jmp    ffffffff8000d89c <buddy_tree_populate_size_for_order+0x6c>
ffffffff8000d8e5:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000d8e9:	5d                   	pop    %rbp
ffffffff8000d8ea:	c3                   	ret    
ffffffff8000d8eb:	cc                   	int3   
ffffffff8000d8ec:	cc                   	int3   
ffffffff8000d8ed:	cc                   	int3   
ffffffff8000d8ee:	cc                   	int3   
ffffffff8000d8ef:	cc                   	int3   

ffffffff8000d8f0 <buddy_toggle_virtual_slots>:
ffffffff8000d8f0:	55                   	push   %rbp
ffffffff8000d8f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000d8f4:	48 83 ec 70          	sub    $0x70,%rsp
ffffffff8000d8f8:	48 8b 05 01 f9 20 00 	mov    0x20f901(%rip),%rax        # ffffffff8021d200 <m_buddy_memory_size>
ffffffff8000d8ff:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000d903:	e8 c8 0d 00 00       	call   ffffffff8000e6d0 <buddy_effective_memory_size>
ffffffff8000d908:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000d90c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000d910:	48 3b 45 d0          	cmp    -0x30(%rbp),%rax
ffffffff8000d914:	75 05                	jne    ffffffff8000d91b <buddy_toggle_virtual_slots+0x2b>
ffffffff8000d916:	e9 04 01 00 00       	jmp    ffffffff8000da1f <buddy_toggle_virtual_slots+0x12f>
ffffffff8000d91b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000d91f:	48 2b 45 d0          	sub    -0x30(%rbp),%rax
ffffffff8000d923:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000d927:	e8 c4 0d 00 00       	call   ffffffff8000e6f0 <buddy_tree_root>
ffffffff8000d92c:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff8000d930:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
ffffffff8000d934:	48 8b 7d 90          	mov    -0x70(%rbp),%rdi
ffffffff8000d938:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
ffffffff8000d93c:	e8 df 0d 00 00       	call   ffffffff8000e720 <buddy_tree_right_child>
ffffffff8000d941:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d945:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000d949:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000d94e:	0f 84 c9 00 00 00    	je     ffffffff8000da1d <buddy_toggle_virtual_slots+0x12d>
ffffffff8000d954:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d958:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d95c:	e8 2f 0c 00 00       	call   ffffffff8000e590 <buddy_tree_depth>
ffffffff8000d961:	48 89 c7             	mov    %rax,%rdi
ffffffff8000d964:	e8 67 04 00 00       	call   ffffffff8000ddd0 <size_for_depth>
ffffffff8000d969:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000d96d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000d971:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff8000d975:	75 12                	jne    ffffffff8000d989 <buddy_toggle_virtual_slots+0x99>
ffffffff8000d977:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d97b:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d97f:	e8 5c 05 00 00       	call   ffffffff8000dee0 <buddy_tree_mark>
ffffffff8000d984:	e9 96 00 00 00       	jmp    ffffffff8000da1f <buddy_toggle_virtual_slots+0x12f>
ffffffff8000d989:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000d98d:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000d991:	48 c1 e9 01          	shr    $0x1,%rcx
ffffffff8000d995:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000d998:	77 27                	ja     ffffffff8000d9c1 <buddy_toggle_virtual_slots+0xd1>
ffffffff8000d99a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d99e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d9a2:	e8 79 0d 00 00       	call   ffffffff8000e720 <buddy_tree_right_child>
ffffffff8000d9a7:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000d9ab:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8000d9af:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000d9b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000d9b7:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000d9bb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000d9bf:	eb 88                	jmp    ffffffff8000d949 <buddy_toggle_virtual_slots+0x59>
ffffffff8000d9c1:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d9c5:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d9c9:	e8 52 0d 00 00       	call   ffffffff8000e720 <buddy_tree_right_child>
ffffffff8000d9ce:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000d9d2:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8000d9d6:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000d9da:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff8000d9de:	e8 fd 04 00 00       	call   ffffffff8000dee0 <buddy_tree_mark>
ffffffff8000d9e3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000d9e7:	48 c1 e8 01          	shr    $0x1,%rax
ffffffff8000d9eb:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000d9ef:	48 29 c1             	sub    %rax,%rcx
ffffffff8000d9f2:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff8000d9f6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000d9fa:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000d9fe:	e8 6d 0d 00 00       	call   ffffffff8000e770 <buddy_tree_left_child>
ffffffff8000da03:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000da07:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8000da0b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000da0f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000da13:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000da17:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000da1b:	eb a2                	jmp    ffffffff8000d9bf <buddy_toggle_virtual_slots+0xcf>
ffffffff8000da1d:	eb 00                	jmp    ffffffff8000da1f <buddy_toggle_virtual_slots+0x12f>
ffffffff8000da1f:	48 83 c4 70          	add    $0x70,%rsp
ffffffff8000da23:	5d                   	pop    %rbp
ffffffff8000da24:	c3                   	ret    
ffffffff8000da25:	cc                   	int3   
ffffffff8000da26:	cc                   	int3   
ffffffff8000da27:	cc                   	int3   
ffffffff8000da28:	cc                   	int3   
ffffffff8000da29:	cc                   	int3   
ffffffff8000da2a:	cc                   	int3   
ffffffff8000da2b:	cc                   	int3   
ffffffff8000da2c:	cc                   	int3   
ffffffff8000da2d:	cc                   	int3   
ffffffff8000da2e:	cc                   	int3   
ffffffff8000da2f:	cc                   	int3   

ffffffff8000da30 <mark_unusable_ranges>:
ffffffff8000da30:	55                   	push   %rbp
ffffffff8000da31:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000da34:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000da38:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000da3c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000da43:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8000da4a:	00 
ffffffff8000da4b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000da52:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff8000da56:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000da5a:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000da5e:	0f 83 a0 00 00 00    	jae    ffffffff8000db04 <mark_unusable_ranges+0xd4>
ffffffff8000da64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000da68:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000da6c:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000da70:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000da74:	48 01 c8             	add    %rcx,%rax
ffffffff8000da77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000da7b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000da7f:	81 78 10 00 10 00 00 	cmpl   $0x1000,0x10(%rax)
ffffffff8000da86:	74 0a                	je     ffffffff8000da92 <mark_unusable_ranges+0x62>
ffffffff8000da88:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000da8c:	83 78 10 01          	cmpl   $0x1,0x10(%rax)
ffffffff8000da90:	75 62                	jne    ffffffff8000daf4 <mark_unusable_ranges+0xc4>
ffffffff8000da92:	eb 00                	jmp    ffffffff8000da94 <mark_unusable_ranges+0x64>
ffffffff8000da94:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000da98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000da9c:	48 8b 30             	mov    (%rax),%rsi
ffffffff8000da9f:	48 2b 75 e8          	sub    -0x18(%rbp),%rsi
ffffffff8000daa3:	e8 28 01 00 00       	call   ffffffff8000dbd0 <mark_range>
ffffffff8000daa8:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000daab:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000daaf:	74 2e                	je     ffffffff8000dadf <mark_unusable_ranges+0xaf>
ffffffff8000dab1:	31 c0                	xor    %eax,%eax
ffffffff8000dab3:	e8 38 be ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000dab8:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000dabf:	48 89 c6             	mov    %rax,%rsi
ffffffff8000dac2:	48 c7 c2 73 8d 01 80 	mov    $0xffffffff80018d73,%rdx
ffffffff8000dac9:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000dad0:	41 b8 9a 02 00 00    	mov    $0x29a,%r8d
ffffffff8000dad6:	31 c0                	xor    %eax,%eax
ffffffff8000dad8:	e8 63 3e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000dadd:	eb 27                	jmp    ffffffff8000db06 <mark_unusable_ranges+0xd6>
ffffffff8000dadf:	eb 00                	jmp    ffffffff8000dae1 <mark_unusable_ranges+0xb1>
ffffffff8000dae1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000dae5:	48 8b 00             	mov    (%rax),%rax
ffffffff8000dae8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000daec:	48 03 41 08          	add    0x8(%rcx),%rax
ffffffff8000daf0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000daf4:	eb 00                	jmp    ffffffff8000daf6 <mark_unusable_ranges+0xc6>
ffffffff8000daf6:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000daf9:	83 c0 01             	add    $0x1,%eax
ffffffff8000dafc:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000daff:	e9 4e ff ff ff       	jmp    ffffffff8000da52 <mark_unusable_ranges+0x22>
ffffffff8000db04:	eb 00                	jmp    ffffffff8000db06 <mark_unusable_ranges+0xd6>
ffffffff8000db06:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000db09:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000db0d:	5d                   	pop    %rbp
ffffffff8000db0e:	c3                   	ret    
ffffffff8000db0f:	cc                   	int3   

ffffffff8000db10 <mark_bootloader_reclaim>:
ffffffff8000db10:	55                   	push   %rbp
ffffffff8000db11:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000db14:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000db18:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000db1c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000db23:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000db2a:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff8000db2e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000db32:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000db36:	0f 83 85 00 00 00    	jae    ffffffff8000dbc1 <mark_bootloader_reclaim+0xb1>
ffffffff8000db3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000db40:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000db44:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff8000db48:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000db4c:	48 01 c8             	add    %rcx,%rax
ffffffff8000db4f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000db53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000db57:	81 78 10 00 10 00 00 	cmpl   $0x1000,0x10(%rax)
ffffffff8000db5e:	75 51                	jne    ffffffff8000dbb1 <mark_bootloader_reclaim+0xa1>
ffffffff8000db60:	eb 00                	jmp    ffffffff8000db62 <mark_bootloader_reclaim+0x52>
ffffffff8000db62:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000db66:	48 8b 38             	mov    (%rax),%rdi
ffffffff8000db69:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000db6d:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff8000db71:	e8 5a 00 00 00       	call   ffffffff8000dbd0 <mark_range>
ffffffff8000db76:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8000db79:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff8000db7d:	74 2e                	je     ffffffff8000dbad <mark_bootloader_reclaim+0x9d>
ffffffff8000db7f:	31 c0                	xor    %eax,%eax
ffffffff8000db81:	e8 6a bd ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000db86:	48 c7 c7 76 90 01 80 	mov    $0xffffffff80019076,%rdi
ffffffff8000db8d:	48 89 c6             	mov    %rax,%rsi
ffffffff8000db90:	48 c7 c2 80 9c 01 80 	mov    $0xffffffff80019c80,%rdx
ffffffff8000db97:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000db9e:	41 b8 b3 02 00 00    	mov    $0x2b3,%r8d
ffffffff8000dba4:	31 c0                	xor    %eax,%eax
ffffffff8000dba6:	e8 95 3d 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000dbab:	eb 16                	jmp    ffffffff8000dbc3 <mark_bootloader_reclaim+0xb3>
ffffffff8000dbad:	eb 00                	jmp    ffffffff8000dbaf <mark_bootloader_reclaim+0x9f>
ffffffff8000dbaf:	eb 00                	jmp    ffffffff8000dbb1 <mark_bootloader_reclaim+0xa1>
ffffffff8000dbb1:	eb 00                	jmp    ffffffff8000dbb3 <mark_bootloader_reclaim+0xa3>
ffffffff8000dbb3:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000dbb6:	83 c0 01             	add    $0x1,%eax
ffffffff8000dbb9:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8000dbbc:	e9 69 ff ff ff       	jmp    ffffffff8000db2a <mark_bootloader_reclaim+0x1a>
ffffffff8000dbc1:	eb 00                	jmp    ffffffff8000dbc3 <mark_bootloader_reclaim+0xb3>
ffffffff8000dbc3:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000dbc6:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000dbca:	5d                   	pop    %rbp
ffffffff8000dbcb:	c3                   	ret    
ffffffff8000dbcc:	cc                   	int3   
ffffffff8000dbcd:	cc                   	int3   
ffffffff8000dbce:	cc                   	int3   
ffffffff8000dbcf:	cc                   	int3   

ffffffff8000dbd0 <mark_range>:
ffffffff8000dbd0:	55                   	push   %rbp
ffffffff8000dbd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000dbd4:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8000dbd8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000dbdc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8000dbe0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8000dbe7:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8000dbec:	0f 86 3f 01 00 00    	jbe    ffffffff8000dd31 <mark_range+0x161>
ffffffff8000dbf2:	48 8d 45 d0          	lea    -0x30(%rbp),%rax
ffffffff8000dbf6:	31 c9                	xor    %ecx,%ecx
ffffffff8000dbf8:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff8000dbfb:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8000dbfe:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000dc02:	e8 79 01 00 00       	call   ffffffff8000dd80 <deepest_position_for_offset>
ffffffff8000dc07:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000dc0b:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8000dc0f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000dc13:	e8 b8 01 00 00       	call   ffffffff8000ddd0 <size_for_depth>
ffffffff8000dc18:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000dc1c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000dc20:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000dc24:	e8 e7 01 00 00       	call   ffffffff8000de10 <offset_for_position>
ffffffff8000dc29:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8000dc2d:	74 02                	je     ffffffff8000dc31 <mark_range+0x61>
ffffffff8000dc2f:	eb 75                	jmp    ffffffff8000dca6 <mark_range+0xd6>
ffffffff8000dc31:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000dc35:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8000dc39:	75 12                	jne    ffffffff8000dc4d <mark_range+0x7d>
ffffffff8000dc3b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000dc3f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000dc43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000dc47:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000dc4b:	eb 59                	jmp    ffffffff8000dca6 <mark_range+0xd6>
ffffffff8000dc4d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000dc51:	48 3b 45 b8          	cmp    -0x48(%rbp),%rax
ffffffff8000dc55:	73 02                	jae    ffffffff8000dc59 <mark_range+0x89>
ffffffff8000dc57:	eb 4d                	jmp    ffffffff8000dca6 <mark_range+0xd6>
ffffffff8000dc59:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000dc5d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000dc61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000dc65:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000dc69:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000dc6d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000dc71:	e8 ea 01 00 00       	call   ffffffff8000de60 <buddy_tree_parent>
ffffffff8000dc76:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000dc7a:	48 89 55 b0          	mov    %rdx,-0x50(%rbp)
ffffffff8000dc7e:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000dc82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000dc86:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000dc8a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000dc8e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000dc92:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000dc96:	e8 05 02 00 00       	call   ffffffff8000dea0 <buddy_tree_valid>
ffffffff8000dc9b:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000dc9e:	0f 85 6b ff ff ff    	jne    ffffffff8000dc0f <mark_range+0x3f>
ffffffff8000dca4:	eb 00                	jmp    ffffffff8000dca6 <mark_range+0xd6>
ffffffff8000dca6:	eb 00                	jmp    ffffffff8000dca8 <mark_range+0xd8>
ffffffff8000dca8:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000dcac:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000dcb0:	e8 eb 01 00 00       	call   ffffffff8000dea0 <buddy_tree_valid>
ffffffff8000dcb5:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000dcb8:	75 3b                	jne    ffffffff8000dcf5 <mark_range+0x125>
ffffffff8000dcba:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000dcc1:	31 c0                	xor    %eax,%eax
ffffffff8000dcc3:	e8 28 bc ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000dcc8:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000dccb:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000dcd2:	48 89 c6             	mov    %rax,%rsi
ffffffff8000dcd5:	48 c7 c1 b5 98 01 80 	mov    $0xffffffff800198b5,%rcx
ffffffff8000dcdc:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000dce3:	41 b9 7f 02 00 00    	mov    $0x27f,%r9d
ffffffff8000dce9:	31 c0                	xor    %eax,%eax
ffffffff8000dceb:	e8 50 3c 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000dcf0:	e9 81 00 00 00       	jmp    ffffffff8000dd76 <mark_range+0x1a6>
ffffffff8000dcf5:	eb 00                	jmp    ffffffff8000dcf7 <mark_range+0x127>
ffffffff8000dcf7:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000dcfb:	e8 d0 00 00 00       	call   ffffffff8000ddd0 <size_for_depth>
ffffffff8000dd00:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000dd04:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000dd08:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000dd0c:	e8 cf 01 00 00       	call   ffffffff8000dee0 <buddy_tree_mark>
ffffffff8000dd11:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000dd15:	48 03 45 c8          	add    -0x38(%rbp),%rax
ffffffff8000dd19:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000dd1d:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000dd21:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000dd25:	48 29 c1             	sub    %rax,%rcx
ffffffff8000dd28:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8000dd2c:	e9 b6 fe ff ff       	jmp    ffffffff8000dbe7 <mark_range+0x17>
ffffffff8000dd31:	eb 00                	jmp    ffffffff8000dd33 <mark_range+0x163>
ffffffff8000dd33:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8000dd38:	74 38                	je     ffffffff8000dd72 <mark_range+0x1a2>
ffffffff8000dd3a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8000dd41:	31 c0                	xor    %eax,%eax
ffffffff8000dd43:	e8 a8 bb ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000dd48:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8000dd4b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000dd52:	48 89 c6             	mov    %rax,%rsi
ffffffff8000dd55:	48 c7 c1 b5 98 01 80 	mov    $0xffffffff800198b5,%rcx
ffffffff8000dd5c:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000dd63:	41 b9 89 02 00 00    	mov    $0x289,%r9d
ffffffff8000dd69:	31 c0                	xor    %eax,%eax
ffffffff8000dd6b:	e8 d0 3b 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000dd70:	eb 04                	jmp    ffffffff8000dd76 <mark_range+0x1a6>
ffffffff8000dd72:	eb 00                	jmp    ffffffff8000dd74 <mark_range+0x1a4>
ffffffff8000dd74:	eb 00                	jmp    ffffffff8000dd76 <mark_range+0x1a6>
ffffffff8000dd76:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8000dd79:	48 83 c4 60          	add    $0x60,%rsp
ffffffff8000dd7d:	5d                   	pop    %rbp
ffffffff8000dd7e:	c3                   	ret    
ffffffff8000dd7f:	cc                   	int3   

ffffffff8000dd80 <deepest_position_for_offset>:
ffffffff8000dd80:	55                   	push   %rbp
ffffffff8000dd81:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000dd84:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000dd88:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000dd8c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000dd90:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff8000dd94:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000dd98:	e8 c3 08 00 00       	call   ffffffff8000e660 <buddy_tree_leftmost_child>
ffffffff8000dd9d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000dda1:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000dda5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000dda9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000ddad:	48 01 c1             	add    %rax,%rcx
ffffffff8000ddb0:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff8000ddb4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ddb8:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ddbc:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000ddc0:	5d                   	pop    %rbp
ffffffff8000ddc1:	c3                   	ret    
ffffffff8000ddc2:	cc                   	int3   
ffffffff8000ddc3:	cc                   	int3   
ffffffff8000ddc4:	cc                   	int3   
ffffffff8000ddc5:	cc                   	int3   
ffffffff8000ddc6:	cc                   	int3   
ffffffff8000ddc7:	cc                   	int3   
ffffffff8000ddc8:	cc                   	int3   
ffffffff8000ddc9:	cc                   	int3   
ffffffff8000ddca:	cc                   	int3   
ffffffff8000ddcb:	cc                   	int3   
ffffffff8000ddcc:	cc                   	int3   
ffffffff8000ddcd:	cc                   	int3   
ffffffff8000ddce:	cc                   	int3   
ffffffff8000ddcf:	cc                   	int3   

ffffffff8000ddd0 <size_for_depth>:
ffffffff8000ddd0:	55                   	push   %rbp
ffffffff8000ddd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ddd4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000ddd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000dddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000dde0:	48 89 c1             	mov    %rax,%rcx
ffffffff8000dde3:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000dde7:	48 83 d0 00          	adc    $0x0,%rax
ffffffff8000ddeb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ddef:	48 8b 3d 0a f4 20 00 	mov    0x20f40a(%rip),%rdi        # ffffffff8021d200 <m_buddy_memory_size>
ffffffff8000ddf6:	e8 55 f6 ff ff       	call   ffffffff8000d450 <ceiling_power_of_two>
ffffffff8000ddfb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ddff:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000de03:	48 d3 e8             	shr    %cl,%rax
ffffffff8000de06:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000de0a:	5d                   	pop    %rbp
ffffffff8000de0b:	c3                   	ret    
ffffffff8000de0c:	cc                   	int3   
ffffffff8000de0d:	cc                   	int3   
ffffffff8000de0e:	cc                   	int3   
ffffffff8000de0f:	cc                   	int3   

ffffffff8000de10 <offset_for_position>:
ffffffff8000de10:	55                   	push   %rbp
ffffffff8000de11:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000de14:	53                   	push   %rbx
ffffffff8000de15:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8000de19:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000de1d:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000de21:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000de25:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000de29:	e8 62 07 00 00       	call   ffffffff8000e590 <buddy_tree_depth>
ffffffff8000de2e:	48 89 c7             	mov    %rax,%rdi
ffffffff8000de31:	e8 9a ff ff ff       	call   ffffffff8000ddd0 <size_for_depth>
ffffffff8000de36:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000de3a:	48 8b 5d d8          	mov    -0x28(%rbp),%rbx
ffffffff8000de3e:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000de42:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000de46:	e8 e5 07 00 00       	call   ffffffff8000e630 <buddy_tree_index>
ffffffff8000de4b:	48 0f af d8          	imul   %rax,%rbx
ffffffff8000de4f:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
ffffffff8000de53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000de57:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8000de5b:	5b                   	pop    %rbx
ffffffff8000de5c:	5d                   	pop    %rbp
ffffffff8000de5d:	c3                   	ret    
ffffffff8000de5e:	cc                   	int3   
ffffffff8000de5f:	cc                   	int3   

ffffffff8000de60 <buddy_tree_parent>:
ffffffff8000de60:	55                   	push   %rbp
ffffffff8000de61:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000de64:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000de68:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000de6c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000de70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000de74:	48 d1 e8             	shr    %rax
ffffffff8000de77:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000de7b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000de7f:	48 ff c8             	dec    %rax
ffffffff8000de82:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000de86:	0f 10 45 f0          	movups -0x10(%rbp),%xmm0
ffffffff8000de8a:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
ffffffff8000de8e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000de92:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000de96:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000de9a:	5d                   	pop    %rbp
ffffffff8000de9b:	c3                   	ret    
ffffffff8000de9c:	cc                   	int3   
ffffffff8000de9d:	cc                   	int3   
ffffffff8000de9e:	cc                   	int3   
ffffffff8000de9f:	cc                   	int3   

ffffffff8000dea0 <buddy_tree_valid>:
ffffffff8000dea0:	55                   	push   %rbp
ffffffff8000dea1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000dea4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000dea8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000deac:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000deb0:	31 c0                	xor    %eax,%eax
ffffffff8000deb2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8000deb7:	74 11                	je     ffffffff8000deca <buddy_tree_valid+0x2a>
ffffffff8000deb9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000debd:	48 8b 0d 4c f3 20 00 	mov    0x20f34c(%rip),%rcx        # ffffffff8021d210 <m_buddy_tree_upper_pos_bound>
ffffffff8000dec4:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000dec7:	0f 92 c0             	setb   %al
ffffffff8000deca:	24 01                	and    $0x1,%al
ffffffff8000decc:	0f b6 c0             	movzbl %al,%eax
ffffffff8000decf:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000ded3:	5d                   	pop    %rbp
ffffffff8000ded4:	c3                   	ret    
ffffffff8000ded5:	cc                   	int3   
ffffffff8000ded6:	cc                   	int3   
ffffffff8000ded7:	cc                   	int3   
ffffffff8000ded8:	cc                   	int3   
ffffffff8000ded9:	cc                   	int3   
ffffffff8000deda:	cc                   	int3   
ffffffff8000dedb:	cc                   	int3   
ffffffff8000dedc:	cc                   	int3   
ffffffff8000dedd:	cc                   	int3   
ffffffff8000dede:	cc                   	int3   
ffffffff8000dedf:	cc                   	int3   

ffffffff8000dee0 <buddy_tree_mark>:
ffffffff8000dee0:	55                   	push   %rbp
ffffffff8000dee1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000dee4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000dee8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000deec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000def0:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000def4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000def8:	e8 43 00 00 00       	call   ffffffff8000df40 <buddy_tree_internal_position_tree>
ffffffff8000defd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000df01:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000df05:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000df09:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000df0d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000df11:	e8 aa 00 00 00       	call   ffffffff8000dfc0 <write_to_internal_position>
ffffffff8000df16:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
ffffffff8000df1a:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000df1e:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000df22:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000df26:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000df2a:	e8 f1 00 00 00       	call   ffffffff8000e020 <update_parent_chain>
ffffffff8000df2f:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000df33:	5d                   	pop    %rbp
ffffffff8000df34:	c3                   	ret    
ffffffff8000df35:	cc                   	int3   
ffffffff8000df36:	cc                   	int3   
ffffffff8000df37:	cc                   	int3   
ffffffff8000df38:	cc                   	int3   
ffffffff8000df39:	cc                   	int3   
ffffffff8000df3a:	cc                   	int3   
ffffffff8000df3b:	cc                   	int3   
ffffffff8000df3c:	cc                   	int3   
ffffffff8000df3d:	cc                   	int3   
ffffffff8000df3e:	cc                   	int3   
ffffffff8000df3f:	cc                   	int3   

ffffffff8000df40 <buddy_tree_internal_position_tree>:
ffffffff8000df40:	55                   	push   %rbp
ffffffff8000df41:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000df44:	53                   	push   %rbx
ffffffff8000df45:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8000df49:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff8000df4d:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff8000df51:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff8000df54:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
ffffffff8000df58:	0f b6 1d a9 f2 20 00 	movzbl 0x20f2a9(%rip),%ebx        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000df5f:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000df63:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000df67:	e8 24 06 00 00       	call   ffffffff8000e590 <buddy_tree_depth>
ffffffff8000df6c:	48 29 c3             	sub    %rax,%rbx
ffffffff8000df6f:	48 ff c3             	inc    %rbx
ffffffff8000df72:	48 89 5d e0          	mov    %rbx,-0x20(%rbp)
ffffffff8000df76:	0f b6 7d e0          	movzbl -0x20(%rbp),%edi
ffffffff8000df7a:	e8 31 06 00 00       	call   ffffffff8000e5b0 <buddy_tree_size_for_order>
ffffffff8000df7f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000df83:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000df87:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8000df8b:	e8 50 06 00 00       	call   ffffffff8000e5e0 <buddy_tree_index_internal>
ffffffff8000df90:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000df94:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000df98:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000df9c:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8000dfa0:	48 0f af ca          	imul   %rdx,%rcx
ffffffff8000dfa4:	48 01 c8             	add    %rcx,%rax
ffffffff8000dfa7:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000dfab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000dfaf:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000dfb3:	48 83 c4 38          	add    $0x38,%rsp
ffffffff8000dfb7:	5b                   	pop    %rbx
ffffffff8000dfb8:	5d                   	pop    %rbp
ffffffff8000dfb9:	c3                   	ret    
ffffffff8000dfba:	cc                   	int3   
ffffffff8000dfbb:	cc                   	int3   
ffffffff8000dfbc:	cc                   	int3   
ffffffff8000dfbd:	cc                   	int3   
ffffffff8000dfbe:	cc                   	int3   
ffffffff8000dfbf:	cc                   	int3   

ffffffff8000dfc0 <write_to_internal_position>:
ffffffff8000dfc0:	55                   	push   %rbp
ffffffff8000dfc1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000dfc4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000dfc8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000dfcc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000dfd0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000dfd4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000dfd9:	75 0b                	jne    ffffffff8000dfe6 <write_to_internal_position+0x26>
ffffffff8000dfdb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000dfdf:	e8 6c 03 00 00       	call   ffffffff8000e350 <bitset_clear>
ffffffff8000dfe4:	eb 2a                	jmp    ffffffff8000e010 <write_to_internal_position+0x50>
ffffffff8000dfe6:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000dfea:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000dfee:	48 03 75 f0          	add    -0x10(%rbp),%rsi
ffffffff8000dff2:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8000dff6:	e8 b5 03 00 00       	call   ffffffff8000e3b0 <bitset_clear_range>
ffffffff8000dffb:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000dfff:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000e003:	48 03 75 e8          	add    -0x18(%rbp),%rsi
ffffffff8000e007:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8000e00b:	e8 90 04 00 00       	call   ffffffff8000e4a0 <bitset_set_range>
ffffffff8000e010:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e014:	5d                   	pop    %rbp
ffffffff8000e015:	c3                   	ret    
ffffffff8000e016:	cc                   	int3   
ffffffff8000e017:	cc                   	int3   
ffffffff8000e018:	cc                   	int3   
ffffffff8000e019:	cc                   	int3   
ffffffff8000e01a:	cc                   	int3   
ffffffff8000e01b:	cc                   	int3   
ffffffff8000e01c:	cc                   	int3   
ffffffff8000e01d:	cc                   	int3   
ffffffff8000e01e:	cc                   	int3   
ffffffff8000e01f:	cc                   	int3   

ffffffff8000e020 <update_parent_chain>:
ffffffff8000e020:	55                   	push   %rbp
ffffffff8000e021:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e024:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8000e028:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff8000e02c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff8000e030:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8000e034:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000e038:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
ffffffff8000e03c:	48 83 7d d8 01       	cmpq   $0x1,-0x28(%rbp)
ffffffff8000e041:	0f 84 f1 00 00 00    	je     ffffffff8000e138 <update_parent_chain+0x118>
ffffffff8000e047:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e04b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e04f:	48 c1 e1 01          	shl    $0x1,%rcx
ffffffff8000e053:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8000e057:	48 83 e2 01          	and    $0x1,%rdx
ffffffff8000e05b:	48 0f af ca          	imul   %rdx,%rcx
ffffffff8000e05f:	48 29 c8             	sub    %rcx,%rax
ffffffff8000e062:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8000e066:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e06a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000e06e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000e072:	e8 c9 00 00 00       	call   ffffffff8000e140 <read_from_internal_position>
ffffffff8000e077:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000e07b:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000e07f:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8000e083:	e8 d8 fd ff ff       	call   ffffffff8000de60 <buddy_tree_parent>
ffffffff8000e088:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000e08c:	48 89 55 a8          	mov    %rdx,-0x58(%rbp)
ffffffff8000e090:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000e094:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000e098:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000e09c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e0a0:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000e0a4:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8000e0a8:	e8 93 fe ff ff       	call   ffffffff8000df40 <buddy_tree_internal_position_tree>
ffffffff8000e0ad:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000e0b1:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8000e0b5:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000e0b9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e0bd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000e0c1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e0c5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000e0c9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000e0cd:	e8 6e 00 00 00       	call   ffffffff8000e140 <read_from_internal_position>
ffffffff8000e0d2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000e0d6:	b0 01                	mov    $0x1,%al
ffffffff8000e0d8:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000e0dd:	75 08                	jne    ffffffff8000e0e7 <update_parent_chain+0xc7>
ffffffff8000e0df:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff8000e0e4:	0f 95 c0             	setne  %al
ffffffff8000e0e7:	24 01                	and    $0x1,%al
ffffffff8000e0e9:	0f b6 c0             	movzbl %al,%eax
ffffffff8000e0ec:	48 98                	cltq   
ffffffff8000e0ee:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000e0f2:	48 3b 4d c8          	cmp    -0x38(%rbp),%rcx
ffffffff8000e0f6:	77 06                	ja     ffffffff8000e0fe <update_parent_chain+0xde>
ffffffff8000e0f8:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000e0fc:	eb 04                	jmp    ffffffff8000e102 <update_parent_chain+0xe2>
ffffffff8000e0fe:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000e102:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000e106:	48 0f af c1          	imul   %rcx,%rax
ffffffff8000e10a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000e10e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000e112:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff8000e116:	75 02                	jne    ffffffff8000e11a <update_parent_chain+0xfa>
ffffffff8000e118:	eb 20                	jmp    ffffffff8000e13a <update_parent_chain+0x11a>
ffffffff8000e11a:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8000e11e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000e122:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000e126:	e8 95 fe ff ff       	call   ffffffff8000dfc0 <write_to_internal_position>
ffffffff8000e12b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000e12f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e133:	e9 04 ff ff ff       	jmp    ffffffff8000e03c <update_parent_chain+0x1c>
ffffffff8000e138:	eb 00                	jmp    ffffffff8000e13a <update_parent_chain+0x11a>
ffffffff8000e13a:	48 83 c4 60          	add    $0x60,%rsp
ffffffff8000e13e:	5d                   	pop    %rbp
ffffffff8000e13f:	c3                   	ret    

ffffffff8000e140 <read_from_internal_position>:
ffffffff8000e140:	55                   	push   %rbp
ffffffff8000e141:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e144:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000e148:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000e14c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000e150:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000e154:	e8 37 00 00 00       	call   ffffffff8000e190 <bitset_test>
ffffffff8000e159:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000e15c:	75 0a                	jne    ffffffff8000e168 <read_from_internal_position+0x28>
ffffffff8000e15e:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8000e165:	00 
ffffffff8000e166:	eb 19                	jmp    ffffffff8000e181 <read_from_internal_position+0x41>
ffffffff8000e168:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000e16c:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000e170:	48 03 75 f0          	add    -0x10(%rbp),%rsi
ffffffff8000e174:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8000e178:	e8 73 00 00 00       	call   ffffffff8000e1f0 <bitset_count_range>
ffffffff8000e17d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e181:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e185:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e189:	5d                   	pop    %rbp
ffffffff8000e18a:	c3                   	ret    
ffffffff8000e18b:	cc                   	int3   
ffffffff8000e18c:	cc                   	int3   
ffffffff8000e18d:	cc                   	int3   
ffffffff8000e18e:	cc                   	int3   
ffffffff8000e18f:	cc                   	int3   

ffffffff8000e190 <bitset_test>:
ffffffff8000e190:	55                   	push   %rbp
ffffffff8000e191:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e194:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000e198:	48 b8 00 00 00 40 80 	movabs $0xffff808040000000,%rax
ffffffff8000e19f:	80 ff ff 
ffffffff8000e1a2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e1a6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000e1aa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e1ae:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e1b2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e1b6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e1ba:	83 e0 07             	and    $0x7,%eax
ffffffff8000e1bd:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e1c1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e1c5:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000e1c9:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000e1cd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e1d1:	48 8d 89 68 a5 01 80 	lea    -0x7ffe5a98(%rcx),%rcx
ffffffff8000e1d8:	0f b6 09             	movzbl (%rcx),%ecx
ffffffff8000e1db:	21 c8                	and    %ecx,%eax
ffffffff8000e1dd:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e1e1:	5d                   	pop    %rbp
ffffffff8000e1e2:	c3                   	ret    
ffffffff8000e1e3:	cc                   	int3   
ffffffff8000e1e4:	cc                   	int3   
ffffffff8000e1e5:	cc                   	int3   
ffffffff8000e1e6:	cc                   	int3   
ffffffff8000e1e7:	cc                   	int3   
ffffffff8000e1e8:	cc                   	int3   
ffffffff8000e1e9:	cc                   	int3   
ffffffff8000e1ea:	cc                   	int3   
ffffffff8000e1eb:	cc                   	int3   
ffffffff8000e1ec:	cc                   	int3   
ffffffff8000e1ed:	cc                   	int3   
ffffffff8000e1ee:	cc                   	int3   
ffffffff8000e1ef:	cc                   	int3   

ffffffff8000e1f0 <bitset_count_range>:
ffffffff8000e1f0:	55                   	push   %rbp
ffffffff8000e1f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e1f4:	53                   	push   %rbx
ffffffff8000e1f5:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff8000e1f9:	48 b8 00 00 00 40 80 	movabs $0xffff808040000000,%rax
ffffffff8000e200:	80 ff ff 
ffffffff8000e203:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e207:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8000e20b:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff8000e20f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000e213:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e217:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e21b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000e21f:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e223:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000e227:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000e22b:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000e22f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000e233:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000e237:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000e23b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000e23f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e243:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000e247:	75 35                	jne    ffffffff8000e27e <bitset_count_range+0x8e>
ffffffff8000e249:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e24d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e251:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000e255:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000e259:	48 8d 0c cd 80 a5 01 	lea    -0x7ffe5a80(,%rcx,8),%rcx
ffffffff8000e260:	80 
ffffffff8000e261:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8000e265:	0f b6 0c 11          	movzbl (%rcx,%rdx,1),%ecx
ffffffff8000e269:	21 c8                	and    %ecx,%eax
ffffffff8000e26b:	0f b6 f8             	movzbl %al,%edi
ffffffff8000e26e:	e8 9d 00 00 00       	call   ffffffff8000e310 <popcount_byte>
ffffffff8000e273:	89 c0                	mov    %eax,%eax
ffffffff8000e275:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000e279:	e9 87 00 00 00       	jmp    ffffffff8000e305 <bitset_count_range+0x115>
ffffffff8000e27e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e282:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e286:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff8000e289:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8000e28d:	8a 0c cd 87 a5 01 80 	mov    -0x7ffe5a79(,%rcx,8),%cl
ffffffff8000e294:	20 c8                	and    %cl,%al
ffffffff8000e296:	0f b6 f8             	movzbl %al,%edi
ffffffff8000e299:	e8 72 00 00 00       	call   ffffffff8000e310 <popcount_byte>
ffffffff8000e29e:	89 c3                	mov    %eax,%ebx
ffffffff8000e2a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e2a4:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000e2a8:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000e2ac:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000e2b0:	48 8d 89 80 a5 01 80 	lea    -0x7ffe5a80(%rcx),%rcx
ffffffff8000e2b7:	0f b6 09             	movzbl (%rcx),%ecx
ffffffff8000e2ba:	21 c8                	and    %ecx,%eax
ffffffff8000e2bc:	0f b6 f8             	movzbl %al,%edi
ffffffff8000e2bf:	e8 4c 00 00 00       	call   ffffffff8000e310 <popcount_byte>
ffffffff8000e2c4:	01 c3                	add    %eax,%ebx
ffffffff8000e2c6:	89 d8                	mov    %ebx,%eax
ffffffff8000e2c8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e2cc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e2d0:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000e2d4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e2d8:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000e2dc:	74 1f                	je     ffffffff8000e2fd <bitset_count_range+0x10d>
ffffffff8000e2de:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e2e2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e2e6:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff8000e2e9:	0f b6 f8             	movzbl %al,%edi
ffffffff8000e2ec:	e8 1f 00 00 00       	call   ffffffff8000e310 <popcount_byte>
ffffffff8000e2f1:	89 c0                	mov    %eax,%eax
ffffffff8000e2f3:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff8000e2f7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e2fb:	eb cf                	jmp    ffffffff8000e2cc <bitset_count_range+0xdc>
ffffffff8000e2fd:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e301:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000e305:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000e309:	48 83 c4 48          	add    $0x48,%rsp
ffffffff8000e30d:	5b                   	pop    %rbx
ffffffff8000e30e:	5d                   	pop    %rbp
ffffffff8000e30f:	c3                   	ret    

ffffffff8000e310 <popcount_byte>:
ffffffff8000e310:	55                   	push   %rbp
ffffffff8000e311:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e314:	48 83 ec 01          	sub    $0x1,%rsp
ffffffff8000e318:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff8000e31c:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000e320:	89 c8                	mov    %ecx,%eax
ffffffff8000e322:	83 e0 0f             	and    $0xf,%eax
ffffffff8000e325:	0f b6 80 30 a2 01 80 	movzbl -0x7ffe5dd0(%rax),%eax
ffffffff8000e32c:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff8000e330:	48 8d 89 30 a2 01 80 	lea    -0x7ffe5dd0(%rcx),%rcx
ffffffff8000e337:	0f b6 09             	movzbl (%rcx),%ecx
ffffffff8000e33a:	01 c8                	add    %ecx,%eax
ffffffff8000e33c:	48 83 c4 01          	add    $0x1,%rsp
ffffffff8000e340:	5d                   	pop    %rbp
ffffffff8000e341:	c3                   	ret    
ffffffff8000e342:	cc                   	int3   
ffffffff8000e343:	cc                   	int3   
ffffffff8000e344:	cc                   	int3   
ffffffff8000e345:	cc                   	int3   
ffffffff8000e346:	cc                   	int3   
ffffffff8000e347:	cc                   	int3   
ffffffff8000e348:	cc                   	int3   
ffffffff8000e349:	cc                   	int3   
ffffffff8000e34a:	cc                   	int3   
ffffffff8000e34b:	cc                   	int3   
ffffffff8000e34c:	cc                   	int3   
ffffffff8000e34d:	cc                   	int3   
ffffffff8000e34e:	cc                   	int3   
ffffffff8000e34f:	cc                   	int3   

ffffffff8000e350 <bitset_clear>:
ffffffff8000e350:	55                   	push   %rbp
ffffffff8000e351:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e354:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000e358:	48 b8 00 00 00 40 80 	movabs $0xffff808040000000,%rax
ffffffff8000e35f:	80 ff ff 
ffffffff8000e362:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e366:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000e36a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e36e:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e372:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e376:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e37a:	83 e0 07             	and    $0x7,%eax
ffffffff8000e37d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e381:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e385:	48 8d 80 68 a5 01 80 	lea    -0x7ffe5a98(%rax),%rax
ffffffff8000e38c:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000e38f:	83 f0 ff             	xor    $0xffffffff,%eax
ffffffff8000e392:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000e396:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000e39a:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e39e:	21 c6                	and    %eax,%esi
ffffffff8000e3a0:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e3a4:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e3a8:	5d                   	pop    %rbp
ffffffff8000e3a9:	c3                   	ret    
ffffffff8000e3aa:	cc                   	int3   
ffffffff8000e3ab:	cc                   	int3   
ffffffff8000e3ac:	cc                   	int3   
ffffffff8000e3ad:	cc                   	int3   
ffffffff8000e3ae:	cc                   	int3   
ffffffff8000e3af:	cc                   	int3   

ffffffff8000e3b0 <bitset_clear_range>:
ffffffff8000e3b0:	55                   	push   %rbp
ffffffff8000e3b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e3b4:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8000e3b8:	48 b8 00 00 00 40 80 	movabs $0xffff808040000000,%rax
ffffffff8000e3bf:	80 ff ff 
ffffffff8000e3c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e3c6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000e3ca:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8000e3ce:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000e3d2:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e3d6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e3da:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000e3de:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e3e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e3e6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000e3ea:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000e3ee:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000e3f2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000e3f6:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000e3fa:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e3fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e402:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000e406:	75 2b                	jne    ffffffff8000e433 <bitset_clear_range+0x83>
ffffffff8000e408:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000e40c:	48 8d 04 c5 80 a5 01 	lea    -0x7ffe5a80(,%rax,8),%rax
ffffffff8000e413:	80 
ffffffff8000e414:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000e418:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000e41c:	83 f0 ff             	xor    $0xffffffff,%eax
ffffffff8000e41f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e423:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000e427:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e42b:	21 c6                	and    %eax,%esi
ffffffff8000e42d:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e431:	eb 65                	jmp    ffffffff8000e498 <bitset_clear_range+0xe8>
ffffffff8000e433:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000e437:	0f b6 04 c5 87 a5 01 	movzbl -0x7ffe5a79(,%rax,8),%eax
ffffffff8000e43e:	80 
ffffffff8000e43f:	f7 d0                	not    %eax
ffffffff8000e441:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e445:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000e449:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e44d:	21 c6                	and    %eax,%esi
ffffffff8000e44f:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e453:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e457:	48 8d 80 80 a5 01 80 	lea    -0x7ffe5a80(%rax),%rax
ffffffff8000e45e:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000e461:	83 f0 ff             	xor    $0xffffffff,%eax
ffffffff8000e464:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e468:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000e46c:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e470:	21 c6                	and    %eax,%esi
ffffffff8000e472:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e476:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e47a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000e47e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e482:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000e486:	74 0e                	je     ffffffff8000e496 <bitset_clear_range+0xe6>
ffffffff8000e488:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e48c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000e490:	c6 04 08 00          	movb   $0x0,(%rax,%rcx,1)
ffffffff8000e494:	eb e0                	jmp    ffffffff8000e476 <bitset_clear_range+0xc6>
ffffffff8000e496:	eb 00                	jmp    ffffffff8000e498 <bitset_clear_range+0xe8>
ffffffff8000e498:	48 83 c4 38          	add    $0x38,%rsp
ffffffff8000e49c:	5d                   	pop    %rbp
ffffffff8000e49d:	c3                   	ret    
ffffffff8000e49e:	cc                   	int3   
ffffffff8000e49f:	cc                   	int3   

ffffffff8000e4a0 <bitset_set_range>:
ffffffff8000e4a0:	55                   	push   %rbp
ffffffff8000e4a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e4a4:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8000e4a8:	48 b8 00 00 00 40 80 	movabs $0xffff808040000000,%rax
ffffffff8000e4af:	80 ff ff 
ffffffff8000e4b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e4b6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000e4ba:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8000e4be:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000e4c2:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e4c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e4ca:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000e4ce:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff8000e4d2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e4d6:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000e4da:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000e4de:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000e4e2:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000e4e6:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000e4ea:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e4ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e4f2:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000e4f6:	75 28                	jne    ffffffff8000e520 <bitset_set_range+0x80>
ffffffff8000e4f8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000e4fc:	48 8d 04 c5 80 a5 01 	lea    -0x7ffe5a80(,%rax,8),%rax
ffffffff8000e503:	80 
ffffffff8000e504:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000e508:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000e50c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e510:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000e514:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e518:	09 c6                	or     %eax,%esi
ffffffff8000e51a:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e51e:	eb 60                	jmp    ffffffff8000e580 <bitset_set_range+0xe0>
ffffffff8000e520:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000e524:	0f b6 04 c5 87 a5 01 	movzbl -0x7ffe5a79(,%rax,8),%eax
ffffffff8000e52b:	80 
ffffffff8000e52c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e530:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000e534:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e538:	09 c6                	or     %eax,%esi
ffffffff8000e53a:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e53e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e542:	48 8d 80 80 a5 01 80 	lea    -0x7ffe5a80(%rax),%rax
ffffffff8000e549:	0f b6 00             	movzbl (%rax),%eax
ffffffff8000e54c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e550:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000e554:	0f b6 34 11          	movzbl (%rcx,%rdx,1),%esi
ffffffff8000e558:	09 c6                	or     %eax,%esi
ffffffff8000e55a:	40 88 34 11          	mov    %sil,(%rcx,%rdx,1)
ffffffff8000e55e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e562:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000e566:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e56a:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000e56e:	74 0e                	je     ffffffff8000e57e <bitset_set_range+0xde>
ffffffff8000e570:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e574:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000e578:	c6 04 08 ff          	movb   $0xff,(%rax,%rcx,1)
ffffffff8000e57c:	eb e0                	jmp    ffffffff8000e55e <bitset_set_range+0xbe>
ffffffff8000e57e:	eb 00                	jmp    ffffffff8000e580 <bitset_set_range+0xe0>
ffffffff8000e580:	48 83 c4 38          	add    $0x38,%rsp
ffffffff8000e584:	5d                   	pop    %rbp
ffffffff8000e585:	c3                   	ret    
ffffffff8000e586:	cc                   	int3   
ffffffff8000e587:	cc                   	int3   
ffffffff8000e588:	cc                   	int3   
ffffffff8000e589:	cc                   	int3   
ffffffff8000e58a:	cc                   	int3   
ffffffff8000e58b:	cc                   	int3   
ffffffff8000e58c:	cc                   	int3   
ffffffff8000e58d:	cc                   	int3   
ffffffff8000e58e:	cc                   	int3   
ffffffff8000e58f:	cc                   	int3   

ffffffff8000e590 <buddy_tree_depth>:
ffffffff8000e590:	55                   	push   %rbp
ffffffff8000e591:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e594:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000e598:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000e59c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000e5a0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e5a4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000e5a8:	5d                   	pop    %rbp
ffffffff8000e5a9:	c3                   	ret    
ffffffff8000e5aa:	cc                   	int3   
ffffffff8000e5ab:	cc                   	int3   
ffffffff8000e5ac:	cc                   	int3   
ffffffff8000e5ad:	cc                   	int3   
ffffffff8000e5ae:	cc                   	int3   
ffffffff8000e5af:	cc                   	int3   

ffffffff8000e5b0 <buddy_tree_size_for_order>:
ffffffff8000e5b0:	55                   	push   %rbp
ffffffff8000e5b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e5b4:	48 83 ec 01          	sub    $0x1,%rsp
ffffffff8000e5b8:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff8000e5bc:	48 8b 05 5d ec 20 00 	mov    0x20ec5d(%rip),%rax        # ffffffff8021d220 <m_buddy_tree_size_for_order_offset>
ffffffff8000e5c3:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000e5c7:	48 01 c8             	add    %rcx,%rax
ffffffff8000e5ca:	48 b9 00 00 00 40 80 	movabs $0xffff808040000000,%rcx
ffffffff8000e5d1:	80 ff ff 
ffffffff8000e5d4:	48 8b 04 c1          	mov    (%rcx,%rax,8),%rax
ffffffff8000e5d8:	48 83 c4 01          	add    $0x1,%rsp
ffffffff8000e5dc:	5d                   	pop    %rbp
ffffffff8000e5dd:	c3                   	ret    
ffffffff8000e5de:	cc                   	int3   
ffffffff8000e5df:	cc                   	int3   

ffffffff8000e5e0 <buddy_tree_index_internal>:
ffffffff8000e5e0:	55                   	push   %rbp
ffffffff8000e5e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e5e4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000e5e8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000e5ec:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000e5f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e5f4:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8000e5f8:	b9 3f 00 00 00       	mov    $0x3f,%ecx
ffffffff8000e5fd:	31 d2                	xor    %edx,%edx
ffffffff8000e5ff:	48 f7 f1             	div    %rcx
ffffffff8000e602:	48 89 d1             	mov    %rdx,%rcx
ffffffff8000e605:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000e60a:	d3 e0                	shl    %cl,%eax
ffffffff8000e60c:	89 c0                	mov    %eax,%eax
ffffffff8000e60e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e612:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e616:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000e61a:	48 83 f1 ff          	xor    $0xffffffffffffffff,%rcx
ffffffff8000e61e:	48 21 c8             	and    %rcx,%rax
ffffffff8000e621:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e625:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e629:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e62d:	5d                   	pop    %rbp
ffffffff8000e62e:	c3                   	ret    
ffffffff8000e62f:	cc                   	int3   

ffffffff8000e630 <buddy_tree_index>:
ffffffff8000e630:	55                   	push   %rbp
ffffffff8000e631:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e634:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000e638:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000e63c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000e640:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000e644:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000e648:	e8 93 ff ff ff       	call   ffffffff8000e5e0 <buddy_tree_index_internal>
ffffffff8000e64d:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000e651:	5d                   	pop    %rbp
ffffffff8000e652:	c3                   	ret    
ffffffff8000e653:	cc                   	int3   
ffffffff8000e654:	cc                   	int3   
ffffffff8000e655:	cc                   	int3   
ffffffff8000e656:	cc                   	int3   
ffffffff8000e657:	cc                   	int3   
ffffffff8000e658:	cc                   	int3   
ffffffff8000e659:	cc                   	int3   
ffffffff8000e65a:	cc                   	int3   
ffffffff8000e65b:	cc                   	int3   
ffffffff8000e65c:	cc                   	int3   
ffffffff8000e65d:	cc                   	int3   
ffffffff8000e65e:	cc                   	int3   
ffffffff8000e65f:	cc                   	int3   

ffffffff8000e660 <buddy_tree_leftmost_child>:
ffffffff8000e660:	55                   	push   %rbp
ffffffff8000e661:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e664:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000e668:	0f b6 3d 99 eb 20 00 	movzbl 0x20eb99(%rip),%edi        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000e66f:	e8 1c 00 00 00       	call   ffffffff8000e690 <buddy_tree_leftmost_child_internal>
ffffffff8000e674:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e678:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000e67c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e680:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000e684:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000e688:	5d                   	pop    %rbp
ffffffff8000e689:	c3                   	ret    
ffffffff8000e68a:	cc                   	int3   
ffffffff8000e68b:	cc                   	int3   
ffffffff8000e68c:	cc                   	int3   
ffffffff8000e68d:	cc                   	int3   
ffffffff8000e68e:	cc                   	int3   
ffffffff8000e68f:	cc                   	int3   

ffffffff8000e690 <buddy_tree_leftmost_child_internal>:
ffffffff8000e690:	55                   	push   %rbp
ffffffff8000e691:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e694:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000e698:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000e69c:	8a 4d f8             	mov    -0x8(%rbp),%cl
ffffffff8000e69f:	fe c9                	dec    %cl
ffffffff8000e6a1:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8000e6a6:	d3 e0                	shl    %cl,%eax
ffffffff8000e6a8:	48 98                	cltq   
ffffffff8000e6aa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000e6ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e6b2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e6b6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000e6ba:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000e6be:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000e6c2:	5d                   	pop    %rbp
ffffffff8000e6c3:	c3                   	ret    
ffffffff8000e6c4:	cc                   	int3   
ffffffff8000e6c5:	cc                   	int3   
ffffffff8000e6c6:	cc                   	int3   
ffffffff8000e6c7:	cc                   	int3   
ffffffff8000e6c8:	cc                   	int3   
ffffffff8000e6c9:	cc                   	int3   
ffffffff8000e6ca:	cc                   	int3   
ffffffff8000e6cb:	cc                   	int3   
ffffffff8000e6cc:	cc                   	int3   
ffffffff8000e6cd:	cc                   	int3   
ffffffff8000e6ce:	cc                   	int3   
ffffffff8000e6cf:	cc                   	int3   

ffffffff8000e6d0 <buddy_effective_memory_size>:
ffffffff8000e6d0:	55                   	push   %rbp
ffffffff8000e6d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e6d4:	48 8b 3d 25 eb 20 00 	mov    0x20eb25(%rip),%rdi        # ffffffff8021d200 <m_buddy_memory_size>
ffffffff8000e6db:	e8 70 ed ff ff       	call   ffffffff8000d450 <ceiling_power_of_two>
ffffffff8000e6e0:	5d                   	pop    %rbp
ffffffff8000e6e1:	c3                   	ret    
ffffffff8000e6e2:	cc                   	int3   
ffffffff8000e6e3:	cc                   	int3   
ffffffff8000e6e4:	cc                   	int3   
ffffffff8000e6e5:	cc                   	int3   
ffffffff8000e6e6:	cc                   	int3   
ffffffff8000e6e7:	cc                   	int3   
ffffffff8000e6e8:	cc                   	int3   
ffffffff8000e6e9:	cc                   	int3   
ffffffff8000e6ea:	cc                   	int3   
ffffffff8000e6eb:	cc                   	int3   
ffffffff8000e6ec:	cc                   	int3   
ffffffff8000e6ed:	cc                   	int3   
ffffffff8000e6ee:	cc                   	int3   
ffffffff8000e6ef:	cc                   	int3   

ffffffff8000e6f0 <buddy_tree_root>:
ffffffff8000e6f0:	55                   	push   %rbp
ffffffff8000e6f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e6f4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000e6f8:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8000e6ff:	00 
ffffffff8000e700:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8000e707:	00 
ffffffff8000e708:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e70c:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000e710:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000e714:	5d                   	pop    %rbp
ffffffff8000e715:	c3                   	ret    
ffffffff8000e716:	cc                   	int3   
ffffffff8000e717:	cc                   	int3   
ffffffff8000e718:	cc                   	int3   
ffffffff8000e719:	cc                   	int3   
ffffffff8000e71a:	cc                   	int3   
ffffffff8000e71b:	cc                   	int3   
ffffffff8000e71c:	cc                   	int3   
ffffffff8000e71d:	cc                   	int3   
ffffffff8000e71e:	cc                   	int3   
ffffffff8000e71f:	cc                   	int3   

ffffffff8000e720 <buddy_tree_right_child>:
ffffffff8000e720:	55                   	push   %rbp
ffffffff8000e721:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e724:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000e728:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000e72c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000e730:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e734:	48 01 c0             	add    %rax,%rax
ffffffff8000e737:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e73b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e73f:	48 ff c0             	inc    %rax
ffffffff8000e742:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e746:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e74a:	48 ff c0             	inc    %rax
ffffffff8000e74d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e751:	0f 10 45 f0          	movups -0x10(%rbp),%xmm0
ffffffff8000e755:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
ffffffff8000e759:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e75d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000e761:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e765:	5d                   	pop    %rbp
ffffffff8000e766:	c3                   	ret    
ffffffff8000e767:	cc                   	int3   
ffffffff8000e768:	cc                   	int3   
ffffffff8000e769:	cc                   	int3   
ffffffff8000e76a:	cc                   	int3   
ffffffff8000e76b:	cc                   	int3   
ffffffff8000e76c:	cc                   	int3   
ffffffff8000e76d:	cc                   	int3   
ffffffff8000e76e:	cc                   	int3   
ffffffff8000e76f:	cc                   	int3   

ffffffff8000e770 <buddy_tree_left_child>:
ffffffff8000e770:	55                   	push   %rbp
ffffffff8000e771:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e774:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000e778:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000e77c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000e780:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000e784:	48 01 c0             	add    %rax,%rax
ffffffff8000e787:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000e78b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e78f:	48 ff c0             	inc    %rax
ffffffff8000e792:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e796:	0f 10 45 f0          	movups -0x10(%rbp),%xmm0
ffffffff8000e79a:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
ffffffff8000e79e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e7a2:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000e7a6:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000e7aa:	5d                   	pop    %rbp
ffffffff8000e7ab:	c3                   	ret    
ffffffff8000e7ac:	cc                   	int3   
ffffffff8000e7ad:	cc                   	int3   
ffffffff8000e7ae:	cc                   	int3   
ffffffff8000e7af:	cc                   	int3   

ffffffff8000e7b0 <palloc_reclaim>:
ffffffff8000e7b0:	55                   	push   %rbp
ffffffff8000e7b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000e7b4:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8000e7b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff8000e7bf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000e7c6:	00 
ffffffff8000e7c7:	48 bf 07 de 12 86 9e 	movabs $0x2187f79e8612de07,%rdi
ffffffff8000e7ce:	f7 87 21 
ffffffff8000e7d1:	e8 9a 23 ff ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff8000e7d6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000e7da:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff8000e7df:	75 3b                	jne    ffffffff8000e81c <palloc_reclaim+0x6c>
ffffffff8000e7e1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
ffffffff8000e7e8:	31 c0                	xor    %eax,%eax
ffffffff8000e7ea:	e8 01 b1 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000e7ef:	8b 55 f0             	mov    -0x10(%rbp),%edx
ffffffff8000e7f2:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000e7f9:	48 89 c6             	mov    %rax,%rsi
ffffffff8000e7fc:	48 c7 c1 f4 99 01 80 	mov    $0xffffffff800199f4,%rcx
ffffffff8000e803:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000e80a:	41 b9 f5 02 00 00    	mov    $0x2f5,%r9d
ffffffff8000e810:	31 c0                	xor    %eax,%eax
ffffffff8000e812:	e8 29 31 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000e817:	e9 7b 02 00 00       	jmp    ffffffff8000ea97 <palloc_reclaim+0x2e7>
ffffffff8000e81c:	eb 00                	jmp    ffffffff8000e81e <palloc_reclaim+0x6e>
ffffffff8000e81e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff8000e825:	48 63 45 f4          	movslq -0xc(%rbp),%rax
ffffffff8000e829:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000e82d:	48 3b 41 10          	cmp    0x10(%rcx),%rax
ffffffff8000e831:	0f 83 b1 00 00 00    	jae    ffffffff8000e8e8 <palloc_reclaim+0x138>
ffffffff8000e837:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000e83b:	48 83 c0 18          	add    $0x18,%rax
ffffffff8000e83f:	48 63 4d f4          	movslq -0xc(%rbp),%rcx
ffffffff8000e843:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000e847:	48 01 c8             	add    %rcx,%rax
ffffffff8000e84a:	81 78 10 00 10 00 00 	cmpl   $0x1000,0x10(%rax)
ffffffff8000e851:	0f 85 81 00 00 00    	jne    ffffffff8000e8d8 <palloc_reclaim+0x128>
ffffffff8000e857:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000e85c:	74 16                	je     ffffffff8000e874 <palloc_reclaim+0xc4>
ffffffff8000e85e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e862:	48 8b 40 e0          	mov    -0x20(%rax),%rax
ffffffff8000e866:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000e86a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000e86e:	48 3b 41 e8          	cmp    -0x18(%rcx),%rax
ffffffff8000e872:	76 1b                	jbe    ffffffff8000e88f <palloc_reclaim+0xdf>
ffffffff8000e874:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000e878:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff8000e87d:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8000e882:	31 c9                	xor    %ecx,%ecx
ffffffff8000e884:	e8 f7 16 00 00       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff8000e889:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000e88d:	eb 02                	jmp    ffffffff8000e891 <palloc_reclaim+0xe1>
ffffffff8000e88f:	eb 00                	jmp    ffffffff8000e891 <palloc_reclaim+0xe1>
ffffffff8000e891:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e895:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000e899:	48 8b 51 e0          	mov    -0x20(%rcx),%rdx
ffffffff8000e89d:	48 89 d6             	mov    %rdx,%rsi
ffffffff8000e8a0:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8000e8a4:	48 89 71 e0          	mov    %rsi,-0x20(%rcx)
ffffffff8000e8a8:	48 6b ca 18          	imul   $0x18,%rdx,%rcx
ffffffff8000e8ac:	48 01 c8             	add    %rcx,%rax
ffffffff8000e8af:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8000e8b3:	48 83 c1 18          	add    $0x18,%rcx
ffffffff8000e8b7:	48 63 55 f4          	movslq -0xc(%rbp),%rdx
ffffffff8000e8bb:	48 6b d2 18          	imul   $0x18,%rdx,%rdx
ffffffff8000e8bf:	48 01 d1             	add    %rdx,%rcx
ffffffff8000e8c2:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000e8c5:	48 89 10             	mov    %rdx,(%rax)
ffffffff8000e8c8:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff8000e8cc:	48 89 50 08          	mov    %rdx,0x8(%rax)
ffffffff8000e8d0:	48 8b 49 10          	mov    0x10(%rcx),%rcx
ffffffff8000e8d4:	48 89 48 10          	mov    %rcx,0x10(%rax)
ffffffff8000e8d8:	eb 00                	jmp    ffffffff8000e8da <palloc_reclaim+0x12a>
ffffffff8000e8da:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000e8dd:	83 c0 01             	add    $0x1,%eax
ffffffff8000e8e0:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8000e8e3:	e9 3d ff ff ff       	jmp    ffffffff8000e825 <palloc_reclaim+0x75>
ffffffff8000e8e8:	31 c0                	xor    %eax,%eax
ffffffff8000e8ea:	e8 01 b0 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000e8ef:	48 c7 c7 bb 8a 01 80 	mov    $0xffffffff80018abb,%rdi
ffffffff8000e8f6:	48 89 c6             	mov    %rax,%rsi
ffffffff8000e8f9:	31 c0                	xor    %eax,%eax
ffffffff8000e8fb:	e8 40 30 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000e900:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff8000e907:	48 63 45 ec          	movslq -0x14(%rbp),%rax
ffffffff8000e90b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000e910:	74 0a                	je     ffffffff8000e91c <palloc_reclaim+0x16c>
ffffffff8000e912:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000e916:	48 8b 49 e0          	mov    -0x20(%rcx),%rcx
ffffffff8000e91a:	eb 04                	jmp    ffffffff8000e920 <palloc_reclaim+0x170>
ffffffff8000e91c:	31 c9                	xor    %ecx,%ecx
ffffffff8000e91e:	eb 00                	jmp    ffffffff8000e920 <palloc_reclaim+0x170>
ffffffff8000e920:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000e923:	0f 8d 6c 01 00 00    	jge    ffffffff8000ea95 <palloc_reclaim+0x2e5>
ffffffff8000e929:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000e92d:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff8000e931:	48 6b c9 18          	imul   $0x18,%rcx,%rcx
ffffffff8000e935:	48 01 c8             	add    %rcx,%rax
ffffffff8000e938:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000e93c:	31 c0                	xor    %eax,%eax
ffffffff8000e93e:	e8 ad af ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000e943:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000e947:	48 8b 11             	mov    (%rcx),%rdx
ffffffff8000e94a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8000e94e:	48 8b 09             	mov    (%rcx),%rcx
ffffffff8000e951:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8000e955:	48 03 4e 08          	add    0x8(%rsi),%rcx
ffffffff8000e959:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff8000e95d:	4c 8b 46 08          	mov    0x8(%rsi),%r8
ffffffff8000e961:	48 c7 c7 c0 97 01 80 	mov    $0xffffffff800197c0,%rdi
ffffffff8000e968:	48 89 c6             	mov    %rax,%rsi
ffffffff8000e96b:	31 c0                	xor    %eax,%eax
ffffffff8000e96d:	e8 ce 2f 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000e972:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e976:	48 8b 00             	mov    (%rax),%rax
ffffffff8000e979:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000e97d:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff8000e984:	00 00 00 
ffffffff8000e987:	48 39 45 a8          	cmp    %rax,-0x58(%rbp)
ffffffff8000e98b:	76 2e                	jbe    ffffffff8000e9bb <palloc_reclaim+0x20b>
ffffffff8000e98d:	31 c0                	xor    %eax,%eax
ffffffff8000e98f:	e8 5c af ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000e994:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000e99b:	48 89 c6             	mov    %rax,%rsi
ffffffff8000e99e:	48 c7 c2 f4 99 01 80 	mov    $0xffffffff800199f4,%rdx
ffffffff8000e9a5:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000e9ac:	41 b8 02 03 00 00    	mov    $0x302,%r8d
ffffffff8000e9b2:	31 c0                	xor    %eax,%eax
ffffffff8000e9b4:	e8 87 2f 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000e9b9:	0f 0b                	ud2    
ffffffff8000e9bb:	eb 00                	jmp    ffffffff8000e9bd <palloc_reclaim+0x20d>
ffffffff8000e9bd:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000e9c4:	80 ff ff 
ffffffff8000e9c7:	48 03 45 a8          	add    -0x58(%rbp),%rax
ffffffff8000e9cb:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000e9cf:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8000e9d3:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000e9d7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000e9db:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff8000e9df:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000e9e3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff8000e9e8:	0f 86 97 00 00 00    	jbe    ffffffff8000ea85 <palloc_reclaim+0x2d5>
ffffffff8000e9ee:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8000e9f2:	e8 c9 00 00 00       	call   ffffffff8000eac0 <position_for_address>
ffffffff8000e9f7:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000e9fb:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
ffffffff8000e9ff:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff8000ea03:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8000ea07:	e8 94 f4 ff ff       	call   ffffffff8000dea0 <buddy_tree_valid>
ffffffff8000ea0c:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ea0f:	75 38                	jne    ffffffff8000ea49 <palloc_reclaim+0x299>
ffffffff8000ea11:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%rbp)
ffffffff8000ea18:	31 c0                	xor    %eax,%eax
ffffffff8000ea1a:	e8 d1 ae ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000ea1f:	8b 55 f0             	mov    -0x10(%rbp),%edx
ffffffff8000ea22:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8000ea29:	48 89 c6             	mov    %rax,%rsi
ffffffff8000ea2c:	48 c7 c1 f4 99 01 80 	mov    $0xffffffff800199f4,%rcx
ffffffff8000ea33:	49 c7 c0 b4 8c 01 80 	mov    $0xffffffff80018cb4,%r8
ffffffff8000ea3a:	41 b9 07 03 00 00    	mov    $0x307,%r9d
ffffffff8000ea40:	31 c0                	xor    %eax,%eax
ffffffff8000ea42:	e8 f9 2e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000ea47:	eb 4e                	jmp    ffffffff8000ea97 <palloc_reclaim+0x2e7>
ffffffff8000ea49:	eb 00                	jmp    ffffffff8000ea4b <palloc_reclaim+0x29b>
ffffffff8000ea4b:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff8000ea4f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff8000ea53:	e8 c8 01 00 00       	call   ffffffff8000ec20 <buddy_tree_release>
ffffffff8000ea58:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000ea5c:	e8 6f f3 ff ff       	call   ffffffff8000ddd0 <size_for_depth>
ffffffff8000ea61:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000ea65:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000ea69:	48 03 45 c8          	add    -0x38(%rbp),%rax
ffffffff8000ea6d:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8000ea71:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000ea75:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8000ea79:	48 29 c1             	sub    %rax,%rcx
ffffffff8000ea7c:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff8000ea80:	e9 5e ff ff ff       	jmp    ffffffff8000e9e3 <palloc_reclaim+0x233>
ffffffff8000ea85:	eb 00                	jmp    ffffffff8000ea87 <palloc_reclaim+0x2d7>
ffffffff8000ea87:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff8000ea8a:	83 c0 01             	add    $0x1,%eax
ffffffff8000ea8d:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff8000ea90:	e9 72 fe ff ff       	jmp    ffffffff8000e907 <palloc_reclaim+0x157>
ffffffff8000ea95:	eb 00                	jmp    ffffffff8000ea97 <palloc_reclaim+0x2e7>
ffffffff8000ea97:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000ea9c:	74 0f                	je     ffffffff8000eaad <palloc_reclaim+0x2fd>
ffffffff8000ea9e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000eaa2:	48 83 c7 e0          	add    $0xffffffffffffffe0,%rdi
ffffffff8000eaa6:	e8 e5 e7 ff ff       	call   ffffffff8000d290 <free>
ffffffff8000eaab:	eb 02                	jmp    ffffffff8000eaaf <palloc_reclaim+0x2ff>
ffffffff8000eaad:	eb 00                	jmp    ffffffff8000eaaf <palloc_reclaim+0x2ff>
ffffffff8000eaaf:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000eab6:	00 
ffffffff8000eab7:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff8000eaba:	48 83 c4 60          	add    $0x60,%rsp
ffffffff8000eabe:	5d                   	pop    %rbp
ffffffff8000eabf:	c3                   	ret    

ffffffff8000eac0 <position_for_address>:
ffffffff8000eac0:	55                   	push   %rbp
ffffffff8000eac1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000eac4:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff8000eac8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000eacc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000ead0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000ead4:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000eadb:	80 ff ff 
ffffffff8000eade:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff8000eae2:	77 10                	ja     ffffffff8000eaf4 <position_for_address+0x34>
ffffffff8000eae4:	48 b8 00 00 00 00 80 	movabs $0xffff808000000000,%rax
ffffffff8000eaeb:	80 ff ff 
ffffffff8000eaee:	48 39 45 e8          	cmp    %rax,-0x18(%rbp)
ffffffff8000eaf2:	76 2e                	jbe    ffffffff8000eb22 <position_for_address+0x62>
ffffffff8000eaf4:	31 c0                	xor    %eax,%eax
ffffffff8000eaf6:	e8 f5 ad ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000eafb:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000eb02:	48 89 c6             	mov    %rax,%rsi
ffffffff8000eb05:	48 c7 c2 af 9a 01 80 	mov    $0xffffffff80019aaf,%rdx
ffffffff8000eb0c:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000eb13:	41 b8 3e 02 00 00    	mov    $0x23e,%r8d
ffffffff8000eb19:	31 c0                	xor    %eax,%eax
ffffffff8000eb1b:	e8 20 2e 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000eb20:	0f 0b                	ud2    
ffffffff8000eb22:	eb 00                	jmp    ffffffff8000eb24 <position_for_address+0x64>
ffffffff8000eb24:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000eb28:	48 b9 00 00 00 00 00 	movabs $0xffff800000000000,%rcx
ffffffff8000eb2f:	80 ff ff 
ffffffff8000eb32:	48 29 c8             	sub    %rcx,%rax
ffffffff8000eb35:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000eb39:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000eb3d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000eb41:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000eb45:	48 83 e0 3f          	and    $0x3f,%rax
ffffffff8000eb49:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000eb4d:	74 15                	je     ffffffff8000eb64 <position_for_address+0xa4>
ffffffff8000eb4f:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8000eb56:	00 
ffffffff8000eb57:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8000eb5e:	00 
ffffffff8000eb5f:	e9 9f 00 00 00       	jmp    ffffffff8000ec03 <position_for_address+0x143>
ffffffff8000eb64:	48 8b 7d d0          	mov    -0x30(%rbp),%rdi
ffffffff8000eb68:	e8 13 f2 ff ff       	call   ffffffff8000dd80 <deepest_position_for_offset>
ffffffff8000eb6d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000eb71:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000eb75:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000eb79:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000eb7d:	e8 1e f3 ff ff       	call   ffffffff8000dea0 <buddy_tree_valid>
ffffffff8000eb82:	31 c9                	xor    %ecx,%ecx
ffffffff8000eb84:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000eb87:	74 17                	je     ffffffff8000eba0 <position_for_address+0xe0>
ffffffff8000eb89:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000eb8d:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000eb91:	e8 fa 00 00 00       	call   ffffffff8000ec90 <buddy_tree_status>
ffffffff8000eb96:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000eb9a:	0f 95 c1             	setne  %cl
ffffffff8000eb9d:	80 f1 ff             	xor    $0xff,%cl
ffffffff8000eba0:	f6 c1 01             	test   $0x1,%cl
ffffffff8000eba3:	75 02                	jne    ffffffff8000eba7 <position_for_address+0xe7>
ffffffff8000eba5:	eb 27                	jmp    ffffffff8000ebce <position_for_address+0x10e>
ffffffff8000eba7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ebab:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ebaf:	e8 ac f2 ff ff       	call   ffffffff8000de60 <buddy_tree_parent>
ffffffff8000ebb4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000ebb8:	48 89 55 c0          	mov    %rdx,-0x40(%rbp)
ffffffff8000ebbc:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000ebc0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ebc4:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000ebc8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ebcc:	eb a7                	jmp    ffffffff8000eb75 <position_for_address+0xb5>
ffffffff8000ebce:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ebd2:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ebd6:	e8 f5 00 00 00       	call   ffffffff8000ecd0 <address_for_position>
ffffffff8000ebdb:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff8000ebdf:	74 12                	je     ffffffff8000ebf3 <position_for_address+0x133>
ffffffff8000ebe1:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff8000ebe8:	00 
ffffffff8000ebe9:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8000ebf0:	00 
ffffffff8000ebf1:	eb 10                	jmp    ffffffff8000ec03 <position_for_address+0x143>
ffffffff8000ebf3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ebf7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000ebfb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ebff:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ec03:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000ec07:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff8000ec0b:	48 83 c4 50          	add    $0x50,%rsp
ffffffff8000ec0f:	5d                   	pop    %rbp
ffffffff8000ec10:	c3                   	ret    
ffffffff8000ec11:	cc                   	int3   
ffffffff8000ec12:	cc                   	int3   
ffffffff8000ec13:	cc                   	int3   
ffffffff8000ec14:	cc                   	int3   
ffffffff8000ec15:	cc                   	int3   
ffffffff8000ec16:	cc                   	int3   
ffffffff8000ec17:	cc                   	int3   
ffffffff8000ec18:	cc                   	int3   
ffffffff8000ec19:	cc                   	int3   
ffffffff8000ec1a:	cc                   	int3   
ffffffff8000ec1b:	cc                   	int3   
ffffffff8000ec1c:	cc                   	int3   
ffffffff8000ec1d:	cc                   	int3   
ffffffff8000ec1e:	cc                   	int3   
ffffffff8000ec1f:	cc                   	int3   

ffffffff8000ec20 <buddy_tree_release>:
ffffffff8000ec20:	55                   	push   %rbp
ffffffff8000ec21:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ec24:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000ec28:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000ec2c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000ec30:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000ec34:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000ec38:	e8 03 f3 ff ff       	call   ffffffff8000df40 <buddy_tree_internal_position_tree>
ffffffff8000ec3d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ec41:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ec45:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ec49:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ec4d:	e8 ee f4 ff ff       	call   ffffffff8000e140 <read_from_internal_position>
ffffffff8000ec52:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8000ec56:	74 02                	je     ffffffff8000ec5a <buddy_tree_release+0x3a>
ffffffff8000ec58:	eb 27                	jmp    ffffffff8000ec81 <buddy_tree_release+0x61>
ffffffff8000ec5a:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ec5e:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ec62:	31 d2                	xor    %edx,%edx
ffffffff8000ec64:	e8 57 f3 ff ff       	call   ffffffff8000dfc0 <write_to_internal_position>
ffffffff8000ec69:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000ec6d:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000ec71:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8000ec75:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ec79:	45 31 c0             	xor    %r8d,%r8d
ffffffff8000ec7c:	e8 9f f3 ff ff       	call   ffffffff8000e020 <update_parent_chain>
ffffffff8000ec81:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000ec85:	5d                   	pop    %rbp
ffffffff8000ec86:	c3                   	ret    
ffffffff8000ec87:	cc                   	int3   
ffffffff8000ec88:	cc                   	int3   
ffffffff8000ec89:	cc                   	int3   
ffffffff8000ec8a:	cc                   	int3   
ffffffff8000ec8b:	cc                   	int3   
ffffffff8000ec8c:	cc                   	int3   
ffffffff8000ec8d:	cc                   	int3   
ffffffff8000ec8e:	cc                   	int3   
ffffffff8000ec8f:	cc                   	int3   

ffffffff8000ec90 <buddy_tree_status>:
ffffffff8000ec90:	55                   	push   %rbp
ffffffff8000ec91:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ec94:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000ec98:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000ec9c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000eca0:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000eca4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000eca8:	e8 93 f2 ff ff       	call   ffffffff8000df40 <buddy_tree_internal_position_tree>
ffffffff8000ecad:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ecb1:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ecb5:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000ecb9:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000ecbd:	e8 7e f4 ff ff       	call   ffffffff8000e140 <read_from_internal_position>
ffffffff8000ecc2:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000ecc6:	5d                   	pop    %rbp
ffffffff8000ecc7:	c3                   	ret    
ffffffff8000ecc8:	cc                   	int3   
ffffffff8000ecc9:	cc                   	int3   
ffffffff8000ecca:	cc                   	int3   
ffffffff8000eccb:	cc                   	int3   
ffffffff8000eccc:	cc                   	int3   
ffffffff8000eccd:	cc                   	int3   
ffffffff8000ecce:	cc                   	int3   
ffffffff8000eccf:	cc                   	int3   

ffffffff8000ecd0 <address_for_position>:
ffffffff8000ecd0:	55                   	push   %rbp
ffffffff8000ecd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ecd4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000ecd8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000ecdc:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000ece0:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff8000ece4:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff8000ece8:	e8 23 f1 ff ff       	call   ffffffff8000de10 <offset_for_position>
ffffffff8000eced:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ecf1:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff8000ecf8:	00 00 00 
ffffffff8000ecfb:	48 39 45 f8          	cmp    %rax,-0x8(%rbp)
ffffffff8000ecff:	76 2e                	jbe    ffffffff8000ed2f <address_for_position+0x5f>
ffffffff8000ed01:	31 c0                	xor    %eax,%eax
ffffffff8000ed03:	e8 e8 ab ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000ed08:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000ed0f:	48 89 c6             	mov    %rax,%rsi
ffffffff8000ed12:	48 c7 c2 55 91 01 80 	mov    $0xffffffff80019155,%rdx
ffffffff8000ed19:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000ed20:	41 b8 32 02 00 00    	mov    $0x232,%r8d
ffffffff8000ed26:	31 c0                	xor    %eax,%eax
ffffffff8000ed28:	e8 13 2c 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000ed2d:	0f 0b                	ud2    
ffffffff8000ed2f:	eb 00                	jmp    ffffffff8000ed31 <address_for_position+0x61>
ffffffff8000ed31:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff8000ed38:	80 ff ff 
ffffffff8000ed3b:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8000ed3f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ed43:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ed47:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000ed4b:	5d                   	pop    %rbp
ffffffff8000ed4c:	c3                   	ret    
ffffffff8000ed4d:	cc                   	int3   
ffffffff8000ed4e:	cc                   	int3   
ffffffff8000ed4f:	cc                   	int3   

ffffffff8000ed50 <palloc>:
ffffffff8000ed50:	55                   	push   %rbp
ffffffff8000ed51:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ed54:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff8000ed58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000ed5c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000ed61:	75 08                	jne    ffffffff8000ed6b <palloc+0x1b>
ffffffff8000ed63:	48 c7 45 f8 01 00 00 	movq   $0x1,-0x8(%rbp)
ffffffff8000ed6a:	00 
ffffffff8000ed6b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ed6f:	48 8b 0d 8a e4 20 00 	mov    0x20e48a(%rip),%rcx        # ffffffff8021d200 <m_buddy_memory_size>
ffffffff8000ed76:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000ed79:	76 0d                	jbe    ffffffff8000ed88 <palloc+0x38>
ffffffff8000ed7b:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8000ed82:	00 
ffffffff8000ed83:	e9 98 00 00 00       	jmp    ffffffff8000ee20 <palloc+0xd0>
ffffffff8000ed88:	48 c7 c7 18 d2 21 80 	mov    $0xffffffff8021d218,%rdi
ffffffff8000ed8f:	e8 bc 1c ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000ed94:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8000ed98:	e8 93 00 00 00       	call   ffffffff8000ee30 <depth_for_size>
ffffffff8000ed9d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000eda1:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000eda5:	0f b6 f8             	movzbl %al,%edi
ffffffff8000eda8:	e8 f3 00 00 00       	call   ffffffff8000eea0 <buddy_tree_find_free>
ffffffff8000edad:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000edb1:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8000edb5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000edb9:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000edbd:	e8 de f0 ff ff       	call   ffffffff8000dea0 <buddy_tree_valid>
ffffffff8000edc2:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000edc5:	75 16                	jne    ffffffff8000eddd <palloc+0x8d>
ffffffff8000edc7:	48 c7 c7 18 d2 21 80 	mov    $0xffffffff8021d218,%rdi
ffffffff8000edce:	e8 6d 1d ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000edd3:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff8000edda:	00 
ffffffff8000eddb:	eb 43                	jmp    ffffffff8000ee20 <palloc+0xd0>
ffffffff8000eddd:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000ede1:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000ede5:	e8 f6 f0 ff ff       	call   ffffffff8000dee0 <buddy_tree_mark>
ffffffff8000edea:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000edee:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000edf2:	e8 d9 fe ff ff       	call   ffffffff8000ecd0 <address_for_position>
ffffffff8000edf7:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000edfb:	48 c7 c7 18 d2 21 80 	mov    $0xffffffff8021d218,%rdi
ffffffff8000ee02:	e8 39 1d ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000ee07:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff8000ee0b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000ee0f:	31 c0                	xor    %eax,%eax
ffffffff8000ee11:	31 f6                	xor    %esi,%esi
ffffffff8000ee13:	e8 08 0b 00 00       	call   ffffffff8000f920 <memset>
ffffffff8000ee18:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000ee1c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ee20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000ee24:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8000ee28:	5d                   	pop    %rbp
ffffffff8000ee29:	c3                   	ret    
ffffffff8000ee2a:	cc                   	int3   
ffffffff8000ee2b:	cc                   	int3   
ffffffff8000ee2c:	cc                   	int3   
ffffffff8000ee2d:	cc                   	int3   
ffffffff8000ee2e:	cc                   	int3   
ffffffff8000ee2f:	cc                   	int3   

ffffffff8000ee30 <depth_for_size>:
ffffffff8000ee30:	55                   	push   %rbp
ffffffff8000ee31:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ee34:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000ee38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000ee3c:	48 83 7d e8 40       	cmpq   $0x40,-0x18(%rbp)
ffffffff8000ee41:	73 08                	jae    ffffffff8000ee4b <depth_for_size+0x1b>
ffffffff8000ee43:	48 c7 45 e8 40 00 00 	movq   $0x40,-0x18(%rbp)
ffffffff8000ee4a:	00 
ffffffff8000ee4b:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff8000ee52:	00 
ffffffff8000ee53:	e8 78 f8 ff ff       	call   ffffffff8000e6d0 <buddy_effective_memory_size>
ffffffff8000ee58:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ee5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ee60:	31 d2                	xor    %edx,%edx
ffffffff8000ee62:	48 f7 75 e8          	divq   -0x18(%rbp)
ffffffff8000ee66:	48 c1 e8 01          	shr    $0x1,%rax
ffffffff8000ee6a:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000ee6e:	74 1a                	je     ffffffff8000ee8a <depth_for_size+0x5a>
ffffffff8000ee70:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ee74:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000ee78:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ee7c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ee80:	48 c1 e8 01          	shr    $0x1,%rax
ffffffff8000ee84:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ee88:	eb d2                	jmp    ffffffff8000ee5c <depth_for_size+0x2c>
ffffffff8000ee8a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ee8e:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000ee92:	5d                   	pop    %rbp
ffffffff8000ee93:	c3                   	ret    
ffffffff8000ee94:	cc                   	int3   
ffffffff8000ee95:	cc                   	int3   
ffffffff8000ee96:	cc                   	int3   
ffffffff8000ee97:	cc                   	int3   
ffffffff8000ee98:	cc                   	int3   
ffffffff8000ee99:	cc                   	int3   
ffffffff8000ee9a:	cc                   	int3   
ffffffff8000ee9b:	cc                   	int3   
ffffffff8000ee9c:	cc                   	int3   
ffffffff8000ee9d:	cc                   	int3   
ffffffff8000ee9e:	cc                   	int3   
ffffffff8000ee9f:	cc                   	int3   

ffffffff8000eea0 <buddy_tree_find_free>:
ffffffff8000eea0:	55                   	push   %rbp
ffffffff8000eea1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000eea4:	48 81 ec 80 00 00 00 	sub    $0x80,%rsp
ffffffff8000eeab:	40 88 7d fe          	mov    %dil,-0x2(%rbp)
ffffffff8000eeaf:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff8000eeb3:	8a 0d 4f e3 20 00    	mov    0x20e34f(%rip),%cl        # ffffffff8021d208 <m_buddy_tree_order>
ffffffff8000eeb9:	0f b6 c9             	movzbl %cl,%ecx
ffffffff8000eebc:	39 c8                	cmp    %ecx,%eax
ffffffff8000eebe:	7e 2e                	jle    ffffffff8000eeee <buddy_tree_find_free+0x4e>
ffffffff8000eec0:	31 c0                	xor    %eax,%eax
ffffffff8000eec2:	e8 29 aa ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000eec7:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000eece:	48 89 c6             	mov    %rax,%rsi
ffffffff8000eed1:	48 c7 c2 f0 8b 01 80 	mov    $0xffffffff80018bf0,%rdx
ffffffff8000eed8:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000eedf:	41 b8 a3 01 00 00    	mov    $0x1a3,%r8d
ffffffff8000eee5:	31 c0                	xor    %eax,%eax
ffffffff8000eee7:	e8 54 2a 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000eeec:	0f 0b                	ud2    
ffffffff8000eeee:	eb 00                	jmp    ffffffff8000eef0 <buddy_tree_find_free+0x50>
ffffffff8000eef0:	e8 fb f7 ff ff       	call   ffffffff8000e6f0 <buddy_tree_root>
ffffffff8000eef5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000eef9:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8000eefd:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff8000ef01:	83 e8 01             	sub    $0x1,%eax
ffffffff8000ef04:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff8000ef07:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000ef0b:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000ef0f:	e8 7c f6 ff ff       	call   ffffffff8000e590 <buddy_tree_depth>
ffffffff8000ef14:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000ef18:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000ef1c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000ef20:	e8 6b fd ff ff       	call   ffffffff8000ec90 <buddy_tree_status>
ffffffff8000ef25:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ef29:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000ef2d:	0f b6 4d fe          	movzbl -0x2(%rbp),%ecx
ffffffff8000ef31:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000ef34:	75 2e                	jne    ffffffff8000ef64 <buddy_tree_find_free+0xc4>
ffffffff8000ef36:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8000ef3b:	75 12                	jne    ffffffff8000ef4f <buddy_tree_find_free+0xaf>
ffffffff8000ef3d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000ef41:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff8000ef45:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ef49:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000ef4d:	eb 10                	jmp    ffffffff8000ef5f <buddy_tree_find_free+0xbf>
ffffffff8000ef4f:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
ffffffff8000ef56:	00 
ffffffff8000ef57:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
ffffffff8000ef5e:	00 
ffffffff8000ef5f:	e9 34 01 00 00       	jmp    ffffffff8000f098 <buddy_tree_find_free+0x1f8>
ffffffff8000ef64:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000ef68:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000ef6c:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000ef6f:	76 15                	jbe    ffffffff8000ef86 <buddy_tree_find_free+0xe6>
ffffffff8000ef71:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
ffffffff8000ef78:	00 
ffffffff8000ef79:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
ffffffff8000ef80:	00 
ffffffff8000ef81:	e9 12 01 00 00       	jmp    ffffffff8000f098 <buddy_tree_find_free+0x1f8>
ffffffff8000ef86:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000ef8a:	83 e8 01             	sub    $0x1,%eax
ffffffff8000ef8d:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff8000ef90:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000ef94:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000ef98:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000ef9c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000efa0:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8000efa4:	e8 c7 f7 ff ff       	call   ffffffff8000e770 <buddy_tree_left_child>
ffffffff8000efa9:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000efad:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff8000efb1:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000efb5:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8000efb9:	e8 f2 00 00 00       	call   ffffffff8000f0b0 <buddy_tree_sibling>
ffffffff8000efbe:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff8000efc2:	48 89 55 90          	mov    %rdx,-0x70(%rbp)
ffffffff8000efc6:	48 8b 7d c0          	mov    -0x40(%rbp),%rdi
ffffffff8000efca:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8000efce:	e8 6d ef ff ff       	call   ffffffff8000df40 <buddy_tree_internal_position_tree>
ffffffff8000efd3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000efd7:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff8000efdb:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000efdf:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff8000efe3:	e8 58 f1 ff ff       	call   ffffffff8000e140 <read_from_internal_position>
ffffffff8000efe8:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000efec:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000eff0:	48 03 45 b8          	add    -0x48(%rbp),%rax
ffffffff8000eff4:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000eff8:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff8000effc:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff8000f000:	e8 3b f1 ff ff       	call   ffffffff8000e140 <read_from_internal_position>
ffffffff8000f005:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000f009:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000f00d:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f011:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000f014:	76 1d                	jbe    ffffffff8000f033 <buddy_tree_find_free+0x193>
ffffffff8000f016:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8000f01a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f01e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8000f022:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f026:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000f02a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000f02e:	e9 f6 fe ff ff       	jmp    ffffffff8000ef29 <buddy_tree_find_free+0x89>
ffffffff8000f033:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000f037:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f03b:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000f03e:	76 1a                	jbe    ffffffff8000f05a <buddy_tree_find_free+0x1ba>
ffffffff8000f040:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000f044:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f048:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000f04c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f050:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000f054:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000f058:	eb d4                	jmp    ffffffff8000f02e <buddy_tree_find_free+0x18e>
ffffffff8000f05a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000f05e:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000f062:	72 1a                	jb     ffffffff8000f07e <buddy_tree_find_free+0x1de>
ffffffff8000f064:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8000f068:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f06c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000f070:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f074:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000f078:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000f07c:	eb 18                	jmp    ffffffff8000f096 <buddy_tree_find_free+0x1f6>
ffffffff8000f07e:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8000f082:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f086:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8000f08a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f08e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000f092:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000f096:	eb 96                	jmp    ffffffff8000f02e <buddy_tree_find_free+0x18e>
ffffffff8000f098:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff8000f09c:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
ffffffff8000f0a0:	48 81 c4 80 00 00 00 	add    $0x80,%rsp
ffffffff8000f0a7:	5d                   	pop    %rbp
ffffffff8000f0a8:	c3                   	ret    
ffffffff8000f0a9:	cc                   	int3   
ffffffff8000f0aa:	cc                   	int3   
ffffffff8000f0ab:	cc                   	int3   
ffffffff8000f0ac:	cc                   	int3   
ffffffff8000f0ad:	cc                   	int3   
ffffffff8000f0ae:	cc                   	int3   
ffffffff8000f0af:	cc                   	int3   

ffffffff8000f0b0 <buddy_tree_sibling>:
ffffffff8000f0b0:	55                   	push   %rbp
ffffffff8000f0b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000f0b4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000f0b8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000f0bc:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff8000f0c0:	8a 45 f0             	mov    -0x10(%rbp),%al
ffffffff8000f0c3:	34 01                	xor    $0x1,%al
ffffffff8000f0c5:	88 45 f0             	mov    %al,-0x10(%rbp)
ffffffff8000f0c8:	0f 10 45 f0          	movups -0x10(%rbp),%xmm0
ffffffff8000f0cc:	0f 29 45 e0          	movaps %xmm0,-0x20(%rbp)
ffffffff8000f0d0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000f0d4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8000f0d8:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000f0dc:	5d                   	pop    %rbp
ffffffff8000f0dd:	c3                   	ret    
ffffffff8000f0de:	cc                   	int3   
ffffffff8000f0df:	cc                   	int3   

ffffffff8000f0e0 <pfree>:
ffffffff8000f0e0:	55                   	push   %rbp
ffffffff8000f0e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000f0e4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000f0e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000f0ec:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000f0f1:	75 02                	jne    ffffffff8000f0f5 <pfree+0x15>
ffffffff8000f0f3:	eb 78                	jmp    ffffffff8000f16d <pfree+0x8d>
ffffffff8000f0f5:	48 c7 c7 18 d2 21 80 	mov    $0xffffffff8021d218,%rdi
ffffffff8000f0fc:	e8 4f 19 ff ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff8000f101:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8000f105:	e8 b6 f9 ff ff       	call   ffffffff8000eac0 <position_for_address>
ffffffff8000f10a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f10e:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000f112:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000f116:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000f11a:	e8 81 ed ff ff       	call   ffffffff8000dea0 <buddy_tree_valid>
ffffffff8000f11f:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000f122:	75 2e                	jne    ffffffff8000f152 <pfree+0x72>
ffffffff8000f124:	31 c0                	xor    %eax,%eax
ffffffff8000f126:	e8 c5 a7 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8000f12b:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8000f132:	48 89 c6             	mov    %rax,%rsi
ffffffff8000f135:	48 c7 c2 58 96 01 80 	mov    $0xffffffff80019658,%rdx
ffffffff8000f13c:	48 c7 c1 b4 8c 01 80 	mov    $0xffffffff80018cb4,%rcx
ffffffff8000f143:	41 b8 42 03 00 00    	mov    $0x342,%r8d
ffffffff8000f149:	31 c0                	xor    %eax,%eax
ffffffff8000f14b:	e8 f0 27 00 00       	call   ffffffff80011940 <printf_>
ffffffff8000f150:	0f 0b                	ud2    
ffffffff8000f152:	eb 00                	jmp    ffffffff8000f154 <pfree+0x74>
ffffffff8000f154:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000f158:	48 8b 75 f8          	mov    -0x8(%rbp),%rsi
ffffffff8000f15c:	e8 bf fa ff ff       	call   ffffffff8000ec20 <buddy_tree_release>
ffffffff8000f161:	48 c7 c7 18 d2 21 80 	mov    $0xffffffff8021d218,%rdi
ffffffff8000f168:	e8 d3 19 ff ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8000f16d:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000f171:	5d                   	pop    %rbp
ffffffff8000f172:	c3                   	ret    
ffffffff8000f173:	cc                   	int3   
ffffffff8000f174:	cc                   	int3   
ffffffff8000f175:	cc                   	int3   
ffffffff8000f176:	cc                   	int3   
ffffffff8000f177:	cc                   	int3   
ffffffff8000f178:	cc                   	int3   
ffffffff8000f179:	cc                   	int3   
ffffffff8000f17a:	cc                   	int3   
ffffffff8000f17b:	cc                   	int3   
ffffffff8000f17c:	cc                   	int3   
ffffffff8000f17d:	cc                   	int3   
ffffffff8000f17e:	cc                   	int3   
ffffffff8000f17f:	cc                   	int3   

ffffffff8000f180 <trace_init>:
ffffffff8000f180:	55                   	push   %rbp
ffffffff8000f181:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000f184:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000f188:	66 c7 45 e8 f9 03    	movw   $0x3f9,-0x18(%rbp)
ffffffff8000f18e:	c6 45 f8 00          	movb   $0x0,-0x8(%rbp)
ffffffff8000f192:	66 8b 55 e8          	mov    -0x18(%rbp),%dx
ffffffff8000f196:	8a 45 f8             	mov    -0x8(%rbp),%al
ffffffff8000f199:	ee                   	out    %al,(%dx)
ffffffff8000f19a:	66 c7 45 ea fb 03    	movw   $0x3fb,-0x16(%rbp)
ffffffff8000f1a0:	c6 45 f9 80          	movb   $0x80,-0x7(%rbp)
ffffffff8000f1a4:	66 8b 55 ea          	mov    -0x16(%rbp),%dx
ffffffff8000f1a8:	8a 45 f9             	mov    -0x7(%rbp),%al
ffffffff8000f1ab:	ee                   	out    %al,(%dx)
ffffffff8000f1ac:	66 c7 45 ec f8 03    	movw   $0x3f8,-0x14(%rbp)
ffffffff8000f1b2:	c6 45 fa 03          	movb   $0x3,-0x6(%rbp)
ffffffff8000f1b6:	66 8b 55 ec          	mov    -0x14(%rbp),%dx
ffffffff8000f1ba:	8a 45 fa             	mov    -0x6(%rbp),%al
ffffffff8000f1bd:	ee                   	out    %al,(%dx)
ffffffff8000f1be:	66 c7 45 ee f9 03    	movw   $0x3f9,-0x12(%rbp)
ffffffff8000f1c4:	c6 45 fb 00          	movb   $0x0,-0x5(%rbp)
ffffffff8000f1c8:	66 8b 55 ee          	mov    -0x12(%rbp),%dx
ffffffff8000f1cc:	8a 45 fb             	mov    -0x5(%rbp),%al
ffffffff8000f1cf:	ee                   	out    %al,(%dx)
ffffffff8000f1d0:	66 c7 45 f0 fb 03    	movw   $0x3fb,-0x10(%rbp)
ffffffff8000f1d6:	c6 45 fc 03          	movb   $0x3,-0x4(%rbp)
ffffffff8000f1da:	66 8b 55 f0          	mov    -0x10(%rbp),%dx
ffffffff8000f1de:	8a 45 fc             	mov    -0x4(%rbp),%al
ffffffff8000f1e1:	ee                   	out    %al,(%dx)
ffffffff8000f1e2:	66 c7 45 f2 fa 03    	movw   $0x3fa,-0xe(%rbp)
ffffffff8000f1e8:	c6 45 fd c7          	movb   $0xc7,-0x3(%rbp)
ffffffff8000f1ec:	66 8b 55 f2          	mov    -0xe(%rbp),%dx
ffffffff8000f1f0:	8a 45 fd             	mov    -0x3(%rbp),%al
ffffffff8000f1f3:	ee                   	out    %al,(%dx)
ffffffff8000f1f4:	66 c7 45 f4 fc 03    	movw   $0x3fc,-0xc(%rbp)
ffffffff8000f1fa:	c6 45 fe 0b          	movb   $0xb,-0x2(%rbp)
ffffffff8000f1fe:	66 8b 55 f4          	mov    -0xc(%rbp),%dx
ffffffff8000f202:	8a 45 fe             	mov    -0x2(%rbp),%al
ffffffff8000f205:	ee                   	out    %al,(%dx)
ffffffff8000f206:	66 c7 45 f6 fc 03    	movw   $0x3fc,-0xa(%rbp)
ffffffff8000f20c:	c6 45 ff 0f          	movb   $0xf,-0x1(%rbp)
ffffffff8000f210:	66 8b 55 f6          	mov    -0xa(%rbp),%dx
ffffffff8000f214:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8000f217:	ee                   	out    %al,(%dx)
ffffffff8000f218:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000f21c:	5d                   	pop    %rbp
ffffffff8000f21d:	c3                   	ret    
ffffffff8000f21e:	cc                   	int3   
ffffffff8000f21f:	cc                   	int3   

ffffffff8000f220 <_putchar>:
ffffffff8000f220:	55                   	push   %rbp
ffffffff8000f221:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000f224:	50                   	push   %rax
ffffffff8000f225:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff8000f229:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%rbp)
ffffffff8000f22f:	66 8b 55 f8          	mov    -0x8(%rbp),%dx
ffffffff8000f233:	ec                   	in     (%dx),%al
ffffffff8000f234:	88 45 fd             	mov    %al,-0x3(%rbp)
ffffffff8000f237:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
ffffffff8000f23b:	83 e0 20             	and    $0x20,%eax
ffffffff8000f23e:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000f241:	75 02                	jne    ffffffff8000f245 <_putchar+0x25>
ffffffff8000f243:	eb e4                	jmp    ffffffff8000f229 <_putchar+0x9>
ffffffff8000f245:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8000f248:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%rbp)
ffffffff8000f24e:	88 45 fe             	mov    %al,-0x2(%rbp)
ffffffff8000f251:	66 8b 55 fa          	mov    -0x6(%rbp),%dx
ffffffff8000f255:	8a 45 fe             	mov    -0x2(%rbp),%al
ffffffff8000f258:	ee                   	out    %al,(%dx)
ffffffff8000f259:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8000f25d:	5d                   	pop    %rbp
ffffffff8000f25e:	c3                   	ret    
ffffffff8000f25f:	cc                   	int3   

ffffffff8000f260 <memcpy>:
ffffffff8000f260:	55                   	push   %rbp
ffffffff8000f261:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000f264:	48 81 ec 20 02 00 00 	sub    $0x220,%rsp
ffffffff8000f26b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000f26f:	48 89 b5 e0 fd ff ff 	mov    %rsi,-0x220(%rbp)
ffffffff8000f276:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000f27a:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000f27e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f282:	48 8b 85 e0 fd ff ff 	mov    -0x220(%rbp),%rax
ffffffff8000f289:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f28d:	48 83 7d e8 40       	cmpq   $0x40,-0x18(%rbp)
ffffffff8000f292:	0f 82 0f 03 00 00    	jb     ffffffff8000f5a7 <memcpy+0x347>
ffffffff8000f298:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f29c:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f29f:	48 89 85 f0 fd ff ff 	mov    %rax,-0x210(%rbp)
ffffffff8000f2a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f2aa:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f2ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f2b2:	48 8b 85 f0 fd ff ff 	mov    -0x210(%rbp),%rax
ffffffff8000f2b9:	48 89 85 f8 fd ff ff 	mov    %rax,-0x208(%rbp)
ffffffff8000f2c0:	48 8b 85 f8 fd ff ff 	mov    -0x208(%rbp),%rax
ffffffff8000f2c7:	48 89 85 e8 fd ff ff 	mov    %rax,-0x218(%rbp)
ffffffff8000f2ce:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f2d2:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f2d5:	48 89 85 08 fe ff ff 	mov    %rax,-0x1f8(%rbp)
ffffffff8000f2dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f2e0:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f2e4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f2e8:	48 8b 85 08 fe ff ff 	mov    -0x1f8(%rbp),%rax
ffffffff8000f2ef:	48 89 85 10 fe ff ff 	mov    %rax,-0x1f0(%rbp)
ffffffff8000f2f6:	48 8b 85 10 fe ff ff 	mov    -0x1f0(%rbp),%rax
ffffffff8000f2fd:	48 89 85 00 fe ff ff 	mov    %rax,-0x200(%rbp)
ffffffff8000f304:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f308:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f30b:	48 89 85 20 fe ff ff 	mov    %rax,-0x1e0(%rbp)
ffffffff8000f312:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f316:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f31a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f31e:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
ffffffff8000f325:	48 89 85 28 fe ff ff 	mov    %rax,-0x1d8(%rbp)
ffffffff8000f32c:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
ffffffff8000f333:	48 89 85 18 fe ff ff 	mov    %rax,-0x1e8(%rbp)
ffffffff8000f33a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f33e:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f341:	48 89 85 38 fe ff ff 	mov    %rax,-0x1c8(%rbp)
ffffffff8000f348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f34c:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f350:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f354:	48 8b 85 38 fe ff ff 	mov    -0x1c8(%rbp),%rax
ffffffff8000f35b:	48 89 85 40 fe ff ff 	mov    %rax,-0x1c0(%rbp)
ffffffff8000f362:	48 8b 85 40 fe ff ff 	mov    -0x1c0(%rbp),%rax
ffffffff8000f369:	48 89 85 30 fe ff ff 	mov    %rax,-0x1d0(%rbp)
ffffffff8000f370:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f374:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f377:	48 89 85 50 fe ff ff 	mov    %rax,-0x1b0(%rbp)
ffffffff8000f37e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f382:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f386:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f38a:	48 8b 85 50 fe ff ff 	mov    -0x1b0(%rbp),%rax
ffffffff8000f391:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
ffffffff8000f398:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
ffffffff8000f39f:	48 89 85 48 fe ff ff 	mov    %rax,-0x1b8(%rbp)
ffffffff8000f3a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f3aa:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f3ad:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
ffffffff8000f3b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f3b8:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f3bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f3c0:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
ffffffff8000f3c7:	48 89 85 70 fe ff ff 	mov    %rax,-0x190(%rbp)
ffffffff8000f3ce:	48 8b 85 70 fe ff ff 	mov    -0x190(%rbp),%rax
ffffffff8000f3d5:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
ffffffff8000f3dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f3e0:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f3e3:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
ffffffff8000f3ea:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f3ee:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f3f2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f3f6:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
ffffffff8000f3fd:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
ffffffff8000f404:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
ffffffff8000f40b:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
ffffffff8000f412:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f416:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f419:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
ffffffff8000f420:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f424:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f428:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f42c:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
ffffffff8000f433:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
ffffffff8000f43a:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
ffffffff8000f441:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
ffffffff8000f448:	48 8b 85 e8 fd ff ff 	mov    -0x218(%rbp),%rax
ffffffff8000f44f:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
ffffffff8000f456:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f45a:	48 8b 8d a8 fe ff ff 	mov    -0x158(%rbp),%rcx
ffffffff8000f461:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f464:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f468:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f46c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f470:	eb 00                	jmp    ffffffff8000f472 <memcpy+0x212>
ffffffff8000f472:	48 8b 85 00 fe ff ff 	mov    -0x200(%rbp),%rax
ffffffff8000f479:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
ffffffff8000f480:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f484:	48 8b 8d b0 fe ff ff 	mov    -0x150(%rbp),%rcx
ffffffff8000f48b:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f48e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f492:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f496:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f49a:	eb 00                	jmp    ffffffff8000f49c <memcpy+0x23c>
ffffffff8000f49c:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
ffffffff8000f4a3:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
ffffffff8000f4aa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f4ae:	48 8b 8d b8 fe ff ff 	mov    -0x148(%rbp),%rcx
ffffffff8000f4b5:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f4b8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f4bc:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f4c0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f4c4:	eb 00                	jmp    ffffffff8000f4c6 <memcpy+0x266>
ffffffff8000f4c6:	48 8b 85 30 fe ff ff 	mov    -0x1d0(%rbp),%rax
ffffffff8000f4cd:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
ffffffff8000f4d4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f4d8:	48 8b 8d c0 fe ff ff 	mov    -0x140(%rbp),%rcx
ffffffff8000f4df:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f4e2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f4e6:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f4ea:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f4ee:	eb 00                	jmp    ffffffff8000f4f0 <memcpy+0x290>
ffffffff8000f4f0:	48 8b 85 48 fe ff ff 	mov    -0x1b8(%rbp),%rax
ffffffff8000f4f7:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)
ffffffff8000f4fe:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f502:	48 8b 8d c8 fe ff ff 	mov    -0x138(%rbp),%rcx
ffffffff8000f509:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f50c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f510:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f514:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f518:	eb 00                	jmp    ffffffff8000f51a <memcpy+0x2ba>
ffffffff8000f51a:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
ffffffff8000f521:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
ffffffff8000f528:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f52c:	48 8b 8d d0 fe ff ff 	mov    -0x130(%rbp),%rcx
ffffffff8000f533:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f536:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f53a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f53e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f542:	eb 00                	jmp    ffffffff8000f544 <memcpy+0x2e4>
ffffffff8000f544:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
ffffffff8000f54b:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
ffffffff8000f552:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f556:	48 8b 8d d8 fe ff ff 	mov    -0x128(%rbp),%rcx
ffffffff8000f55d:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f560:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f564:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f568:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f56c:	eb 00                	jmp    ffffffff8000f56e <memcpy+0x30e>
ffffffff8000f56e:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
ffffffff8000f575:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
ffffffff8000f57c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f580:	48 8b 8d e0 fe ff ff 	mov    -0x120(%rbp),%rcx
ffffffff8000f587:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f58a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f58e:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f592:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f596:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f59a:	48 83 e8 40          	sub    $0x40,%rax
ffffffff8000f59e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f5a2:	e9 e6 fc ff ff       	jmp    ffffffff8000f28d <memcpy+0x2d>
ffffffff8000f5a7:	48 83 7d e8 20       	cmpq   $0x20,-0x18(%rbp)
ffffffff8000f5ac:	0f 82 8a 01 00 00    	jb     ffffffff8000f73c <memcpy+0x4dc>
ffffffff8000f5b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f5b6:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f5b9:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
ffffffff8000f5c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f5c4:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f5c8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f5cc:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
ffffffff8000f5d3:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
ffffffff8000f5da:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
ffffffff8000f5e1:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
ffffffff8000f5e8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f5ec:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f5ef:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
ffffffff8000f5f6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f5fa:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f5fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f602:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
ffffffff8000f609:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
ffffffff8000f610:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff8000f617:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
ffffffff8000f61e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f622:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f625:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
ffffffff8000f62c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f630:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f634:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f638:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
ffffffff8000f63f:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
ffffffff8000f646:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
ffffffff8000f64d:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
ffffffff8000f654:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f658:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f65b:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
ffffffff8000f662:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f666:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f66a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f66e:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
ffffffff8000f675:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
ffffffff8000f67c:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff8000f683:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
ffffffff8000f68a:	48 8b 85 e8 fe ff ff 	mov    -0x118(%rbp),%rax
ffffffff8000f691:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
ffffffff8000f698:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f69c:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
ffffffff8000f6a3:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f6a6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f6aa:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f6ae:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f6b2:	eb 00                	jmp    ffffffff8000f6b4 <memcpy+0x454>
ffffffff8000f6b4:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
ffffffff8000f6bb:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
ffffffff8000f6c2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f6c6:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
ffffffff8000f6cd:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f6d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f6d4:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f6d8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f6dc:	eb 00                	jmp    ffffffff8000f6de <memcpy+0x47e>
ffffffff8000f6de:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff8000f6e5:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
ffffffff8000f6ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f6f0:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
ffffffff8000f6f7:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f6fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f6fe:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f702:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f706:	eb 00                	jmp    ffffffff8000f708 <memcpy+0x4a8>
ffffffff8000f708:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
ffffffff8000f70f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff8000f716:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f71a:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
ffffffff8000f721:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f724:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f728:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f72c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f730:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f734:	48 83 e8 20          	sub    $0x20,%rax
ffffffff8000f738:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f73c:	48 83 7d e8 10       	cmpq   $0x10,-0x18(%rbp)
ffffffff8000f741:	0f 82 ac 00 00 00    	jb     ffffffff8000f7f3 <memcpy+0x593>
ffffffff8000f747:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f74b:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f74e:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff8000f755:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f759:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f75d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f761:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff8000f768:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
ffffffff8000f76f:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff8000f776:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
ffffffff8000f77d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f781:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f784:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff8000f788:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f78c:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f790:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f794:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8000f798:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff8000f79c:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff8000f7a0:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff8000f7a4:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff8000f7ab:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff8000f7af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f7b3:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff8000f7b7:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f7ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f7be:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f7c2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f7c6:	eb 00                	jmp    ffffffff8000f7c8 <memcpy+0x568>
ffffffff8000f7c8:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8000f7cc:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000f7d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f7d4:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff8000f7d8:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f7db:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f7df:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f7e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f7e7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f7eb:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8000f7ef:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f7f3:	48 83 7d e8 08       	cmpq   $0x8,-0x18(%rbp)
ffffffff8000f7f8:	72 52                	jb     ffffffff8000f84c <memcpy+0x5ec>
ffffffff8000f7fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f7fe:	48 8b 00             	mov    (%rax),%rax
ffffffff8000f801:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000f805:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f809:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f80d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f811:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8000f815:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000f819:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8000f81d:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000f821:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8000f825:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000f829:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f82d:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8000f831:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000f834:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f838:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000f83c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f840:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f844:	48 83 e8 08          	sub    $0x8,%rax
ffffffff8000f848:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f84c:	48 83 7d e8 04       	cmpq   $0x4,-0x18(%rbp)
ffffffff8000f851:	72 48                	jb     ffffffff8000f89b <memcpy+0x63b>
ffffffff8000f853:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f857:	8b 00                	mov    (%rax),%eax
ffffffff8000f859:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff8000f85c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f860:	48 83 c0 04          	add    $0x4,%rax
ffffffff8000f864:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f868:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff8000f86b:	89 45 d8             	mov    %eax,-0x28(%rbp)
ffffffff8000f86e:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff8000f871:	89 45 d0             	mov    %eax,-0x30(%rbp)
ffffffff8000f874:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffff8000f877:	89 45 dc             	mov    %eax,-0x24(%rbp)
ffffffff8000f87a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f87e:	8b 4d dc             	mov    -0x24(%rbp),%ecx
ffffffff8000f881:	89 08                	mov    %ecx,(%rax)
ffffffff8000f883:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f887:	48 83 c0 04          	add    $0x4,%rax
ffffffff8000f88b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f88f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f893:	48 83 e8 04          	sub    $0x4,%rax
ffffffff8000f897:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f89b:	48 83 7d e8 02       	cmpq   $0x2,-0x18(%rbp)
ffffffff8000f8a0:	72 52                	jb     ffffffff8000f8f4 <memcpy+0x694>
ffffffff8000f8a2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f8a6:	66 8b 00             	mov    (%rax),%ax
ffffffff8000f8a9:	66 89 45 e2          	mov    %ax,-0x1e(%rbp)
ffffffff8000f8ad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f8b1:	48 83 c0 02          	add    $0x2,%rax
ffffffff8000f8b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000f8b9:	66 8b 45 e2          	mov    -0x1e(%rbp),%ax
ffffffff8000f8bd:	66 89 45 e4          	mov    %ax,-0x1c(%rbp)
ffffffff8000f8c1:	66 8b 45 e4          	mov    -0x1c(%rbp),%ax
ffffffff8000f8c5:	66 89 45 e0          	mov    %ax,-0x20(%rbp)
ffffffff8000f8c9:	66 8b 45 e0          	mov    -0x20(%rbp),%ax
ffffffff8000f8cd:	66 89 45 e6          	mov    %ax,-0x1a(%rbp)
ffffffff8000f8d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f8d5:	66 8b 4d e6          	mov    -0x1a(%rbp),%cx
ffffffff8000f8d9:	66 89 08             	mov    %cx,(%rax)
ffffffff8000f8dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f8e0:	48 83 c0 02          	add    $0x2,%rax
ffffffff8000f8e4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f8e8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f8ec:	48 83 e8 02          	sub    $0x2,%rax
ffffffff8000f8f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f8f4:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000f8f9:	74 0c                	je     ffffffff8000f907 <memcpy+0x6a7>
ffffffff8000f8fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000f8ff:	8a 00                	mov    (%rax),%al
ffffffff8000f901:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000f905:	88 01                	mov    %al,(%rcx)
ffffffff8000f907:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000f90b:	48 81 c4 20 02 00 00 	add    $0x220,%rsp
ffffffff8000f912:	5d                   	pop    %rbp
ffffffff8000f913:	c3                   	ret    
ffffffff8000f914:	cc                   	int3   
ffffffff8000f915:	cc                   	int3   
ffffffff8000f916:	cc                   	int3   
ffffffff8000f917:	cc                   	int3   
ffffffff8000f918:	cc                   	int3   
ffffffff8000f919:	cc                   	int3   
ffffffff8000f91a:	cc                   	int3   
ffffffff8000f91b:	cc                   	int3   
ffffffff8000f91c:	cc                   	int3   
ffffffff8000f91d:	cc                   	int3   
ffffffff8000f91e:	cc                   	int3   
ffffffff8000f91f:	cc                   	int3   

ffffffff8000f920 <memset>:
ffffffff8000f920:	55                   	push   %rbp
ffffffff8000f921:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000f924:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
ffffffff8000f92b:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000f92f:	89 75 d0             	mov    %esi,-0x30(%rbp)
ffffffff8000f932:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000f936:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000f93a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000f93e:	8b 45 d0             	mov    -0x30(%rbp),%eax
ffffffff8000f941:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff8000f944:	31 c0                	xor    %eax,%eax
ffffffff8000f946:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000f94b:	74 0f                	je     ffffffff8000f95c <memset+0x3c>
ffffffff8000f94d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000f951:	48 83 e0 07          	and    $0x7,%rax
ffffffff8000f955:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000f959:	0f 95 c0             	setne  %al
ffffffff8000f95c:	a8 01                	test   $0x1,%al
ffffffff8000f95e:	75 02                	jne    ffffffff8000f962 <memset+0x42>
ffffffff8000f960:	eb 22                	jmp    ffffffff8000f984 <memset+0x64>
ffffffff8000f962:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8000f965:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000f969:	48 89 ca             	mov    %rcx,%rdx
ffffffff8000f96c:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000f970:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff8000f974:	88 01                	mov    %al,(%rcx)
ffffffff8000f976:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000f97a:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
ffffffff8000f97e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000f982:	eb c0                	jmp    ffffffff8000f944 <memset+0x24>
ffffffff8000f984:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000f988:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f98c:	48 c1 e1 08          	shl    $0x8,%rcx
ffffffff8000f990:	48 09 c8             	or     %rcx,%rax
ffffffff8000f993:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f997:	48 c1 e1 10          	shl    $0x10,%rcx
ffffffff8000f99b:	48 09 c8             	or     %rcx,%rax
ffffffff8000f99e:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9a2:	48 c1 e1 18          	shl    $0x18,%rcx
ffffffff8000f9a6:	48 09 c8             	or     %rcx,%rax
ffffffff8000f9a9:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9ad:	48 c1 e1 20          	shl    $0x20,%rcx
ffffffff8000f9b1:	48 09 c8             	or     %rcx,%rax
ffffffff8000f9b4:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9b8:	48 c1 e1 28          	shl    $0x28,%rcx
ffffffff8000f9bc:	48 09 c8             	or     %rcx,%rax
ffffffff8000f9bf:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9c3:	48 c1 e1 30          	shl    $0x30,%rcx
ffffffff8000f9c7:	48 09 c8             	or     %rcx,%rax
ffffffff8000f9ca:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9ce:	48 c1 e1 38          	shl    $0x38,%rcx
ffffffff8000f9d2:	48 09 c8             	or     %rcx,%rax
ffffffff8000f9d5:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000f9d9:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000f9dd:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9e1:	c1 e1 08             	shl    $0x8,%ecx
ffffffff8000f9e4:	09 c8                	or     %ecx,%eax
ffffffff8000f9e6:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9ea:	c1 e1 10             	shl    $0x10,%ecx
ffffffff8000f9ed:	09 c8                	or     %ecx,%eax
ffffffff8000f9ef:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000f9f3:	c1 e1 18             	shl    $0x18,%ecx
ffffffff8000f9f6:	09 c8                	or     %ecx,%eax
ffffffff8000f9f8:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff8000f9fb:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff8000f9ff:	0f b7 c0             	movzwl %ax,%eax
ffffffff8000fa02:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000fa06:	0f b7 c9             	movzwl %cx,%ecx
ffffffff8000fa09:	c1 e1 08             	shl    $0x8,%ecx
ffffffff8000fa0c:	09 c8                	or     %ecx,%eax
ffffffff8000fa0e:	66 89 45 dc          	mov    %ax,-0x24(%rbp)
ffffffff8000fa12:	48 83 7d e8 40       	cmpq   $0x40,-0x18(%rbp)
ffffffff8000fa17:	0f 82 3d 01 00 00    	jb     ffffffff8000fb5a <memset+0x23a>
ffffffff8000fa1d:	eb 00                	jmp    ffffffff8000fa1f <memset+0xff>
ffffffff8000fa1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fa23:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
ffffffff8000fa2a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fa2e:	48 8b 8d 50 ff ff ff 	mov    -0xb0(%rbp),%rcx
ffffffff8000fa35:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fa38:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fa3c:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fa40:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fa44:	eb 00                	jmp    ffffffff8000fa46 <memset+0x126>
ffffffff8000fa46:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fa4a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
ffffffff8000fa51:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fa55:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
ffffffff8000fa5c:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fa5f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fa63:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fa67:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fa6b:	eb 00                	jmp    ffffffff8000fa6d <memset+0x14d>
ffffffff8000fa6d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fa71:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff8000fa78:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fa7c:	48 8b 8d 60 ff ff ff 	mov    -0xa0(%rbp),%rcx
ffffffff8000fa83:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fa86:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fa8a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fa8e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fa92:	eb 00                	jmp    ffffffff8000fa94 <memset+0x174>
ffffffff8000fa94:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fa98:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
ffffffff8000fa9f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000faa3:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
ffffffff8000faaa:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000faad:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fab1:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fab5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fab9:	eb 00                	jmp    ffffffff8000fabb <memset+0x19b>
ffffffff8000fabb:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fabf:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff8000fac6:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000faca:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
ffffffff8000fad1:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fad4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fad8:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fadc:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fae0:	eb 00                	jmp    ffffffff8000fae2 <memset+0x1c2>
ffffffff8000fae2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fae6:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
ffffffff8000faed:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000faf1:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
ffffffff8000faf8:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fafb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000faff:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fb03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fb07:	eb 00                	jmp    ffffffff8000fb09 <memset+0x1e9>
ffffffff8000fb09:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fb0d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff8000fb11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb15:	48 8b 4d 80          	mov    -0x80(%rbp),%rcx
ffffffff8000fb19:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fb1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb20:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fb24:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fb28:	eb 00                	jmp    ffffffff8000fb2a <memset+0x20a>
ffffffff8000fb2a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fb2e:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff8000fb32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb36:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
ffffffff8000fb3a:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fb3d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb41:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fb45:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fb49:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fb4d:	48 83 e8 40          	sub    $0x40,%rax
ffffffff8000fb51:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fb55:	e9 b8 fe ff ff       	jmp    ffffffff8000fa12 <memset+0xf2>
ffffffff8000fb5a:	48 83 7d e8 20       	cmpq   $0x20,-0x18(%rbp)
ffffffff8000fb5f:	0f 82 90 00 00 00    	jb     ffffffff8000fbf5 <memset+0x2d5>
ffffffff8000fb65:	eb 00                	jmp    ffffffff8000fb67 <memset+0x247>
ffffffff8000fb67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fb6b:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff8000fb6f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb73:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
ffffffff8000fb77:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fb7a:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb7e:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fb82:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fb86:	eb 00                	jmp    ffffffff8000fb88 <memset+0x268>
ffffffff8000fb88:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fb8c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff8000fb90:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb94:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff8000fb98:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fb9b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fb9f:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fba3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fba7:	eb 00                	jmp    ffffffff8000fba9 <memset+0x289>
ffffffff8000fba9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fbad:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff8000fbb1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fbb5:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
ffffffff8000fbb9:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fbbc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fbc0:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fbc4:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fbc8:	eb 00                	jmp    ffffffff8000fbca <memset+0x2aa>
ffffffff8000fbca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fbce:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff8000fbd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fbd6:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8000fbda:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fbdd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fbe1:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fbe5:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fbe9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fbed:	48 83 e8 20          	sub    $0x20,%rax
ffffffff8000fbf1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fbf5:	48 83 7d e8 10       	cmpq   $0x10,-0x18(%rbp)
ffffffff8000fbfa:	72 4e                	jb     ffffffff8000fc4a <memset+0x32a>
ffffffff8000fbfc:	eb 00                	jmp    ffffffff8000fbfe <memset+0x2de>
ffffffff8000fbfe:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fc02:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff8000fc06:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc0a:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8000fc0e:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fc11:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc15:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fc19:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fc1d:	eb 00                	jmp    ffffffff8000fc1f <memset+0x2ff>
ffffffff8000fc1f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fc23:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8000fc27:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc2b:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8000fc2f:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fc32:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc36:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fc3a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fc3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fc42:	48 83 e8 10          	sub    $0x10,%rax
ffffffff8000fc46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fc4a:	48 83 7d e8 08       	cmpq   $0x8,-0x18(%rbp)
ffffffff8000fc4f:	72 2d                	jb     ffffffff8000fc7e <memset+0x35e>
ffffffff8000fc51:	eb 00                	jmp    ffffffff8000fc53 <memset+0x333>
ffffffff8000fc53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fc57:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8000fc5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc5f:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8000fc63:	48 89 08             	mov    %rcx,(%rax)
ffffffff8000fc66:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc6a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8000fc6e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fc72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fc76:	48 83 e8 08          	sub    $0x8,%rax
ffffffff8000fc7a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fc7e:	48 83 7d e8 04       	cmpq   $0x4,-0x18(%rbp)
ffffffff8000fc83:	72 29                	jb     ffffffff8000fcae <memset+0x38e>
ffffffff8000fc85:	eb 00                	jmp    ffffffff8000fc87 <memset+0x367>
ffffffff8000fc87:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff8000fc8a:	89 45 d8             	mov    %eax,-0x28(%rbp)
ffffffff8000fc8d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc91:	8b 4d d8             	mov    -0x28(%rbp),%ecx
ffffffff8000fc94:	89 08                	mov    %ecx,(%rax)
ffffffff8000fc96:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fc9a:	48 83 c0 04          	add    $0x4,%rax
ffffffff8000fc9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fca2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fca6:	48 83 e8 04          	sub    $0x4,%rax
ffffffff8000fcaa:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fcae:	48 83 7d e8 02       	cmpq   $0x2,-0x18(%rbp)
ffffffff8000fcb3:	72 2d                	jb     ffffffff8000fce2 <memset+0x3c2>
ffffffff8000fcb5:	eb 00                	jmp    ffffffff8000fcb7 <memset+0x397>
ffffffff8000fcb7:	66 8b 45 dc          	mov    -0x24(%rbp),%ax
ffffffff8000fcbb:	66 89 45 de          	mov    %ax,-0x22(%rbp)
ffffffff8000fcbf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fcc3:	66 8b 4d de          	mov    -0x22(%rbp),%cx
ffffffff8000fcc7:	66 89 08             	mov    %cx,(%rax)
ffffffff8000fcca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fcce:	48 83 c0 02          	add    $0x2,%rax
ffffffff8000fcd2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fcd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fcda:	48 83 e8 02          	sub    $0x2,%rax
ffffffff8000fcde:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fce2:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff8000fce7:	74 09                	je     ffffffff8000fcf2 <memset+0x3d2>
ffffffff8000fce9:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8000fcec:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000fcf0:	88 01                	mov    %al,(%rcx)
ffffffff8000fcf2:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000fcf6:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
ffffffff8000fcfd:	5d                   	pop    %rbp
ffffffff8000fcfe:	c3                   	ret    
ffffffff8000fcff:	cc                   	int3   

ffffffff8000fd00 <memmove>:
ffffffff8000fd00:	55                   	push   %rbp
ffffffff8000fd01:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000fd04:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff8000fd08:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000fd0c:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
ffffffff8000fd10:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000fd14:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fd18:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8000fd1c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000fd20:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000fd24:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000fd28:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000fd2c:	73 13                	jae    ffffffff8000fd41 <memmove+0x41>
ffffffff8000fd2e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff8000fd32:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8000fd36:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000fd3a:	e8 21 f5 ff ff       	call   ffffffff8000f260 <memcpy>
ffffffff8000fd3f:	eb 61                	jmp    ffffffff8000fda2 <memmove+0xa2>
ffffffff8000fd41:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8000fd45:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000fd49:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000fd4d:	48 01 c8             	add    %rcx,%rax
ffffffff8000fd50:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000fd54:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000fd58:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000fd5c:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff8000fd60:	48 01 c8             	add    %rcx,%rax
ffffffff8000fd63:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fd67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000fd6b:	48 89 c1             	mov    %rax,%rcx
ffffffff8000fd6e:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff8000fd72:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff8000fd76:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8000fd7a:	74 24                	je     ffffffff8000fda0 <memmove+0xa0>
ffffffff8000fd7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fd80:	48 89 c1             	mov    %rax,%rcx
ffffffff8000fd83:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff8000fd87:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8000fd8b:	8a 00                	mov    (%rax),%al
ffffffff8000fd8d:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000fd91:	48 89 ca             	mov    %rcx,%rdx
ffffffff8000fd94:	48 83 c2 ff          	add    $0xffffffffffffffff,%rdx
ffffffff8000fd98:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff8000fd9c:	88 01                	mov    %al,(%rcx)
ffffffff8000fd9e:	eb c7                	jmp    ffffffff8000fd67 <memmove+0x67>
ffffffff8000fda0:	eb 00                	jmp    ffffffff8000fda2 <memmove+0xa2>
ffffffff8000fda2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fda6:	48 83 c4 40          	add    $0x40,%rsp
ffffffff8000fdaa:	5d                   	pop    %rbp
ffffffff8000fdab:	c3                   	ret    
ffffffff8000fdac:	cc                   	int3   
ffffffff8000fdad:	cc                   	int3   
ffffffff8000fdae:	cc                   	int3   
ffffffff8000fdaf:	cc                   	int3   

ffffffff8000fdb0 <memcmp>:
ffffffff8000fdb0:	55                   	push   %rbp
ffffffff8000fdb1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000fdb4:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff8000fdb8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8000fdbc:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff8000fdc0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff8000fdc4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8000fdc8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000fdcc:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8000fdd0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8000fdd4:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000fddb:	00 
ffffffff8000fddc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000fde0:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff8000fde4:	73 5a                	jae    ffffffff8000fe40 <memcmp+0x90>
ffffffff8000fde6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fdea:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000fdee:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000fdf2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000fdf6:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000fdfa:	0f b6 0c 11          	movzbl (%rcx,%rdx,1),%ecx
ffffffff8000fdfe:	39 c8                	cmp    %ecx,%eax
ffffffff8000fe00:	7d 09                	jge    ffffffff8000fe0b <memcmp+0x5b>
ffffffff8000fe02:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%rbp)
ffffffff8000fe09:	eb 3c                	jmp    ffffffff8000fe47 <memcmp+0x97>
ffffffff8000fe0b:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fe0f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000fe13:	0f b6 04 08          	movzbl (%rax,%rcx,1),%eax
ffffffff8000fe17:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8000fe1b:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8000fe1f:	0f b6 0c 11          	movzbl (%rcx,%rdx,1),%ecx
ffffffff8000fe23:	39 c8                	cmp    %ecx,%eax
ffffffff8000fe25:	7e 09                	jle    ffffffff8000fe30 <memcmp+0x80>
ffffffff8000fe27:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%rbp)
ffffffff8000fe2e:	eb 17                	jmp    ffffffff8000fe47 <memcmp+0x97>
ffffffff8000fe30:	eb 00                	jmp    ffffffff8000fe32 <memcmp+0x82>
ffffffff8000fe32:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000fe36:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000fe3a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000fe3e:	eb 9c                	jmp    ffffffff8000fddc <memcmp+0x2c>
ffffffff8000fe40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff8000fe47:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8000fe4a:	48 83 c4 38          	add    $0x38,%rsp
ffffffff8000fe4e:	5d                   	pop    %rbp
ffffffff8000fe4f:	c3                   	ret    

ffffffff8000fe50 <strcmp>:
ffffffff8000fe50:	55                   	push   %rbp
ffffffff8000fe51:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000fe54:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8000fe58:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8000fe5c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff8000fe60:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff8000fe67:	00 
ffffffff8000fe68:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000fe6c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000fe70:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff8000fe73:	88 45 fe             	mov    %al,-0x2(%rbp)
ffffffff8000fe76:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000fe7a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8000fe7e:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff8000fe81:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff8000fe84:	80 7d fe 00          	cmpb   $0x0,-0x2(%rbp)
ffffffff8000fe88:	75 0f                	jne    ffffffff8000fe99 <strcmp+0x49>
ffffffff8000fe8a:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
ffffffff8000fe8e:	75 09                	jne    ffffffff8000fe99 <strcmp+0x49>
ffffffff8000fe90:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff8000fe97:	eb 38                	jmp    ffffffff8000fed1 <strcmp+0x81>
ffffffff8000fe99:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff8000fe9d:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000fea1:	39 c8                	cmp    %ecx,%eax
ffffffff8000fea3:	7d 09                	jge    ffffffff8000feae <strcmp+0x5e>
ffffffff8000fea5:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%rbp)
ffffffff8000feac:	eb 23                	jmp    ffffffff8000fed1 <strcmp+0x81>
ffffffff8000feae:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff8000feb2:	0f b6 4d ff          	movzbl -0x1(%rbp),%ecx
ffffffff8000feb6:	39 c8                	cmp    %ecx,%eax
ffffffff8000feb8:	7e 09                	jle    ffffffff8000fec3 <strcmp+0x73>
ffffffff8000feba:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%rbp)
ffffffff8000fec1:	eb 0e                	jmp    ffffffff8000fed1 <strcmp+0x81>
ffffffff8000fec3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fec7:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000fecb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000fecf:	eb 97                	jmp    ffffffff8000fe68 <strcmp+0x18>
ffffffff8000fed1:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8000fed4:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8000fed8:	5d                   	pop    %rbp
ffffffff8000fed9:	c3                   	ret    
ffffffff8000feda:	cc                   	int3   
ffffffff8000fedb:	cc                   	int3   
ffffffff8000fedc:	cc                   	int3   
ffffffff8000fedd:	cc                   	int3   
ffffffff8000fede:	cc                   	int3   
ffffffff8000fedf:	cc                   	int3   

ffffffff8000fee0 <strlen>:
ffffffff8000fee0:	55                   	push   %rbp
ffffffff8000fee1:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000fee4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff8000fee8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8000feec:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8000fef3:	00 
ffffffff8000fef4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000fef8:	48 89 c1             	mov    %rax,%rcx
ffffffff8000fefb:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000feff:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff8000ff03:	0f be 00             	movsbl (%rax),%eax
ffffffff8000ff06:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ff09:	74 0e                	je     ffffffff8000ff19 <strlen+0x39>
ffffffff8000ff0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ff0f:	48 83 c0 01          	add    $0x1,%rax
ffffffff8000ff13:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ff17:	eb db                	jmp    ffffffff8000fef4 <strlen+0x14>
ffffffff8000ff19:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ff1d:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8000ff21:	5d                   	pop    %rbp
ffffffff8000ff22:	c3                   	ret    
ffffffff8000ff23:	cc                   	int3   
ffffffff8000ff24:	cc                   	int3   
ffffffff8000ff25:	cc                   	int3   
ffffffff8000ff26:	cc                   	int3   
ffffffff8000ff27:	cc                   	int3   
ffffffff8000ff28:	cc                   	int3   
ffffffff8000ff29:	cc                   	int3   
ffffffff8000ff2a:	cc                   	int3   
ffffffff8000ff2b:	cc                   	int3   
ffffffff8000ff2c:	cc                   	int3   
ffffffff8000ff2d:	cc                   	int3   
ffffffff8000ff2e:	cc                   	int3   
ffffffff8000ff2f:	cc                   	int3   

ffffffff8000ff30 <strcpy>:
ffffffff8000ff30:	55                   	push   %rbp
ffffffff8000ff31:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ff34:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff8000ff38:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8000ff3c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8000ff40:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8000ff44:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8000ff48:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ff4c:	48 89 c1             	mov    %rax,%rcx
ffffffff8000ff4f:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8000ff53:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff8000ff57:	8a 00                	mov    (%rax),%al
ffffffff8000ff59:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ff5d:	48 89 ca             	mov    %rcx,%rdx
ffffffff8000ff60:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8000ff64:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8000ff68:	88 01                	mov    %al,(%rcx)
ffffffff8000ff6a:	0f be c0             	movsbl %al,%eax
ffffffff8000ff6d:	83 f8 00             	cmp    $0x0,%eax
ffffffff8000ff70:	74 02                	je     ffffffff8000ff74 <strcpy+0x44>
ffffffff8000ff72:	eb d4                	jmp    ffffffff8000ff48 <strcpy+0x18>
ffffffff8000ff74:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8000ff78:	5d                   	pop    %rbp
ffffffff8000ff79:	c3                   	ret    
ffffffff8000ff7a:	cc                   	int3   
ffffffff8000ff7b:	cc                   	int3   
ffffffff8000ff7c:	cc                   	int3   
ffffffff8000ff7d:	cc                   	int3   
ffffffff8000ff7e:	cc                   	int3   
ffffffff8000ff7f:	cc                   	int3   

ffffffff8000ff80 <stbds_arrgrowf>:
ffffffff8000ff80:	55                   	push   %rbp
ffffffff8000ff81:	48 89 e5             	mov    %rsp,%rbp
ffffffff8000ff84:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff8000ff88:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8000ff8c:	48 89 75 c8          	mov    %rsi,-0x38(%rbp)
ffffffff8000ff90:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
ffffffff8000ff94:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff8000ff98:	48 8d 45 a8          	lea    -0x58(%rbp),%rax
ffffffff8000ff9c:	31 c9                	xor    %ecx,%ecx
ffffffff8000ff9e:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff8000ffa1:	0f 11 40 10          	movups %xmm0,0x10(%rax)
ffffffff8000ffa5:	0f 11 00             	movups %xmm0,(%rax)
ffffffff8000ffa8:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000ffad:	74 0a                	je     ffffffff8000ffb9 <stbds_arrgrowf+0x39>
ffffffff8000ffaf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000ffb3:	48 8b 40 e0          	mov    -0x20(%rax),%rax
ffffffff8000ffb7:	eb 04                	jmp    ffffffff8000ffbd <stbds_arrgrowf+0x3d>
ffffffff8000ffb9:	31 c0                	xor    %eax,%eax
ffffffff8000ffbb:	eb 00                	jmp    ffffffff8000ffbd <stbds_arrgrowf+0x3d>
ffffffff8000ffbd:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff8000ffc1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8000ffc5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000ffc9:	48 3b 45 f0          	cmp    -0x10(%rbp),%rax
ffffffff8000ffcd:	76 08                	jbe    ffffffff8000ffd7 <stbds_arrgrowf+0x57>
ffffffff8000ffcf:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8000ffd3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8000ffd7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8000ffdb:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8000ffe0:	74 0a                	je     ffffffff8000ffec <stbds_arrgrowf+0x6c>
ffffffff8000ffe2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8000ffe6:	48 8b 49 e8          	mov    -0x18(%rcx),%rcx
ffffffff8000ffea:	eb 04                	jmp    ffffffff8000fff0 <stbds_arrgrowf+0x70>
ffffffff8000ffec:	31 c9                	xor    %ecx,%ecx
ffffffff8000ffee:	eb 00                	jmp    ffffffff8000fff0 <stbds_arrgrowf+0x70>
ffffffff8000fff0:	48 39 c8             	cmp    %rcx,%rax
ffffffff8000fff3:	77 0d                	ja     ffffffff80010002 <stbds_arrgrowf+0x82>
ffffffff8000fff5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8000fff9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8000fffd:	e9 cc 00 00 00       	jmp    ffffffff800100ce <stbds_arrgrowf+0x14e>
ffffffff80010002:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010006:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff8001000b:	74 0a                	je     ffffffff80010017 <stbds_arrgrowf+0x97>
ffffffff8001000d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010011:	48 8b 49 e8          	mov    -0x18(%rcx),%rcx
ffffffff80010015:	eb 04                	jmp    ffffffff8001001b <stbds_arrgrowf+0x9b>
ffffffff80010017:	31 c9                	xor    %ecx,%ecx
ffffffff80010019:	eb 00                	jmp    ffffffff8001001b <stbds_arrgrowf+0x9b>
ffffffff8001001b:	48 c1 e1 01          	shl    $0x1,%rcx
ffffffff8001001f:	48 39 c8             	cmp    %rcx,%rax
ffffffff80010022:	73 1f                	jae    ffffffff80010043 <stbds_arrgrowf+0xc3>
ffffffff80010024:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010029:	74 0a                	je     ffffffff80010035 <stbds_arrgrowf+0xb5>
ffffffff8001002b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001002f:	48 8b 40 e8          	mov    -0x18(%rax),%rax
ffffffff80010033:	eb 04                	jmp    ffffffff80010039 <stbds_arrgrowf+0xb9>
ffffffff80010035:	31 c0                	xor    %eax,%eax
ffffffff80010037:	eb 00                	jmp    ffffffff80010039 <stbds_arrgrowf+0xb9>
ffffffff80010039:	48 c1 e0 01          	shl    $0x1,%rax
ffffffff8001003d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010041:	eb 11                	jmp    ffffffff80010054 <stbds_arrgrowf+0xd4>
ffffffff80010043:	48 83 7d f0 04       	cmpq   $0x4,-0x10(%rbp)
ffffffff80010048:	73 08                	jae    ffffffff80010052 <stbds_arrgrowf+0xd2>
ffffffff8001004a:	48 c7 45 f0 04 00 00 	movq   $0x4,-0x10(%rbp)
ffffffff80010051:	00 
ffffffff80010052:	eb 00                	jmp    ffffffff80010054 <stbds_arrgrowf+0xd4>
ffffffff80010054:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010059:	74 0a                	je     ffffffff80010065 <stbds_arrgrowf+0xe5>
ffffffff8001005b:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8001005f:	48 83 c7 e0          	add    $0xffffffffffffffe0,%rdi
ffffffff80010063:	eb 04                	jmp    ffffffff80010069 <stbds_arrgrowf+0xe9>
ffffffff80010065:	31 ff                	xor    %edi,%edi
ffffffff80010067:	eb 00                	jmp    ffffffff80010069 <stbds_arrgrowf+0xe9>
ffffffff80010069:	48 8b 75 c8          	mov    -0x38(%rbp),%rsi
ffffffff8001006d:	48 0f af 75 f0       	imul   -0x10(%rbp),%rsi
ffffffff80010072:	48 83 c6 20          	add    $0x20,%rsi
ffffffff80010076:	e8 c5 d1 ff ff       	call   ffffffff8000d240 <realloc>
ffffffff8001007b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001007f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010083:	48 83 c0 20          	add    $0x20,%rax
ffffffff80010087:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001008b:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010090:	75 26                	jne    ffffffff800100b8 <stbds_arrgrowf+0x138>
ffffffff80010092:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010096:	48 c7 40 e0 00 00 00 	movq   $0x0,-0x20(%rax)
ffffffff8001009d:	00 
ffffffff8001009e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800100a2:	48 c7 40 f0 00 00 00 	movq   $0x0,-0x10(%rax)
ffffffff800100a9:	00 
ffffffff800100aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800100ae:	48 c7 40 f8 00 00 00 	movq   $0x0,-0x8(%rax)
ffffffff800100b5:	00 
ffffffff800100b6:	eb 02                	jmp    ffffffff800100ba <stbds_arrgrowf+0x13a>
ffffffff800100b8:	eb 00                	jmp    ffffffff800100ba <stbds_arrgrowf+0x13a>
ffffffff800100ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800100be:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800100c2:	48 89 41 e8          	mov    %rax,-0x18(%rcx)
ffffffff800100c6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800100ca:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800100ce:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800100d2:	48 83 c4 60          	add    $0x60,%rsp
ffffffff800100d6:	5d                   	pop    %rbp
ffffffff800100d7:	c3                   	ret    
ffffffff800100d8:	cc                   	int3   
ffffffff800100d9:	cc                   	int3   
ffffffff800100da:	cc                   	int3   
ffffffff800100db:	cc                   	int3   
ffffffff800100dc:	cc                   	int3   
ffffffff800100dd:	cc                   	int3   
ffffffff800100de:	cc                   	int3   
ffffffff800100df:	cc                   	int3   

ffffffff800100e0 <stbds_hash_string>:
ffffffff800100e0:	55                   	push   %rbp
ffffffff800100e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800100e4:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800100e8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800100ec:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff800100f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800100f4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800100f8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800100fc:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff800100ff:	74 2e                	je     ffffffff8001012f <stbds_hash_string+0x4f>
ffffffff80010101:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010105:	48 c1 e0 09          	shl    $0x9,%rax
ffffffff80010109:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001010d:	48 c1 e9 37          	shr    $0x37,%rcx
ffffffff80010111:	48 09 c8             	or     %rcx,%rax
ffffffff80010114:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80010118:	48 89 ca             	mov    %rcx,%rdx
ffffffff8001011b:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8001011f:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80010123:	0f b6 09             	movzbl (%rcx),%ecx
ffffffff80010126:	48 01 c8             	add    %rcx,%rax
ffffffff80010129:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001012d:	eb c9                	jmp    ffffffff800100f8 <stbds_hash_string+0x18>
ffffffff8001012f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010133:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010137:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001013b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001013f:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
ffffffff80010143:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010147:	48 c1 e1 12          	shl    $0x12,%rcx
ffffffff8001014b:	48 01 c8             	add    %rcx,%rax
ffffffff8001014e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010152:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010156:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001015a:	48 c1 e9 1f          	shr    $0x1f,%rcx
ffffffff8001015e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80010162:	48 c1 e2 21          	shl    $0x21,%rdx
ffffffff80010166:	48 09 d1             	or     %rdx,%rcx
ffffffff80010169:	48 31 c8             	xor    %rcx,%rax
ffffffff8001016c:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010170:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010174:	48 6b 45 f8 15       	imul   $0x15,-0x8(%rbp),%rax
ffffffff80010179:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001017d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010181:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010185:	48 c1 e9 0b          	shr    $0xb,%rcx
ffffffff80010189:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8001018d:	48 c1 e2 35          	shl    $0x35,%rdx
ffffffff80010191:	48 09 d1             	or     %rdx,%rcx
ffffffff80010194:	48 31 c8             	xor    %rcx,%rax
ffffffff80010197:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff8001019b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001019f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800101a3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff800101a7:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff800101ab:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800101af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800101b3:	48 c1 e8 16          	shr    $0x16,%rax
ffffffff800101b7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800101bb:	48 c1 e1 2a          	shl    $0x2a,%rcx
ffffffff800101bf:	48 09 c8             	or     %rcx,%rax
ffffffff800101c2:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff800101c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800101ca:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800101ce:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff800101d2:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800101d6:	5d                   	pop    %rbp
ffffffff800101d7:	c3                   	ret    
ffffffff800101d8:	cc                   	int3   
ffffffff800101d9:	cc                   	int3   
ffffffff800101da:	cc                   	int3   
ffffffff800101db:	cc                   	int3   
ffffffff800101dc:	cc                   	int3   
ffffffff800101dd:	cc                   	int3   
ffffffff800101de:	cc                   	int3   
ffffffff800101df:	cc                   	int3   

ffffffff800101e0 <stbds_hash_bytes>:
ffffffff800101e0:	55                   	push   %rbp
ffffffff800101e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800101e4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff800101e8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff800101ec:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff800101f0:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff800101f4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800101f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800101fc:	48 83 7d d8 04       	cmpq   $0x4,-0x28(%rbp)
ffffffff80010201:	0f 85 ae 00 00 00    	jne    ffffffff800102b5 <stbds_hash_bytes+0xd5>
ffffffff80010207:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001020b:	0f b6 00             	movzbl (%rax),%eax
ffffffff8001020e:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80010212:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
ffffffff80010216:	c1 e1 08             	shl    $0x8,%ecx
ffffffff80010219:	09 c8                	or     %ecx,%eax
ffffffff8001021b:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001021f:	0f b6 49 02          	movzbl 0x2(%rcx),%ecx
ffffffff80010223:	c1 e1 10             	shl    $0x10,%ecx
ffffffff80010226:	09 c8                	or     %ecx,%eax
ffffffff80010228:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001022c:	0f b6 49 03          	movzbl 0x3(%rcx),%ecx
ffffffff80010230:	c1 e1 18             	shl    $0x18,%ecx
ffffffff80010233:	09 c8                	or     %ecx,%eax
ffffffff80010235:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80010238:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8001023c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8001023f:	48 31 c1             	xor    %rax,%rcx
ffffffff80010242:	89 4d fc             	mov    %ecx,-0x4(%rbp)
ffffffff80010245:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80010248:	83 f0 3d             	xor    $0x3d,%eax
ffffffff8001024b:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8001024e:	c1 e9 10             	shr    $0x10,%ecx
ffffffff80010251:	31 c8                	xor    %ecx,%eax
ffffffff80010253:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80010256:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80010259:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8001025c:	c1 e1 03             	shl    $0x3,%ecx
ffffffff8001025f:	01 c8                	add    %ecx,%eax
ffffffff80010261:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80010264:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80010267:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8001026a:	c1 e9 04             	shr    $0x4,%ecx
ffffffff8001026d:	31 c8                	xor    %ecx,%eax
ffffffff8001026f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80010272:	69 45 fc 2d eb d4 27 	imul   $0x27d4eb2d,-0x4(%rbp),%eax
ffffffff80010279:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8001027c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010280:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff80010283:	48 31 c1             	xor    %rax,%rcx
ffffffff80010286:	89 4d fc             	mov    %ecx,-0x4(%rbp)
ffffffff80010289:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001028c:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff8001028f:	c1 e9 0f             	shr    $0xf,%ecx
ffffffff80010292:	31 c8                	xor    %ecx,%eax
ffffffff80010294:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80010297:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001029a:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8001029e:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800102a2:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff800102a5:	48 09 c8             	or     %rcx,%rax
ffffffff800102a8:	48 33 45 e0          	xor    -0x20(%rbp),%rax
ffffffff800102ac:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800102b0:	e9 5b 01 00 00       	jmp    ffffffff80010410 <stbds_hash_bytes+0x230>
ffffffff800102b5:	48 83 7d d8 08       	cmpq   $0x8,-0x28(%rbp)
ffffffff800102ba:	0f 85 3b 01 00 00    	jne    ffffffff800103fb <stbds_hash_bytes+0x21b>
ffffffff800102c0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800102c4:	0f b6 00             	movzbl (%rax),%eax
ffffffff800102c7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800102cb:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
ffffffff800102cf:	c1 e1 08             	shl    $0x8,%ecx
ffffffff800102d2:	09 c8                	or     %ecx,%eax
ffffffff800102d4:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800102d8:	0f b6 49 02          	movzbl 0x2(%rcx),%ecx
ffffffff800102dc:	c1 e1 10             	shl    $0x10,%ecx
ffffffff800102df:	09 c8                	or     %ecx,%eax
ffffffff800102e1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800102e5:	0f b6 49 03          	movzbl 0x3(%rcx),%ecx
ffffffff800102e9:	c1 e1 18             	shl    $0x18,%ecx
ffffffff800102ec:	09 c8                	or     %ecx,%eax
ffffffff800102ee:	48 98                	cltq   
ffffffff800102f0:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800102f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800102f8:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff800102fc:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80010300:	0f b6 49 05          	movzbl 0x5(%rcx),%ecx
ffffffff80010304:	c1 e1 08             	shl    $0x8,%ecx
ffffffff80010307:	09 c8                	or     %ecx,%eax
ffffffff80010309:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001030d:	0f b6 49 06          	movzbl 0x6(%rcx),%ecx
ffffffff80010311:	c1 e1 10             	shl    $0x10,%ecx
ffffffff80010314:	09 c8                	or     %ecx,%eax
ffffffff80010316:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001031a:	0f b6 49 07          	movzbl 0x7(%rcx),%ecx
ffffffff8001031e:	c1 e1 18             	shl    $0x18,%ecx
ffffffff80010321:	09 c8                	or     %ecx,%eax
ffffffff80010323:	48 98                	cltq   
ffffffff80010325:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80010329:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8001032d:	48 0b 45 f0          	or     -0x10(%rbp),%rax
ffffffff80010331:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010335:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010339:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff8001033d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010341:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010345:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
ffffffff80010349:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001034d:	48 c1 e1 15          	shl    $0x15,%rcx
ffffffff80010351:	48 01 c8             	add    %rcx,%rax
ffffffff80010354:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010358:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001035c:	48 c1 e8 18          	shr    $0x18,%rax
ffffffff80010360:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010364:	48 c1 e1 28          	shl    $0x28,%rcx
ffffffff80010368:	48 09 c8             	or     %rcx,%rax
ffffffff8001036b:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff8001036f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010373:	48 69 45 f0 09 01 00 	imul   $0x109,-0x10(%rbp),%rax
ffffffff8001037a:	00 
ffffffff8001037b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001037f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010383:	48 c1 e8 0e          	shr    $0xe,%rax
ffffffff80010387:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001038b:	48 c1 e1 32          	shl    $0x32,%rcx
ffffffff8001038f:	48 09 c8             	or     %rcx,%rax
ffffffff80010392:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff80010396:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001039a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8001039e:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff800103a2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800103a6:	48 6b 45 f0 15       	imul   $0x15,-0x10(%rbp),%rax
ffffffff800103ab:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800103af:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800103b3:	48 c1 e8 1c          	shr    $0x1c,%rax
ffffffff800103b7:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800103bb:	48 c1 e1 24          	shl    $0x24,%rcx
ffffffff800103bf:	48 09 c8             	or     %rcx,%rax
ffffffff800103c2:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff800103c6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800103ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800103ce:	48 c1 e0 1f          	shl    $0x1f,%rax
ffffffff800103d2:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff800103d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800103da:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800103de:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
ffffffff800103e2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800103e6:	48 c1 e1 12          	shl    $0x12,%rcx
ffffffff800103ea:	48 01 c8             	add    %rcx,%rax
ffffffff800103ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800103f1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800103f5:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800103f9:	eb 15                	jmp    ffffffff80010410 <stbds_hash_bytes+0x230>
ffffffff800103fb:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff800103ff:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80010403:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80010407:	e8 14 00 00 00       	call   ffffffff80010420 <stbds_siphash_bytes>
ffffffff8001040c:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80010410:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010414:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80010418:	5d                   	pop    %rbp
ffffffff80010419:	c3                   	ret    
ffffffff8001041a:	cc                   	int3   
ffffffff8001041b:	cc                   	int3   
ffffffff8001041c:	cc                   	int3   
ffffffff8001041d:	cc                   	int3   
ffffffff8001041e:	cc                   	int3   
ffffffff8001041f:	cc                   	int3   

ffffffff80010420 <stbds_siphash_bytes>:
ffffffff80010420:	55                   	push   %rbp
ffffffff80010421:	48 89 e5             	mov    %rsp,%rbp
ffffffff80010424:	48 83 ec 58          	sub    $0x58,%rsp
ffffffff80010428:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
ffffffff8001042c:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80010430:	48 89 55 b8          	mov    %rdx,-0x48(%rbp)
ffffffff80010434:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80010438:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff8001043c:	48 b8 75 65 73 70 65 	movabs $0x736f6d6570736575,%rax
ffffffff80010443:	6d 6f 73 
ffffffff80010446:	48 33 45 b8          	xor    -0x48(%rbp),%rax
ffffffff8001044a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001044e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80010452:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
ffffffff80010456:	48 b9 6d 6f 64 6e 61 	movabs $0x646f72616e646f6d,%rcx
ffffffff8001045d:	72 6f 64 
ffffffff80010460:	48 31 c8             	xor    %rcx,%rax
ffffffff80010463:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010467:	48 b8 61 72 65 6e 65 	movabs $0x6c7967656e657261,%rax
ffffffff8001046e:	67 79 6c 
ffffffff80010471:	48 33 45 b8          	xor    -0x48(%rbp),%rax
ffffffff80010475:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010479:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8001047d:	48 83 f0 ff          	xor    $0xffffffffffffffff,%rax
ffffffff80010481:	48 b9 73 65 74 79 62 	movabs $0x7465646279746573,%rcx
ffffffff80010488:	64 65 74 
ffffffff8001048b:	48 31 c8             	xor    %rcx,%rax
ffffffff8001048e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010492:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80010499:	00 
ffffffff8001049a:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8001049e:	48 83 c0 08          	add    $0x8,%rax
ffffffff800104a2:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
ffffffff800104a6:	0f 87 bc 01 00 00    	ja     ffffffff80010668 <stbds_siphash_bytes+0x248>
ffffffff800104ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800104b0:	0f b6 00             	movzbl (%rax),%eax
ffffffff800104b3:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800104b7:	0f b6 49 01          	movzbl 0x1(%rcx),%ecx
ffffffff800104bb:	c1 e1 08             	shl    $0x8,%ecx
ffffffff800104be:	09 c8                	or     %ecx,%eax
ffffffff800104c0:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800104c4:	0f b6 49 02          	movzbl 0x2(%rcx),%ecx
ffffffff800104c8:	c1 e1 10             	shl    $0x10,%ecx
ffffffff800104cb:	09 c8                	or     %ecx,%eax
ffffffff800104cd:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800104d1:	0f b6 49 03          	movzbl 0x3(%rcx),%ecx
ffffffff800104d5:	c1 e1 18             	shl    $0x18,%ecx
ffffffff800104d8:	09 c8                	or     %ecx,%eax
ffffffff800104da:	48 98                	cltq   
ffffffff800104dc:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800104e0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800104e4:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff800104e8:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800104ec:	0f b6 49 05          	movzbl 0x5(%rcx),%ecx
ffffffff800104f0:	c1 e1 08             	shl    $0x8,%ecx
ffffffff800104f3:	09 c8                	or     %ecx,%eax
ffffffff800104f5:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800104f9:	0f b6 49 06          	movzbl 0x6(%rcx),%ecx
ffffffff800104fd:	c1 e1 10             	shl    $0x10,%ecx
ffffffff80010500:	09 c8                	or     %ecx,%eax
ffffffff80010502:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80010506:	0f b6 49 07          	movzbl 0x7(%rcx),%ecx
ffffffff8001050a:	c1 e1 18             	shl    $0x18,%ecx
ffffffff8001050d:	09 c8                	or     %ecx,%eax
ffffffff8001050f:	48 98                	cltq   
ffffffff80010511:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80010515:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80010519:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff8001051d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80010521:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80010525:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010529:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001052d:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80010534:	00 
ffffffff80010535:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
ffffffff8001053a:	0f 83 ff 00 00 00    	jae    ffffffff8001063f <stbds_siphash_bytes+0x21f>
ffffffff80010540:	eb 00                	jmp    ffffffff80010542 <stbds_siphash_bytes+0x122>
ffffffff80010542:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010546:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff8001054a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001054e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010552:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80010556:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001055a:	48 c1 e9 33          	shr    $0x33,%rcx
ffffffff8001055e:	48 09 c8             	or     %rcx,%rax
ffffffff80010561:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010565:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010569:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff8001056d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010571:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010575:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80010579:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001057d:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80010581:	48 09 c8             	or     %rcx,%rax
ffffffff80010584:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010588:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001058c:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff80010590:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010594:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010598:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8001059c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800105a0:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff800105a4:	48 09 c8             	or     %rcx,%rax
ffffffff800105a7:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800105ab:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800105af:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff800105b3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800105b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800105bb:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff800105bf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800105c3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800105c7:	48 c1 e0 11          	shl    $0x11,%rax
ffffffff800105cb:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800105cf:	48 c1 e9 2f          	shr    $0x2f,%rcx
ffffffff800105d3:	48 09 c8             	or     %rcx,%rax
ffffffff800105d6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800105da:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800105de:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff800105e2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800105e6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800105ea:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff800105ee:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800105f2:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff800105f6:	48 09 c8             	or     %rcx,%rax
ffffffff800105f9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800105fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010601:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff80010605:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001060d:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80010611:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010615:	48 c1 e9 2b          	shr    $0x2b,%rcx
ffffffff80010619:	48 09 c8             	or     %rcx,%rax
ffffffff8001061c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010620:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010624:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010628:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001062c:	eb 00                	jmp    ffffffff8001062e <stbds_siphash_bytes+0x20e>
ffffffff8001062e:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80010632:	48 83 c0 01          	add    $0x1,%rax
ffffffff80010636:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff8001063a:	e9 f6 fe ff ff       	jmp    ffffffff80010535 <stbds_siphash_bytes+0x115>
ffffffff8001063f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80010643:	48 33 45 e8          	xor    -0x18(%rbp),%rax
ffffffff80010647:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001064b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8001064f:	48 83 c0 08          	add    $0x8,%rax
ffffffff80010653:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80010657:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001065b:	48 83 c0 08          	add    $0x8,%rax
ffffffff8001065f:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80010663:	e9 32 fe ff ff       	jmp    ffffffff8001049a <stbds_siphash_bytes+0x7a>
ffffffff80010668:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8001066c:	48 c1 e0 38          	shl    $0x38,%rax
ffffffff80010670:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80010674:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80010678:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8001067c:	48 29 c8             	sub    %rcx,%rax
ffffffff8001067f:	48 89 c1             	mov    %rax,%rcx
ffffffff80010682:	48 83 e9 07          	sub    $0x7,%rcx
ffffffff80010686:	0f 87 a2 00 00 00    	ja     ffffffff8001072e <stbds_siphash_bytes+0x30e>
ffffffff8001068c:	48 8b 04 c5 08 85 01 	mov    -0x7ffe7af8(,%rax,8),%rax
ffffffff80010693:	80 
ffffffff80010694:	ff e0                	jmp    *%rax
ffffffff80010696:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001069a:	0f b6 40 06          	movzbl 0x6(%rax),%eax
ffffffff8001069e:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff800106a2:	48 c1 e0 18          	shl    $0x18,%rax
ffffffff800106a6:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff800106aa:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800106ae:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800106b2:	0f b6 40 05          	movzbl 0x5(%rax),%eax
ffffffff800106b6:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff800106ba:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff800106be:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff800106c2:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800106c6:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800106ca:	0f b6 40 04          	movzbl 0x4(%rax),%eax
ffffffff800106ce:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800106d2:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800106d6:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff800106da:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800106de:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800106e2:	0f b6 40 03          	movzbl 0x3(%rax),%eax
ffffffff800106e6:	c1 e0 18             	shl    $0x18,%eax
ffffffff800106e9:	48 98                	cltq   
ffffffff800106eb:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff800106ef:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800106f3:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800106f7:	0f b6 40 02          	movzbl 0x2(%rax),%eax
ffffffff800106fb:	c1 e0 10             	shl    $0x10,%eax
ffffffff800106fe:	48 98                	cltq   
ffffffff80010700:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff80010704:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80010708:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001070c:	0f b6 40 01          	movzbl 0x1(%rax),%eax
ffffffff80010710:	c1 e0 08             	shl    $0x8,%eax
ffffffff80010713:	48 98                	cltq   
ffffffff80010715:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff80010719:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8001071d:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010721:	0f b6 00             	movzbl (%rax),%eax
ffffffff80010724:	48 0b 45 d8          	or     -0x28(%rbp),%rax
ffffffff80010728:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8001072c:	eb 00                	jmp    ffffffff8001072e <stbds_siphash_bytes+0x30e>
ffffffff8001072e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80010732:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010736:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001073a:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80010741:	00 
ffffffff80010742:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
ffffffff80010747:	0f 83 ff 00 00 00    	jae    ffffffff8001084c <stbds_siphash_bytes+0x42c>
ffffffff8001074d:	eb 00                	jmp    ffffffff8001074f <stbds_siphash_bytes+0x32f>
ffffffff8001074f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010753:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff80010757:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001075b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001075f:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80010763:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010767:	48 c1 e9 33          	shr    $0x33,%rcx
ffffffff8001076b:	48 09 c8             	or     %rcx,%rax
ffffffff8001076e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010772:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010776:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff8001077a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001077e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010782:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80010786:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001078a:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8001078e:	48 09 c8             	or     %rcx,%rax
ffffffff80010791:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010795:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010799:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff8001079d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800107a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800107a5:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800107a9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800107ad:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff800107b1:	48 09 c8             	or     %rcx,%rax
ffffffff800107b4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800107b8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800107bc:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff800107c0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800107c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800107c8:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff800107cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800107d0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800107d4:	48 c1 e0 11          	shl    $0x11,%rax
ffffffff800107d8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800107dc:	48 c1 e9 2f          	shr    $0x2f,%rcx
ffffffff800107e0:	48 09 c8             	or     %rcx,%rax
ffffffff800107e3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800107e7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800107eb:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff800107ef:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800107f3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800107f7:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff800107fb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800107ff:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80010803:	48 09 c8             	or     %rcx,%rax
ffffffff80010806:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001080a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001080e:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff80010812:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010816:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001081a:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff8001081e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010822:	48 c1 e9 2b          	shr    $0x2b,%rcx
ffffffff80010826:	48 09 c8             	or     %rcx,%rax
ffffffff80010829:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001082d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010831:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010835:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010839:	eb 00                	jmp    ffffffff8001083b <stbds_siphash_bytes+0x41b>
ffffffff8001083b:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8001083f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80010843:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80010847:	e9 f6 fe ff ff       	jmp    ffffffff80010742 <stbds_siphash_bytes+0x322>
ffffffff8001084c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80010850:	48 33 45 e8          	xor    -0x18(%rbp),%rax
ffffffff80010854:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010858:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8001085c:	48 35 ff 00 00 00    	xor    $0xff,%rax
ffffffff80010862:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010866:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff8001086d:	00 
ffffffff8001086e:	48 83 7d c8 01       	cmpq   $0x1,-0x38(%rbp)
ffffffff80010873:	0f 83 ff 00 00 00    	jae    ffffffff80010978 <stbds_siphash_bytes+0x558>
ffffffff80010879:	eb 00                	jmp    ffffffff8001087b <stbds_siphash_bytes+0x45b>
ffffffff8001087b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001087f:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff80010883:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010887:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001088b:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8001088f:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010893:	48 c1 e9 33          	shr    $0x33,%rcx
ffffffff80010897:	48 09 c8             	or     %rcx,%rax
ffffffff8001089a:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001089e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800108a2:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff800108a6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800108aa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800108ae:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff800108b2:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800108b6:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff800108ba:	48 09 c8             	or     %rcx,%rax
ffffffff800108bd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800108c1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800108c5:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff800108c9:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800108cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800108d1:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800108d5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800108d9:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff800108dd:	48 09 c8             	or     %rcx,%rax
ffffffff800108e0:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800108e4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800108e8:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff800108ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800108f0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800108f4:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff800108f8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800108fc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010900:	48 c1 e0 11          	shl    $0x11,%rax
ffffffff80010904:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010908:	48 c1 e9 2f          	shr    $0x2f,%rcx
ffffffff8001090c:	48 09 c8             	or     %rcx,%rax
ffffffff8001090f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010913:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010917:	48 33 45 f0          	xor    -0x10(%rbp),%rax
ffffffff8001091b:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001091f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010923:	48 c1 e0 20          	shl    $0x20,%rax
ffffffff80010927:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8001092b:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8001092f:	48 09 c8             	or     %rcx,%rax
ffffffff80010932:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010936:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001093a:	48 03 45 e8          	add    -0x18(%rbp),%rax
ffffffff8001093e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010942:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010946:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff8001094a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001094e:	48 c1 e9 2b          	shr    $0x2b,%rcx
ffffffff80010952:	48 09 c8             	or     %rcx,%rax
ffffffff80010955:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010959:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001095d:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010961:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010965:	eb 00                	jmp    ffffffff80010967 <stbds_siphash_bytes+0x547>
ffffffff80010967:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff8001096b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001096f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80010973:	e9 f6 fe ff ff       	jmp    ffffffff8001086e <stbds_siphash_bytes+0x44e>
ffffffff80010978:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001097c:	48 33 45 e0          	xor    -0x20(%rbp),%rax
ffffffff80010980:	48 33 45 f8          	xor    -0x8(%rbp),%rax
ffffffff80010984:	48 83 c4 58          	add    $0x58,%rsp
ffffffff80010988:	5d                   	pop    %rbp
ffffffff80010989:	c3                   	ret    
ffffffff8001098a:	cc                   	int3   
ffffffff8001098b:	cc                   	int3   
ffffffff8001098c:	cc                   	int3   
ffffffff8001098d:	cc                   	int3   
ffffffff8001098e:	cc                   	int3   
ffffffff8001098f:	cc                   	int3   

ffffffff80010990 <stbds_hmfree_func>:
ffffffff80010990:	55                   	push   %rbp
ffffffff80010991:	48 89 e5             	mov    %rsp,%rbp
ffffffff80010994:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80010998:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8001099c:	48 c7 45 e8 08 00 00 	movq   $0x8,-0x18(%rbp)
ffffffff800109a3:	00 
ffffffff800109a4:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff800109a9:	75 05                	jne    ffffffff800109b0 <stbds_hmfree_func+0x20>
ffffffff800109ab:	e9 86 00 00 00       	jmp    ffffffff80010a36 <stbds_hmfree_func+0xa6>
ffffffff800109b0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800109b4:	48 8b 40 f0          	mov    -0x10(%rax),%rax
ffffffff800109b8:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800109bc:	74 5e                	je     ffffffff80010a1c <stbds_hmfree_func+0x8c>
ffffffff800109be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800109c2:	48 8b 40 f0          	mov    -0x10(%rax),%rax
ffffffff800109c6:	0f b6 40 59          	movzbl 0x59(%rax),%eax
ffffffff800109ca:	83 f8 02             	cmp    $0x2,%eax
ffffffff800109cd:	75 3c                	jne    ffffffff80010a0b <stbds_hmfree_func+0x7b>
ffffffff800109cf:	48 c7 45 f0 01 00 00 	movq   $0x1,-0x10(%rbp)
ffffffff800109d6:	00 
ffffffff800109d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800109db:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800109df:	48 3b 41 e0          	cmp    -0x20(%rcx),%rax
ffffffff800109e3:	73 24                	jae    ffffffff80010a09 <stbds_hmfree_func+0x79>
ffffffff800109e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800109e9:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800109ed:	48 0f af 4d f0       	imul   -0x10(%rbp),%rcx
ffffffff800109f2:	48 8b 3c 08          	mov    (%rax,%rcx,1),%rdi
ffffffff800109f6:	e8 95 c8 ff ff       	call   ffffffff8000d290 <free>
ffffffff800109fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800109ff:	48 83 c0 01          	add    $0x1,%rax
ffffffff80010a03:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010a07:	eb ce                	jmp    ffffffff800109d7 <stbds_hmfree_func+0x47>
ffffffff80010a09:	eb 00                	jmp    ffffffff80010a0b <stbds_hmfree_func+0x7b>
ffffffff80010a0b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010a0f:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
ffffffff80010a13:	48 83 c7 48          	add    $0x48,%rdi
ffffffff80010a17:	e8 24 00 00 00       	call   ffffffff80010a40 <stbds_strreset>
ffffffff80010a1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010a20:	48 8b 78 f0          	mov    -0x10(%rax),%rdi
ffffffff80010a24:	e8 67 c8 ff ff       	call   ffffffff8000d290 <free>
ffffffff80010a29:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80010a2d:	48 83 c7 e0          	add    $0xffffffffffffffe0,%rdi
ffffffff80010a31:	e8 5a c8 ff ff       	call   ffffffff8000d290 <free>
ffffffff80010a36:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80010a3a:	5d                   	pop    %rbp
ffffffff80010a3b:	c3                   	ret    
ffffffff80010a3c:	cc                   	int3   
ffffffff80010a3d:	cc                   	int3   
ffffffff80010a3e:	cc                   	int3   
ffffffff80010a3f:	cc                   	int3   

ffffffff80010a40 <stbds_strreset>:
ffffffff80010a40:	55                   	push   %rbp
ffffffff80010a41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80010a44:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80010a48:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80010a4c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010a50:	48 8b 00             	mov    (%rax),%rax
ffffffff80010a53:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010a57:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010a5c:	74 1e                	je     ffffffff80010a7c <stbds_strreset+0x3c>
ffffffff80010a5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010a62:	48 8b 00             	mov    (%rax),%rax
ffffffff80010a65:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010a69:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80010a6d:	e8 1e c8 ff ff       	call   ffffffff8000d290 <free>
ffffffff80010a72:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010a76:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010a7a:	eb db                	jmp    ffffffff80010a57 <stbds_strreset+0x17>
ffffffff80010a7c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010a80:	31 c9                	xor    %ecx,%ecx
ffffffff80010a82:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff80010a85:	0f 11 00             	movups %xmm0,(%rax)
ffffffff80010a88:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff80010a8f:	00 
ffffffff80010a90:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80010a94:	5d                   	pop    %rbp
ffffffff80010a95:	c3                   	ret    
ffffffff80010a96:	cc                   	int3   
ffffffff80010a97:	cc                   	int3   
ffffffff80010a98:	cc                   	int3   
ffffffff80010a99:	cc                   	int3   
ffffffff80010a9a:	cc                   	int3   
ffffffff80010a9b:	cc                   	int3   
ffffffff80010a9c:	cc                   	int3   
ffffffff80010a9d:	cc                   	int3   
ffffffff80010a9e:	cc                   	int3   
ffffffff80010a9f:	cc                   	int3   

ffffffff80010aa0 <stbds_hmput_key>:
ffffffff80010aa0:	55                   	push   %rbp
ffffffff80010aa1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80010aa4:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp
ffffffff80010aab:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80010aaf:	48 c7 45 d8 08 00 00 	movq   $0x8,-0x28(%rbp)
ffffffff80010ab6:	00 
ffffffff80010ab7:	48 89 75 b8          	mov    %rsi,-0x48(%rbp)
ffffffff80010abb:	48 c7 45 98 08 00 00 	movq   $0x8,-0x68(%rbp)
ffffffff80010ac2:	00 
ffffffff80010ac3:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%rbp)
ffffffff80010aca:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
ffffffff80010ad1:	00 
ffffffff80010ad2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010ad7:	75 43                	jne    ffffffff80010b1c <stbds_hmput_key+0x7c>
ffffffff80010ad9:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80010add:	31 ff                	xor    %edi,%edi
ffffffff80010adf:	31 d2                	xor    %edx,%edx
ffffffff80010ae1:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff80010ae6:	e8 95 f4 ff ff       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff80010aeb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010aef:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80010af3:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80010af7:	31 c0                	xor    %eax,%eax
ffffffff80010af9:	31 f6                	xor    %esi,%esi
ffffffff80010afb:	e8 20 ee ff ff       	call   ffffffff8000f920 <memset>
ffffffff80010b00:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010b04:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff80010b08:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80010b0c:	48 89 48 e0          	mov    %rcx,-0x20(%rax)
ffffffff80010b10:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010b14:	48 03 45 d8          	add    -0x28(%rbp),%rax
ffffffff80010b18:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010b1c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010b20:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80010b24:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010b28:	31 c9                	xor    %ecx,%ecx
ffffffff80010b2a:	48 2b 4d d8          	sub    -0x28(%rbp),%rcx
ffffffff80010b2e:	48 01 c8             	add    %rcx,%rax
ffffffff80010b31:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010b35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010b39:	48 8b 40 f0          	mov    -0x10(%rax),%rax
ffffffff80010b3d:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010b41:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80010b46:	74 12                	je     ffffffff80010b5a <stbds_hmput_key+0xba>
ffffffff80010b48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010b4c:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80010b50:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80010b54:	48 3b 41 18          	cmp    0x18(%rcx),%rax
ffffffff80010b58:	72 77                	jb     ffffffff80010bd1 <stbds_hmput_key+0x131>
ffffffff80010b5a:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80010b5f:	75 07                	jne    ffffffff80010b68 <stbds_hmput_key+0xc8>
ffffffff80010b61:	b8 08 00 00 00       	mov    $0x8,%eax
ffffffff80010b66:	eb 0c                	jmp    ffffffff80010b74 <stbds_hmput_key+0xd4>
ffffffff80010b68:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010b6c:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80010b70:	48 c1 e0 01          	shl    $0x1,%rax
ffffffff80010b74:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
ffffffff80010b7b:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
ffffffff80010b82:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80010b86:	e8 e5 04 00 00       	call   ffffffff80011070 <stbds_make_hash_index>
ffffffff80010b8b:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
ffffffff80010b92:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80010b97:	74 0b                	je     ffffffff80010ba4 <stbds_hmput_key+0x104>
ffffffff80010b99:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80010b9d:	e8 ee c6 ff ff       	call   ffffffff8000d290 <free>
ffffffff80010ba2:	eb 1a                	jmp    ffffffff80010bbe <stbds_hmput_key+0x11e>
ffffffff80010ba4:	8b 45 cc             	mov    -0x34(%rbp),%eax
ffffffff80010ba7:	31 c9                	xor    %ecx,%ecx
ffffffff80010ba9:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80010bae:	83 f8 01             	cmp    $0x1,%eax
ffffffff80010bb1:	0f 4d ca             	cmovge %edx,%ecx
ffffffff80010bb4:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff80010bbb:	88 48 59             	mov    %cl,0x59(%rax)
ffffffff80010bbe:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff80010bc5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80010bc9:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010bcd:	48 89 41 f0          	mov    %rax,-0x10(%rcx)
ffffffff80010bd1:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
ffffffff80010bd5:	7c 13                	jl     ffffffff80010bea <stbds_hmput_key+0x14a>
ffffffff80010bd7:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80010bdb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010bdf:	48 8b 70 38          	mov    0x38(%rax),%rsi
ffffffff80010be3:	e8 f8 f4 ff ff       	call   ffffffff800100e0 <stbds_hash_string>
ffffffff80010be8:	eb 15                	jmp    ffffffff80010bff <stbds_hmput_key+0x15f>
ffffffff80010bea:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80010bee:	48 8b 75 98          	mov    -0x68(%rbp),%rsi
ffffffff80010bf2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010bf6:	48 8b 50 38          	mov    0x38(%rax),%rdx
ffffffff80010bfa:	e8 e1 f5 ff ff       	call   ffffffff800101e0 <stbds_hash_bytes>
ffffffff80010bff:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80010c03:	48 c7 45 90 08 00 00 	movq   $0x8,-0x70(%rbp)
ffffffff80010c0a:	00 
ffffffff80010c0b:	48 c7 45 a8 ff ff ff 	movq   $0xffffffffffffffff,-0x58(%rbp)
ffffffff80010c12:	ff 
ffffffff80010c13:	48 83 7d b0 02       	cmpq   $0x2,-0x50(%rbp)
ffffffff80010c18:	73 0c                	jae    ffffffff80010c26 <stbds_hmput_key+0x186>
ffffffff80010c1a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80010c1e:	48 83 c0 02          	add    $0x2,%rax
ffffffff80010c22:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80010c26:	48 8b 7d b0          	mov    -0x50(%rbp),%rdi
ffffffff80010c2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010c2e:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff80010c32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010c36:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff80010c3a:	e8 11 09 00 00       	call   ffffffff80011550 <stbds_probe_position>
ffffffff80010c3f:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010c43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010c47:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80010c4b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80010c4f:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80010c53:	48 c1 e1 07          	shl    $0x7,%rcx
ffffffff80010c57:	48 01 c8             	add    %rcx,%rax
ffffffff80010c5a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80010c5e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010c62:	48 83 e0 07          	and    $0x7,%rax
ffffffff80010c66:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010c6a:	48 83 7d f0 08       	cmpq   $0x8,-0x10(%rbp)
ffffffff80010c6f:	0f 83 07 01 00 00    	jae    ffffffff80010d7c <stbds_hmput_key+0x2dc>
ffffffff80010c75:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010c79:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010c7d:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80010c81:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
ffffffff80010c85:	0f 85 8d 00 00 00    	jne    ffffffff80010d18 <stbds_hmput_key+0x278>
ffffffff80010c8b:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
ffffffff80010c8f:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80010c93:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80010c97:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff80010c9b:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
ffffffff80010c9f:	44 8b 4d cc          	mov    -0x34(%rbp),%r9d
ffffffff80010ca3:	4c 8b 55 d0          	mov    -0x30(%rbp),%r10
ffffffff80010ca7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010cab:	49 8b 44 c2 40       	mov    0x40(%r10,%rax,8),%rax
ffffffff80010cb0:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80010cb4:	e8 d7 08 00 00       	call   ffffffff80011590 <stbds_is_key_equal>
ffffffff80010cb9:	83 f8 00             	cmp    $0x0,%eax
ffffffff80010cbc:	74 58                	je     ffffffff80010d16 <stbds_hmput_key+0x276>
ffffffff80010cbe:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010cc2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010cc6:	48 8b 44 c8 40       	mov    0x40(%rax,%rcx,8),%rax
ffffffff80010ccb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010ccf:	48 89 41 f8          	mov    %rax,-0x8(%rcx)
ffffffff80010cd3:	83 7d cc 01          	cmpl   $0x1,-0x34(%rbp)
ffffffff80010cd7:	7c 2c                	jl     ffffffff80010d05 <stbds_hmput_key+0x265>
ffffffff80010cd9:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff80010cdd:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80010ce1:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80010ce5:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80010ce9:	48 0f af 4c f2 40    	imul   0x40(%rdx,%rsi,8),%rcx
ffffffff80010cef:	48 01 c8             	add    %rcx,%rax
ffffffff80010cf2:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
ffffffff80010cf6:	48 8b 04 08          	mov    (%rax,%rcx,1),%rax
ffffffff80010cfa:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010cfe:	48 8b 49 f0          	mov    -0x10(%rcx),%rcx
ffffffff80010d02:	48 89 01             	mov    %rax,(%rcx)
ffffffff80010d05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010d09:	48 03 45 d8          	add    -0x28(%rbp),%rax
ffffffff80010d0d:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff80010d11:	e9 43 03 00 00       	jmp    ffffffff80011059 <stbds_hmput_key+0x5b9>
ffffffff80010d16:	eb 51                	jmp    ffffffff80010d69 <stbds_hmput_key+0x2c9>
ffffffff80010d18:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010d1c:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010d20:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
ffffffff80010d25:	75 15                	jne    ffffffff80010d3c <stbds_hmput_key+0x29c>
ffffffff80010d27:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010d2b:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff80010d2f:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff80010d33:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010d37:	e9 67 01 00 00       	jmp    ffffffff80010ea3 <stbds_hmput_key+0x403>
ffffffff80010d3c:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80010d41:	7d 22                	jge    ffffffff80010d65 <stbds_hmput_key+0x2c5>
ffffffff80010d43:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010d47:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010d4b:	48 83 7c c8 40 fe    	cmpq   $0xfffffffffffffffe,0x40(%rax,%rcx,8)
ffffffff80010d51:	75 10                	jne    ffffffff80010d63 <stbds_hmput_key+0x2c3>
ffffffff80010d53:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010d57:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff80010d5b:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff80010d5f:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80010d63:	eb 00                	jmp    ffffffff80010d65 <stbds_hmput_key+0x2c5>
ffffffff80010d65:	eb 00                	jmp    ffffffff80010d67 <stbds_hmput_key+0x2c7>
ffffffff80010d67:	eb 00                	jmp    ffffffff80010d69 <stbds_hmput_key+0x2c9>
ffffffff80010d69:	eb 00                	jmp    ffffffff80010d6b <stbds_hmput_key+0x2cb>
ffffffff80010d6b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010d6f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80010d73:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010d77:	e9 ee fe ff ff       	jmp    ffffffff80010c6a <stbds_hmput_key+0x1ca>
ffffffff80010d7c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010d80:	48 83 e0 07          	and    $0x7,%rax
ffffffff80010d84:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80010d8b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80010d92:	00 
ffffffff80010d93:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010d97:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
ffffffff80010d9e:	0f 83 ce 00 00 00    	jae    ffffffff80010e72 <stbds_hmput_key+0x3d2>
ffffffff80010da4:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010da8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010dac:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff80010db0:	48 3b 45 b0          	cmp    -0x50(%rbp),%rax
ffffffff80010db4:	75 5b                	jne    ffffffff80010e11 <stbds_hmput_key+0x371>
ffffffff80010db6:	48 8b 7d a0          	mov    -0x60(%rbp),%rdi
ffffffff80010dba:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80010dbe:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
ffffffff80010dc2:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff80010dc6:	4c 8b 45 88          	mov    -0x78(%rbp),%r8
ffffffff80010dca:	44 8b 4d cc          	mov    -0x34(%rbp),%r9d
ffffffff80010dce:	4c 8b 55 d0          	mov    -0x30(%rbp),%r10
ffffffff80010dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010dd6:	49 8b 44 c2 40       	mov    0x40(%r10,%rax,8),%rax
ffffffff80010ddb:	48 89 04 24          	mov    %rax,(%rsp)
ffffffff80010ddf:	e8 ac 07 00 00       	call   ffffffff80011590 <stbds_is_key_equal>
ffffffff80010de4:	83 f8 00             	cmp    $0x0,%eax
ffffffff80010de7:	74 26                	je     ffffffff80010e0f <stbds_hmput_key+0x36f>
ffffffff80010de9:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010ded:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010df1:	48 8b 44 c8 40       	mov    0x40(%rax,%rcx,8),%rax
ffffffff80010df6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010dfa:	48 89 41 f8          	mov    %rax,-0x8(%rcx)
ffffffff80010dfe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010e02:	48 03 45 d8          	add    -0x28(%rbp),%rax
ffffffff80010e06:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff80010e0a:	e9 4a 02 00 00       	jmp    ffffffff80011059 <stbds_hmput_key+0x5b9>
ffffffff80010e0f:	eb 4e                	jmp    ffffffff80010e5f <stbds_hmput_key+0x3bf>
ffffffff80010e11:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010e15:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010e19:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
ffffffff80010e1e:	75 12                	jne    ffffffff80010e32 <stbds_hmput_key+0x392>
ffffffff80010e20:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010e24:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff80010e28:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff80010e2c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010e30:	eb 71                	jmp    ffffffff80010ea3 <stbds_hmput_key+0x403>
ffffffff80010e32:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80010e37:	7d 22                	jge    ffffffff80010e5b <stbds_hmput_key+0x3bb>
ffffffff80010e39:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80010e3d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80010e41:	48 83 7c c8 40 fe    	cmpq   $0xfffffffffffffffe,0x40(%rax,%rcx,8)
ffffffff80010e47:	75 10                	jne    ffffffff80010e59 <stbds_hmput_key+0x3b9>
ffffffff80010e49:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80010e4d:	48 83 e0 f8          	and    $0xfffffffffffffff8,%rax
ffffffff80010e51:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff80010e55:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80010e59:	eb 00                	jmp    ffffffff80010e5b <stbds_hmput_key+0x3bb>
ffffffff80010e5b:	eb 00                	jmp    ffffffff80010e5d <stbds_hmput_key+0x3bd>
ffffffff80010e5d:	eb 00                	jmp    ffffffff80010e5f <stbds_hmput_key+0x3bf>
ffffffff80010e5f:	eb 00                	jmp    ffffffff80010e61 <stbds_hmput_key+0x3c1>
ffffffff80010e61:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80010e65:	48 83 c0 01          	add    $0x1,%rax
ffffffff80010e69:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80010e6d:	e9 21 ff ff ff       	jmp    ffffffff80010d93 <stbds_hmput_key+0x2f3>
ffffffff80010e72:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80010e76:	48 03 45 e0          	add    -0x20(%rbp),%rax
ffffffff80010e7a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010e7e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80010e82:	48 83 c0 08          	add    $0x8,%rax
ffffffff80010e86:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff80010e8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010e8e:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80010e92:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80010e96:	48 23 45 e0          	and    -0x20(%rbp),%rax
ffffffff80010e9a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010e9e:	e9 a0 fd ff ff       	jmp    ffffffff80010c43 <stbds_hmput_key+0x1a3>
ffffffff80010ea3:	48 83 7d a8 00       	cmpq   $0x0,-0x58(%rbp)
ffffffff80010ea8:	7c 18                	jl     ffffffff80010ec2 <stbds_hmput_key+0x422>
ffffffff80010eaa:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80010eae:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80010eb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010eb6:	48 8b 48 28          	mov    0x28(%rax),%rcx
ffffffff80010eba:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff80010ebe:	48 89 48 28          	mov    %rcx,0x28(%rax)
ffffffff80010ec2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010ec6:	48 8b 48 10          	mov    0x10(%rax),%rcx
ffffffff80010eca:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80010ece:	48 89 48 10          	mov    %rcx,0x10(%rax)
ffffffff80010ed2:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010ed7:	74 0a                	je     ffffffff80010ee3 <stbds_hmput_key+0x443>
ffffffff80010ed9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010edd:	48 8b 40 e0          	mov    -0x20(%rax),%rax
ffffffff80010ee1:	eb 04                	jmp    ffffffff80010ee7 <stbds_hmput_key+0x447>
ffffffff80010ee3:	31 c0                	xor    %eax,%eax
ffffffff80010ee5:	eb 00                	jmp    ffffffff80010ee7 <stbds_hmput_key+0x447>
ffffffff80010ee7:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80010eeb:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80010eef:	48 83 c0 01          	add    $0x1,%rax
ffffffff80010ef3:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80010ef8:	74 0a                	je     ffffffff80010f04 <stbds_hmput_key+0x464>
ffffffff80010efa:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010efe:	48 8b 49 e8          	mov    -0x18(%rcx),%rcx
ffffffff80010f02:	eb 04                	jmp    ffffffff80010f08 <stbds_hmput_key+0x468>
ffffffff80010f04:	31 c9                	xor    %ecx,%ecx
ffffffff80010f06:	eb 00                	jmp    ffffffff80010f08 <stbds_hmput_key+0x468>
ffffffff80010f08:	48 39 c8             	cmp    %rcx,%rax
ffffffff80010f0b:	76 18                	jbe    ffffffff80010f25 <stbds_hmput_key+0x485>
ffffffff80010f0d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80010f11:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80010f15:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80010f1a:	31 c9                	xor    %ecx,%ecx
ffffffff80010f1c:	e8 5f f0 ff ff       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff80010f21:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80010f25:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80010f29:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80010f2d:	48 01 c8             	add    %rcx,%rax
ffffffff80010f30:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff80010f34:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80010f38:	48 ff c0             	inc    %rax
ffffffff80010f3b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010f3f:	48 89 41 e0          	mov    %rax,-0x20(%rcx)
ffffffff80010f43:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010f47:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80010f4b:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80010f4f:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff80010f53:	48 83 e1 80          	and    $0xffffffffffffff80,%rcx
ffffffff80010f57:	48 01 c8             	add    %rcx,%rax
ffffffff80010f5a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80010f5e:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80010f62:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80010f66:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80010f6a:	83 e2 07             	and    $0x7,%edx
ffffffff80010f6d:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80010f71:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80010f75:	48 ff c8             	dec    %rax
ffffffff80010f78:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80010f7c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80010f80:	83 e2 07             	and    $0x7,%edx
ffffffff80010f83:	48 89 44 d1 40       	mov    %rax,0x40(%rcx,%rdx,8)
ffffffff80010f88:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80010f8c:	48 ff c8             	dec    %rax
ffffffff80010f8f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010f93:	48 89 41 f8          	mov    %rax,-0x8(%rcx)
ffffffff80010f97:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80010f9b:	0f b6 40 59          	movzbl 0x59(%rax),%eax
ffffffff80010f9f:	89 c1                	mov    %eax,%ecx
ffffffff80010fa1:	83 e9 01             	sub    $0x1,%ecx
ffffffff80010fa4:	74 68                	je     ffffffff8001100e <stbds_hmput_key+0x56e>
ffffffff80010fa6:	eb 00                	jmp    ffffffff80010fa8 <stbds_hmput_key+0x508>
ffffffff80010fa8:	89 c1                	mov    %eax,%ecx
ffffffff80010faa:	83 e9 02             	sub    $0x2,%ecx
ffffffff80010fad:	74 09                	je     ffffffff80010fb8 <stbds_hmput_key+0x518>
ffffffff80010faf:	eb 00                	jmp    ffffffff80010fb1 <stbds_hmput_key+0x511>
ffffffff80010fb1:	83 e8 03             	sub    $0x3,%eax
ffffffff80010fb4:	74 29                	je     ffffffff80010fdf <stbds_hmput_key+0x53f>
ffffffff80010fb6:	eb 78                	jmp    ffffffff80011030 <stbds_hmput_key+0x590>
ffffffff80010fb8:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80010fbc:	e8 6f 06 00 00       	call   ffffffff80011630 <stbds_strdup>
ffffffff80010fc1:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010fc5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80010fc9:	48 0f af 55 c0       	imul   -0x40(%rbp),%rdx
ffffffff80010fce:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
ffffffff80010fd2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010fd6:	48 8b 49 f0          	mov    -0x10(%rcx),%rcx
ffffffff80010fda:	48 89 01             	mov    %rax,(%rcx)
ffffffff80010fdd:	eb 6e                	jmp    ffffffff8001104d <stbds_hmput_key+0x5ad>
ffffffff80010fdf:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80010fe3:	48 83 c7 48          	add    $0x48,%rdi
ffffffff80010fe7:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80010feb:	e8 90 06 00 00       	call   ffffffff80011680 <stbds_stralloc>
ffffffff80010ff0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80010ff4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80010ff8:	48 0f af 55 c0       	imul   -0x40(%rbp),%rdx
ffffffff80010ffd:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
ffffffff80011001:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011005:	48 8b 49 f0          	mov    -0x10(%rcx),%rcx
ffffffff80011009:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001100c:	eb 3f                	jmp    ffffffff8001104d <stbds_hmput_key+0x5ad>
ffffffff8001100e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80011012:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011016:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8001101a:	48 0f af 55 c0       	imul   -0x40(%rbp),%rdx
ffffffff8001101f:	48 89 04 11          	mov    %rax,(%rcx,%rdx,1)
ffffffff80011023:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011027:	48 8b 49 f0          	mov    -0x10(%rcx),%rcx
ffffffff8001102b:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001102e:	eb 1d                	jmp    ffffffff8001104d <stbds_hmput_key+0x5ad>
ffffffff80011030:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80011034:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80011038:	48 0f af 45 c0       	imul   -0x40(%rbp),%rax
ffffffff8001103d:	48 01 c7             	add    %rax,%rdi
ffffffff80011040:	48 8b 75 b8          	mov    -0x48(%rbp),%rsi
ffffffff80011044:	48 8b 55 98          	mov    -0x68(%rbp),%rdx
ffffffff80011048:	e8 13 e2 ff ff       	call   ffffffff8000f260 <memcpy>
ffffffff8001104d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011051:	48 03 45 d8          	add    -0x28(%rbp),%rax
ffffffff80011055:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff80011059:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8001105d:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
ffffffff80011064:	5d                   	pop    %rbp
ffffffff80011065:	c3                   	ret    
ffffffff80011066:	cc                   	int3   
ffffffff80011067:	cc                   	int3   
ffffffff80011068:	cc                   	int3   
ffffffff80011069:	cc                   	int3   
ffffffff8001106a:	cc                   	int3   
ffffffff8001106b:	cc                   	int3   
ffffffff8001106c:	cc                   	int3   
ffffffff8001106d:	cc                   	int3   
ffffffff8001106e:	cc                   	int3   
ffffffff8001106f:	cc                   	int3   

ffffffff80011070 <stbds_make_hash_index>:
ffffffff80011070:	55                   	push   %rbp
ffffffff80011071:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011074:	48 81 ec 90 00 00 00 	sub    $0x90,%rsp
ffffffff8001107b:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8001107f:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80011083:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff80011087:	48 c1 ee 03          	shr    $0x3,%rsi
ffffffff8001108b:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8001108f:	48 83 c6 68          	add    $0x68,%rsi
ffffffff80011093:	48 83 c6 40          	add    $0x40,%rsi
ffffffff80011097:	48 83 ee 01          	sub    $0x1,%rsi
ffffffff8001109b:	31 ff                	xor    %edi,%edi
ffffffff8001109d:	e8 9e c1 ff ff       	call   ffffffff8000d240 <realloc>
ffffffff800110a2:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800110a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800110aa:	48 83 c0 68          	add    $0x68,%rax
ffffffff800110ae:	48 83 c0 40          	add    $0x40,%rax
ffffffff800110b2:	48 83 e8 01          	sub    $0x1,%rax
ffffffff800110b6:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff800110ba:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800110be:	48 89 41 60          	mov    %rax,0x60(%rcx)
ffffffff800110c2:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800110c6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800110ca:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff800110ce:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff800110d2:	e8 39 07 00 00       	call   ffffffff80011810 <stbds_log2>
ffffffff800110d7:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800110db:	48 89 41 40          	mov    %rax,0x40(%rcx)
ffffffff800110df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800110e3:	48 c7 40 28 00 00 00 	movq   $0x0,0x28(%rax)
ffffffff800110ea:	00 
ffffffff800110eb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800110ef:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff800110f6:	00 
ffffffff800110f7:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800110fb:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800110ff:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff80011103:	48 29 c8             	sub    %rcx,%rax
ffffffff80011106:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001110a:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff8001110e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80011112:	48 c1 e8 03          	shr    $0x3,%rax
ffffffff80011116:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8001111a:	48 c1 e9 04          	shr    $0x4,%rcx
ffffffff8001111e:	48 01 c8             	add    %rcx,%rax
ffffffff80011121:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011125:	48 89 41 30          	mov    %rax,0x30(%rcx)
ffffffff80011129:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8001112d:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80011131:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011135:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff80011139:	48 83 7d e0 08       	cmpq   $0x8,-0x20(%rbp)
ffffffff8001113e:	77 0c                	ja     ffffffff8001114c <stbds_make_hash_index+0xdc>
ffffffff80011140:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011144:	48 c7 40 20 00 00 00 	movq   $0x0,0x20(%rax)
ffffffff8001114b:	00 
ffffffff8001114c:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80011151:	74 35                	je     ffffffff80011188 <stbds_make_hash_index+0x118>
ffffffff80011153:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011157:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8001115b:	48 8b 51 48          	mov    0x48(%rcx),%rdx
ffffffff8001115f:	48 89 50 48          	mov    %rdx,0x48(%rax)
ffffffff80011163:	48 8b 51 50          	mov    0x50(%rcx),%rdx
ffffffff80011167:	48 89 50 50          	mov    %rdx,0x50(%rax)
ffffffff8001116b:	48 8b 49 58          	mov    0x58(%rcx),%rcx
ffffffff8001116f:	48 89 48 58          	mov    %rcx,0x58(%rax)
ffffffff80011173:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff80011177:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff8001117b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001117f:	48 89 41 38          	mov    %rax,0x38(%rcx)
ffffffff80011183:	e9 1b 01 00 00       	jmp    ffffffff800112a3 <stbds_make_hash_index+0x233>
ffffffff80011188:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001118c:	0f 57 c0             	xorps  %xmm0,%xmm0
ffffffff8001118f:	0f 11 40 48          	movups %xmm0,0x48(%rax)
ffffffff80011193:	48 c7 40 58 00 00 00 	movq   $0x0,0x58(%rax)
ffffffff8001119a:	00 
ffffffff8001119b:	48 8b 05 2e a4 00 00 	mov    0xa42e(%rip),%rax        # ffffffff8001b5d0 <stbds_hash_seed>
ffffffff800111a2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800111a6:	48 89 41 38          	mov    %rax,0x38(%rcx)
ffffffff800111aa:	b8 10 13 48 f8       	mov    $0xf8481310,%eax
ffffffff800111af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800111b3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800111b7:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800111bb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800111bf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800111c3:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800111c7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800111cb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800111cf:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff800111d3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800111d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800111db:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff800111df:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800111e3:	48 c7 45 b8 e6 2e bb 	movq   $0x27bb2ee6,-0x48(%rbp)
ffffffff800111ea:	27 
ffffffff800111eb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800111ef:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800111f3:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff800111f7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800111fb:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff800111ff:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80011203:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80011207:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff8001120b:	48 31 c8             	xor    %rcx,%rax
ffffffff8001120e:	48 35 ed a3 f8 7f    	xor    $0x7ff8a3ed,%rax
ffffffff80011214:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff80011218:	b8 1c ee a4 9f       	mov    $0x9fa4ee1c,%eax
ffffffff8001121d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80011221:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80011225:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80011229:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001122d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80011231:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80011235:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80011239:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001123d:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff80011241:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80011245:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80011249:	48 c1 e8 10          	shr    $0x10,%rax
ffffffff8001124d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80011251:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80011258:	00 
ffffffff80011259:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8001125d:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff80011261:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80011265:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80011269:	48 c1 e0 10          	shl    $0x10,%rax
ffffffff8001126d:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80011271:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80011275:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff80011279:	48 31 c8             	xor    %rcx,%rax
ffffffff8001127c:	48 35 31 1d a0 2a    	xor    $0x2aa01d31,%rax
ffffffff80011282:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80011286:	48 8b 05 43 a3 00 00 	mov    0xa343(%rip),%rax        # ffffffff8001b5d0 <stbds_hash_seed>
ffffffff8001128d:	48 8b 4d b8          	mov    -0x48(%rbp),%rcx
ffffffff80011291:	48 0f af c1          	imul   %rcx,%rax
ffffffff80011295:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff80011299:	48 01 c8             	add    %rcx,%rax
ffffffff8001129c:	48 89 05 2d a3 00 00 	mov    %rax,0xa32d(%rip)        # ffffffff8001b5d0 <stbds_hash_seed>
ffffffff800112a3:	48 c7 45 90 00 00 00 	movq   $0x0,-0x70(%rbp)
ffffffff800112aa:	00 
ffffffff800112ab:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff800112af:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800112b3:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff800112b7:	48 39 c8             	cmp    %rcx,%rax
ffffffff800112ba:	0f 83 8e 00 00 00    	jae    ffffffff8001134e <stbds_make_hash_index+0x2de>
ffffffff800112c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800112c4:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff800112c8:	48 8b 4d 90          	mov    -0x70(%rbp),%rcx
ffffffff800112cc:	48 c1 e1 07          	shl    $0x7,%rcx
ffffffff800112d0:	48 01 c8             	add    %rcx,%rax
ffffffff800112d3:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
ffffffff800112da:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff800112e1:	00 
ffffffff800112e2:	48 83 7d d8 08       	cmpq   $0x8,-0x28(%rbp)
ffffffff800112e7:	73 21                	jae    ffffffff8001130a <stbds_make_hash_index+0x29a>
ffffffff800112e9:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff800112f0:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff800112f4:	48 c7 04 c8 00 00 00 	movq   $0x0,(%rax,%rcx,8)
ffffffff800112fb:	00 
ffffffff800112fc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80011300:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011304:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80011308:	eb d8                	jmp    ffffffff800112e2 <stbds_make_hash_index+0x272>
ffffffff8001130a:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80011311:	00 
ffffffff80011312:	48 83 7d d8 08       	cmpq   $0x8,-0x28(%rbp)
ffffffff80011317:	73 22                	jae    ffffffff8001133b <stbds_make_hash_index+0x2cb>
ffffffff80011319:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
ffffffff80011320:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80011324:	48 c7 44 c8 40 ff ff 	movq   $0xffffffffffffffff,0x40(%rax,%rcx,8)
ffffffff8001132b:	ff ff 
ffffffff8001132d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80011331:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011335:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80011339:	eb d7                	jmp    ffffffff80011312 <stbds_make_hash_index+0x2a2>
ffffffff8001133b:	eb 00                	jmp    ffffffff8001133d <stbds_make_hash_index+0x2cd>
ffffffff8001133d:	48 8b 45 90          	mov    -0x70(%rbp),%rax
ffffffff80011341:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011345:	48 89 45 90          	mov    %rax,-0x70(%rbp)
ffffffff80011349:	e9 5d ff ff ff       	jmp    ffffffff800112ab <stbds_make_hash_index+0x23b>
ffffffff8001134e:	48 83 7d b0 00       	cmpq   $0x0,-0x50(%rbp)
ffffffff80011353:	0f 84 ea 01 00 00    	je     ffffffff80011543 <stbds_make_hash_index+0x4d3>
ffffffff80011359:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8001135d:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80011361:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011365:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff80011369:	48 c7 45 98 00 00 00 	movq   $0x0,-0x68(%rbp)
ffffffff80011370:	00 
ffffffff80011371:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80011375:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80011379:	48 8b 49 08          	mov    0x8(%rcx),%rcx
ffffffff8001137d:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80011381:	48 39 c8             	cmp    %rcx,%rax
ffffffff80011384:	0f 83 b7 01 00 00    	jae    ffffffff80011541 <stbds_make_hash_index+0x4d1>
ffffffff8001138a:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8001138e:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80011392:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
ffffffff80011396:	48 c1 e1 07          	shl    $0x7,%rcx
ffffffff8001139a:	48 01 c8             	add    %rcx,%rax
ffffffff8001139d:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
ffffffff800113a1:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff800113a8:	00 
ffffffff800113a9:	48 83 7d c8 08       	cmpq   $0x8,-0x38(%rbp)
ffffffff800113ae:	0f 83 7a 01 00 00    	jae    ffffffff8001152e <stbds_make_hash_index+0x4be>
ffffffff800113b4:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800113b8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800113bc:	48 83 7c c8 40 00    	cmpq   $0x0,0x40(%rax,%rcx,8)
ffffffff800113c2:	0f 8c 51 01 00 00    	jl     ffffffff80011519 <stbds_make_hash_index+0x4a9>
ffffffff800113c8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800113cc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800113d0:	48 8b 04 c8          	mov    (%rax,%rcx,8),%rax
ffffffff800113d4:	48 89 45 80          	mov    %rax,-0x80(%rbp)
ffffffff800113d8:	48 8b 7d 80          	mov    -0x80(%rbp),%rdi
ffffffff800113dc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800113e0:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff800113e4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800113e8:	48 8b 50 40          	mov    0x40(%rax),%rdx
ffffffff800113ec:	e8 5f 01 00 00       	call   ffffffff80011550 <stbds_probe_position>
ffffffff800113f1:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800113f5:	48 c7 45 88 08 00 00 	movq   $0x8,-0x78(%rbp)
ffffffff800113fc:	00 
ffffffff800113fd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011401:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80011405:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80011409:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff8001140d:	48 c1 e1 07          	shl    $0x7,%rcx
ffffffff80011411:	48 01 c8             	add    %rcx,%rax
ffffffff80011414:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80011418:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001141c:	48 83 e0 07          	and    $0x7,%rax
ffffffff80011420:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011424:	48 83 7d e8 08       	cmpq   $0x8,-0x18(%rbp)
ffffffff80011429:	73 4e                	jae    ffffffff80011479 <stbds_make_hash_index+0x409>
ffffffff8001142b:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff8001142f:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80011433:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
ffffffff80011438:	75 2f                	jne    ffffffff80011469 <stbds_make_hash_index+0x3f9>
ffffffff8001143a:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff8001143e:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff80011442:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff80011446:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff8001144a:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff8001144e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80011452:	48 8b 44 c8 40       	mov    0x40(%rax,%rcx,8),%rax
ffffffff80011457:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff8001145b:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff8001145f:	48 89 44 d1 40       	mov    %rax,0x40(%rcx,%rdx,8)
ffffffff80011464:	e9 b2 00 00 00       	jmp    ffffffff8001151b <stbds_make_hash_index+0x4ab>
ffffffff80011469:	eb 00                	jmp    ffffffff8001146b <stbds_make_hash_index+0x3fb>
ffffffff8001146b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001146f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011473:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011477:	eb ab                	jmp    ffffffff80011424 <stbds_make_hash_index+0x3b4>
ffffffff80011479:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001147d:	48 83 e0 07          	and    $0x7,%rax
ffffffff80011481:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80011488:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8001148f:	00 
ffffffff80011490:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011494:	48 3b 85 70 ff ff ff 	cmp    -0x90(%rbp),%rax
ffffffff8001149b:	73 4b                	jae    ffffffff800114e8 <stbds_make_hash_index+0x478>
ffffffff8001149d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff800114a1:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800114a5:	48 83 3c c8 00       	cmpq   $0x0,(%rax,%rcx,8)
ffffffff800114aa:	75 2c                	jne    ffffffff800114d8 <stbds_make_hash_index+0x468>
ffffffff800114ac:	48 8b 45 80          	mov    -0x80(%rbp),%rax
ffffffff800114b0:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff800114b4:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff800114b8:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff800114bc:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
ffffffff800114c0:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800114c4:	48 8b 44 c8 40       	mov    0x40(%rax,%rcx,8),%rax
ffffffff800114c9:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
ffffffff800114cd:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff800114d1:	48 89 44 d1 40       	mov    %rax,0x40(%rcx,%rdx,8)
ffffffff800114d6:	eb 43                	jmp    ffffffff8001151b <stbds_make_hash_index+0x4ab>
ffffffff800114d8:	eb 00                	jmp    ffffffff800114da <stbds_make_hash_index+0x46a>
ffffffff800114da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800114de:	48 83 c0 01          	add    $0x1,%rax
ffffffff800114e2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800114e6:	eb a8                	jmp    ffffffff80011490 <stbds_make_hash_index+0x420>
ffffffff800114e8:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff800114ec:	48 03 45 d0          	add    -0x30(%rbp),%rax
ffffffff800114f0:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800114f4:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff800114f8:	48 83 c0 08          	add    $0x8,%rax
ffffffff800114fc:	48 89 45 88          	mov    %rax,-0x78(%rbp)
ffffffff80011500:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011504:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80011508:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8001150c:	48 23 45 d0          	and    -0x30(%rbp),%rax
ffffffff80011510:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80011514:	e9 e4 fe ff ff       	jmp    ffffffff800113fd <stbds_make_hash_index+0x38d>
ffffffff80011519:	eb 00                	jmp    ffffffff8001151b <stbds_make_hash_index+0x4ab>
ffffffff8001151b:	eb 00                	jmp    ffffffff8001151d <stbds_make_hash_index+0x4ad>
ffffffff8001151d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80011521:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011525:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80011529:	e9 7b fe ff ff       	jmp    ffffffff800113a9 <stbds_make_hash_index+0x339>
ffffffff8001152e:	eb 00                	jmp    ffffffff80011530 <stbds_make_hash_index+0x4c0>
ffffffff80011530:	48 8b 45 98          	mov    -0x68(%rbp),%rax
ffffffff80011534:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011538:	48 89 45 98          	mov    %rax,-0x68(%rbp)
ffffffff8001153c:	e9 30 fe ff ff       	jmp    ffffffff80011371 <stbds_make_hash_index+0x301>
ffffffff80011541:	eb 00                	jmp    ffffffff80011543 <stbds_make_hash_index+0x4d3>
ffffffff80011543:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011547:	48 81 c4 90 00 00 00 	add    $0x90,%rsp
ffffffff8001154e:	5d                   	pop    %rbp
ffffffff8001154f:	c3                   	ret    

ffffffff80011550 <stbds_probe_position>:
ffffffff80011550:	55                   	push   %rbp
ffffffff80011551:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011554:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80011558:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001155c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80011560:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff80011564:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011568:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001156c:	48 83 e9 01          	sub    $0x1,%rcx
ffffffff80011570:	48 21 c8             	and    %rcx,%rax
ffffffff80011573:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80011577:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001157b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8001157f:	5d                   	pop    %rbp
ffffffff80011580:	c3                   	ret    
ffffffff80011581:	cc                   	int3   
ffffffff80011582:	cc                   	int3   
ffffffff80011583:	cc                   	int3   
ffffffff80011584:	cc                   	int3   
ffffffff80011585:	cc                   	int3   
ffffffff80011586:	cc                   	int3   
ffffffff80011587:	cc                   	int3   
ffffffff80011588:	cc                   	int3   
ffffffff80011589:	cc                   	int3   
ffffffff8001158a:	cc                   	int3   
ffffffff8001158b:	cc                   	int3   
ffffffff8001158c:	cc                   	int3   
ffffffff8001158d:	cc                   	int3   
ffffffff8001158e:	cc                   	int3   
ffffffff8001158f:	cc                   	int3   

ffffffff80011590 <stbds_is_key_equal>:
ffffffff80011590:	55                   	push   %rbp
ffffffff80011591:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011594:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80011598:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8001159c:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff800115a0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff800115a4:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff800115a8:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff800115ac:	4c 89 45 f0          	mov    %r8,-0x10(%rbp)
ffffffff800115b0:	44 89 4d f8          	mov    %r9d,-0x8(%rbp)
ffffffff800115b4:	83 7d f8 01          	cmpl   $0x1,-0x8(%rbp)
ffffffff800115b8:	7c 32                	jl     ffffffff800115ec <stbds_is_key_equal+0x5c>
ffffffff800115ba:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff800115be:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800115c2:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800115c6:	48 0f af 4d 10       	imul   0x10(%rbp),%rcx
ffffffff800115cb:	48 01 c8             	add    %rcx,%rax
ffffffff800115ce:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800115d2:	48 8b 34 08          	mov    (%rax,%rcx,1),%rsi
ffffffff800115d6:	e8 75 e8 ff ff       	call   ffffffff8000fe50 <strcmp>
ffffffff800115db:	31 c9                	xor    %ecx,%ecx
ffffffff800115dd:	39 c1                	cmp    %eax,%ecx
ffffffff800115df:	0f 94 c0             	sete   %al
ffffffff800115e2:	24 01                	and    $0x1,%al
ffffffff800115e4:	0f b6 c0             	movzbl %al,%eax
ffffffff800115e7:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800115ea:	eb 30                	jmp    ffffffff8001161c <stbds_is_key_equal+0x8c>
ffffffff800115ec:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff800115f0:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff800115f4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800115f8:	48 0f af 45 10       	imul   0x10(%rbp),%rax
ffffffff800115fd:	48 01 c6             	add    %rax,%rsi
ffffffff80011600:	48 03 75 f0          	add    -0x10(%rbp),%rsi
ffffffff80011604:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff80011608:	e8 a3 e7 ff ff       	call   ffffffff8000fdb0 <memcmp>
ffffffff8001160d:	31 c9                	xor    %ecx,%ecx
ffffffff8001160f:	39 c1                	cmp    %eax,%ecx
ffffffff80011611:	0f 94 c0             	sete   %al
ffffffff80011614:	24 01                	and    $0x1,%al
ffffffff80011616:	0f b6 c0             	movzbl %al,%eax
ffffffff80011619:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8001161c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001161f:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80011623:	5d                   	pop    %rbp
ffffffff80011624:	c3                   	ret    
ffffffff80011625:	cc                   	int3   
ffffffff80011626:	cc                   	int3   
ffffffff80011627:	cc                   	int3   
ffffffff80011628:	cc                   	int3   
ffffffff80011629:	cc                   	int3   
ffffffff8001162a:	cc                   	int3   
ffffffff8001162b:	cc                   	int3   
ffffffff8001162c:	cc                   	int3   
ffffffff8001162d:	cc                   	int3   
ffffffff8001162e:	cc                   	int3   
ffffffff8001162f:	cc                   	int3   

ffffffff80011630 <stbds_strdup>:
ffffffff80011630:	55                   	push   %rbp
ffffffff80011631:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011634:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80011638:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001163c:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80011640:	e8 9b e8 ff ff       	call   ffffffff8000fee0 <strlen>
ffffffff80011645:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011649:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001164d:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80011651:	31 ff                	xor    %edi,%edi
ffffffff80011653:	e8 e8 bb ff ff       	call   ffffffff8000d240 <realloc>
ffffffff80011658:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001165c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80011660:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80011664:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80011668:	e8 93 e6 ff ff       	call   ffffffff8000fd00 <memmove>
ffffffff8001166d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011671:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80011675:	5d                   	pop    %rbp
ffffffff80011676:	c3                   	ret    
ffffffff80011677:	cc                   	int3   
ffffffff80011678:	cc                   	int3   
ffffffff80011679:	cc                   	int3   
ffffffff8001167a:	cc                   	int3   
ffffffff8001167b:	cc                   	int3   
ffffffff8001167c:	cc                   	int3   
ffffffff8001167d:	cc                   	int3   
ffffffff8001167e:	cc                   	int3   
ffffffff8001167f:	cc                   	int3   

ffffffff80011680 <stbds_stralloc>:
ffffffff80011680:	55                   	push   %rbp
ffffffff80011681:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011684:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80011688:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8001168c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff80011690:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80011694:	e8 47 e8 ff ff       	call   ffffffff8000fee0 <strlen>
ffffffff80011699:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001169d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800116a1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800116a5:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800116a9:	48 3b 41 08          	cmp    0x8(%rcx),%rax
ffffffff800116ad:	0f 86 05 01 00 00    	jbe    ffffffff800117b8 <stbds_stralloc+0x138>
ffffffff800116b3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800116b7:	0f b6 40 10          	movzbl 0x10(%rax),%eax
ffffffff800116bb:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800116bf:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800116c3:	48 c1 e9 01          	shr    $0x1,%rcx
ffffffff800116c7:	b8 00 02 00 00       	mov    $0x200,%eax
ffffffff800116cc:	48 d3 e0             	shl    %cl,%rax
ffffffff800116cf:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800116d3:	48 81 7d e0 00 00 10 	cmpq   $0x100000,-0x20(%rbp)
ffffffff800116da:	00 
ffffffff800116db:	73 0d                	jae    ffffffff800116ea <stbds_stralloc+0x6a>
ffffffff800116dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800116e1:	8a 48 10             	mov    0x10(%rax),%cl
ffffffff800116e4:	80 c1 01             	add    $0x1,%cl
ffffffff800116e7:	88 48 10             	mov    %cl,0x10(%rax)
ffffffff800116ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800116ee:	48 3b 45 e0          	cmp    -0x20(%rbp),%rax
ffffffff800116f2:	0f 86 86 00 00 00    	jbe    ffffffff8001177e <stbds_stralloc+0xfe>
ffffffff800116f8:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff800116fc:	48 83 c6 08          	add    $0x8,%rsi
ffffffff80011700:	31 ff                	xor    %edi,%edi
ffffffff80011702:	e8 39 bb ff ff       	call   ffffffff8000d240 <realloc>
ffffffff80011707:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001170b:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8001170f:	48 83 c7 08          	add    $0x8,%rdi
ffffffff80011713:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80011717:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8001171b:	e8 e0 e5 ff ff       	call   ffffffff8000fd00 <memmove>
ffffffff80011720:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011724:	48 83 38 00          	cmpq   $0x0,(%rax)
ffffffff80011728:	74 21                	je     ffffffff8001174b <stbds_stralloc+0xcb>
ffffffff8001172a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001172e:	48 8b 00             	mov    (%rax),%rax
ffffffff80011731:	48 8b 00             	mov    (%rax),%rax
ffffffff80011734:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80011738:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001173b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001173f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80011743:	48 8b 09             	mov    (%rcx),%rcx
ffffffff80011746:	48 89 01             	mov    %rax,(%rcx)
ffffffff80011749:	eb 22                	jmp    ffffffff8001176d <stbds_stralloc+0xed>
ffffffff8001174b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001174f:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80011756:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001175a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001175e:	48 89 01             	mov    %rax,(%rcx)
ffffffff80011761:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011765:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff8001176c:	00 
ffffffff8001176d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011771:	48 83 c0 08          	add    $0x8,%rax
ffffffff80011775:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80011779:	e9 86 00 00 00       	jmp    ffffffff80011804 <stbds_stralloc+0x184>
ffffffff8001177e:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff80011782:	48 83 c6 08          	add    $0x8,%rsi
ffffffff80011786:	31 ff                	xor    %edi,%edi
ffffffff80011788:	e8 b3 ba ff ff       	call   ffffffff8000d240 <realloc>
ffffffff8001178d:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80011791:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011795:	48 8b 00             	mov    (%rax),%rax
ffffffff80011798:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8001179c:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001179f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800117a3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800117a7:	48 89 01             	mov    %rax,(%rcx)
ffffffff800117aa:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800117ae:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800117b2:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff800117b6:	eb 00                	jmp    ffffffff800117b8 <stbds_stralloc+0x138>
ffffffff800117b8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800117bc:	48 8b 00             	mov    (%rax),%rax
ffffffff800117bf:	48 83 c0 08          	add    $0x8,%rax
ffffffff800117c3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800117c7:	48 03 41 08          	add    0x8(%rcx),%rax
ffffffff800117cb:	31 c9                	xor    %ecx,%ecx
ffffffff800117cd:	48 2b 4d f0          	sub    -0x10(%rbp),%rcx
ffffffff800117d1:	48 01 c8             	add    %rcx,%rax
ffffffff800117d4:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff800117d8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800117dc:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800117e0:	48 8b 51 08          	mov    0x8(%rcx),%rdx
ffffffff800117e4:	48 29 c2             	sub    %rax,%rdx
ffffffff800117e7:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff800117eb:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff800117ef:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff800117f3:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff800117f7:	e8 04 e5 ff ff       	call   ffffffff8000fd00 <memmove>
ffffffff800117fc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80011800:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80011804:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff80011808:	48 83 c4 40          	add    $0x40,%rsp
ffffffff8001180c:	5d                   	pop    %rbp
ffffffff8001180d:	c3                   	ret    
ffffffff8001180e:	cc                   	int3   
ffffffff8001180f:	cc                   	int3   

ffffffff80011810 <stbds_log2>:
ffffffff80011810:	55                   	push   %rbp
ffffffff80011811:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011814:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80011818:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8001181c:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff80011823:	00 
ffffffff80011824:	48 83 7d f0 01       	cmpq   $0x1,-0x10(%rbp)
ffffffff80011829:	76 1a                	jbe    ffffffff80011845 <stbds_log2+0x35>
ffffffff8001182b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001182f:	48 c1 e8 01          	shr    $0x1,%rax
ffffffff80011833:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80011837:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001183b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001183f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80011843:	eb df                	jmp    ffffffff80011824 <stbds_log2+0x14>
ffffffff80011845:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011849:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8001184d:	5d                   	pop    %rbp
ffffffff8001184e:	c3                   	ret    
ffffffff8001184f:	cc                   	int3   

ffffffff80011850 <list_del>:
ffffffff80011850:	55                   	push   %rbp
ffffffff80011851:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011854:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80011858:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8001185c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011860:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80011864:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011868:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001186c:	48 8b 00             	mov    (%rax),%rax
ffffffff8001186f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80011873:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011877:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001187b:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff8001187f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80011883:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80011887:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001188a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001188e:	48 b9 aa aa aa aa aa 	movabs $0xaaaaaaaaaaaaaaaa,%rcx
ffffffff80011895:	aa aa aa 
ffffffff80011898:	48 89 08             	mov    %rcx,(%rax)
ffffffff8001189b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001189f:	48 b9 bb bb bb bb bb 	movabs $0xbbbbbbbbbbbbbbbb,%rcx
ffffffff800118a6:	bb bb bb 
ffffffff800118a9:	48 89 48 08          	mov    %rcx,0x8(%rax)
ffffffff800118ad:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800118b1:	5d                   	pop    %rbp
ffffffff800118b2:	c3                   	ret    
ffffffff800118b3:	cc                   	int3   
ffffffff800118b4:	cc                   	int3   
ffffffff800118b5:	cc                   	int3   
ffffffff800118b6:	cc                   	int3   
ffffffff800118b7:	cc                   	int3   
ffffffff800118b8:	cc                   	int3   
ffffffff800118b9:	cc                   	int3   
ffffffff800118ba:	cc                   	int3   
ffffffff800118bb:	cc                   	int3   
ffffffff800118bc:	cc                   	int3   
ffffffff800118bd:	cc                   	int3   
ffffffff800118be:	cc                   	int3   
ffffffff800118bf:	cc                   	int3   

ffffffff800118c0 <list_is_empty>:
ffffffff800118c0:	55                   	push   %rbp
ffffffff800118c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800118c4:	50                   	push   %rax
ffffffff800118c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800118c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800118cd:	48 8b 00             	mov    (%rax),%rax
ffffffff800118d0:	48 3b 45 f8          	cmp    -0x8(%rbp),%rax
ffffffff800118d4:	0f 94 c0             	sete   %al
ffffffff800118d7:	24 01                	and    $0x1,%al
ffffffff800118d9:	0f b6 c0             	movzbl %al,%eax
ffffffff800118dc:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800118e0:	5d                   	pop    %rbp
ffffffff800118e1:	c3                   	ret    
ffffffff800118e2:	cc                   	int3   
ffffffff800118e3:	cc                   	int3   
ffffffff800118e4:	cc                   	int3   
ffffffff800118e5:	cc                   	int3   
ffffffff800118e6:	cc                   	int3   
ffffffff800118e7:	cc                   	int3   
ffffffff800118e8:	cc                   	int3   
ffffffff800118e9:	cc                   	int3   
ffffffff800118ea:	cc                   	int3   
ffffffff800118eb:	cc                   	int3   
ffffffff800118ec:	cc                   	int3   
ffffffff800118ed:	cc                   	int3   
ffffffff800118ee:	cc                   	int3   
ffffffff800118ef:	cc                   	int3   

ffffffff800118f0 <list_pop>:
ffffffff800118f0:	55                   	push   %rbp
ffffffff800118f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800118f4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800118f8:	48 c7 45 f0 b8 b5 01 	movq   $0xffffffff8001b5b8,-0x10(%rbp)
ffffffff800118ff:	80 
ffffffff80011900:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80011904:	e8 b7 ff ff ff       	call   ffffffff800118c0 <list_is_empty>
ffffffff80011909:	a8 01                	test   $0x1,%al
ffffffff8001190b:	75 02                	jne    ffffffff8001190f <list_pop+0x1f>
ffffffff8001190d:	eb 0a                	jmp    ffffffff80011919 <list_pop+0x29>
ffffffff8001190f:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80011916:	00 
ffffffff80011917:	eb 1d                	jmp    ffffffff80011936 <list_pop+0x46>
ffffffff80011919:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001191d:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80011921:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80011925:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80011929:	e8 22 ff ff ff       	call   ffffffff80011850 <list_del>
ffffffff8001192e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80011932:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011936:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001193a:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8001193e:	5d                   	pop    %rbp
ffffffff8001193f:	c3                   	ret    

ffffffff80011940 <printf_>:
ffffffff80011940:	55                   	push   %rbp
ffffffff80011941:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011944:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
ffffffff8001194b:	84 c0                	test   %al,%al
ffffffff8001194d:	74 29                	je     ffffffff80011978 <printf_+0x38>
ffffffff8001194f:	0f 29 85 50 ff ff ff 	movaps %xmm0,-0xb0(%rbp)
ffffffff80011956:	0f 29 8d 60 ff ff ff 	movaps %xmm1,-0xa0(%rbp)
ffffffff8001195d:	0f 29 95 70 ff ff ff 	movaps %xmm2,-0x90(%rbp)
ffffffff80011964:	0f 29 5d 80          	movaps %xmm3,-0x80(%rbp)
ffffffff80011968:	0f 29 65 90          	movaps %xmm4,-0x70(%rbp)
ffffffff8001196c:	0f 29 6d a0          	movaps %xmm5,-0x60(%rbp)
ffffffff80011970:	0f 29 75 b0          	movaps %xmm6,-0x50(%rbp)
ffffffff80011974:	0f 29 7d c0          	movaps %xmm7,-0x40(%rbp)
ffffffff80011978:	4c 89 8d 48 ff ff ff 	mov    %r9,-0xb8(%rbp)
ffffffff8001197f:	4c 89 85 40 ff ff ff 	mov    %r8,-0xc0(%rbp)
ffffffff80011986:	48 89 8d 38 ff ff ff 	mov    %rcx,-0xc8(%rbp)
ffffffff8001198d:	48 89 95 30 ff ff ff 	mov    %rdx,-0xd0(%rbp)
ffffffff80011994:	48 89 b5 28 ff ff ff 	mov    %rsi,-0xd8(%rbp)
ffffffff8001199b:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8001199f:	48 8d 85 20 ff ff ff 	lea    -0xe0(%rbp),%rax
ffffffff800119a6:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800119aa:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff800119ae:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800119b2:	c7 45 d4 30 00 00 00 	movl   $0x30,-0x2c(%rbp)
ffffffff800119b9:	c7 45 d0 08 00 00 00 	movl   $0x8,-0x30(%rbp)
ffffffff800119c0:	48 c7 c7 28 d2 21 80 	mov    $0xffffffff8021d228,%rdi
ffffffff800119c7:	e8 84 f0 fe ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff800119cc:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800119d0:	48 8d 75 ff          	lea    -0x1(%rbp),%rsi
ffffffff800119d4:	4c 8d 45 d0          	lea    -0x30(%rbp),%r8
ffffffff800119d8:	48 c7 c7 10 1a 01 80 	mov    $0xffffffff80011a10,%rdi
ffffffff800119df:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff800119e6:	e8 55 00 00 00       	call   ffffffff80011a40 <_vsnprintf>
ffffffff800119eb:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff800119ee:	48 c7 c7 28 d2 21 80 	mov    $0xffffffff8021d228,%rdi
ffffffff800119f5:	e8 46 f1 fe ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff800119fa:	48 81 c4 e0 00 00 00 	add    $0xe0,%rsp
ffffffff80011a01:	5d                   	pop    %rbp
ffffffff80011a02:	c3                   	ret    
ffffffff80011a03:	cc                   	int3   
ffffffff80011a04:	cc                   	int3   
ffffffff80011a05:	cc                   	int3   
ffffffff80011a06:	cc                   	int3   
ffffffff80011a07:	cc                   	int3   
ffffffff80011a08:	cc                   	int3   
ffffffff80011a09:	cc                   	int3   
ffffffff80011a0a:	cc                   	int3   
ffffffff80011a0b:	cc                   	int3   
ffffffff80011a0c:	cc                   	int3   
ffffffff80011a0d:	cc                   	int3   
ffffffff80011a0e:	cc                   	int3   
ffffffff80011a0f:	cc                   	int3   

ffffffff80011a10 <_out_char>:
ffffffff80011a10:	55                   	push   %rbp
ffffffff80011a11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011a14:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80011a18:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff80011a1c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80011a20:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80011a24:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80011a28:	80 7d ff 00          	cmpb   $0x0,-0x1(%rbp)
ffffffff80011a2c:	74 0b                	je     ffffffff80011a39 <_out_char+0x29>
ffffffff80011a2e:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80011a31:	0f be f8             	movsbl %al,%edi
ffffffff80011a34:	e8 e7 d7 ff ff       	call   ffffffff8000f220 <_putchar>
ffffffff80011a39:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80011a3d:	5d                   	pop    %rbp
ffffffff80011a3e:	c3                   	ret    
ffffffff80011a3f:	cc                   	int3   

ffffffff80011a40 <_vsnprintf>:
ffffffff80011a40:	55                   	push   %rbp
ffffffff80011a41:	48 89 e5             	mov    %rsp,%rbp
ffffffff80011a44:	53                   	push   %rbx
ffffffff80011a45:	48 81 ec 18 01 00 00 	sub    $0x118,%rsp
ffffffff80011a4c:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff80011a50:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff80011a54:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80011a58:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff80011a5c:	4c 89 45 b0          	mov    %r8,-0x50(%rbp)
ffffffff80011a60:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80011a67:	00 
ffffffff80011a68:	48 83 7d c0 00       	cmpq   $0x0,-0x40(%rbp)
ffffffff80011a6d:	75 08                	jne    ffffffff80011a77 <_vsnprintf+0x37>
ffffffff80011a6f:	48 c7 45 b8 d0 2f 01 	movq   $0xffffffff80012fd0,-0x48(%rbp)
ffffffff80011a76:	80 
ffffffff80011a77:	eb 00                	jmp    ffffffff80011a79 <_vsnprintf+0x39>
ffffffff80011a79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011a7d:	80 38 00             	cmpb   $0x0,(%rax)
ffffffff80011a80:	0f 84 0e 15 00 00    	je     ffffffff80012f94 <_vsnprintf+0x1554>
ffffffff80011a86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011a8a:	0f be 00             	movsbl (%rax),%eax
ffffffff80011a8d:	83 f8 25             	cmp    $0x25,%eax
ffffffff80011a90:	74 35                	je     ffffffff80011ac7 <_vsnprintf+0x87>
ffffffff80011a92:	4c 8b 45 b8          	mov    -0x48(%rbp),%r8
ffffffff80011a96:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80011a9a:	8a 01                	mov    (%rcx),%al
ffffffff80011a9c:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80011aa0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80011aa4:	48 89 d1             	mov    %rdx,%rcx
ffffffff80011aa7:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80011aab:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80011aaf:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80011ab3:	0f be f8             	movsbl %al,%edi
ffffffff80011ab6:	41 ff d0             	call   *%r8
ffffffff80011ab9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011abd:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011ac1:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011ac5:	eb b2                	jmp    ffffffff80011a79 <_vsnprintf+0x39>
ffffffff80011ac7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011acb:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011acf:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011ad3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80011ada:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011ade:	0f be 00             	movsbl (%rax),%eax
ffffffff80011ae1:	83 c0 e0             	add    $0xffffffe0,%eax
ffffffff80011ae4:	89 c1                	mov    %eax,%ecx
ffffffff80011ae6:	83 e9 10             	sub    $0x10,%ecx
ffffffff80011ae9:	0f 87 a0 00 00 00    	ja     ffffffff80011b8f <_vsnprintf+0x14f>
ffffffff80011aef:	48 8b 04 c5 48 85 01 	mov    -0x7ffe7ab8(,%rax,8),%rax
ffffffff80011af6:	80 
ffffffff80011af7:	ff e0                	jmp    *%rax
ffffffff80011af9:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011afc:	83 c8 01             	or     $0x1,%eax
ffffffff80011aff:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011b02:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011b06:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011b0a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011b0e:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
ffffffff80011b15:	eb 7f                	jmp    ffffffff80011b96 <_vsnprintf+0x156>
ffffffff80011b17:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011b1a:	83 c8 02             	or     $0x2,%eax
ffffffff80011b1d:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011b20:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011b24:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011b28:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011b2c:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
ffffffff80011b33:	eb 61                	jmp    ffffffff80011b96 <_vsnprintf+0x156>
ffffffff80011b35:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011b38:	83 c8 04             	or     $0x4,%eax
ffffffff80011b3b:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011b3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011b42:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011b46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011b4a:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
ffffffff80011b51:	eb 43                	jmp    ffffffff80011b96 <_vsnprintf+0x156>
ffffffff80011b53:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011b56:	83 c8 08             	or     $0x8,%eax
ffffffff80011b59:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011b5c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011b60:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011b64:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011b68:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
ffffffff80011b6f:	eb 25                	jmp    ffffffff80011b96 <_vsnprintf+0x156>
ffffffff80011b71:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011b74:	83 c8 10             	or     $0x10,%eax
ffffffff80011b77:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011b7a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011b7e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011b82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011b86:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%rbp)
ffffffff80011b8d:	eb 07                	jmp    ffffffff80011b96 <_vsnprintf+0x156>
ffffffff80011b8f:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
ffffffff80011b96:	eb 00                	jmp    ffffffff80011b98 <_vsnprintf+0x158>
ffffffff80011b98:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
ffffffff80011b9c:	0f 85 38 ff ff ff    	jne    ffffffff80011ada <_vsnprintf+0x9a>
ffffffff80011ba2:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%rbp)
ffffffff80011ba9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011bad:	8a 00                	mov    (%rax),%al
ffffffff80011baf:	0f be f8             	movsbl %al,%edi
ffffffff80011bb2:	e8 39 14 00 00       	call   ffffffff80012ff0 <_is_digit>
ffffffff80011bb7:	a8 01                	test   $0x1,%al
ffffffff80011bb9:	75 02                	jne    ffffffff80011bbd <_vsnprintf+0x17d>
ffffffff80011bbb:	eb 0e                	jmp    ffffffff80011bcb <_vsnprintf+0x18b>
ffffffff80011bbd:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
ffffffff80011bc1:	e8 5a 14 00 00       	call   ffffffff80013020 <_atoi>
ffffffff80011bc6:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80011bc9:	eb 72                	jmp    ffffffff80011c3d <_vsnprintf+0x1fd>
ffffffff80011bcb:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011bcf:	0f be 00             	movsbl (%rax),%eax
ffffffff80011bd2:	83 f8 2a             	cmp    $0x2a,%eax
ffffffff80011bd5:	75 64                	jne    ffffffff80011c3b <_vsnprintf+0x1fb>
ffffffff80011bd7:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80011bdb:	8b 11                	mov    (%rcx),%edx
ffffffff80011bdd:	83 fa 28             	cmp    $0x28,%edx
ffffffff80011be0:	77 0e                	ja     ffffffff80011bf0 <_vsnprintf+0x1b0>
ffffffff80011be2:	48 63 c2             	movslq %edx,%rax
ffffffff80011be5:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80011be9:	83 c2 08             	add    $0x8,%edx
ffffffff80011bec:	89 11                	mov    %edx,(%rcx)
ffffffff80011bee:	eb 0f                	jmp    ffffffff80011bff <_vsnprintf+0x1bf>
ffffffff80011bf0:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80011bf4:	48 89 c2             	mov    %rax,%rdx
ffffffff80011bf7:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80011bfb:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80011bff:	8b 00                	mov    (%rax),%eax
ffffffff80011c01:	89 85 7c ff ff ff    	mov    %eax,-0x84(%rbp)
ffffffff80011c07:	83 bd 7c ff ff ff 00 	cmpl   $0x0,-0x84(%rbp)
ffffffff80011c0e:	7d 16                	jge    ffffffff80011c26 <_vsnprintf+0x1e6>
ffffffff80011c10:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011c13:	83 c8 02             	or     $0x2,%eax
ffffffff80011c16:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011c19:	31 c0                	xor    %eax,%eax
ffffffff80011c1b:	2b 85 7c ff ff ff    	sub    -0x84(%rbp),%eax
ffffffff80011c21:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80011c24:	eb 09                	jmp    ffffffff80011c2f <_vsnprintf+0x1ef>
ffffffff80011c26:	8b 85 7c ff ff ff    	mov    -0x84(%rbp),%eax
ffffffff80011c2c:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80011c2f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011c33:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011c37:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011c3b:	eb 00                	jmp    ffffffff80011c3d <_vsnprintf+0x1fd>
ffffffff80011c3d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
ffffffff80011c44:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011c48:	0f be 00             	movsbl (%rax),%eax
ffffffff80011c4b:	83 f8 2e             	cmp    $0x2e,%eax
ffffffff80011c4e:	0f 85 9d 00 00 00    	jne    ffffffff80011cf1 <_vsnprintf+0x2b1>
ffffffff80011c54:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011c57:	0d 00 04 00 00       	or     $0x400,%eax
ffffffff80011c5c:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011c5f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011c63:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011c67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011c6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011c6f:	8a 00                	mov    (%rax),%al
ffffffff80011c71:	0f be f8             	movsbl %al,%edi
ffffffff80011c74:	e8 77 13 00 00       	call   ffffffff80012ff0 <_is_digit>
ffffffff80011c79:	a8 01                	test   $0x1,%al
ffffffff80011c7b:	75 02                	jne    ffffffff80011c7f <_vsnprintf+0x23f>
ffffffff80011c7d:	eb 0e                	jmp    ffffffff80011c8d <_vsnprintf+0x24d>
ffffffff80011c7f:	48 8d 7d e8          	lea    -0x18(%rbp),%rdi
ffffffff80011c83:	e8 98 13 00 00       	call   ffffffff80013020 <_atoi>
ffffffff80011c88:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80011c8b:	eb 62                	jmp    ffffffff80011cef <_vsnprintf+0x2af>
ffffffff80011c8d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011c91:	0f be 00             	movsbl (%rax),%eax
ffffffff80011c94:	83 f8 2a             	cmp    $0x2a,%eax
ffffffff80011c97:	75 54                	jne    ffffffff80011ced <_vsnprintf+0x2ad>
ffffffff80011c99:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80011c9d:	8b 11                	mov    (%rcx),%edx
ffffffff80011c9f:	83 fa 28             	cmp    $0x28,%edx
ffffffff80011ca2:	77 0e                	ja     ffffffff80011cb2 <_vsnprintf+0x272>
ffffffff80011ca4:	48 63 c2             	movslq %edx,%rax
ffffffff80011ca7:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80011cab:	83 c2 08             	add    $0x8,%edx
ffffffff80011cae:	89 11                	mov    %edx,(%rcx)
ffffffff80011cb0:	eb 0f                	jmp    ffffffff80011cc1 <_vsnprintf+0x281>
ffffffff80011cb2:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80011cb6:	48 89 c2             	mov    %rax,%rdx
ffffffff80011cb9:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80011cbd:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80011cc1:	8b 00                	mov    (%rax),%eax
ffffffff80011cc3:	89 85 54 ff ff ff    	mov    %eax,-0xac(%rbp)
ffffffff80011cc9:	83 bd 54 ff ff ff 00 	cmpl   $0x0,-0xac(%rbp)
ffffffff80011cd0:	7e 08                	jle    ffffffff80011cda <_vsnprintf+0x29a>
ffffffff80011cd2:	8b 85 54 ff ff ff    	mov    -0xac(%rbp),%eax
ffffffff80011cd8:	eb 04                	jmp    ffffffff80011cde <_vsnprintf+0x29e>
ffffffff80011cda:	31 c0                	xor    %eax,%eax
ffffffff80011cdc:	eb 00                	jmp    ffffffff80011cde <_vsnprintf+0x29e>
ffffffff80011cde:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80011ce1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011ce5:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011ce9:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011ced:	eb 00                	jmp    ffffffff80011cef <_vsnprintf+0x2af>
ffffffff80011cef:	eb 00                	jmp    ffffffff80011cf1 <_vsnprintf+0x2b1>
ffffffff80011cf1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011cf5:	0f be 00             	movsbl (%rax),%eax
ffffffff80011cf8:	83 c0 98             	add    $0xffffff98,%eax
ffffffff80011cfb:	89 c1                	mov    %eax,%ecx
ffffffff80011cfd:	83 e9 12             	sub    $0x12,%ecx
ffffffff80011d00:	0f 87 ce 00 00 00    	ja     ffffffff80011dd4 <_vsnprintf+0x394>
ffffffff80011d06:	48 8b 04 c5 d0 85 01 	mov    -0x7ffe7a30(,%rax,8),%rax
ffffffff80011d0d:	80 
ffffffff80011d0e:	ff e0                	jmp    *%rax
ffffffff80011d10:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011d13:	0d 00 01 00 00       	or     $0x100,%eax
ffffffff80011d18:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011d1b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d1f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011d23:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011d27:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d2b:	0f be 00             	movsbl (%rax),%eax
ffffffff80011d2e:	83 f8 6c             	cmp    $0x6c,%eax
ffffffff80011d31:	75 17                	jne    ffffffff80011d4a <_vsnprintf+0x30a>
ffffffff80011d33:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011d36:	0d 00 02 00 00       	or     $0x200,%eax
ffffffff80011d3b:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011d3e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d42:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011d46:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011d4a:	e9 87 00 00 00       	jmp    ffffffff80011dd6 <_vsnprintf+0x396>
ffffffff80011d4f:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011d52:	0d 80 00 00 00       	or     $0x80,%eax
ffffffff80011d57:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011d5a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d5e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011d62:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011d66:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d6a:	0f be 00             	movsbl (%rax),%eax
ffffffff80011d6d:	83 f8 68             	cmp    $0x68,%eax
ffffffff80011d70:	75 15                	jne    ffffffff80011d87 <_vsnprintf+0x347>
ffffffff80011d72:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011d75:	83 c8 40             	or     $0x40,%eax
ffffffff80011d78:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011d7b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d7f:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011d83:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011d87:	eb 4d                	jmp    ffffffff80011dd6 <_vsnprintf+0x396>
ffffffff80011d89:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011d8c:	0d 00 01 00 00       	or     $0x100,%eax
ffffffff80011d91:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011d94:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011d98:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011d9c:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011da0:	eb 34                	jmp    ffffffff80011dd6 <_vsnprintf+0x396>
ffffffff80011da2:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011da5:	0d 00 01 00 00       	or     $0x100,%eax
ffffffff80011daa:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011dad:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011db1:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011db5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011db9:	eb 1b                	jmp    ffffffff80011dd6 <_vsnprintf+0x396>
ffffffff80011dbb:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011dbe:	0d 00 01 00 00       	or     $0x100,%eax
ffffffff80011dc3:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011dc6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011dca:	48 83 c0 01          	add    $0x1,%rax
ffffffff80011dce:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80011dd2:	eb 02                	jmp    ffffffff80011dd6 <_vsnprintf+0x396>
ffffffff80011dd4:	eb 00                	jmp    ffffffff80011dd6 <_vsnprintf+0x396>
ffffffff80011dd6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011dda:	0f be 00             	movsbl (%rax),%eax
ffffffff80011ddd:	83 c0 db             	add    $0xffffffdb,%eax
ffffffff80011de0:	89 c1                	mov    %eax,%ecx
ffffffff80011de2:	83 e9 53             	sub    $0x53,%ecx
ffffffff80011de5:	0f 87 72 11 00 00    	ja     ffffffff80012f5d <_vsnprintf+0x151d>
ffffffff80011deb:	48 8b 04 c5 68 86 01 	mov    -0x7ffe7998(,%rax,8),%rax
ffffffff80011df2:	80 
ffffffff80011df3:	ff e0                	jmp    *%rax
ffffffff80011df5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011df9:	0f be 00             	movsbl (%rax),%eax
ffffffff80011dfc:	83 f8 78             	cmp    $0x78,%eax
ffffffff80011dff:	74 0c                	je     ffffffff80011e0d <_vsnprintf+0x3cd>
ffffffff80011e01:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011e05:	0f be 00             	movsbl (%rax),%eax
ffffffff80011e08:	83 f8 58             	cmp    $0x58,%eax
ffffffff80011e0b:	75 09                	jne    ffffffff80011e16 <_vsnprintf+0x3d6>
ffffffff80011e0d:	c7 45 ac 10 00 00 00 	movl   $0x10,-0x54(%rbp)
ffffffff80011e14:	eb 3e                	jmp    ffffffff80011e54 <_vsnprintf+0x414>
ffffffff80011e16:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011e1a:	0f be 00             	movsbl (%rax),%eax
ffffffff80011e1d:	83 f8 6f             	cmp    $0x6f,%eax
ffffffff80011e20:	75 09                	jne    ffffffff80011e2b <_vsnprintf+0x3eb>
ffffffff80011e22:	c7 45 ac 08 00 00 00 	movl   $0x8,-0x54(%rbp)
ffffffff80011e29:	eb 27                	jmp    ffffffff80011e52 <_vsnprintf+0x412>
ffffffff80011e2b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011e2f:	0f be 00             	movsbl (%rax),%eax
ffffffff80011e32:	83 f8 62             	cmp    $0x62,%eax
ffffffff80011e35:	75 09                	jne    ffffffff80011e40 <_vsnprintf+0x400>
ffffffff80011e37:	c7 45 ac 02 00 00 00 	movl   $0x2,-0x54(%rbp)
ffffffff80011e3e:	eb 10                	jmp    ffffffff80011e50 <_vsnprintf+0x410>
ffffffff80011e40:	c7 45 ac 0a 00 00 00 	movl   $0xa,-0x54(%rbp)
ffffffff80011e47:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011e4a:	83 e0 ef             	and    $0xffffffef,%eax
ffffffff80011e4d:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011e50:	eb 00                	jmp    ffffffff80011e52 <_vsnprintf+0x412>
ffffffff80011e52:	eb 00                	jmp    ffffffff80011e54 <_vsnprintf+0x414>
ffffffff80011e54:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011e58:	0f be 00             	movsbl (%rax),%eax
ffffffff80011e5b:	83 f8 58             	cmp    $0x58,%eax
ffffffff80011e5e:	75 09                	jne    ffffffff80011e69 <_vsnprintf+0x429>
ffffffff80011e60:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011e63:	83 c8 20             	or     $0x20,%eax
ffffffff80011e66:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011e69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011e6d:	0f be 00             	movsbl (%rax),%eax
ffffffff80011e70:	83 f8 69             	cmp    $0x69,%eax
ffffffff80011e73:	74 15                	je     ffffffff80011e8a <_vsnprintf+0x44a>
ffffffff80011e75:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011e79:	0f be 00             	movsbl (%rax),%eax
ffffffff80011e7c:	83 f8 64             	cmp    $0x64,%eax
ffffffff80011e7f:	74 09                	je     ffffffff80011e8a <_vsnprintf+0x44a>
ffffffff80011e81:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011e84:	83 e0 f3             	and    $0xfffffff3,%eax
ffffffff80011e87:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011e8a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011e8d:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80011e92:	83 f8 00             	cmp    $0x0,%eax
ffffffff80011e95:	74 09                	je     ffffffff80011ea0 <_vsnprintf+0x460>
ffffffff80011e97:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011e9a:	83 e0 fe             	and    $0xfffffffe,%eax
ffffffff80011e9d:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80011ea0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011ea4:	0f be 00             	movsbl (%rax),%eax
ffffffff80011ea7:	83 f8 69             	cmp    $0x69,%eax
ffffffff80011eaa:	74 10                	je     ffffffff80011ebc <_vsnprintf+0x47c>
ffffffff80011eac:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80011eb0:	0f be 00             	movsbl (%rax),%eax
ffffffff80011eb3:	83 f8 64             	cmp    $0x64,%eax
ffffffff80011eb6:	0f 85 62 02 00 00    	jne    ffffffff8001211e <_vsnprintf+0x6de>
ffffffff80011ebc:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011ebf:	25 00 02 00 00       	and    $0x200,%eax
ffffffff80011ec4:	83 f8 00             	cmp    $0x0,%eax
ffffffff80011ec7:	0f 84 9f 00 00 00    	je     ffffffff80011f6c <_vsnprintf+0x52c>
ffffffff80011ecd:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80011ed1:	8b 11                	mov    (%rcx),%edx
ffffffff80011ed3:	83 fa 28             	cmp    $0x28,%edx
ffffffff80011ed6:	77 0e                	ja     ffffffff80011ee6 <_vsnprintf+0x4a6>
ffffffff80011ed8:	48 63 c2             	movslq %edx,%rax
ffffffff80011edb:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80011edf:	83 c2 08             	add    $0x8,%edx
ffffffff80011ee2:	89 11                	mov    %edx,(%rcx)
ffffffff80011ee4:	eb 0f                	jmp    ffffffff80011ef5 <_vsnprintf+0x4b5>
ffffffff80011ee6:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80011eea:	48 89 c2             	mov    %rax,%rdx
ffffffff80011eed:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80011ef1:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80011ef5:	48 8b 00             	mov    (%rax),%rax
ffffffff80011ef8:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
ffffffff80011eff:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80011f03:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80011f07:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80011f0b:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80011f0f:	48 83 bd 30 ff ff ff 	cmpq   $0x0,-0xd0(%rbp)
ffffffff80011f16:	00 
ffffffff80011f17:	7e 09                	jle    ffffffff80011f22 <_vsnprintf+0x4e2>
ffffffff80011f19:	4c 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%r8
ffffffff80011f20:	eb 0a                	jmp    ffffffff80011f2c <_vsnprintf+0x4ec>
ffffffff80011f22:	45 31 c0             	xor    %r8d,%r8d
ffffffff80011f25:	4c 2b 85 30 ff ff ff 	sub    -0xd0(%rbp),%r8
ffffffff80011f2c:	45 31 c9             	xor    %r9d,%r9d
ffffffff80011f2f:	48 83 bd 30 ff ff ff 	cmpq   $0x0,-0xd0(%rbp)
ffffffff80011f36:	00 
ffffffff80011f37:	41 0f 9c c1          	setl   %r9b
ffffffff80011f3b:	44 8b 55 ac          	mov    -0x54(%rbp),%r10d
ffffffff80011f3f:	44 8b 5d e4          	mov    -0x1c(%rbp),%r11d
ffffffff80011f43:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80011f46:	8b 5d f4             	mov    -0xc(%rbp),%ebx
ffffffff80011f49:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff80011f4d:	89 44 24 10          	mov    %eax,0x10(%rsp)
ffffffff80011f51:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
ffffffff80011f56:	4c 89 14 24          	mov    %r10,(%rsp)
ffffffff80011f5a:	41 83 e1 01          	and    $0x1,%r9d
ffffffff80011f5e:	e8 1d 11 00 00       	call   ffffffff80013080 <_ntoa_long_long>
ffffffff80011f63:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80011f67:	e9 ad 01 00 00       	jmp    ffffffff80012119 <_vsnprintf+0x6d9>
ffffffff80011f6c:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80011f6f:	25 00 01 00 00       	and    $0x100,%eax
ffffffff80011f74:	83 f8 00             	cmp    $0x0,%eax
ffffffff80011f77:	0f 84 9f 00 00 00    	je     ffffffff8001201c <_vsnprintf+0x5dc>
ffffffff80011f7d:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80011f81:	8b 11                	mov    (%rcx),%edx
ffffffff80011f83:	83 fa 28             	cmp    $0x28,%edx
ffffffff80011f86:	77 0e                	ja     ffffffff80011f96 <_vsnprintf+0x556>
ffffffff80011f88:	48 63 c2             	movslq %edx,%rax
ffffffff80011f8b:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80011f8f:	83 c2 08             	add    $0x8,%edx
ffffffff80011f92:	89 11                	mov    %edx,(%rcx)
ffffffff80011f94:	eb 0f                	jmp    ffffffff80011fa5 <_vsnprintf+0x565>
ffffffff80011f96:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80011f9a:	48 89 c2             	mov    %rax,%rdx
ffffffff80011f9d:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80011fa1:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80011fa5:	48 8b 00             	mov    (%rax),%rax
ffffffff80011fa8:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
ffffffff80011faf:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80011fb3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80011fb7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80011fbb:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80011fbf:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
ffffffff80011fc6:	00 
ffffffff80011fc7:	7e 09                	jle    ffffffff80011fd2 <_vsnprintf+0x592>
ffffffff80011fc9:	4c 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%r8
ffffffff80011fd0:	eb 0a                	jmp    ffffffff80011fdc <_vsnprintf+0x59c>
ffffffff80011fd2:	45 31 c0             	xor    %r8d,%r8d
ffffffff80011fd5:	4c 2b 85 38 ff ff ff 	sub    -0xc8(%rbp),%r8
ffffffff80011fdc:	45 31 c9             	xor    %r9d,%r9d
ffffffff80011fdf:	48 83 bd 38 ff ff ff 	cmpq   $0x0,-0xc8(%rbp)
ffffffff80011fe6:	00 
ffffffff80011fe7:	41 0f 9c c1          	setl   %r9b
ffffffff80011feb:	44 8b 55 ac          	mov    -0x54(%rbp),%r10d
ffffffff80011fef:	44 8b 5d e4          	mov    -0x1c(%rbp),%r11d
ffffffff80011ff3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80011ff6:	8b 5d f4             	mov    -0xc(%rbp),%ebx
ffffffff80011ff9:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff80011ffd:	89 44 24 10          	mov    %eax,0x10(%rsp)
ffffffff80012001:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
ffffffff80012006:	4c 89 14 24          	mov    %r10,(%rsp)
ffffffff8001200a:	41 83 e1 01          	and    $0x1,%r9d
ffffffff8001200e:	e8 ad 11 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff80012013:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012017:	e9 fb 00 00 00       	jmp    ffffffff80012117 <_vsnprintf+0x6d7>
ffffffff8001201c:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8001201f:	83 e0 40             	and    $0x40,%eax
ffffffff80012022:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012025:	74 2f                	je     ffffffff80012056 <_vsnprintf+0x616>
ffffffff80012027:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8001202b:	8b 11                	mov    (%rcx),%edx
ffffffff8001202d:	83 fa 28             	cmp    $0x28,%edx
ffffffff80012030:	77 0e                	ja     ffffffff80012040 <_vsnprintf+0x600>
ffffffff80012032:	48 63 c2             	movslq %edx,%rax
ffffffff80012035:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012039:	83 c2 08             	add    $0x8,%edx
ffffffff8001203c:	89 11                	mov    %edx,(%rcx)
ffffffff8001203e:	eb 0f                	jmp    ffffffff8001204f <_vsnprintf+0x60f>
ffffffff80012040:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012044:	48 89 c2             	mov    %rax,%rdx
ffffffff80012047:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8001204b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8001204f:	8b 00                	mov    (%rax),%eax
ffffffff80012051:	0f be c0             	movsbl %al,%eax
ffffffff80012054:	eb 64                	jmp    ffffffff800120ba <_vsnprintf+0x67a>
ffffffff80012056:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012059:	25 80 00 00 00       	and    $0x80,%eax
ffffffff8001205e:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012061:	74 2d                	je     ffffffff80012090 <_vsnprintf+0x650>
ffffffff80012063:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012067:	8b 11                	mov    (%rcx),%edx
ffffffff80012069:	83 fa 28             	cmp    $0x28,%edx
ffffffff8001206c:	77 0e                	ja     ffffffff8001207c <_vsnprintf+0x63c>
ffffffff8001206e:	48 63 c2             	movslq %edx,%rax
ffffffff80012071:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012075:	83 c2 08             	add    $0x8,%edx
ffffffff80012078:	89 11                	mov    %edx,(%rcx)
ffffffff8001207a:	eb 0f                	jmp    ffffffff8001208b <_vsnprintf+0x64b>
ffffffff8001207c:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012080:	48 89 c2             	mov    %rax,%rdx
ffffffff80012083:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012087:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8001208b:	8b 00                	mov    (%rax),%eax
ffffffff8001208d:	98                   	cwtl   
ffffffff8001208e:	eb 2a                	jmp    ffffffff800120ba <_vsnprintf+0x67a>
ffffffff80012090:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012094:	8b 11                	mov    (%rcx),%edx
ffffffff80012096:	83 fa 28             	cmp    $0x28,%edx
ffffffff80012099:	77 0e                	ja     ffffffff800120a9 <_vsnprintf+0x669>
ffffffff8001209b:	48 63 c2             	movslq %edx,%rax
ffffffff8001209e:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff800120a2:	83 c2 08             	add    $0x8,%edx
ffffffff800120a5:	89 11                	mov    %edx,(%rcx)
ffffffff800120a7:	eb 0f                	jmp    ffffffff800120b8 <_vsnprintf+0x678>
ffffffff800120a9:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff800120ad:	48 89 c2             	mov    %rax,%rdx
ffffffff800120b0:	48 83 c2 08          	add    $0x8,%rdx
ffffffff800120b4:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff800120b8:	8b 00                	mov    (%rax),%eax
ffffffff800120ba:	89 45 80             	mov    %eax,-0x80(%rbp)
ffffffff800120bd:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff800120c1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800120c5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800120c9:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800120cd:	83 7d 80 00          	cmpl   $0x0,-0x80(%rbp)
ffffffff800120d1:	7e 05                	jle    ffffffff800120d8 <_vsnprintf+0x698>
ffffffff800120d3:	8b 45 80             	mov    -0x80(%rbp),%eax
ffffffff800120d6:	eb 05                	jmp    ffffffff800120dd <_vsnprintf+0x69d>
ffffffff800120d8:	31 c0                	xor    %eax,%eax
ffffffff800120da:	2b 45 80             	sub    -0x80(%rbp),%eax
ffffffff800120dd:	41 89 c0             	mov    %eax,%r8d
ffffffff800120e0:	45 31 c9             	xor    %r9d,%r9d
ffffffff800120e3:	83 7d 80 00          	cmpl   $0x0,-0x80(%rbp)
ffffffff800120e7:	41 0f 9c c1          	setl   %r9b
ffffffff800120eb:	44 8b 55 ac          	mov    -0x54(%rbp),%r10d
ffffffff800120ef:	44 8b 5d e4          	mov    -0x1c(%rbp),%r11d
ffffffff800120f3:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff800120f6:	8b 5d f4             	mov    -0xc(%rbp),%ebx
ffffffff800120f9:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff800120fd:	89 44 24 10          	mov    %eax,0x10(%rsp)
ffffffff80012101:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
ffffffff80012106:	4c 89 14 24          	mov    %r10,(%rsp)
ffffffff8001210a:	41 83 e1 01          	and    $0x1,%r9d
ffffffff8001210e:	e8 ad 10 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff80012113:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012117:	eb 00                	jmp    ffffffff80012119 <_vsnprintf+0x6d9>
ffffffff80012119:	e9 ec 01 00 00       	jmp    ffffffff8001230a <_vsnprintf+0x8ca>
ffffffff8001211e:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012121:	25 00 02 00 00       	and    $0x200,%eax
ffffffff80012126:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012129:	74 71                	je     ffffffff8001219c <_vsnprintf+0x75c>
ffffffff8001212b:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff8001212f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012133:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012137:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8001213b:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff8001213f:	41 8b 01             	mov    (%r9),%eax
ffffffff80012142:	83 f8 28             	cmp    $0x28,%eax
ffffffff80012145:	77 0f                	ja     ffffffff80012156 <_vsnprintf+0x716>
ffffffff80012147:	4c 63 c0             	movslq %eax,%r8
ffffffff8001214a:	4d 03 41 10          	add    0x10(%r9),%r8
ffffffff8001214e:	83 c0 08             	add    $0x8,%eax
ffffffff80012151:	41 89 01             	mov    %eax,(%r9)
ffffffff80012154:	eb 0f                	jmp    ffffffff80012165 <_vsnprintf+0x725>
ffffffff80012156:	4d 8b 41 08          	mov    0x8(%r9),%r8
ffffffff8001215a:	4c 89 c0             	mov    %r8,%rax
ffffffff8001215d:	48 83 c0 08          	add    $0x8,%rax
ffffffff80012161:	49 89 41 08          	mov    %rax,0x8(%r9)
ffffffff80012165:	4d 8b 00             	mov    (%r8),%r8
ffffffff80012168:	44 8b 4d ac          	mov    -0x54(%rbp),%r9d
ffffffff8001216c:	44 8b 55 e4          	mov    -0x1c(%rbp),%r10d
ffffffff80012170:	44 8b 5d d4          	mov    -0x2c(%rbp),%r11d
ffffffff80012174:	8b 5d f4             	mov    -0xc(%rbp),%ebx
ffffffff80012177:	31 c0                	xor    %eax,%eax
ffffffff80012179:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff8001217d:	44 89 5c 24 10       	mov    %r11d,0x10(%rsp)
ffffffff80012182:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff80012187:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff8001218b:	45 31 c9             	xor    %r9d,%r9d
ffffffff8001218e:	e8 ed 0e 00 00       	call   ffffffff80013080 <_ntoa_long_long>
ffffffff80012193:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012197:	e9 6c 01 00 00       	jmp    ffffffff80012308 <_vsnprintf+0x8c8>
ffffffff8001219c:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8001219f:	25 00 01 00 00       	and    $0x100,%eax
ffffffff800121a4:	83 f8 00             	cmp    $0x0,%eax
ffffffff800121a7:	74 71                	je     ffffffff8001221a <_vsnprintf+0x7da>
ffffffff800121a9:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff800121ad:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800121b1:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800121b5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800121b9:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff800121bd:	41 8b 01             	mov    (%r9),%eax
ffffffff800121c0:	83 f8 28             	cmp    $0x28,%eax
ffffffff800121c3:	77 0f                	ja     ffffffff800121d4 <_vsnprintf+0x794>
ffffffff800121c5:	4c 63 c0             	movslq %eax,%r8
ffffffff800121c8:	4d 03 41 10          	add    0x10(%r9),%r8
ffffffff800121cc:	83 c0 08             	add    $0x8,%eax
ffffffff800121cf:	41 89 01             	mov    %eax,(%r9)
ffffffff800121d2:	eb 0f                	jmp    ffffffff800121e3 <_vsnprintf+0x7a3>
ffffffff800121d4:	4d 8b 41 08          	mov    0x8(%r9),%r8
ffffffff800121d8:	4c 89 c0             	mov    %r8,%rax
ffffffff800121db:	48 83 c0 08          	add    $0x8,%rax
ffffffff800121df:	49 89 41 08          	mov    %rax,0x8(%r9)
ffffffff800121e3:	4d 8b 00             	mov    (%r8),%r8
ffffffff800121e6:	44 8b 4d ac          	mov    -0x54(%rbp),%r9d
ffffffff800121ea:	44 8b 55 e4          	mov    -0x1c(%rbp),%r10d
ffffffff800121ee:	44 8b 5d d4          	mov    -0x2c(%rbp),%r11d
ffffffff800121f2:	8b 5d f4             	mov    -0xc(%rbp),%ebx
ffffffff800121f5:	31 c0                	xor    %eax,%eax
ffffffff800121f7:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff800121fb:	44 89 5c 24 10       	mov    %r11d,0x10(%rsp)
ffffffff80012200:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff80012205:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff80012209:	45 31 c9             	xor    %r9d,%r9d
ffffffff8001220c:	e8 af 0f 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff80012211:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012215:	e9 ec 00 00 00       	jmp    ffffffff80012306 <_vsnprintf+0x8c6>
ffffffff8001221a:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8001221d:	83 e0 40             	and    $0x40,%eax
ffffffff80012220:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012223:	74 2f                	je     ffffffff80012254 <_vsnprintf+0x814>
ffffffff80012225:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012229:	8b 11                	mov    (%rcx),%edx
ffffffff8001222b:	83 fa 28             	cmp    $0x28,%edx
ffffffff8001222e:	77 0e                	ja     ffffffff8001223e <_vsnprintf+0x7fe>
ffffffff80012230:	48 63 c2             	movslq %edx,%rax
ffffffff80012233:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012237:	83 c2 08             	add    $0x8,%edx
ffffffff8001223a:	89 11                	mov    %edx,(%rcx)
ffffffff8001223c:	eb 0f                	jmp    ffffffff8001224d <_vsnprintf+0x80d>
ffffffff8001223e:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012242:	48 89 c2             	mov    %rax,%rdx
ffffffff80012245:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012249:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8001224d:	8b 00                	mov    (%rax),%eax
ffffffff8001224f:	0f b6 c0             	movzbl %al,%eax
ffffffff80012252:	eb 66                	jmp    ffffffff800122ba <_vsnprintf+0x87a>
ffffffff80012254:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012257:	25 80 00 00 00       	and    $0x80,%eax
ffffffff8001225c:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001225f:	74 2f                	je     ffffffff80012290 <_vsnprintf+0x850>
ffffffff80012261:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012265:	8b 11                	mov    (%rcx),%edx
ffffffff80012267:	83 fa 28             	cmp    $0x28,%edx
ffffffff8001226a:	77 0e                	ja     ffffffff8001227a <_vsnprintf+0x83a>
ffffffff8001226c:	48 63 c2             	movslq %edx,%rax
ffffffff8001226f:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012273:	83 c2 08             	add    $0x8,%edx
ffffffff80012276:	89 11                	mov    %edx,(%rcx)
ffffffff80012278:	eb 0f                	jmp    ffffffff80012289 <_vsnprintf+0x849>
ffffffff8001227a:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff8001227e:	48 89 c2             	mov    %rax,%rdx
ffffffff80012281:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012285:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80012289:	8b 00                	mov    (%rax),%eax
ffffffff8001228b:	0f b7 c0             	movzwl %ax,%eax
ffffffff8001228e:	eb 2a                	jmp    ffffffff800122ba <_vsnprintf+0x87a>
ffffffff80012290:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012294:	8b 11                	mov    (%rcx),%edx
ffffffff80012296:	83 fa 28             	cmp    $0x28,%edx
ffffffff80012299:	77 0e                	ja     ffffffff800122a9 <_vsnprintf+0x869>
ffffffff8001229b:	48 63 c2             	movslq %edx,%rax
ffffffff8001229e:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff800122a2:	83 c2 08             	add    $0x8,%edx
ffffffff800122a5:	89 11                	mov    %edx,(%rcx)
ffffffff800122a7:	eb 0f                	jmp    ffffffff800122b8 <_vsnprintf+0x878>
ffffffff800122a9:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff800122ad:	48 89 c2             	mov    %rax,%rdx
ffffffff800122b0:	48 83 c2 08          	add    $0x8,%rdx
ffffffff800122b4:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff800122b8:	8b 00                	mov    (%rax),%eax
ffffffff800122ba:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%rbp)
ffffffff800122c0:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff800122c4:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800122c8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800122cc:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800122d0:	44 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%r8d
ffffffff800122d7:	44 8b 4d ac          	mov    -0x54(%rbp),%r9d
ffffffff800122db:	44 8b 55 e4          	mov    -0x1c(%rbp),%r10d
ffffffff800122df:	44 8b 5d d4          	mov    -0x2c(%rbp),%r11d
ffffffff800122e3:	8b 5d f4             	mov    -0xc(%rbp),%ebx
ffffffff800122e6:	31 c0                	xor    %eax,%eax
ffffffff800122e8:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff800122ec:	44 89 5c 24 10       	mov    %r11d,0x10(%rsp)
ffffffff800122f1:	44 89 54 24 08       	mov    %r10d,0x8(%rsp)
ffffffff800122f6:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff800122fa:	45 31 c9             	xor    %r9d,%r9d
ffffffff800122fd:	e8 be 0e 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff80012302:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012306:	eb 00                	jmp    ffffffff80012308 <_vsnprintf+0x8c8>
ffffffff80012308:	eb 00                	jmp    ffffffff8001230a <_vsnprintf+0x8ca>
ffffffff8001230a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001230e:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012312:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012316:	e9 74 0c 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff8001231b:	c7 45 84 01 00 00 00 	movl   $0x1,-0x7c(%rbp)
ffffffff80012322:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012325:	83 e0 02             	and    $0x2,%eax
ffffffff80012328:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001232b:	75 38                	jne    ffffffff80012365 <_vsnprintf+0x925>
ffffffff8001232d:	eb 00                	jmp    ffffffff8001232f <_vsnprintf+0x8ef>
ffffffff8001232f:	8b 45 84             	mov    -0x7c(%rbp),%eax
ffffffff80012332:	89 c1                	mov    %eax,%ecx
ffffffff80012334:	83 c1 01             	add    $0x1,%ecx
ffffffff80012337:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
ffffffff8001233a:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff8001233d:	73 24                	jae    ffffffff80012363 <_vsnprintf+0x923>
ffffffff8001233f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012343:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012347:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8001234b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8001234e:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012352:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012356:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8001235a:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8001235f:	ff d0                	call   *%rax
ffffffff80012361:	eb cc                	jmp    ffffffff8001232f <_vsnprintf+0x8ef>
ffffffff80012363:	eb 00                	jmp    ffffffff80012365 <_vsnprintf+0x925>
ffffffff80012365:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012369:	48 8b 55 b0          	mov    -0x50(%rbp),%rdx
ffffffff8001236d:	8b 32                	mov    (%rdx),%esi
ffffffff8001236f:	83 fe 28             	cmp    $0x28,%esi
ffffffff80012372:	77 0e                	ja     ffffffff80012382 <_vsnprintf+0x942>
ffffffff80012374:	48 63 ce             	movslq %esi,%rcx
ffffffff80012377:	48 03 4a 10          	add    0x10(%rdx),%rcx
ffffffff8001237b:	83 c6 08             	add    $0x8,%esi
ffffffff8001237e:	89 32                	mov    %esi,(%rdx)
ffffffff80012380:	eb 0f                	jmp    ffffffff80012391 <_vsnprintf+0x951>
ffffffff80012382:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff80012386:	48 89 ce             	mov    %rcx,%rsi
ffffffff80012389:	48 83 c6 08          	add    $0x8,%rsi
ffffffff8001238d:	48 89 72 08          	mov    %rsi,0x8(%rdx)
ffffffff80012391:	8b 39                	mov    (%rcx),%edi
ffffffff80012393:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012397:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8001239b:	48 89 d1             	mov    %rdx,%rcx
ffffffff8001239e:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800123a2:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800123a6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800123aa:	40 0f be ff          	movsbl %dil,%edi
ffffffff800123ae:	ff d0                	call   *%rax
ffffffff800123b0:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800123b3:	83 e0 02             	and    $0x2,%eax
ffffffff800123b6:	83 f8 00             	cmp    $0x0,%eax
ffffffff800123b9:	74 38                	je     ffffffff800123f3 <_vsnprintf+0x9b3>
ffffffff800123bb:	eb 00                	jmp    ffffffff800123bd <_vsnprintf+0x97d>
ffffffff800123bd:	8b 45 84             	mov    -0x7c(%rbp),%eax
ffffffff800123c0:	89 c1                	mov    %eax,%ecx
ffffffff800123c2:	83 c1 01             	add    $0x1,%ecx
ffffffff800123c5:	89 4d 84             	mov    %ecx,-0x7c(%rbp)
ffffffff800123c8:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff800123cb:	73 24                	jae    ffffffff800123f1 <_vsnprintf+0x9b1>
ffffffff800123cd:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800123d1:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800123d5:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800123d9:	48 89 d1             	mov    %rdx,%rcx
ffffffff800123dc:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800123e0:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800123e4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800123e8:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800123ed:	ff d0                	call   *%rax
ffffffff800123ef:	eb cc                	jmp    ffffffff800123bd <_vsnprintf+0x97d>
ffffffff800123f1:	eb 00                	jmp    ffffffff800123f3 <_vsnprintf+0x9b3>
ffffffff800123f3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800123f7:	48 83 c0 01          	add    $0x1,%rax
ffffffff800123fb:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800123ff:	e9 8b 0b 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012404:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012408:	8b 11                	mov    (%rcx),%edx
ffffffff8001240a:	83 fa 28             	cmp    $0x28,%edx
ffffffff8001240d:	77 0e                	ja     ffffffff8001241d <_vsnprintf+0x9dd>
ffffffff8001240f:	48 63 c2             	movslq %edx,%rax
ffffffff80012412:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012416:	83 c2 08             	add    $0x8,%edx
ffffffff80012419:	89 11                	mov    %edx,(%rcx)
ffffffff8001241b:	eb 0f                	jmp    ffffffff8001242c <_vsnprintf+0x9ec>
ffffffff8001241d:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012421:	48 89 c2             	mov    %rax,%rdx
ffffffff80012424:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012428:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8001242c:	48 8b 00             	mov    (%rax),%rax
ffffffff8001242f:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff80012436:	48 c7 85 40 ff ff ff 	movq   $0x0,-0xc0(%rbp)
ffffffff8001243d:	00 00 00 00 
ffffffff80012441:	48 c7 85 00 ff ff ff 	movq   $0x0,-0x100(%rbp)
ffffffff80012448:	00 00 00 00 
ffffffff8001244c:	31 c0                	xor    %eax,%eax
ffffffff8001244e:	48 81 bd 60 ff ff ff 	cmpq   $0x400,-0xa0(%rbp)
ffffffff80012455:	00 04 00 00 
ffffffff80012459:	72 0b                	jb     ffffffff80012466 <_vsnprintf+0xa26>
ffffffff8001245b:	48 83 bd 40 ff ff ff 	cmpq   $0x5,-0xc0(%rbp)
ffffffff80012462:	05 
ffffffff80012463:	0f 92 c0             	setb   %al
ffffffff80012466:	a8 01                	test   $0x1,%al
ffffffff80012468:	75 02                	jne    ffffffff8001246c <_vsnprintf+0xa2c>
ffffffff8001246a:	eb 3a                	jmp    ffffffff800124a6 <_vsnprintf+0xa66>
ffffffff8001246c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80012473:	48 25 ff 03 00 00    	and    $0x3ff,%rax
ffffffff80012479:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
ffffffff80012480:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff80012487:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001248b:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
ffffffff80012492:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
ffffffff80012499:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff8001249d:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
ffffffff800124a4:	eb a6                	jmp    ffffffff8001244c <_vsnprintf+0xa0c>
ffffffff800124a6:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff800124aa:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800124ae:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800124b2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800124b6:	4c 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8
ffffffff800124bd:	44 8b 4d e4          	mov    -0x1c(%rbp),%r9d
ffffffff800124c1:	44 8b 55 d4          	mov    -0x2c(%rbp),%r10d
ffffffff800124c5:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800124c8:	31 db                	xor    %ebx,%ebx
ffffffff800124ca:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff800124ce:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff800124d3:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
ffffffff800124d8:	48 c7 04 24 0a 00 00 	movq   $0xa,(%rsp)
ffffffff800124df:	00 
ffffffff800124e0:	45 31 c9             	xor    %r9d,%r9d
ffffffff800124e3:	e8 d8 0c 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff800124e8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800124ec:	48 6b 85 00 ff ff ff 	imul   $0x64,-0x100(%rbp),%rax
ffffffff800124f3:	64 
ffffffff800124f4:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff800124f8:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800124fc:	74 68                	je     ffffffff80012566 <_vsnprintf+0xb26>
ffffffff800124fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012502:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012506:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8001250a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8001250d:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012511:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012515:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012519:	bf 2e 00 00 00       	mov    $0x2e,%edi
ffffffff8001251e:	ff d0                	call   *%rax
ffffffff80012520:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80012524:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012528:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8001252c:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012530:	4c 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%r8
ffffffff80012537:	44 8b 4d e4          	mov    -0x1c(%rbp),%r9d
ffffffff8001253b:	44 8b 55 d4          	mov    -0x2c(%rbp),%r10d
ffffffff8001253f:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012542:	31 db                	xor    %ebx,%ebx
ffffffff80012544:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80012548:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff8001254d:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
ffffffff80012552:	48 c7 04 24 0a 00 00 	movq   $0xa,(%rsp)
ffffffff80012559:	00 
ffffffff8001255a:	45 31 c9             	xor    %r9d,%r9d
ffffffff8001255d:	e8 5e 0c 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff80012562:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012566:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
ffffffff8001256d:	48 8d 04 c5 c0 a5 01 	lea    -0x7ffe5a40(,%rax,8),%rax
ffffffff80012574:	80 
ffffffff80012575:	48 8b 00             	mov    (%rax),%rax
ffffffff80012578:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
ffffffff8001257f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
ffffffff80012586:	0f be 08             	movsbl (%rax),%ecx
ffffffff80012589:	31 c0                	xor    %eax,%eax
ffffffff8001258b:	83 f9 00             	cmp    $0x0,%ecx
ffffffff8001258e:	74 21                	je     ffffffff800125b1 <_vsnprintf+0xb71>
ffffffff80012590:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80012593:	81 e1 00 04 00 00    	and    $0x400,%ecx
ffffffff80012599:	b0 01                	mov    $0x1,%al
ffffffff8001259b:	83 f9 00             	cmp    $0x0,%ecx
ffffffff8001259e:	74 11                	je     ffffffff800125b1 <_vsnprintf+0xb71>
ffffffff800125a0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800125a3:	89 c1                	mov    %eax,%ecx
ffffffff800125a5:	83 c1 ff             	add    $0xffffffff,%ecx
ffffffff800125a8:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff800125ab:	83 f8 00             	cmp    $0x0,%eax
ffffffff800125ae:	0f 95 c0             	setne  %al
ffffffff800125b1:	a8 01                	test   $0x1,%al
ffffffff800125b3:	75 02                	jne    ffffffff800125b7 <_vsnprintf+0xb77>
ffffffff800125b5:	eb 39                	jmp    ffffffff800125f0 <_vsnprintf+0xbb0>
ffffffff800125b7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800125bb:	48 8b 8d 10 ff ff ff 	mov    -0xf0(%rbp),%rcx
ffffffff800125c2:	48 89 ca             	mov    %rcx,%rdx
ffffffff800125c5:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800125c9:	48 89 95 10 ff ff ff 	mov    %rdx,-0xf0(%rbp)
ffffffff800125d0:	8a 19                	mov    (%rcx),%bl
ffffffff800125d2:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800125d6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800125da:	48 89 d1             	mov    %rdx,%rcx
ffffffff800125dd:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800125e1:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800125e5:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800125e9:	0f be fb             	movsbl %bl,%edi
ffffffff800125ec:	ff d0                	call   *%rax
ffffffff800125ee:	eb 8f                	jmp    ffffffff8001257f <_vsnprintf+0xb3f>
ffffffff800125f0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800125f4:	48 83 c0 01          	add    $0x1,%rax
ffffffff800125f8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800125fc:	e9 8e 09 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012601:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012605:	8b 11                	mov    (%rcx),%edx
ffffffff80012607:	83 fa 28             	cmp    $0x28,%edx
ffffffff8001260a:	77 0e                	ja     ffffffff8001261a <_vsnprintf+0xbda>
ffffffff8001260c:	48 63 c2             	movslq %edx,%rax
ffffffff8001260f:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012613:	83 c2 08             	add    $0x8,%edx
ffffffff80012616:	89 11                	mov    %edx,(%rcx)
ffffffff80012618:	eb 0f                	jmp    ffffffff80012629 <_vsnprintf+0xbe9>
ffffffff8001261a:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff8001261e:	48 89 c2             	mov    %rax,%rdx
ffffffff80012621:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012625:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80012629:	8b 00                	mov    (%rax),%eax
ffffffff8001262b:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%rbp)
ffffffff80012631:	48 c7 45 88 00 00 00 	movq   $0x0,-0x78(%rbp)
ffffffff80012638:	00 
ffffffff80012639:	8b 85 0c ff ff ff    	mov    -0xf4(%rbp),%eax
ffffffff8001263f:	ff c8                	dec    %eax
ffffffff80012641:	89 c1                	mov    %eax,%ecx
ffffffff80012643:	83 e9 03             	sub    $0x3,%ecx
ffffffff80012646:	77 32                	ja     ffffffff8001267a <_vsnprintf+0xc3a>
ffffffff80012648:	48 8b 04 c5 08 89 01 	mov    -0x7ffe76f8(,%rax,8),%rax
ffffffff8001264f:	80 
ffffffff80012650:	ff e0                	jmp    *%rax
ffffffff80012652:	48 c7 45 88 f4 93 01 	movq   $0xffffffff800193f4,-0x78(%rbp)
ffffffff80012659:	80 
ffffffff8001265a:	eb 26                	jmp    ffffffff80012682 <_vsnprintf+0xc42>
ffffffff8001265c:	48 c7 45 88 36 8a 01 	movq   $0xffffffff80018a36,-0x78(%rbp)
ffffffff80012663:	80 
ffffffff80012664:	eb 1c                	jmp    ffffffff80012682 <_vsnprintf+0xc42>
ffffffff80012666:	48 c7 45 88 7c a1 01 	movq   $0xffffffff8001a17c,-0x78(%rbp)
ffffffff8001266d:	80 
ffffffff8001266e:	eb 12                	jmp    ffffffff80012682 <_vsnprintf+0xc42>
ffffffff80012670:	48 c7 45 88 c0 98 01 	movq   $0xffffffff800198c0,-0x78(%rbp)
ffffffff80012677:	80 
ffffffff80012678:	eb 08                	jmp    ffffffff80012682 <_vsnprintf+0xc42>
ffffffff8001267a:	48 c7 45 88 a1 9f 01 	movq   $0xffffffff80019fa1,-0x78(%rbp)
ffffffff80012681:	80 
ffffffff80012682:	48 8b 7d 88          	mov    -0x78(%rbp),%rdi
ffffffff80012686:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff8001268a:	74 05                	je     ffffffff80012691 <_vsnprintf+0xc51>
ffffffff8001268c:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff8001268f:	eb 09                	jmp    ffffffff8001269a <_vsnprintf+0xc5a>
ffffffff80012691:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80012698:	eb 00                	jmp    ffffffff8001269a <_vsnprintf+0xc5a>
ffffffff8001269a:	e8 61 0c 00 00       	call   ffffffff80013300 <_strnlen_s>
ffffffff8001269f:	89 45 9c             	mov    %eax,-0x64(%rbp)
ffffffff800126a2:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800126a5:	25 00 04 00 00       	and    $0x400,%eax
ffffffff800126aa:	83 f8 00             	cmp    $0x0,%eax
ffffffff800126ad:	74 13                	je     ffffffff800126c2 <_vsnprintf+0xc82>
ffffffff800126af:	8b 45 9c             	mov    -0x64(%rbp),%eax
ffffffff800126b2:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff800126b5:	73 05                	jae    ffffffff800126bc <_vsnprintf+0xc7c>
ffffffff800126b7:	8b 45 9c             	mov    -0x64(%rbp),%eax
ffffffff800126ba:	eb 03                	jmp    ffffffff800126bf <_vsnprintf+0xc7f>
ffffffff800126bc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800126bf:	89 45 9c             	mov    %eax,-0x64(%rbp)
ffffffff800126c2:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800126c5:	83 e0 02             	and    $0x2,%eax
ffffffff800126c8:	83 f8 00             	cmp    $0x0,%eax
ffffffff800126cb:	75 38                	jne    ffffffff80012705 <_vsnprintf+0xcc5>
ffffffff800126cd:	eb 00                	jmp    ffffffff800126cf <_vsnprintf+0xc8f>
ffffffff800126cf:	8b 45 9c             	mov    -0x64(%rbp),%eax
ffffffff800126d2:	89 c1                	mov    %eax,%ecx
ffffffff800126d4:	83 c1 01             	add    $0x1,%ecx
ffffffff800126d7:	89 4d 9c             	mov    %ecx,-0x64(%rbp)
ffffffff800126da:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff800126dd:	73 24                	jae    ffffffff80012703 <_vsnprintf+0xcc3>
ffffffff800126df:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800126e3:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800126e7:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800126eb:	48 89 d1             	mov    %rdx,%rcx
ffffffff800126ee:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800126f2:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800126f6:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800126fa:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800126ff:	ff d0                	call   *%rax
ffffffff80012701:	eb cc                	jmp    ffffffff800126cf <_vsnprintf+0xc8f>
ffffffff80012703:	eb 00                	jmp    ffffffff80012705 <_vsnprintf+0xcc5>
ffffffff80012705:	eb 00                	jmp    ffffffff80012707 <_vsnprintf+0xcc7>
ffffffff80012707:	48 8b 45 88          	mov    -0x78(%rbp),%rax
ffffffff8001270b:	0f be 08             	movsbl (%rax),%ecx
ffffffff8001270e:	31 c0                	xor    %eax,%eax
ffffffff80012710:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012713:	74 21                	je     ffffffff80012736 <_vsnprintf+0xcf6>
ffffffff80012715:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80012718:	81 e1 00 04 00 00    	and    $0x400,%ecx
ffffffff8001271e:	b0 01                	mov    $0x1,%al
ffffffff80012720:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012723:	74 11                	je     ffffffff80012736 <_vsnprintf+0xcf6>
ffffffff80012725:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80012728:	89 c1                	mov    %eax,%ecx
ffffffff8001272a:	83 c1 ff             	add    $0xffffffff,%ecx
ffffffff8001272d:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff80012730:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012733:	0f 95 c0             	setne  %al
ffffffff80012736:	a8 01                	test   $0x1,%al
ffffffff80012738:	75 02                	jne    ffffffff8001273c <_vsnprintf+0xcfc>
ffffffff8001273a:	eb 33                	jmp    ffffffff8001276f <_vsnprintf+0xd2f>
ffffffff8001273c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012740:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
ffffffff80012744:	48 89 ca             	mov    %rcx,%rdx
ffffffff80012747:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8001274b:	48 89 55 88          	mov    %rdx,-0x78(%rbp)
ffffffff8001274f:	8a 19                	mov    (%rcx),%bl
ffffffff80012751:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012755:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012759:	48 89 d1             	mov    %rdx,%rcx
ffffffff8001275c:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012760:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012764:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012768:	0f be fb             	movsbl %bl,%edi
ffffffff8001276b:	ff d0                	call   *%rax
ffffffff8001276d:	eb 98                	jmp    ffffffff80012707 <_vsnprintf+0xcc7>
ffffffff8001276f:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012772:	83 e0 02             	and    $0x2,%eax
ffffffff80012775:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012778:	74 38                	je     ffffffff800127b2 <_vsnprintf+0xd72>
ffffffff8001277a:	eb 00                	jmp    ffffffff8001277c <_vsnprintf+0xd3c>
ffffffff8001277c:	8b 45 9c             	mov    -0x64(%rbp),%eax
ffffffff8001277f:	89 c1                	mov    %eax,%ecx
ffffffff80012781:	83 c1 01             	add    $0x1,%ecx
ffffffff80012784:	89 4d 9c             	mov    %ecx,-0x64(%rbp)
ffffffff80012787:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff8001278a:	73 24                	jae    ffffffff800127b0 <_vsnprintf+0xd70>
ffffffff8001278c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012790:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012794:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012798:	48 89 d1             	mov    %rdx,%rcx
ffffffff8001279b:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8001279f:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800127a3:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800127a7:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800127ac:	ff d0                	call   *%rax
ffffffff800127ae:	eb cc                	jmp    ffffffff8001277c <_vsnprintf+0xd3c>
ffffffff800127b0:	eb 00                	jmp    ffffffff800127b2 <_vsnprintf+0xd72>
ffffffff800127b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800127b6:	48 83 c0 01          	add    $0x1,%rax
ffffffff800127ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800127be:	e9 cc 07 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff800127c3:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff800127c7:	8b 11                	mov    (%rcx),%edx
ffffffff800127c9:	83 fa 28             	cmp    $0x28,%edx
ffffffff800127cc:	77 0e                	ja     ffffffff800127dc <_vsnprintf+0xd9c>
ffffffff800127ce:	48 63 c2             	movslq %edx,%rax
ffffffff800127d1:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff800127d5:	83 c2 08             	add    $0x8,%edx
ffffffff800127d8:	89 11                	mov    %edx,(%rcx)
ffffffff800127da:	eb 0f                	jmp    ffffffff800127eb <_vsnprintf+0xdab>
ffffffff800127dc:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff800127e0:	48 89 c2             	mov    %rax,%rdx
ffffffff800127e3:	48 83 c2 08          	add    $0x8,%rdx
ffffffff800127e7:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff800127eb:	48 8b 00             	mov    (%rax),%rax
ffffffff800127ee:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
ffffffff800127f5:	48 83 bd 68 ff ff ff 	cmpq   $0x0,-0x98(%rbp)
ffffffff800127fc:	00 
ffffffff800127fd:	75 0b                	jne    ffffffff8001280a <_vsnprintf+0xdca>
ffffffff800127ff:	48 c7 85 68 ff ff ff 	movq   $0xffffffff80019c98,-0x98(%rbp)
ffffffff80012806:	98 9c 01 80 
ffffffff8001280a:	48 8b bd 68 ff ff ff 	mov    -0x98(%rbp),%rdi
ffffffff80012811:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff80012815:	74 05                	je     ffffffff8001281c <_vsnprintf+0xddc>
ffffffff80012817:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff8001281a:	eb 09                	jmp    ffffffff80012825 <_vsnprintf+0xde5>
ffffffff8001281c:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80012823:	eb 00                	jmp    ffffffff80012825 <_vsnprintf+0xde5>
ffffffff80012825:	e8 d6 0a 00 00       	call   ffffffff80013300 <_strnlen_s>
ffffffff8001282a:	89 45 a0             	mov    %eax,-0x60(%rbp)
ffffffff8001282d:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012830:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80012835:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012838:	74 13                	je     ffffffff8001284d <_vsnprintf+0xe0d>
ffffffff8001283a:	8b 45 a0             	mov    -0x60(%rbp),%eax
ffffffff8001283d:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff80012840:	73 05                	jae    ffffffff80012847 <_vsnprintf+0xe07>
ffffffff80012842:	8b 45 a0             	mov    -0x60(%rbp),%eax
ffffffff80012845:	eb 03                	jmp    ffffffff8001284a <_vsnprintf+0xe0a>
ffffffff80012847:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff8001284a:	89 45 a0             	mov    %eax,-0x60(%rbp)
ffffffff8001284d:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012850:	83 e0 02             	and    $0x2,%eax
ffffffff80012853:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012856:	75 38                	jne    ffffffff80012890 <_vsnprintf+0xe50>
ffffffff80012858:	eb 00                	jmp    ffffffff8001285a <_vsnprintf+0xe1a>
ffffffff8001285a:	8b 45 a0             	mov    -0x60(%rbp),%eax
ffffffff8001285d:	89 c1                	mov    %eax,%ecx
ffffffff8001285f:	83 c1 01             	add    $0x1,%ecx
ffffffff80012862:	89 4d a0             	mov    %ecx,-0x60(%rbp)
ffffffff80012865:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff80012868:	73 24                	jae    ffffffff8001288e <_vsnprintf+0xe4e>
ffffffff8001286a:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff8001286e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012872:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012876:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012879:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8001287d:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012881:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012885:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8001288a:	ff d0                	call   *%rax
ffffffff8001288c:	eb cc                	jmp    ffffffff8001285a <_vsnprintf+0xe1a>
ffffffff8001288e:	eb 00                	jmp    ffffffff80012890 <_vsnprintf+0xe50>
ffffffff80012890:	eb 00                	jmp    ffffffff80012892 <_vsnprintf+0xe52>
ffffffff80012892:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
ffffffff80012899:	0f be 08             	movsbl (%rax),%ecx
ffffffff8001289c:	31 c0                	xor    %eax,%eax
ffffffff8001289e:	83 f9 00             	cmp    $0x0,%ecx
ffffffff800128a1:	74 21                	je     ffffffff800128c4 <_vsnprintf+0xe84>
ffffffff800128a3:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff800128a6:	81 e1 00 04 00 00    	and    $0x400,%ecx
ffffffff800128ac:	b0 01                	mov    $0x1,%al
ffffffff800128ae:	83 f9 00             	cmp    $0x0,%ecx
ffffffff800128b1:	74 11                	je     ffffffff800128c4 <_vsnprintf+0xe84>
ffffffff800128b3:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800128b6:	89 c1                	mov    %eax,%ecx
ffffffff800128b8:	83 c1 ff             	add    $0xffffffff,%ecx
ffffffff800128bb:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff800128be:	83 f8 00             	cmp    $0x0,%eax
ffffffff800128c1:	0f 95 c0             	setne  %al
ffffffff800128c4:	a8 01                	test   $0x1,%al
ffffffff800128c6:	75 02                	jne    ffffffff800128ca <_vsnprintf+0xe8a>
ffffffff800128c8:	eb 39                	jmp    ffffffff80012903 <_vsnprintf+0xec3>
ffffffff800128ca:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800128ce:	48 8b 8d 68 ff ff ff 	mov    -0x98(%rbp),%rcx
ffffffff800128d5:	48 89 ca             	mov    %rcx,%rdx
ffffffff800128d8:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800128dc:	48 89 95 68 ff ff ff 	mov    %rdx,-0x98(%rbp)
ffffffff800128e3:	8a 19                	mov    (%rcx),%bl
ffffffff800128e5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800128e9:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff800128ed:	48 89 d1             	mov    %rdx,%rcx
ffffffff800128f0:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800128f4:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800128f8:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff800128fc:	0f be fb             	movsbl %bl,%edi
ffffffff800128ff:	ff d0                	call   *%rax
ffffffff80012901:	eb 8f                	jmp    ffffffff80012892 <_vsnprintf+0xe52>
ffffffff80012903:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012906:	83 e0 02             	and    $0x2,%eax
ffffffff80012909:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001290c:	74 38                	je     ffffffff80012946 <_vsnprintf+0xf06>
ffffffff8001290e:	eb 00                	jmp    ffffffff80012910 <_vsnprintf+0xed0>
ffffffff80012910:	8b 45 a0             	mov    -0x60(%rbp),%eax
ffffffff80012913:	89 c1                	mov    %eax,%ecx
ffffffff80012915:	83 c1 01             	add    $0x1,%ecx
ffffffff80012918:	89 4d a0             	mov    %ecx,-0x60(%rbp)
ffffffff8001291b:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff8001291e:	73 24                	jae    ffffffff80012944 <_vsnprintf+0xf04>
ffffffff80012920:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012924:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012928:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff8001292c:	48 89 d1             	mov    %rdx,%rcx
ffffffff8001292f:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012933:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012937:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8001293b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012940:	ff d0                	call   *%rax
ffffffff80012942:	eb cc                	jmp    ffffffff80012910 <_vsnprintf+0xed0>
ffffffff80012944:	eb 00                	jmp    ffffffff80012946 <_vsnprintf+0xf06>
ffffffff80012946:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001294a:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001294e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012952:	e9 38 06 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012957:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff8001295b:	8b 11                	mov    (%rcx),%edx
ffffffff8001295d:	83 fa 28             	cmp    $0x28,%edx
ffffffff80012960:	77 0e                	ja     ffffffff80012970 <_vsnprintf+0xf30>
ffffffff80012962:	48 63 c2             	movslq %edx,%rax
ffffffff80012965:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012969:	83 c2 08             	add    $0x8,%edx
ffffffff8001296c:	89 11                	mov    %edx,(%rcx)
ffffffff8001296e:	eb 0f                	jmp    ffffffff8001297f <_vsnprintf+0xf3f>
ffffffff80012970:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012974:	48 89 c2             	mov    %rax,%rdx
ffffffff80012977:	48 83 c2 08          	add    $0x8,%rdx
ffffffff8001297b:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff8001297f:	48 8b 00             	mov    (%rax),%rax
ffffffff80012982:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
ffffffff80012989:	48 83 bd 70 ff ff ff 	cmpq   $0x0,-0x90(%rbp)
ffffffff80012990:	00 
ffffffff80012991:	75 0b                	jne    ffffffff8001299e <_vsnprintf+0xf5e>
ffffffff80012993:	48 c7 85 70 ff ff ff 	movq   $0xffffffff8001a5e8,-0x90(%rbp)
ffffffff8001299a:	e8 a5 01 80 
ffffffff8001299e:	48 8b bd 70 ff ff ff 	mov    -0x90(%rbp),%rdi
ffffffff800129a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff800129a9:	74 05                	je     ffffffff800129b0 <_vsnprintf+0xf70>
ffffffff800129ab:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff800129ae:	eb 09                	jmp    ffffffff800129b9 <_vsnprintf+0xf79>
ffffffff800129b0:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff800129b7:	eb 00                	jmp    ffffffff800129b9 <_vsnprintf+0xf79>
ffffffff800129b9:	e8 b2 09 00 00       	call   ffffffff80013370 <_wstrnlen_s>
ffffffff800129be:	89 45 a4             	mov    %eax,-0x5c(%rbp)
ffffffff800129c1:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800129c4:	25 00 04 00 00       	and    $0x400,%eax
ffffffff800129c9:	83 f8 00             	cmp    $0x0,%eax
ffffffff800129cc:	74 13                	je     ffffffff800129e1 <_vsnprintf+0xfa1>
ffffffff800129ce:	8b 45 a4             	mov    -0x5c(%rbp),%eax
ffffffff800129d1:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff800129d4:	73 05                	jae    ffffffff800129db <_vsnprintf+0xf9b>
ffffffff800129d6:	8b 45 a4             	mov    -0x5c(%rbp),%eax
ffffffff800129d9:	eb 03                	jmp    ffffffff800129de <_vsnprintf+0xf9e>
ffffffff800129db:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff800129de:	89 45 a4             	mov    %eax,-0x5c(%rbp)
ffffffff800129e1:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800129e4:	83 e0 02             	and    $0x2,%eax
ffffffff800129e7:	83 f8 00             	cmp    $0x0,%eax
ffffffff800129ea:	75 38                	jne    ffffffff80012a24 <_vsnprintf+0xfe4>
ffffffff800129ec:	eb 00                	jmp    ffffffff800129ee <_vsnprintf+0xfae>
ffffffff800129ee:	8b 45 a4             	mov    -0x5c(%rbp),%eax
ffffffff800129f1:	89 c1                	mov    %eax,%ecx
ffffffff800129f3:	83 c1 01             	add    $0x1,%ecx
ffffffff800129f6:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
ffffffff800129f9:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff800129fc:	73 24                	jae    ffffffff80012a22 <_vsnprintf+0xfe2>
ffffffff800129fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012a02:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012a06:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012a0a:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012a0d:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012a11:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012a15:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012a19:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012a1e:	ff d0                	call   *%rax
ffffffff80012a20:	eb cc                	jmp    ffffffff800129ee <_vsnprintf+0xfae>
ffffffff80012a22:	eb 00                	jmp    ffffffff80012a24 <_vsnprintf+0xfe4>
ffffffff80012a24:	eb 00                	jmp    ffffffff80012a26 <_vsnprintf+0xfe6>
ffffffff80012a26:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
ffffffff80012a2d:	0f b7 08             	movzwl (%rax),%ecx
ffffffff80012a30:	31 c0                	xor    %eax,%eax
ffffffff80012a32:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012a35:	74 21                	je     ffffffff80012a58 <_vsnprintf+0x1018>
ffffffff80012a37:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80012a3a:	81 e1 00 04 00 00    	and    $0x400,%ecx
ffffffff80012a40:	b0 01                	mov    $0x1,%al
ffffffff80012a42:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012a45:	74 11                	je     ffffffff80012a58 <_vsnprintf+0x1018>
ffffffff80012a47:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80012a4a:	89 c1                	mov    %eax,%ecx
ffffffff80012a4c:	83 c1 ff             	add    $0xffffffff,%ecx
ffffffff80012a4f:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff80012a52:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012a55:	0f 95 c0             	setne  %al
ffffffff80012a58:	a8 01                	test   $0x1,%al
ffffffff80012a5a:	75 02                	jne    ffffffff80012a5e <_vsnprintf+0x101e>
ffffffff80012a5c:	eb 3b                	jmp    ffffffff80012a99 <_vsnprintf+0x1059>
ffffffff80012a5e:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012a62:	48 8b 8d 70 ff ff ff 	mov    -0x90(%rbp),%rcx
ffffffff80012a69:	48 89 ca             	mov    %rcx,%rdx
ffffffff80012a6c:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80012a70:	48 89 95 70 ff ff ff 	mov    %rdx,-0x90(%rbp)
ffffffff80012a77:	66 8b 39             	mov    (%rcx),%di
ffffffff80012a7a:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012a7e:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012a82:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012a85:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012a89:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012a8d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012a91:	40 0f be ff          	movsbl %dil,%edi
ffffffff80012a95:	ff d0                	call   *%rax
ffffffff80012a97:	eb 8d                	jmp    ffffffff80012a26 <_vsnprintf+0xfe6>
ffffffff80012a99:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012a9c:	83 e0 02             	and    $0x2,%eax
ffffffff80012a9f:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012aa2:	74 38                	je     ffffffff80012adc <_vsnprintf+0x109c>
ffffffff80012aa4:	eb 00                	jmp    ffffffff80012aa6 <_vsnprintf+0x1066>
ffffffff80012aa6:	8b 45 a4             	mov    -0x5c(%rbp),%eax
ffffffff80012aa9:	89 c1                	mov    %eax,%ecx
ffffffff80012aab:	83 c1 01             	add    $0x1,%ecx
ffffffff80012aae:	89 4d a4             	mov    %ecx,-0x5c(%rbp)
ffffffff80012ab1:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff80012ab4:	73 24                	jae    ffffffff80012ada <_vsnprintf+0x109a>
ffffffff80012ab6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012aba:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012abe:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012ac2:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012ac5:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012ac9:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012acd:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012ad1:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012ad6:	ff d0                	call   *%rax
ffffffff80012ad8:	eb cc                	jmp    ffffffff80012aa6 <_vsnprintf+0x1066>
ffffffff80012ada:	eb 00                	jmp    ffffffff80012adc <_vsnprintf+0x109c>
ffffffff80012adc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80012ae0:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012ae4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012ae8:	e9 a2 04 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012aed:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012af1:	8b 11                	mov    (%rcx),%edx
ffffffff80012af3:	83 fa 28             	cmp    $0x28,%edx
ffffffff80012af6:	77 0e                	ja     ffffffff80012b06 <_vsnprintf+0x10c6>
ffffffff80012af8:	48 63 c2             	movslq %edx,%rax
ffffffff80012afb:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012aff:	83 c2 08             	add    $0x8,%edx
ffffffff80012b02:	89 11                	mov    %edx,(%rcx)
ffffffff80012b04:	eb 0f                	jmp    ffffffff80012b15 <_vsnprintf+0x10d5>
ffffffff80012b06:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012b0a:	48 89 c2             	mov    %rax,%rdx
ffffffff80012b0d:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012b11:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80012b15:	48 8b 00             	mov    (%rax),%rax
ffffffff80012b18:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
ffffffff80012b1f:	48 c7 85 58 ff ff ff 	movq   $0x0,-0xa8(%rbp)
ffffffff80012b26:	00 00 00 00 
ffffffff80012b2a:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
ffffffff80012b31:	48 83 bd 18 ff ff ff 	cmpq   $0x0,-0xe8(%rbp)
ffffffff80012b38:	00 
ffffffff80012b39:	75 14                	jne    ffffffff80012b4f <_vsnprintf+0x110f>
ffffffff80012b3b:	48 c7 85 58 ff ff ff 	movq   $0xffffffff8001a5e8,-0xa8(%rbp)
ffffffff80012b42:	e8 a5 01 80 
ffffffff80012b46:	c7 45 98 07 00 00 00 	movl   $0x7,-0x68(%rbp)
ffffffff80012b4d:	eb 1f                	jmp    ffffffff80012b6e <_vsnprintf+0x112e>
ffffffff80012b4f:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80012b56:	48 83 c0 2c          	add    $0x2c,%rax
ffffffff80012b5a:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
ffffffff80012b61:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
ffffffff80012b68:	8b 40 28             	mov    0x28(%rax),%eax
ffffffff80012b6b:	89 45 98             	mov    %eax,-0x68(%rbp)
ffffffff80012b6e:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012b71:	83 e0 02             	and    $0x2,%eax
ffffffff80012b74:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012b77:	75 38                	jne    ffffffff80012bb1 <_vsnprintf+0x1171>
ffffffff80012b79:	eb 00                	jmp    ffffffff80012b7b <_vsnprintf+0x113b>
ffffffff80012b7b:	8b 45 98             	mov    -0x68(%rbp),%eax
ffffffff80012b7e:	89 c1                	mov    %eax,%ecx
ffffffff80012b80:	83 c1 01             	add    $0x1,%ecx
ffffffff80012b83:	89 4d 98             	mov    %ecx,-0x68(%rbp)
ffffffff80012b86:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff80012b89:	73 24                	jae    ffffffff80012baf <_vsnprintf+0x116f>
ffffffff80012b8b:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012b8f:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012b93:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012b97:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012b9a:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012b9e:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012ba2:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012ba6:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012bab:	ff d0                	call   *%rax
ffffffff80012bad:	eb cc                	jmp    ffffffff80012b7b <_vsnprintf+0x113b>
ffffffff80012baf:	eb 00                	jmp    ffffffff80012bb1 <_vsnprintf+0x1171>
ffffffff80012bb1:	eb 00                	jmp    ffffffff80012bb3 <_vsnprintf+0x1173>
ffffffff80012bb3:	48 8b 85 58 ff ff ff 	mov    -0xa8(%rbp),%rax
ffffffff80012bba:	0f b7 08             	movzwl (%rax),%ecx
ffffffff80012bbd:	31 c0                	xor    %eax,%eax
ffffffff80012bbf:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012bc2:	74 21                	je     ffffffff80012be5 <_vsnprintf+0x11a5>
ffffffff80012bc4:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80012bc7:	81 e1 00 04 00 00    	and    $0x400,%ecx
ffffffff80012bcd:	b0 01                	mov    $0x1,%al
ffffffff80012bcf:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012bd2:	74 11                	je     ffffffff80012be5 <_vsnprintf+0x11a5>
ffffffff80012bd4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80012bd7:	89 c1                	mov    %eax,%ecx
ffffffff80012bd9:	83 c1 ff             	add    $0xffffffff,%ecx
ffffffff80012bdc:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff80012bdf:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012be2:	0f 95 c0             	setne  %al
ffffffff80012be5:	a8 01                	test   $0x1,%al
ffffffff80012be7:	75 02                	jne    ffffffff80012beb <_vsnprintf+0x11ab>
ffffffff80012be9:	eb 3b                	jmp    ffffffff80012c26 <_vsnprintf+0x11e6>
ffffffff80012beb:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012bef:	48 8b 8d 58 ff ff ff 	mov    -0xa8(%rbp),%rcx
ffffffff80012bf6:	48 89 ca             	mov    %rcx,%rdx
ffffffff80012bf9:	48 83 c2 02          	add    $0x2,%rdx
ffffffff80012bfd:	48 89 95 58 ff ff ff 	mov    %rdx,-0xa8(%rbp)
ffffffff80012c04:	66 8b 39             	mov    (%rcx),%di
ffffffff80012c07:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012c0b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012c0f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012c12:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012c16:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012c1a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012c1e:	40 0f be ff          	movsbl %dil,%edi
ffffffff80012c22:	ff d0                	call   *%rax
ffffffff80012c24:	eb 8d                	jmp    ffffffff80012bb3 <_vsnprintf+0x1173>
ffffffff80012c26:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012c29:	83 e0 02             	and    $0x2,%eax
ffffffff80012c2c:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012c2f:	74 38                	je     ffffffff80012c69 <_vsnprintf+0x1229>
ffffffff80012c31:	eb 00                	jmp    ffffffff80012c33 <_vsnprintf+0x11f3>
ffffffff80012c33:	8b 45 98             	mov    -0x68(%rbp),%eax
ffffffff80012c36:	89 c1                	mov    %eax,%ecx
ffffffff80012c38:	83 c1 01             	add    $0x1,%ecx
ffffffff80012c3b:	89 4d 98             	mov    %ecx,-0x68(%rbp)
ffffffff80012c3e:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff80012c41:	73 24                	jae    ffffffff80012c67 <_vsnprintf+0x1227>
ffffffff80012c43:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012c47:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012c4b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012c4f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012c52:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012c56:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012c5a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012c5e:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012c63:	ff d0                	call   *%rax
ffffffff80012c65:	eb cc                	jmp    ffffffff80012c33 <_vsnprintf+0x11f3>
ffffffff80012c67:	eb 00                	jmp    ffffffff80012c69 <_vsnprintf+0x1229>
ffffffff80012c69:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80012c6d:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012c71:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012c75:	e9 15 03 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012c7a:	c7 45 d4 10 00 00 00 	movl   $0x10,-0x2c(%rbp)
ffffffff80012c81:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012c84:	83 c8 21             	or     $0x21,%eax
ffffffff80012c87:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80012c8a:	c6 85 7b ff ff ff 01 	movb   $0x1,-0x85(%rbp)
ffffffff80012c91:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80012c95:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012c99:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012c9d:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012ca1:	4c 8b 4d b0          	mov    -0x50(%rbp),%r9
ffffffff80012ca5:	41 8b 01             	mov    (%r9),%eax
ffffffff80012ca8:	83 f8 28             	cmp    $0x28,%eax
ffffffff80012cab:	77 0f                	ja     ffffffff80012cbc <_vsnprintf+0x127c>
ffffffff80012cad:	4c 63 c0             	movslq %eax,%r8
ffffffff80012cb0:	4d 03 41 10          	add    0x10(%r9),%r8
ffffffff80012cb4:	83 c0 08             	add    $0x8,%eax
ffffffff80012cb7:	41 89 01             	mov    %eax,(%r9)
ffffffff80012cba:	eb 0f                	jmp    ffffffff80012ccb <_vsnprintf+0x128b>
ffffffff80012cbc:	4d 8b 41 08          	mov    0x8(%r9),%r8
ffffffff80012cc0:	4c 89 c0             	mov    %r8,%rax
ffffffff80012cc3:	48 83 c0 08          	add    $0x8,%rax
ffffffff80012cc7:	49 89 41 08          	mov    %rax,0x8(%r9)
ffffffff80012ccb:	4d 8b 00             	mov    (%r8),%r8
ffffffff80012cce:	44 8b 4d e4          	mov    -0x1c(%rbp),%r9d
ffffffff80012cd2:	44 8b 55 d4          	mov    -0x2c(%rbp),%r10d
ffffffff80012cd6:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012cd9:	31 db                	xor    %ebx,%ebx
ffffffff80012cdb:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80012cdf:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff80012ce4:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
ffffffff80012ce9:	48 c7 04 24 10 00 00 	movq   $0x10,(%rsp)
ffffffff80012cf0:	00 
ffffffff80012cf1:	45 31 c9             	xor    %r9d,%r9d
ffffffff80012cf4:	e8 87 03 00 00       	call   ffffffff80013080 <_ntoa_long_long>
ffffffff80012cf9:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012cfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80012d01:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012d05:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012d09:	e9 81 02 00 00       	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012d0e:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80012d12:	8b 11                	mov    (%rcx),%edx
ffffffff80012d14:	83 fa 28             	cmp    $0x28,%edx
ffffffff80012d17:	77 0e                	ja     ffffffff80012d27 <_vsnprintf+0x12e7>
ffffffff80012d19:	48 63 c2             	movslq %edx,%rax
ffffffff80012d1c:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80012d20:	83 c2 08             	add    $0x8,%edx
ffffffff80012d23:	89 11                	mov    %edx,(%rcx)
ffffffff80012d25:	eb 0f                	jmp    ffffffff80012d36 <_vsnprintf+0x12f6>
ffffffff80012d27:	48 8b 41 08          	mov    0x8(%rcx),%rax
ffffffff80012d2b:	48 89 c2             	mov    %rax,%rdx
ffffffff80012d2e:	48 83 c2 08          	add    $0x8,%rdx
ffffffff80012d32:	48 89 51 08          	mov    %rdx,0x8(%rcx)
ffffffff80012d36:	48 8b 00             	mov    (%rax),%rax
ffffffff80012d39:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
ffffffff80012d40:	48 8b bd 20 ff ff ff 	mov    -0xe0(%rbp),%rdi
ffffffff80012d47:	e8 94 f0 fe ff       	call   ffffffff80001de0 <debug_lookup_symbol>
ffffffff80012d4c:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
ffffffff80012d53:	48 83 bd 28 ff ff ff 	cmpq   $0x0,-0xd8(%rbp)
ffffffff80012d5a:	00 
ffffffff80012d5b:	74 17                	je     ffffffff80012d74 <_vsnprintf+0x1334>
ffffffff80012d5d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
ffffffff80012d64:	48 8b 8d 28 ff ff ff 	mov    -0xd8(%rbp),%rcx
ffffffff80012d6b:	48 2b 01             	sub    (%rcx),%rax
ffffffff80012d6e:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80012d72:	74 5b                	je     ffffffff80012dcf <_vsnprintf+0x138f>
ffffffff80012d74:	c7 45 d4 10 00 00 00 	movl   $0x10,-0x2c(%rbp)
ffffffff80012d7b:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012d7e:	83 c8 21             	or     $0x21,%eax
ffffffff80012d81:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80012d84:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80012d88:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012d8c:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012d90:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012d94:	4c 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%r8
ffffffff80012d9b:	44 8b 4d e4          	mov    -0x1c(%rbp),%r9d
ffffffff80012d9f:	44 8b 55 d4          	mov    -0x2c(%rbp),%r10d
ffffffff80012da3:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012da6:	31 db                	xor    %ebx,%ebx
ffffffff80012da8:	89 44 24 18          	mov    %eax,0x18(%rsp)
ffffffff80012dac:	44 89 54 24 10       	mov    %r10d,0x10(%rsp)
ffffffff80012db1:	44 89 4c 24 08       	mov    %r9d,0x8(%rsp)
ffffffff80012db6:	48 c7 04 24 10 00 00 	movq   $0x10,(%rsp)
ffffffff80012dbd:	00 
ffffffff80012dbe:	45 31 c9             	xor    %r9d,%r9d
ffffffff80012dc1:	e8 fa 03 00 00       	call   ffffffff800131c0 <_ntoa_long>
ffffffff80012dc6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80012dca:	e9 50 01 00 00       	jmp    ffffffff80012f1f <_vsnprintf+0x14df>
ffffffff80012dcf:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
ffffffff80012dd6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80012dda:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
ffffffff80012de1:	48 8b bd 48 ff ff ff 	mov    -0xb8(%rbp),%rdi
ffffffff80012de8:	83 7d e4 00          	cmpl   $0x0,-0x1c(%rbp)
ffffffff80012dec:	74 05                	je     ffffffff80012df3 <_vsnprintf+0x13b3>
ffffffff80012dee:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff80012df1:	eb 09                	jmp    ffffffff80012dfc <_vsnprintf+0x13bc>
ffffffff80012df3:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80012dfa:	eb 00                	jmp    ffffffff80012dfc <_vsnprintf+0x13bc>
ffffffff80012dfc:	e8 ff 04 00 00       	call   ffffffff80013300 <_strnlen_s>
ffffffff80012e01:	89 45 a8             	mov    %eax,-0x58(%rbp)
ffffffff80012e04:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012e07:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80012e0c:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012e0f:	74 13                	je     ffffffff80012e24 <_vsnprintf+0x13e4>
ffffffff80012e11:	8b 45 a8             	mov    -0x58(%rbp),%eax
ffffffff80012e14:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
ffffffff80012e17:	73 05                	jae    ffffffff80012e1e <_vsnprintf+0x13de>
ffffffff80012e19:	8b 45 a8             	mov    -0x58(%rbp),%eax
ffffffff80012e1c:	eb 03                	jmp    ffffffff80012e21 <_vsnprintf+0x13e1>
ffffffff80012e1e:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80012e21:	89 45 a8             	mov    %eax,-0x58(%rbp)
ffffffff80012e24:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012e27:	83 e0 02             	and    $0x2,%eax
ffffffff80012e2a:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012e2d:	75 38                	jne    ffffffff80012e67 <_vsnprintf+0x1427>
ffffffff80012e2f:	eb 00                	jmp    ffffffff80012e31 <_vsnprintf+0x13f1>
ffffffff80012e31:	8b 45 a8             	mov    -0x58(%rbp),%eax
ffffffff80012e34:	89 c1                	mov    %eax,%ecx
ffffffff80012e36:	83 c1 01             	add    $0x1,%ecx
ffffffff80012e39:	89 4d a8             	mov    %ecx,-0x58(%rbp)
ffffffff80012e3c:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff80012e3f:	73 24                	jae    ffffffff80012e65 <_vsnprintf+0x1425>
ffffffff80012e41:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012e45:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012e49:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012e4d:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012e50:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012e54:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012e58:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012e5c:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012e61:	ff d0                	call   *%rax
ffffffff80012e63:	eb cc                	jmp    ffffffff80012e31 <_vsnprintf+0x13f1>
ffffffff80012e65:	eb 00                	jmp    ffffffff80012e67 <_vsnprintf+0x1427>
ffffffff80012e67:	eb 00                	jmp    ffffffff80012e69 <_vsnprintf+0x1429>
ffffffff80012e69:	48 8b 85 48 ff ff ff 	mov    -0xb8(%rbp),%rax
ffffffff80012e70:	0f be 08             	movsbl (%rax),%ecx
ffffffff80012e73:	31 c0                	xor    %eax,%eax
ffffffff80012e75:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012e78:	74 21                	je     ffffffff80012e9b <_vsnprintf+0x145b>
ffffffff80012e7a:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80012e7d:	81 e1 00 04 00 00    	and    $0x400,%ecx
ffffffff80012e83:	b0 01                	mov    $0x1,%al
ffffffff80012e85:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80012e88:	74 11                	je     ffffffff80012e9b <_vsnprintf+0x145b>
ffffffff80012e8a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80012e8d:	89 c1                	mov    %eax,%ecx
ffffffff80012e8f:	83 c1 ff             	add    $0xffffffff,%ecx
ffffffff80012e92:	89 4d e4             	mov    %ecx,-0x1c(%rbp)
ffffffff80012e95:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012e98:	0f 95 c0             	setne  %al
ffffffff80012e9b:	a8 01                	test   $0x1,%al
ffffffff80012e9d:	75 02                	jne    ffffffff80012ea1 <_vsnprintf+0x1461>
ffffffff80012e9f:	eb 39                	jmp    ffffffff80012eda <_vsnprintf+0x149a>
ffffffff80012ea1:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012ea5:	48 8b 8d 48 ff ff ff 	mov    -0xb8(%rbp),%rcx
ffffffff80012eac:	48 89 ca             	mov    %rcx,%rdx
ffffffff80012eaf:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80012eb3:	48 89 95 48 ff ff ff 	mov    %rdx,-0xb8(%rbp)
ffffffff80012eba:	8a 19                	mov    (%rcx),%bl
ffffffff80012ebc:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012ec0:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012ec4:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012ec7:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012ecb:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012ecf:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012ed3:	0f be fb             	movsbl %bl,%edi
ffffffff80012ed6:	ff d0                	call   *%rax
ffffffff80012ed8:	eb 8f                	jmp    ffffffff80012e69 <_vsnprintf+0x1429>
ffffffff80012eda:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80012edd:	83 e0 02             	and    $0x2,%eax
ffffffff80012ee0:	83 f8 00             	cmp    $0x0,%eax
ffffffff80012ee3:	74 38                	je     ffffffff80012f1d <_vsnprintf+0x14dd>
ffffffff80012ee5:	eb 00                	jmp    ffffffff80012ee7 <_vsnprintf+0x14a7>
ffffffff80012ee7:	8b 45 a8             	mov    -0x58(%rbp),%eax
ffffffff80012eea:	89 c1                	mov    %eax,%ecx
ffffffff80012eec:	83 c1 01             	add    $0x1,%ecx
ffffffff80012eef:	89 4d a8             	mov    %ecx,-0x58(%rbp)
ffffffff80012ef2:	3b 45 d4             	cmp    -0x2c(%rbp),%eax
ffffffff80012ef5:	73 24                	jae    ffffffff80012f1b <_vsnprintf+0x14db>
ffffffff80012ef7:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012efb:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012eff:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012f03:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012f06:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012f0a:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012f0e:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012f12:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80012f17:	ff d0                	call   *%rax
ffffffff80012f19:	eb cc                	jmp    ffffffff80012ee7 <_vsnprintf+0x14a7>
ffffffff80012f1b:	eb 00                	jmp    ffffffff80012f1d <_vsnprintf+0x14dd>
ffffffff80012f1d:	eb 00                	jmp    ffffffff80012f1f <_vsnprintf+0x14df>
ffffffff80012f1f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80012f23:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012f27:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012f2b:	eb 62                	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012f2d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012f31:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012f35:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012f39:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012f3c:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012f40:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012f44:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012f48:	bf 25 00 00 00       	mov    $0x25,%edi
ffffffff80012f4d:	ff d0                	call   *%rax
ffffffff80012f4f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80012f53:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012f57:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012f5b:	eb 32                	jmp    ffffffff80012f8f <_vsnprintf+0x154f>
ffffffff80012f5d:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012f61:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80012f65:	8a 19                	mov    (%rcx),%bl
ffffffff80012f67:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012f6b:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012f6f:	48 89 d1             	mov    %rdx,%rcx
ffffffff80012f72:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80012f76:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff80012f7a:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012f7e:	0f be fb             	movsbl %bl,%edi
ffffffff80012f81:	ff d0                	call   *%rax
ffffffff80012f83:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80012f87:	48 83 c0 01          	add    $0x1,%rax
ffffffff80012f8b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80012f8f:	e9 31 eb ff ff       	jmp    ffffffff80011ac5 <_vsnprintf+0x85>
ffffffff80012f94:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff80012f98:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80012f9c:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80012fa0:	48 3b 4d c8          	cmp    -0x38(%rbp),%rcx
ffffffff80012fa4:	73 06                	jae    ffffffff80012fac <_vsnprintf+0x156c>
ffffffff80012fa6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80012faa:	eb 08                	jmp    ffffffff80012fb4 <_vsnprintf+0x1574>
ffffffff80012fac:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff80012fb0:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff80012fb4:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff80012fb8:	31 ff                	xor    %edi,%edi
ffffffff80012fba:	ff d0                	call   *%rax
ffffffff80012fbc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80012fc0:	48 81 c4 18 01 00 00 	add    $0x118,%rsp
ffffffff80012fc7:	5b                   	pop    %rbx
ffffffff80012fc8:	5d                   	pop    %rbp
ffffffff80012fc9:	c3                   	ret    
ffffffff80012fca:	cc                   	int3   
ffffffff80012fcb:	cc                   	int3   
ffffffff80012fcc:	cc                   	int3   
ffffffff80012fcd:	cc                   	int3   
ffffffff80012fce:	cc                   	int3   
ffffffff80012fcf:	cc                   	int3   

ffffffff80012fd0 <_out_null>:
ffffffff80012fd0:	55                   	push   %rbp
ffffffff80012fd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80012fd4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80012fd8:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff80012fdc:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80012fe0:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
ffffffff80012fe4:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80012fe8:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80012fec:	5d                   	pop    %rbp
ffffffff80012fed:	c3                   	ret    
ffffffff80012fee:	cc                   	int3   
ffffffff80012fef:	cc                   	int3   

ffffffff80012ff0 <_is_digit>:
ffffffff80012ff0:	55                   	push   %rbp
ffffffff80012ff1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80012ff4:	48 83 ec 01          	sub    $0x1,%rsp
ffffffff80012ff8:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff80012ffc:	0f be 4d ff          	movsbl -0x1(%rbp),%ecx
ffffffff80013000:	31 c0                	xor    %eax,%eax
ffffffff80013002:	83 f9 30             	cmp    $0x30,%ecx
ffffffff80013005:	7c 0a                	jl     ffffffff80013011 <_is_digit+0x21>
ffffffff80013007:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
ffffffff8001300b:	83 f8 39             	cmp    $0x39,%eax
ffffffff8001300e:	0f 9e c0             	setle  %al
ffffffff80013011:	24 01                	and    $0x1,%al
ffffffff80013013:	0f b6 c0             	movzbl %al,%eax
ffffffff80013016:	48 83 c4 01          	add    $0x1,%rsp
ffffffff8001301a:	5d                   	pop    %rbp
ffffffff8001301b:	c3                   	ret    
ffffffff8001301c:	cc                   	int3   
ffffffff8001301d:	cc                   	int3   
ffffffff8001301e:	cc                   	int3   
ffffffff8001301f:	cc                   	int3   

ffffffff80013020 <_atoi>:
ffffffff80013020:	55                   	push   %rbp
ffffffff80013021:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013024:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80013028:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8001302c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80013033:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013037:	48 8b 00             	mov    (%rax),%rax
ffffffff8001303a:	8a 00                	mov    (%rax),%al
ffffffff8001303c:	0f be f8             	movsbl %al,%edi
ffffffff8001303f:	e8 ac ff ff ff       	call   ffffffff80012ff0 <_is_digit>
ffffffff80013044:	a8 01                	test   $0x1,%al
ffffffff80013046:	75 02                	jne    ffffffff8001304a <_atoi+0x2a>
ffffffff80013048:	eb 22                	jmp    ffffffff8001306c <_atoi+0x4c>
ffffffff8001304a:	6b 45 fc 0a          	imul   $0xa,-0x4(%rbp),%eax
ffffffff8001304e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80013052:	48 8b 11             	mov    (%rcx),%rdx
ffffffff80013055:	48 89 d6             	mov    %rdx,%rsi
ffffffff80013058:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8001305c:	48 89 31             	mov    %rsi,(%rcx)
ffffffff8001305f:	0f be 0a             	movsbl (%rdx),%ecx
ffffffff80013062:	83 e9 30             	sub    $0x30,%ecx
ffffffff80013065:	01 c8                	add    %ecx,%eax
ffffffff80013067:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8001306a:	eb c7                	jmp    ffffffff80013033 <_atoi+0x13>
ffffffff8001306c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001306f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80013073:	5d                   	pop    %rbp
ffffffff80013074:	c3                   	ret    
ffffffff80013075:	cc                   	int3   
ffffffff80013076:	cc                   	int3   
ffffffff80013077:	cc                   	int3   
ffffffff80013078:	cc                   	int3   
ffffffff80013079:	cc                   	int3   
ffffffff8001307a:	cc                   	int3   
ffffffff8001307b:	cc                   	int3   
ffffffff8001307c:	cc                   	int3   
ffffffff8001307d:	cc                   	int3   
ffffffff8001307e:	cc                   	int3   
ffffffff8001307f:	cc                   	int3   

ffffffff80013080 <_ntoa_long_long>:
ffffffff80013080:	55                   	push   %rbp
ffffffff80013081:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013084:	41 56                	push   %r14
ffffffff80013086:	53                   	push   %rbx
ffffffff80013087:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
ffffffff8001308e:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff80013091:	8b 45 20             	mov    0x20(%rbp),%eax
ffffffff80013094:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff80013097:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8001309b:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff8001309f:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff800130a3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff800130a7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff800130ab:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
ffffffff800130af:	41 80 e1 01          	and    $0x1,%r9b
ffffffff800130b3:	44 88 4d ee          	mov    %r9b,-0x12(%rbp)
ffffffff800130b7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff800130be:	00 
ffffffff800130bf:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff800130c4:	75 09                	jne    ffffffff800130cf <_ntoa_long_long+0x4f>
ffffffff800130c6:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff800130c9:	83 e0 ef             	and    $0xffffffef,%eax
ffffffff800130cc:	89 45 28             	mov    %eax,0x28(%rbp)
ffffffff800130cf:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff800130d2:	25 00 04 00 00       	and    $0x400,%eax
ffffffff800130d7:	83 f8 00             	cmp    $0x0,%eax
ffffffff800130da:	74 07                	je     ffffffff800130e3 <_ntoa_long_long+0x63>
ffffffff800130dc:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff800130e1:	74 7e                	je     ffffffff80013161 <_ntoa_long_long+0xe1>
ffffffff800130e3:	eb 00                	jmp    ffffffff800130e5 <_ntoa_long_long+0x65>
ffffffff800130e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800130e9:	31 d2                	xor    %edx,%edx
ffffffff800130eb:	48 f7 75 10          	divq   0x10(%rbp)
ffffffff800130ef:	88 55 ef             	mov    %dl,-0x11(%rbp)
ffffffff800130f2:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
ffffffff800130f6:	83 f8 0a             	cmp    $0xa,%eax
ffffffff800130f9:	7d 09                	jge    ffffffff80013104 <_ntoa_long_long+0x84>
ffffffff800130fb:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
ffffffff800130ff:	83 c0 30             	add    $0x30,%eax
ffffffff80013102:	eb 1f                	jmp    ffffffff80013123 <_ntoa_long_long+0xa3>
ffffffff80013104:	8b 4d 28             	mov    0x28(%rbp),%ecx
ffffffff80013107:	83 e1 20             	and    $0x20,%ecx
ffffffff8001310a:	b8 61 00 00 00       	mov    $0x61,%eax
ffffffff8001310f:	ba 41 00 00 00       	mov    $0x41,%edx
ffffffff80013114:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80013117:	0f 45 c2             	cmovne %edx,%eax
ffffffff8001311a:	0f be 4d ef          	movsbl -0x11(%rbp),%ecx
ffffffff8001311e:	01 c8                	add    %ecx,%eax
ffffffff80013120:	83 e8 0a             	sub    $0xa,%eax
ffffffff80013123:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80013127:	48 89 ca             	mov    %rcx,%rdx
ffffffff8001312a:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8001312e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80013132:	88 84 0d 70 ff ff ff 	mov    %al,-0x90(%rbp,%rcx,1)
ffffffff80013139:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
ffffffff8001313d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80013141:	31 d2                	xor    %edx,%edx
ffffffff80013143:	48 f7 f1             	div    %rcx
ffffffff80013146:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001314a:	31 c0                	xor    %eax,%eax
ffffffff8001314c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80013151:	74 08                	je     ffffffff8001315b <_ntoa_long_long+0xdb>
ffffffff80013153:	48 83 7d d8 40       	cmpq   $0x40,-0x28(%rbp)
ffffffff80013158:	0f 92 c0             	setb   %al
ffffffff8001315b:	a8 01                	test   $0x1,%al
ffffffff8001315d:	75 86                	jne    ffffffff800130e5 <_ntoa_long_long+0x65>
ffffffff8001315f:	eb 00                	jmp    ffffffff80013161 <_ntoa_long_long+0xe1>
ffffffff80013161:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff80013165:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80013169:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff8001316d:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff80013171:	4c 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%r8
ffffffff80013178:	4c 8b 4d d8          	mov    -0x28(%rbp),%r9
ffffffff8001317c:	44 8a 55 ee          	mov    -0x12(%rbp),%r10b
ffffffff80013180:	4c 8b 5d 10          	mov    0x10(%rbp),%r11
ffffffff80013184:	44 8b 75 18          	mov    0x18(%rbp),%r14d
ffffffff80013188:	8b 5d 20             	mov    0x20(%rbp),%ebx
ffffffff8001318b:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff8001318e:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff80013192:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff80013196:	44 89 74 24 10       	mov    %r14d,0x10(%rsp)
ffffffff8001319b:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
ffffffff800131a0:	41 0f b6 c2          	movzbl %r10b,%eax
ffffffff800131a4:	83 e0 01             	and    $0x1,%eax
ffffffff800131a7:	89 04 24             	mov    %eax,(%rsp)
ffffffff800131aa:	e8 31 02 00 00       	call   ffffffff800133e0 <_ntoa_format>
ffffffff800131af:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
ffffffff800131b6:	5b                   	pop    %rbx
ffffffff800131b7:	41 5e                	pop    %r14
ffffffff800131b9:	5d                   	pop    %rbp
ffffffff800131ba:	c3                   	ret    
ffffffff800131bb:	cc                   	int3   
ffffffff800131bc:	cc                   	int3   
ffffffff800131bd:	cc                   	int3   
ffffffff800131be:	cc                   	int3   
ffffffff800131bf:	cc                   	int3   

ffffffff800131c0 <_ntoa_long>:
ffffffff800131c0:	55                   	push   %rbp
ffffffff800131c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800131c4:	41 56                	push   %r14
ffffffff800131c6:	53                   	push   %rbx
ffffffff800131c7:	48 81 ec b0 00 00 00 	sub    $0xb0,%rsp
ffffffff800131ce:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff800131d1:	8b 45 20             	mov    0x20(%rbp),%eax
ffffffff800131d4:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff800131d7:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff800131db:	48 89 7d b8          	mov    %rdi,-0x48(%rbp)
ffffffff800131df:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff800131e3:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff800131e7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff800131eb:	4c 89 45 e0          	mov    %r8,-0x20(%rbp)
ffffffff800131ef:	41 80 e1 01          	and    $0x1,%r9b
ffffffff800131f3:	44 88 4d ee          	mov    %r9b,-0x12(%rbp)
ffffffff800131f7:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff800131fe:	00 
ffffffff800131ff:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80013204:	75 09                	jne    ffffffff8001320f <_ntoa_long+0x4f>
ffffffff80013206:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff80013209:	83 e0 ef             	and    $0xffffffef,%eax
ffffffff8001320c:	89 45 28             	mov    %eax,0x28(%rbp)
ffffffff8001320f:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff80013212:	25 00 04 00 00       	and    $0x400,%eax
ffffffff80013217:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001321a:	74 07                	je     ffffffff80013223 <_ntoa_long+0x63>
ffffffff8001321c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80013221:	74 7e                	je     ffffffff800132a1 <_ntoa_long+0xe1>
ffffffff80013223:	eb 00                	jmp    ffffffff80013225 <_ntoa_long+0x65>
ffffffff80013225:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80013229:	31 d2                	xor    %edx,%edx
ffffffff8001322b:	48 f7 75 10          	divq   0x10(%rbp)
ffffffff8001322f:	88 55 ef             	mov    %dl,-0x11(%rbp)
ffffffff80013232:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
ffffffff80013236:	83 f8 0a             	cmp    $0xa,%eax
ffffffff80013239:	7d 09                	jge    ffffffff80013244 <_ntoa_long+0x84>
ffffffff8001323b:	0f be 45 ef          	movsbl -0x11(%rbp),%eax
ffffffff8001323f:	83 c0 30             	add    $0x30,%eax
ffffffff80013242:	eb 1f                	jmp    ffffffff80013263 <_ntoa_long+0xa3>
ffffffff80013244:	8b 4d 28             	mov    0x28(%rbp),%ecx
ffffffff80013247:	83 e1 20             	and    $0x20,%ecx
ffffffff8001324a:	b8 61 00 00 00       	mov    $0x61,%eax
ffffffff8001324f:	ba 41 00 00 00       	mov    $0x41,%edx
ffffffff80013254:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80013257:	0f 45 c2             	cmovne %edx,%eax
ffffffff8001325a:	0f be 4d ef          	movsbl -0x11(%rbp),%ecx
ffffffff8001325e:	01 c8                	add    %ecx,%eax
ffffffff80013260:	83 e8 0a             	sub    $0xa,%eax
ffffffff80013263:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80013267:	48 89 ca             	mov    %rcx,%rdx
ffffffff8001326a:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8001326e:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80013272:	88 84 0d 70 ff ff ff 	mov    %al,-0x90(%rbp,%rcx,1)
ffffffff80013279:	48 8b 4d 10          	mov    0x10(%rbp),%rcx
ffffffff8001327d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80013281:	31 d2                	xor    %edx,%edx
ffffffff80013283:	48 f7 f1             	div    %rcx
ffffffff80013286:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001328a:	31 c0                	xor    %eax,%eax
ffffffff8001328c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80013291:	74 08                	je     ffffffff8001329b <_ntoa_long+0xdb>
ffffffff80013293:	48 83 7d d8 40       	cmpq   $0x40,-0x28(%rbp)
ffffffff80013298:	0f 92 c0             	setb   %al
ffffffff8001329b:	a8 01                	test   $0x1,%al
ffffffff8001329d:	75 86                	jne    ffffffff80013225 <_ntoa_long+0x65>
ffffffff8001329f:	eb 00                	jmp    ffffffff800132a1 <_ntoa_long+0xe1>
ffffffff800132a1:	48 8b 7d b8          	mov    -0x48(%rbp),%rdi
ffffffff800132a5:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff800132a9:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
ffffffff800132ad:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800132b1:	4c 8d 85 70 ff ff ff 	lea    -0x90(%rbp),%r8
ffffffff800132b8:	4c 8b 4d d8          	mov    -0x28(%rbp),%r9
ffffffff800132bc:	44 8a 55 ee          	mov    -0x12(%rbp),%r10b
ffffffff800132c0:	4c 8b 5d 10          	mov    0x10(%rbp),%r11
ffffffff800132c4:	44 8b 75 18          	mov    0x18(%rbp),%r14d
ffffffff800132c8:	8b 5d 20             	mov    0x20(%rbp),%ebx
ffffffff800132cb:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff800132ce:	89 44 24 20          	mov    %eax,0x20(%rsp)
ffffffff800132d2:	89 5c 24 18          	mov    %ebx,0x18(%rsp)
ffffffff800132d6:	44 89 74 24 10       	mov    %r14d,0x10(%rsp)
ffffffff800132db:	44 89 5c 24 08       	mov    %r11d,0x8(%rsp)
ffffffff800132e0:	41 0f b6 c2          	movzbl %r10b,%eax
ffffffff800132e4:	83 e0 01             	and    $0x1,%eax
ffffffff800132e7:	89 04 24             	mov    %eax,(%rsp)
ffffffff800132ea:	e8 f1 00 00 00       	call   ffffffff800133e0 <_ntoa_format>
ffffffff800132ef:	48 81 c4 b0 00 00 00 	add    $0xb0,%rsp
ffffffff800132f6:	5b                   	pop    %rbx
ffffffff800132f7:	41 5e                	pop    %r14
ffffffff800132f9:	5d                   	pop    %rbp
ffffffff800132fa:	c3                   	ret    
ffffffff800132fb:	cc                   	int3   
ffffffff800132fc:	cc                   	int3   
ffffffff800132fd:	cc                   	int3   
ffffffff800132fe:	cc                   	int3   
ffffffff800132ff:	cc                   	int3   

ffffffff80013300 <_strnlen_s>:
ffffffff80013300:	55                   	push   %rbp
ffffffff80013301:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013304:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80013308:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001330c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80013310:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013314:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80013318:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001331c:	0f be 08             	movsbl (%rax),%ecx
ffffffff8001331f:	31 c0                	xor    %eax,%eax
ffffffff80013321:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80013324:	74 16                	je     ffffffff8001333c <_strnlen_s+0x3c>
ffffffff80013326:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001332a:	48 89 c1             	mov    %rax,%rcx
ffffffff8001332d:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff80013331:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80013335:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80013339:	0f 95 c0             	setne  %al
ffffffff8001333c:	a8 01                	test   $0x1,%al
ffffffff8001333e:	75 02                	jne    ffffffff80013342 <_strnlen_s+0x42>
ffffffff80013340:	eb 10                	jmp    ffffffff80013352 <_strnlen_s+0x52>
ffffffff80013342:	eb 00                	jmp    ffffffff80013344 <_strnlen_s+0x44>
ffffffff80013344:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013348:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001334c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80013350:	eb c6                	jmp    ffffffff80013318 <_strnlen_s+0x18>
ffffffff80013352:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013356:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff8001335a:	48 29 c8             	sub    %rcx,%rax
ffffffff8001335d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80013361:	5d                   	pop    %rbp
ffffffff80013362:	c3                   	ret    
ffffffff80013363:	cc                   	int3   
ffffffff80013364:	cc                   	int3   
ffffffff80013365:	cc                   	int3   
ffffffff80013366:	cc                   	int3   
ffffffff80013367:	cc                   	int3   
ffffffff80013368:	cc                   	int3   
ffffffff80013369:	cc                   	int3   
ffffffff8001336a:	cc                   	int3   
ffffffff8001336b:	cc                   	int3   
ffffffff8001336c:	cc                   	int3   
ffffffff8001336d:	cc                   	int3   
ffffffff8001336e:	cc                   	int3   
ffffffff8001336f:	cc                   	int3   

ffffffff80013370 <_wstrnlen_s>:
ffffffff80013370:	55                   	push   %rbp
ffffffff80013371:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013374:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80013378:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001337c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80013380:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013384:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80013388:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001338c:	0f b7 08             	movzwl (%rax),%ecx
ffffffff8001338f:	31 c0                	xor    %eax,%eax
ffffffff80013391:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80013394:	74 16                	je     ffffffff800133ac <_wstrnlen_s+0x3c>
ffffffff80013396:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001339a:	48 89 c1             	mov    %rax,%rcx
ffffffff8001339d:	48 83 c1 ff          	add    $0xffffffffffffffff,%rcx
ffffffff800133a1:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff800133a5:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800133a9:	0f 95 c0             	setne  %al
ffffffff800133ac:	a8 01                	test   $0x1,%al
ffffffff800133ae:	75 02                	jne    ffffffff800133b2 <_wstrnlen_s+0x42>
ffffffff800133b0:	eb 10                	jmp    ffffffff800133c2 <_wstrnlen_s+0x52>
ffffffff800133b2:	eb 00                	jmp    ffffffff800133b4 <_wstrnlen_s+0x44>
ffffffff800133b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800133b8:	48 83 c0 02          	add    $0x2,%rax
ffffffff800133bc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800133c0:	eb c6                	jmp    ffffffff80013388 <_wstrnlen_s+0x18>
ffffffff800133c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800133c6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800133ca:	48 29 c8             	sub    %rcx,%rax
ffffffff800133cd:	48 c1 f8 01          	sar    $0x1,%rax
ffffffff800133d1:	48 83 c4 18          	add    $0x18,%rsp
ffffffff800133d5:	5d                   	pop    %rbp
ffffffff800133d6:	c3                   	ret    
ffffffff800133d7:	cc                   	int3   
ffffffff800133d8:	cc                   	int3   
ffffffff800133d9:	cc                   	int3   
ffffffff800133da:	cc                   	int3   
ffffffff800133db:	cc                   	int3   
ffffffff800133dc:	cc                   	int3   
ffffffff800133dd:	cc                   	int3   
ffffffff800133de:	cc                   	int3   
ffffffff800133df:	cc                   	int3   

ffffffff800133e0 <_ntoa_format>:
ffffffff800133e0:	55                   	push   %rbp
ffffffff800133e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800133e4:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff800133e8:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff800133eb:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff800133ee:	8b 45 20             	mov    0x20(%rbp),%eax
ffffffff800133f1:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff800133f4:	8a 45 10             	mov    0x10(%rbp),%al
ffffffff800133f7:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff800133fb:	48 89 75 d0          	mov    %rsi,-0x30(%rbp)
ffffffff800133ff:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80013403:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff80013407:	4c 89 45 e8          	mov    %r8,-0x18(%rbp)
ffffffff8001340b:	4c 89 4d f8          	mov    %r9,-0x8(%rbp)
ffffffff8001340f:	24 01                	and    $0x1,%al
ffffffff80013411:	88 45 f7             	mov    %al,-0x9(%rbp)
ffffffff80013414:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff80013417:	83 e0 02             	and    $0x2,%eax
ffffffff8001341a:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001341d:	0f 85 a8 00 00 00    	jne    ffffffff800134cb <_ntoa_format+0xeb>
ffffffff80013423:	83 7d 28 00          	cmpl   $0x0,0x28(%rbp)
ffffffff80013427:	74 25                	je     ffffffff8001344e <_ntoa_format+0x6e>
ffffffff80013429:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff8001342c:	83 e0 01             	and    $0x1,%eax
ffffffff8001342f:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013432:	74 1a                	je     ffffffff8001344e <_ntoa_format+0x6e>
ffffffff80013434:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
ffffffff80013438:	75 0b                	jne    ffffffff80013445 <_ntoa_format+0x65>
ffffffff8001343a:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff8001343d:	83 e0 0c             	and    $0xc,%eax
ffffffff80013440:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013443:	74 09                	je     ffffffff8001344e <_ntoa_format+0x6e>
ffffffff80013445:	8b 45 28             	mov    0x28(%rbp),%eax
ffffffff80013448:	83 c0 ff             	add    $0xffffffff,%eax
ffffffff8001344b:	89 45 28             	mov    %eax,0x28(%rbp)
ffffffff8001344e:	eb 00                	jmp    ffffffff80013450 <_ntoa_format+0x70>
ffffffff80013450:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80013454:	8b 55 20             	mov    0x20(%rbp),%edx
ffffffff80013457:	31 c0                	xor    %eax,%eax
ffffffff80013459:	48 39 d1             	cmp    %rdx,%rcx
ffffffff8001345c:	73 08                	jae    ffffffff80013466 <_ntoa_format+0x86>
ffffffff8001345e:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff80013463:	0f 92 c0             	setb   %al
ffffffff80013466:	a8 01                	test   $0x1,%al
ffffffff80013468:	75 02                	jne    ffffffff8001346c <_ntoa_format+0x8c>
ffffffff8001346a:	eb 19                	jmp    ffffffff80013485 <_ntoa_format+0xa5>
ffffffff8001346c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013470:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80013474:	48 89 ca             	mov    %rcx,%rdx
ffffffff80013477:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8001347b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8001347f:	c6 04 08 30          	movb   $0x30,(%rax,%rcx,1)
ffffffff80013483:	eb cb                	jmp    ffffffff80013450 <_ntoa_format+0x70>
ffffffff80013485:	eb 00                	jmp    ffffffff80013487 <_ntoa_format+0xa7>
ffffffff80013487:	8b 4d 30             	mov    0x30(%rbp),%ecx
ffffffff8001348a:	83 e1 01             	and    $0x1,%ecx
ffffffff8001348d:	31 c0                	xor    %eax,%eax
ffffffff8001348f:	83 f9 00             	cmp    $0x0,%ecx
ffffffff80013492:	74 16                	je     ffffffff800134aa <_ntoa_format+0xca>
ffffffff80013494:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80013498:	8b 55 28             	mov    0x28(%rbp),%edx
ffffffff8001349b:	31 c0                	xor    %eax,%eax
ffffffff8001349d:	48 39 d1             	cmp    %rdx,%rcx
ffffffff800134a0:	73 08                	jae    ffffffff800134aa <_ntoa_format+0xca>
ffffffff800134a2:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff800134a7:	0f 92 c0             	setb   %al
ffffffff800134aa:	a8 01                	test   $0x1,%al
ffffffff800134ac:	75 02                	jne    ffffffff800134b0 <_ntoa_format+0xd0>
ffffffff800134ae:	eb 19                	jmp    ffffffff800134c9 <_ntoa_format+0xe9>
ffffffff800134b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800134b4:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800134b8:	48 89 ca             	mov    %rcx,%rdx
ffffffff800134bb:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800134bf:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800134c3:	c6 04 08 30          	movb   $0x30,(%rax,%rcx,1)
ffffffff800134c7:	eb be                	jmp    ffffffff80013487 <_ntoa_format+0xa7>
ffffffff800134c9:	eb 00                	jmp    ffffffff800134cb <_ntoa_format+0xeb>
ffffffff800134cb:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff800134ce:	83 e0 10             	and    $0x10,%eax
ffffffff800134d1:	83 f8 00             	cmp    $0x0,%eax
ffffffff800134d4:	0f 84 fd 00 00 00    	je     ffffffff800135d7 <_ntoa_format+0x1f7>
ffffffff800134da:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff800134dd:	25 00 04 00 00       	and    $0x400,%eax
ffffffff800134e2:	83 f8 00             	cmp    $0x0,%eax
ffffffff800134e5:	75 46                	jne    ffffffff8001352d <_ntoa_format+0x14d>
ffffffff800134e7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff800134ec:	74 3f                	je     ffffffff8001352d <_ntoa_format+0x14d>
ffffffff800134ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800134f2:	8b 4d 20             	mov    0x20(%rbp),%ecx
ffffffff800134f5:	48 39 c8             	cmp    %rcx,%rax
ffffffff800134f8:	74 0c                	je     ffffffff80013506 <_ntoa_format+0x126>
ffffffff800134fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800134fe:	8b 4d 28             	mov    0x28(%rbp),%ecx
ffffffff80013501:	48 39 c8             	cmp    %rcx,%rax
ffffffff80013504:	75 27                	jne    ffffffff8001352d <_ntoa_format+0x14d>
ffffffff80013506:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001350a:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
ffffffff8001350e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80013512:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80013517:	74 12                	je     ffffffff8001352b <_ntoa_format+0x14b>
ffffffff80013519:	83 7d 18 10          	cmpl   $0x10,0x18(%rbp)
ffffffff8001351d:	75 0c                	jne    ffffffff8001352b <_ntoa_format+0x14b>
ffffffff8001351f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013523:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
ffffffff80013527:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001352b:	eb 00                	jmp    ffffffff8001352d <_ntoa_format+0x14d>
ffffffff8001352d:	83 7d 18 10          	cmpl   $0x10,0x18(%rbp)
ffffffff80013531:	75 2b                	jne    ffffffff8001355e <_ntoa_format+0x17e>
ffffffff80013533:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff80013536:	83 e0 20             	and    $0x20,%eax
ffffffff80013539:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001353c:	75 20                	jne    ffffffff8001355e <_ntoa_format+0x17e>
ffffffff8001353e:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff80013543:	73 19                	jae    ffffffff8001355e <_ntoa_format+0x17e>
ffffffff80013545:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013549:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001354d:	48 89 ca             	mov    %rcx,%rdx
ffffffff80013550:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80013554:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80013558:	c6 04 08 78          	movb   $0x78,(%rax,%rcx,1)
ffffffff8001355c:	eb 59                	jmp    ffffffff800135b7 <_ntoa_format+0x1d7>
ffffffff8001355e:	83 7d 18 10          	cmpl   $0x10,0x18(%rbp)
ffffffff80013562:	75 2b                	jne    ffffffff8001358f <_ntoa_format+0x1af>
ffffffff80013564:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff80013567:	83 e0 20             	and    $0x20,%eax
ffffffff8001356a:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001356d:	74 20                	je     ffffffff8001358f <_ntoa_format+0x1af>
ffffffff8001356f:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff80013574:	73 19                	jae    ffffffff8001358f <_ntoa_format+0x1af>
ffffffff80013576:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001357a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001357e:	48 89 ca             	mov    %rcx,%rdx
ffffffff80013581:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80013585:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff80013589:	c6 04 08 58          	movb   $0x58,(%rax,%rcx,1)
ffffffff8001358d:	eb 26                	jmp    ffffffff800135b5 <_ntoa_format+0x1d5>
ffffffff8001358f:	83 7d 18 02          	cmpl   $0x2,0x18(%rbp)
ffffffff80013593:	75 1e                	jne    ffffffff800135b3 <_ntoa_format+0x1d3>
ffffffff80013595:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff8001359a:	73 17                	jae    ffffffff800135b3 <_ntoa_format+0x1d3>
ffffffff8001359c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800135a0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800135a4:	48 89 ca             	mov    %rcx,%rdx
ffffffff800135a7:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800135ab:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800135af:	c6 04 08 62          	movb   $0x62,(%rax,%rcx,1)
ffffffff800135b3:	eb 00                	jmp    ffffffff800135b5 <_ntoa_format+0x1d5>
ffffffff800135b5:	eb 00                	jmp    ffffffff800135b7 <_ntoa_format+0x1d7>
ffffffff800135b7:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff800135bc:	73 17                	jae    ffffffff800135d5 <_ntoa_format+0x1f5>
ffffffff800135be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800135c2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800135c6:	48 89 ca             	mov    %rcx,%rdx
ffffffff800135c9:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800135cd:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800135d1:	c6 04 08 30          	movb   $0x30,(%rax,%rcx,1)
ffffffff800135d5:	eb 00                	jmp    ffffffff800135d7 <_ntoa_format+0x1f7>
ffffffff800135d7:	48 83 7d f8 40       	cmpq   $0x40,-0x8(%rbp)
ffffffff800135dc:	73 6b                	jae    ffffffff80013649 <_ntoa_format+0x269>
ffffffff800135de:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
ffffffff800135e2:	74 19                	je     ffffffff800135fd <_ntoa_format+0x21d>
ffffffff800135e4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800135e8:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800135ec:	48 89 ca             	mov    %rcx,%rdx
ffffffff800135ef:	48 83 c2 01          	add    $0x1,%rdx
ffffffff800135f3:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800135f7:	c6 04 08 2d          	movb   $0x2d,(%rax,%rcx,1)
ffffffff800135fb:	eb 4a                	jmp    ffffffff80013647 <_ntoa_format+0x267>
ffffffff800135fd:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff80013600:	83 e0 04             	and    $0x4,%eax
ffffffff80013603:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013606:	74 19                	je     ffffffff80013621 <_ntoa_format+0x241>
ffffffff80013608:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001360c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80013610:	48 89 ca             	mov    %rcx,%rdx
ffffffff80013613:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80013617:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8001361b:	c6 04 08 2b          	movb   $0x2b,(%rax,%rcx,1)
ffffffff8001361f:	eb 24                	jmp    ffffffff80013645 <_ntoa_format+0x265>
ffffffff80013621:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff80013624:	83 e0 08             	and    $0x8,%eax
ffffffff80013627:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001362a:	74 17                	je     ffffffff80013643 <_ntoa_format+0x263>
ffffffff8001362c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013630:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80013634:	48 89 ca             	mov    %rcx,%rdx
ffffffff80013637:	48 83 c2 01          	add    $0x1,%rdx
ffffffff8001363b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8001363f:	c6 04 08 20          	movb   $0x20,(%rax,%rcx,1)
ffffffff80013643:	eb 00                	jmp    ffffffff80013645 <_ntoa_format+0x265>
ffffffff80013645:	eb 00                	jmp    ffffffff80013647 <_ntoa_format+0x267>
ffffffff80013647:	eb 00                	jmp    ffffffff80013649 <_ntoa_format+0x269>
ffffffff80013649:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff8001364d:	48 8b 75 d0          	mov    -0x30(%rbp),%rsi
ffffffff80013651:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80013655:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80013659:	4c 8b 45 e8          	mov    -0x18(%rbp),%r8
ffffffff8001365d:	4c 8b 4d f8          	mov    -0x8(%rbp),%r9
ffffffff80013661:	44 8b 55 28          	mov    0x28(%rbp),%r10d
ffffffff80013665:	8b 45 30             	mov    0x30(%rbp),%eax
ffffffff80013668:	89 44 24 08          	mov    %eax,0x8(%rsp)
ffffffff8001366c:	44 89 14 24          	mov    %r10d,(%rsp)
ffffffff80013670:	e8 0b 00 00 00       	call   ffffffff80013680 <_out_rev>
ffffffff80013675:	48 83 c4 50          	add    $0x50,%rsp
ffffffff80013679:	5d                   	pop    %rbp
ffffffff8001367a:	c3                   	ret    
ffffffff8001367b:	cc                   	int3   
ffffffff8001367c:	cc                   	int3   
ffffffff8001367d:	cc                   	int3   
ffffffff8001367e:	cc                   	int3   
ffffffff8001367f:	cc                   	int3   

ffffffff80013680 <_out_rev>:
ffffffff80013680:	55                   	push   %rbp
ffffffff80013681:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013684:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80013688:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff8001368b:	8b 45 10             	mov    0x10(%rbp),%eax
ffffffff8001368e:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff80013692:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff80013696:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8001369a:	48 89 4d e0          	mov    %rcx,-0x20(%rbp)
ffffffff8001369e:	4c 89 45 c0          	mov    %r8,-0x40(%rbp)
ffffffff800136a2:	4c 89 4d f0          	mov    %r9,-0x10(%rbp)
ffffffff800136a6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800136aa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff800136ae:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff800136b1:	83 e0 02             	and    $0x2,%eax
ffffffff800136b4:	83 f8 00             	cmp    $0x0,%eax
ffffffff800136b7:	75 51                	jne    ffffffff8001370a <_out_rev+0x8a>
ffffffff800136b9:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff800136bc:	83 e0 01             	and    $0x1,%eax
ffffffff800136bf:	83 f8 00             	cmp    $0x0,%eax
ffffffff800136c2:	75 46                	jne    ffffffff8001370a <_out_rev+0x8a>
ffffffff800136c4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800136c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800136cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800136d0:	8b 4d 10             	mov    0x10(%rbp),%ecx
ffffffff800136d3:	48 39 c8             	cmp    %rcx,%rax
ffffffff800136d6:	73 30                	jae    ffffffff80013708 <_out_rev+0x88>
ffffffff800136d8:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800136dc:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff800136e0:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff800136e4:	48 89 d1             	mov    %rdx,%rcx
ffffffff800136e7:	48 83 c1 01          	add    $0x1,%rcx
ffffffff800136eb:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff800136ef:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800136f3:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff800136f8:	ff d0                	call   *%rax
ffffffff800136fa:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800136fe:	48 83 c0 01          	add    $0x1,%rax
ffffffff80013702:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80013706:	eb c4                	jmp    ffffffff800136cc <_out_rev+0x4c>
ffffffff80013708:	eb 00                	jmp    ffffffff8001370a <_out_rev+0x8a>
ffffffff8001370a:	eb 00                	jmp    ffffffff8001370c <_out_rev+0x8c>
ffffffff8001370c:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80013711:	74 3a                	je     ffffffff8001374d <_out_rev+0xcd>
ffffffff80013713:	4c 8b 45 d0          	mov    -0x30(%rbp),%r8
ffffffff80013717:	48 8b 4d c0          	mov    -0x40(%rbp),%rcx
ffffffff8001371b:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8001371f:	48 89 d6             	mov    %rdx,%rsi
ffffffff80013722:	48 83 c6 ff          	add    $0xffffffffffffffff,%rsi
ffffffff80013726:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff8001372a:	8a 44 11 ff          	mov    -0x1(%rcx,%rdx,1),%al
ffffffff8001372e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80013732:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80013736:	48 89 d1             	mov    %rdx,%rcx
ffffffff80013739:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8001373d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff80013741:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80013745:	0f be f8             	movsbl %al,%edi
ffffffff80013748:	41 ff d0             	call   *%r8
ffffffff8001374b:	eb bf                	jmp    ffffffff8001370c <_out_rev+0x8c>
ffffffff8001374d:	8b 45 18             	mov    0x18(%rbp),%eax
ffffffff80013750:	83 e0 02             	and    $0x2,%eax
ffffffff80013753:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013756:	74 38                	je     ffffffff80013790 <_out_rev+0x110>
ffffffff80013758:	eb 00                	jmp    ffffffff8001375a <_out_rev+0xda>
ffffffff8001375a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001375e:	48 2b 45 c8          	sub    -0x38(%rbp),%rax
ffffffff80013762:	8b 4d 10             	mov    0x10(%rbp),%ecx
ffffffff80013765:	48 39 c8             	cmp    %rcx,%rax
ffffffff80013768:	73 24                	jae    ffffffff8001378e <_out_rev+0x10e>
ffffffff8001376a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001376e:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff80013772:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff80013776:	48 89 d1             	mov    %rdx,%rcx
ffffffff80013779:	48 83 c1 01          	add    $0x1,%rcx
ffffffff8001377d:	48 89 4d f8          	mov    %rcx,-0x8(%rbp)
ffffffff80013781:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80013785:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff8001378a:	ff d0                	call   *%rax
ffffffff8001378c:	eb cc                	jmp    ffffffff8001375a <_out_rev+0xda>
ffffffff8001378e:	eb 00                	jmp    ffffffff80013790 <_out_rev+0x110>
ffffffff80013790:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013794:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80013798:	5d                   	pop    %rbp
ffffffff80013799:	c3                   	ret    
ffffffff8001379a:	cc                   	int3   
ffffffff8001379b:	cc                   	int3   
ffffffff8001379c:	cc                   	int3   
ffffffff8001379d:	cc                   	int3   
ffffffff8001379e:	cc                   	int3   
ffffffff8001379f:	cc                   	int3   

ffffffff800137a0 <vsnprintf_>:
ffffffff800137a0:	55                   	push   %rbp
ffffffff800137a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800137a4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800137a8:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff800137ac:	48 c7 45 e8 40 00 00 	movq   $0x40,-0x18(%rbp)
ffffffff800137b3:	00 
ffffffff800137b4:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff800137b8:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800137bc:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff800137c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
ffffffff800137c4:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800137c8:	4c 8b 45 f8          	mov    -0x8(%rbp),%r8
ffffffff800137cc:	48 c7 c7 e0 37 01 80 	mov    $0xffffffff800137e0,%rdi
ffffffff800137d3:	e8 68 e2 ff ff       	call   ffffffff80011a40 <_vsnprintf>
ffffffff800137d8:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800137dc:	5d                   	pop    %rbp
ffffffff800137dd:	c3                   	ret    
ffffffff800137de:	cc                   	int3   
ffffffff800137df:	cc                   	int3   

ffffffff800137e0 <_out_buffer>:
ffffffff800137e0:	55                   	push   %rbp
ffffffff800137e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800137e4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800137e8:	40 88 7d ff          	mov    %dil,-0x1(%rbp)
ffffffff800137ec:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff800137f0:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff800137f4:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff800137f8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800137fc:	48 3b 45 e8          	cmp    -0x18(%rbp),%rax
ffffffff80013800:	73 0e                	jae    ffffffff80013810 <_out_buffer+0x30>
ffffffff80013802:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80013805:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80013809:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff8001380d:	88 04 11             	mov    %al,(%rcx,%rdx,1)
ffffffff80013810:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80013814:	5d                   	pop    %rbp
ffffffff80013815:	c3                   	ret    
ffffffff80013816:	cc                   	int3   
ffffffff80013817:	cc                   	int3   
ffffffff80013818:	cc                   	int3   
ffffffff80013819:	cc                   	int3   
ffffffff8001381a:	cc                   	int3   
ffffffff8001381b:	cc                   	int3   
ffffffff8001381c:	cc                   	int3   
ffffffff8001381d:	cc                   	int3   
ffffffff8001381e:	cc                   	int3   
ffffffff8001381f:	cc                   	int3   

ffffffff80013820 <scheduler_can_spin>:
ffffffff80013820:	55                   	push   %rbp
ffffffff80013821:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013824:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80013828:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff8001382b:	83 7d f8 04          	cmpl   $0x4,-0x8(%rbp)
ffffffff8001382f:	7e 06                	jle    ffffffff80013837 <scheduler_can_spin+0x17>
ffffffff80013831:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80013835:	eb 37                	jmp    ffffffff8001386e <scheduler_can_spin+0x4e>
ffffffff80013837:	31 c0                	xor    %eax,%eax
ffffffff80013839:	e8 d2 d4 fe ff       	call   ffffffff80000d10 <get_cpu_count>
ffffffff8001383e:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80013842:	77 06                	ja     ffffffff8001384a <scheduler_can_spin+0x2a>
ffffffff80013844:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80013848:	eb 24                	jmp    ffffffff8001386e <scheduler_can_spin+0x4e>
ffffffff8001384a:	8b 05 dc 99 20 00    	mov    0x2099dc(%rip),%eax        # ffffffff8021d22c <m_idle_cpus_count>
ffffffff80013850:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013853:	75 06                	jne    ffffffff8001385b <scheduler_can_spin+0x3b>
ffffffff80013855:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80013859:	eb 13                	jmp    ffffffff8001386e <scheduler_can_spin+0x4e>
ffffffff8001385b:	e8 20 00 00 00       	call   ffffffff80013880 <run_queue_empty>
ffffffff80013860:	a8 01                	test   $0x1,%al
ffffffff80013862:	75 06                	jne    ffffffff8001386a <scheduler_can_spin+0x4a>
ffffffff80013864:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80013868:	eb 04                	jmp    ffffffff8001386e <scheduler_can_spin+0x4e>
ffffffff8001386a:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff8001386e:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80013871:	24 01                	and    $0x1,%al
ffffffff80013873:	0f b6 c0             	movzbl %al,%eax
ffffffff80013876:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8001387a:	5d                   	pop    %rbp
ffffffff8001387b:	c3                   	ret    
ffffffff8001387c:	cc                   	int3   
ffffffff8001387d:	cc                   	int3   
ffffffff8001387e:	cc                   	int3   
ffffffff8001387f:	cc                   	int3   

ffffffff80013880 <run_queue_empty>:
ffffffff80013880:	55                   	push   %rbp
ffffffff80013881:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013884:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80013888:	e8 73 00 00 00       	call   ffffffff80013900 <get_run_queue>
ffffffff8001388d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80013891:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013895:	8b 00                	mov    (%rax),%eax
ffffffff80013897:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff8001389a:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff8001389d:	89 45 e0             	mov    %eax,-0x20(%rbp)
ffffffff800138a0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800138a4:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800138a7:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff800138aa:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800138ad:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800138b0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800138b4:	48 8b 80 08 08 00 00 	mov    0x808(%rax),%rax
ffffffff800138bb:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800138bf:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800138c3:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff800138c7:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800138ca:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800138ce:	8b 49 04             	mov    0x4(%rcx),%ecx
ffffffff800138d1:	89 4d ec             	mov    %ecx,-0x14(%rbp)
ffffffff800138d4:	3b 45 ec             	cmp    -0x14(%rbp),%eax
ffffffff800138d7:	75 1d                	jne    ffffffff800138f6 <run_queue_empty+0x76>
ffffffff800138d9:	8b 4d e0             	mov    -0x20(%rbp),%ecx
ffffffff800138dc:	31 c0                	xor    %eax,%eax
ffffffff800138de:	3b 4d fc             	cmp    -0x4(%rbp),%ecx
ffffffff800138e1:	75 08                	jne    ffffffff800138eb <run_queue_empty+0x6b>
ffffffff800138e3:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff800138e8:	0f 94 c0             	sete   %al
ffffffff800138eb:	24 01                	and    $0x1,%al
ffffffff800138ed:	0f b6 c0             	movzbl %al,%eax
ffffffff800138f0:	48 83 c4 30          	add    $0x30,%rsp
ffffffff800138f4:	5d                   	pop    %rbp
ffffffff800138f5:	c3                   	ret    
ffffffff800138f6:	eb 99                	jmp    ffffffff80013891 <run_queue_empty+0x11>
ffffffff800138f8:	cc                   	int3   
ffffffff800138f9:	cc                   	int3   
ffffffff800138fa:	cc                   	int3   
ffffffff800138fb:	cc                   	int3   
ffffffff800138fc:	cc                   	int3   
ffffffff800138fd:	cc                   	int3   
ffffffff800138fe:	cc                   	int3   
ffffffff800138ff:	cc                   	int3   

ffffffff80013900 <get_run_queue>:
ffffffff80013900:	55                   	push   %rbp
ffffffff80013901:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013904:	53                   	push   %rbx
ffffffff80013905:	50                   	push   %rax
ffffffff80013906:	48 8b 1d 23 99 20 00 	mov    0x209923(%rip),%rbx        # ffffffff8021d230 <m_run_queues>
ffffffff8001390d:	31 c0                	xor    %eax,%eax
ffffffff8001390f:	e8 3c 19 00 00       	call   ffffffff80015250 <get_cpu_id>
ffffffff80013914:	48 98                	cltq   
ffffffff80013916:	48 69 c0 10 08 00 00 	imul   $0x810,%rax,%rax
ffffffff8001391d:	48 01 c3             	add    %rax,%rbx
ffffffff80013920:	48 89 d8             	mov    %rbx,%rax
ffffffff80013923:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80013927:	5b                   	pop    %rbx
ffffffff80013928:	5d                   	pop    %rbp
ffffffff80013929:	c3                   	ret    
ffffffff8001392a:	cc                   	int3   
ffffffff8001392b:	cc                   	int3   
ffffffff8001392c:	cc                   	int3   
ffffffff8001392d:	cc                   	int3   
ffffffff8001392e:	cc                   	int3   
ffffffff8001392f:	cc                   	int3   

ffffffff80013930 <scheduler_ready_thread>:
ffffffff80013930:	55                   	push   %rbp
ffffffff80013931:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013934:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80013938:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8001393c:	e8 6f 00 00 00       	call   ffffffff800139b0 <scheduler_preempt_disable>
ffffffff80013941:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80013945:	e8 86 1b 00 00       	call   ffffffff800154d0 <get_thread_status>
ffffffff8001394a:	25 ff ef ff ff       	and    $0xffffefff,%eax
ffffffff8001394f:	83 f8 03             	cmp    $0x3,%eax
ffffffff80013952:	74 2e                	je     ffffffff80013982 <scheduler_ready_thread+0x52>
ffffffff80013954:	31 c0                	xor    %eax,%eax
ffffffff80013956:	e8 95 5f ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001395b:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80013962:	48 89 c6             	mov    %rax,%rsi
ffffffff80013965:	48 c7 c2 de 8a 01 80 	mov    $0xffffffff80018ade,%rdx
ffffffff8001396c:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80013973:	41 b8 f7 01 00 00    	mov    $0x1f7,%r8d
ffffffff80013979:	31 c0                	xor    %eax,%eax
ffffffff8001397b:	e8 c0 df ff ff       	call   ffffffff80011940 <printf_>
ffffffff80013980:	0f 0b                	ud2    
ffffffff80013982:	eb 00                	jmp    ffffffff80013984 <scheduler_ready_thread+0x54>
ffffffff80013984:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80013988:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff8001398d:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80013992:	e8 69 1b 00 00       	call   ffffffff80015500 <cas_thread_state>
ffffffff80013997:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff8001399b:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800139a0:	e8 5b 00 00 00       	call   ffffffff80013a00 <run_queue_put>
ffffffff800139a5:	e8 76 01 00 00       	call   ffffffff80013b20 <scheduler_preempt_enable>
ffffffff800139aa:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800139ae:	5d                   	pop    %rbp
ffffffff800139af:	c3                   	ret    

ffffffff800139b0 <scheduler_preempt_disable>:
ffffffff800139b0:	55                   	push   %rbp
ffffffff800139b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800139b4:	50                   	push   %rax
ffffffff800139b5:	65 48 8b 05 43 c6 fe 	mov    %gs:0x7ffec643(%rip),%rax        # 0 <m_preempt_disable_depth>
ffffffff800139bc:	7f 
ffffffff800139bd:	48 89 c1             	mov    %rax,%rcx
ffffffff800139c0:	48 ff c1             	inc    %rcx
ffffffff800139c3:	65 48 89 0d 35 c6 fe 	mov    %rcx,%gs:0x7ffec635(%rip)        # 0 <m_preempt_disable_depth>
ffffffff800139ca:	7f 
ffffffff800139cb:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800139cf:	75 1a                	jne    ffffffff800139eb <scheduler_preempt_disable+0x3b>
ffffffff800139d1:	48 c7 45 f8 06 00 00 	movq   $0x6,-0x8(%rbp)
ffffffff800139d8:	00 
ffffffff800139d9:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff800139e0:	00 00 00 
ffffffff800139e3:	48 23 45 f8          	and    -0x8(%rbp),%rax
ffffffff800139e7:	44 0f 22 c0          	mov    %rax,%cr8
ffffffff800139eb:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800139ef:	5d                   	pop    %rbp
ffffffff800139f0:	c3                   	ret    
ffffffff800139f1:	cc                   	int3   
ffffffff800139f2:	cc                   	int3   
ffffffff800139f3:	cc                   	int3   
ffffffff800139f4:	cc                   	int3   
ffffffff800139f5:	cc                   	int3   
ffffffff800139f6:	cc                   	int3   
ffffffff800139f7:	cc                   	int3   
ffffffff800139f8:	cc                   	int3   
ffffffff800139f9:	cc                   	int3   
ffffffff800139fa:	cc                   	int3   
ffffffff800139fb:	cc                   	int3   
ffffffff800139fc:	cc                   	int3   
ffffffff800139fd:	cc                   	int3   
ffffffff800139fe:	cc                   	int3   
ffffffff800139ff:	cc                   	int3   

ffffffff80013a00 <run_queue_put>:
ffffffff80013a00:	55                   	push   %rbp
ffffffff80013a01:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013a04:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80013a08:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff80013a0c:	40 80 e6 01          	and    $0x1,%sil
ffffffff80013a10:	40 88 75 fe          	mov    %sil,-0x2(%rbp)
ffffffff80013a14:	e8 e7 fe ff ff       	call   ffffffff80013900 <get_run_queue>
ffffffff80013a19:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80013a1d:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff80013a21:	74 7e                	je     ffffffff80013aa1 <run_queue_put+0xa1>
ffffffff80013a23:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013a27:	48 8b 80 08 08 00 00 	mov    0x808(%rax),%rax
ffffffff80013a2e:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80013a32:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013a36:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80013a3a:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80013a3e:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80013a42:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80013a46:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
ffffffff80013a4a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80013a4e:	48 8b 75 c0          	mov    -0x40(%rbp),%rsi
ffffffff80013a52:	f0 48 0f b1 b2 08 08 	lock cmpxchg %rsi,0x808(%rdx)
ffffffff80013a59:	00 00 
ffffffff80013a5b:	0f 94 c2             	sete   %dl
ffffffff80013a5e:	f6 c2 01             	test   $0x1,%dl
ffffffff80013a61:	75 03                	jne    ffffffff80013a66 <run_queue_put+0x66>
ffffffff80013a63:	48 89 01             	mov    %rax,(%rcx)
ffffffff80013a66:	80 e2 01             	and    $0x1,%dl
ffffffff80013a69:	88 55 ff             	mov    %dl,-0x1(%rbp)
ffffffff80013a6c:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80013a6f:	34 ff                	xor    $0xff,%al
ffffffff80013a71:	a8 01                	test   $0x1,%al
ffffffff80013a73:	75 02                	jne    ffffffff80013a77 <run_queue_put+0x77>
ffffffff80013a75:	eb 19                	jmp    ffffffff80013a90 <run_queue_put+0x90>
ffffffff80013a77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013a7b:	48 8b 80 08 08 00 00 	mov    0x808(%rax),%rax
ffffffff80013a82:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80013a86:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013a8a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80013a8e:	eb aa                	jmp    ffffffff80013a3a <run_queue_put+0x3a>
ffffffff80013a90:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80013a95:	75 02                	jne    ffffffff80013a99 <run_queue_put+0x99>
ffffffff80013a97:	eb 75                	jmp    ffffffff80013b0e <run_queue_put+0x10e>
ffffffff80013a99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80013a9d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80013aa1:	eb 00                	jmp    ffffffff80013aa3 <run_queue_put+0xa3>
ffffffff80013aa3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013aa7:	8b 00                	mov    (%rax),%eax
ffffffff80013aa9:	89 45 c8             	mov    %eax,-0x38(%rbp)
ffffffff80013aac:	8b 45 c8             	mov    -0x38(%rbp),%eax
ffffffff80013aaf:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80013ab2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013ab6:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80013ab9:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80013abc:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80013abf:	2b 45 e4             	sub    -0x1c(%rbp),%eax
ffffffff80013ac2:	3d 00 01 00 00       	cmp    $0x100,%eax
ffffffff80013ac7:	73 25                	jae    ffffffff80013aee <run_queue_put+0xee>
ffffffff80013ac9:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80013acd:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80013ad1:	0f b6 55 f8          	movzbl -0x8(%rbp),%edx
ffffffff80013ad5:	48 89 44 d1 08       	mov    %rax,0x8(%rcx,%rdx,8)
ffffffff80013ada:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013ade:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff80013ae1:	ff c1                	inc    %ecx
ffffffff80013ae3:	89 4d cc             	mov    %ecx,-0x34(%rbp)
ffffffff80013ae6:	8b 4d cc             	mov    -0x34(%rbp),%ecx
ffffffff80013ae9:	89 48 04             	mov    %ecx,0x4(%rax)
ffffffff80013aec:	eb 20                	jmp    ffffffff80013b0e <run_queue_put+0x10e>
ffffffff80013aee:	48 8b 7d d8          	mov    -0x28(%rbp),%rdi
ffffffff80013af2:	8b 75 e4             	mov    -0x1c(%rbp),%esi
ffffffff80013af5:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80013af8:	e8 63 00 00 00       	call   ffffffff80013b60 <run_queue_put_slow>
ffffffff80013afd:	a8 01                	test   $0x1,%al
ffffffff80013aff:	75 02                	jne    ffffffff80013b03 <run_queue_put+0x103>
ffffffff80013b01:	eb 07                	jmp    ffffffff80013b0a <run_queue_put+0x10a>
ffffffff80013b03:	e8 a8 01 00 00       	call   ffffffff80013cb0 <wake_cpu>
ffffffff80013b08:	eb 04                	jmp    ffffffff80013b0e <run_queue_put+0x10e>
ffffffff80013b0a:	eb 00                	jmp    ffffffff80013b0c <run_queue_put+0x10c>
ffffffff80013b0c:	eb 95                	jmp    ffffffff80013aa3 <run_queue_put+0xa3>
ffffffff80013b0e:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80013b12:	5d                   	pop    %rbp
ffffffff80013b13:	c3                   	ret    
ffffffff80013b14:	cc                   	int3   
ffffffff80013b15:	cc                   	int3   
ffffffff80013b16:	cc                   	int3   
ffffffff80013b17:	cc                   	int3   
ffffffff80013b18:	cc                   	int3   
ffffffff80013b19:	cc                   	int3   
ffffffff80013b1a:	cc                   	int3   
ffffffff80013b1b:	cc                   	int3   
ffffffff80013b1c:	cc                   	int3   
ffffffff80013b1d:	cc                   	int3   
ffffffff80013b1e:	cc                   	int3   
ffffffff80013b1f:	cc                   	int3   

ffffffff80013b20 <scheduler_preempt_enable>:
ffffffff80013b20:	55                   	push   %rbp
ffffffff80013b21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013b24:	50                   	push   %rax
ffffffff80013b25:	65 48 8b 05 d3 c4 fe 	mov    %gs:0x7ffec4d3(%rip),%rax        # 0 <m_preempt_disable_depth>
ffffffff80013b2c:	7f 
ffffffff80013b2d:	48 ff c8             	dec    %rax
ffffffff80013b30:	65 48 89 05 c8 c4 fe 	mov    %rax,%gs:0x7ffec4c8(%rip)        # 0 <m_preempt_disable_depth>
ffffffff80013b37:	7f 
ffffffff80013b38:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80013b3c:	75 1a                	jne    ffffffff80013b58 <scheduler_preempt_enable+0x38>
ffffffff80013b3e:	48 c7 45 f8 05 00 00 	movq   $0x5,-0x8(%rbp)
ffffffff80013b45:	00 
ffffffff80013b46:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff80013b4d:	00 00 00 
ffffffff80013b50:	48 23 45 f8          	and    -0x8(%rbp),%rax
ffffffff80013b54:	44 0f 22 c0          	mov    %rax,%cr8
ffffffff80013b58:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80013b5c:	5d                   	pop    %rbp
ffffffff80013b5d:	c3                   	ret    
ffffffff80013b5e:	cc                   	int3   
ffffffff80013b5f:	cc                   	int3   

ffffffff80013b60 <run_queue_put_slow>:
ffffffff80013b60:	55                   	push   %rbp
ffffffff80013b61:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013b64:	48 81 ec 50 04 00 00 	sub    $0x450,%rsp
ffffffff80013b6b:	48 89 7d d0          	mov    %rdi,-0x30(%rbp)
ffffffff80013b6f:	89 75 e8             	mov    %esi,-0x18(%rbp)
ffffffff80013b72:	89 55 e0             	mov    %edx,-0x20(%rbp)
ffffffff80013b75:	e8 86 fd ff ff       	call   ffffffff80013900 <get_run_queue>
ffffffff80013b7a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80013b7e:	8b 45 e0             	mov    -0x20(%rbp),%eax
ffffffff80013b81:	2b 45 e8             	sub    -0x18(%rbp),%eax
ffffffff80013b84:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80013b87:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80013b8a:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80013b8f:	99                   	cltd   
ffffffff80013b90:	f7 f9                	idiv   %ecx
ffffffff80013b92:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80013b95:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff80013b9c:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80013b9f:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff80013ba2:	7d 2e                	jge    ffffffff80013bd2 <run_queue_put_slow+0x72>
ffffffff80013ba4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80013ba8:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80013bab:	03 4d ec             	add    -0x14(%rbp),%ecx
ffffffff80013bae:	81 e1 ff 00 00 00    	and    $0xff,%ecx
ffffffff80013bb4:	89 c9                	mov    %ecx,%ecx
ffffffff80013bb6:	48 8b 44 c8 08       	mov    0x8(%rax,%rcx,8),%rax
ffffffff80013bbb:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff80013bbf:	48 89 84 cd b0 fb ff 	mov    %rax,-0x450(%rbp,%rcx,8)
ffffffff80013bc6:	ff 
ffffffff80013bc7:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80013bca:	83 c0 01             	add    $0x1,%eax
ffffffff80013bcd:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80013bd0:	eb ca                	jmp    ffffffff80013b9c <run_queue_put_slow+0x3c>
ffffffff80013bd2:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80013bd6:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80013bd9:	8b 55 f8             	mov    -0x8(%rbp),%edx
ffffffff80013bdc:	01 d0                	add    %edx,%eax
ffffffff80013bde:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80013be1:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80013be4:	8b 55 e4             	mov    -0x1c(%rbp),%edx
ffffffff80013be7:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff80013beb:	0f 94 c1             	sete   %cl
ffffffff80013bee:	f6 c1 01             	test   $0x1,%cl
ffffffff80013bf1:	75 03                	jne    ffffffff80013bf6 <run_queue_put_slow+0x96>
ffffffff80013bf3:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff80013bf6:	80 e1 01             	and    $0x1,%cl
ffffffff80013bf9:	88 4d f7             	mov    %cl,-0x9(%rbp)
ffffffff80013bfc:	f6 45 f7 01          	testb  $0x1,-0x9(%rbp)
ffffffff80013c00:	75 09                	jne    ffffffff80013c0b <run_queue_put_slow+0xab>
ffffffff80013c02:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80013c06:	e9 85 00 00 00       	jmp    ffffffff80013c90 <run_queue_put_slow+0x130>
ffffffff80013c0b:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80013c0f:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff80013c13:	48 89 84 cd b0 fb ff 	mov    %rax,-0x450(%rbp,%rcx,8)
ffffffff80013c1a:	ff 
ffffffff80013c1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff80013c22:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80013c25:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff80013c28:	7d 2e                	jge    ffffffff80013c58 <run_queue_put_slow+0xf8>
ffffffff80013c2a:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80013c2d:	83 c0 01             	add    $0x1,%eax
ffffffff80013c30:	48 98                	cltq   
ffffffff80013c32:	48 8b 84 c5 b0 fb ff 	mov    -0x450(%rbp,%rax,8),%rax
ffffffff80013c39:	ff 
ffffffff80013c3a:	48 63 4d f0          	movslq -0x10(%rbp),%rcx
ffffffff80013c3e:	48 8b 8c cd b0 fb ff 	mov    -0x450(%rbp,%rcx,8),%rcx
ffffffff80013c45:	ff 
ffffffff80013c46:	48 89 81 e0 02 00 00 	mov    %rax,0x2e0(%rcx)
ffffffff80013c4d:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80013c50:	83 c0 01             	add    $0x1,%eax
ffffffff80013c53:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80013c56:	eb ca                	jmp    ffffffff80013c22 <run_queue_put_slow+0xc2>
ffffffff80013c58:	48 8b 85 b0 fb ff ff 	mov    -0x450(%rbp),%rax
ffffffff80013c5f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff80013c63:	48 63 45 f8          	movslq -0x8(%rbp),%rax
ffffffff80013c67:	48 8b 84 c5 b0 fb ff 	mov    -0x450(%rbp,%rax,8),%rax
ffffffff80013c6e:	ff 
ffffffff80013c6f:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80013c73:	e8 98 00 00 00       	call   ffffffff80013d10 <lock_scheduler>
ffffffff80013c78:	8b 75 f8             	mov    -0x8(%rbp),%esi
ffffffff80013c7b:	83 c6 01             	add    $0x1,%esi
ffffffff80013c7e:	48 8d 7d c0          	lea    -0x40(%rbp),%rdi
ffffffff80013c82:	e8 c9 00 00 00       	call   ffffffff80013d50 <global_run_queue_put_batch>
ffffffff80013c87:	e8 a4 00 00 00       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff80013c8c:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff80013c90:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80013c93:	24 01                	and    $0x1,%al
ffffffff80013c95:	0f b6 c0             	movzbl %al,%eax
ffffffff80013c98:	48 81 c4 50 04 00 00 	add    $0x450,%rsp
ffffffff80013c9f:	5d                   	pop    %rbp
ffffffff80013ca0:	c3                   	ret    
ffffffff80013ca1:	cc                   	int3   
ffffffff80013ca2:	cc                   	int3   
ffffffff80013ca3:	cc                   	int3   
ffffffff80013ca4:	cc                   	int3   
ffffffff80013ca5:	cc                   	int3   
ffffffff80013ca6:	cc                   	int3   
ffffffff80013ca7:	cc                   	int3   
ffffffff80013ca8:	cc                   	int3   
ffffffff80013ca9:	cc                   	int3   
ffffffff80013caa:	cc                   	int3   
ffffffff80013cab:	cc                   	int3   
ffffffff80013cac:	cc                   	int3   
ffffffff80013cad:	cc                   	int3   
ffffffff80013cae:	cc                   	int3   
ffffffff80013caf:	cc                   	int3   

ffffffff80013cb0 <wake_cpu>:
ffffffff80013cb0:	55                   	push   %rbp
ffffffff80013cb1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013cb4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80013cb8:	8b 05 6e 95 20 00    	mov    0x20956e(%rip),%eax        # ffffffff8021d22c <m_idle_cpus_count>
ffffffff80013cbe:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80013cc1:	83 7d f8 00          	cmpl   $0x0,-0x8(%rbp)
ffffffff80013cc5:	75 02                	jne    ffffffff80013cc9 <wake_cpu+0x19>
ffffffff80013cc7:	eb 39                	jmp    ffffffff80013d02 <wake_cpu+0x52>
ffffffff80013cc9:	e8 42 00 00 00       	call   ffffffff80013d10 <lock_scheduler>
ffffffff80013cce:	48 8b 05 7b 95 20 00 	mov    0x20957b(%rip),%rax        # ffffffff8021d250 <m_idle_cpus>
ffffffff80013cd5:	0f bc c8             	bsf    %eax,%ecx
ffffffff80013cd8:	83 c1 01             	add    $0x1,%ecx
ffffffff80013cdb:	31 d2                	xor    %edx,%edx
ffffffff80013cdd:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013ce0:	0f 44 ca             	cmove  %edx,%ecx
ffffffff80013ce3:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff80013ce6:	e8 45 00 00 00       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff80013ceb:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
ffffffff80013cef:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013cf2:	75 02                	jne    ffffffff80013cf6 <wake_cpu+0x46>
ffffffff80013cf4:	eb 0c                	jmp    ffffffff80013d02 <wake_cpu+0x52>
ffffffff80013cf6:	0f b6 7d ff          	movzbl -0x1(%rbp),%edi
ffffffff80013cfa:	83 ef 01             	sub    $0x1,%edi
ffffffff80013cfd:	e8 ae 5e ff ff       	call   ffffffff80009bb0 <lapic_send_ipi>
ffffffff80013d02:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80013d06:	5d                   	pop    %rbp
ffffffff80013d07:	c3                   	ret    
ffffffff80013d08:	cc                   	int3   
ffffffff80013d09:	cc                   	int3   
ffffffff80013d0a:	cc                   	int3   
ffffffff80013d0b:	cc                   	int3   
ffffffff80013d0c:	cc                   	int3   
ffffffff80013d0d:	cc                   	int3   
ffffffff80013d0e:	cc                   	int3   
ffffffff80013d0f:	cc                   	int3   

ffffffff80013d10 <lock_scheduler>:
ffffffff80013d10:	55                   	push   %rbp
ffffffff80013d11:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013d14:	48 c7 c7 58 d2 21 80 	mov    $0xffffffff8021d258,%rdi
ffffffff80013d1b:	e8 30 cd fe ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff80013d20:	5d                   	pop    %rbp
ffffffff80013d21:	c3                   	ret    
ffffffff80013d22:	cc                   	int3   
ffffffff80013d23:	cc                   	int3   
ffffffff80013d24:	cc                   	int3   
ffffffff80013d25:	cc                   	int3   
ffffffff80013d26:	cc                   	int3   
ffffffff80013d27:	cc                   	int3   
ffffffff80013d28:	cc                   	int3   
ffffffff80013d29:	cc                   	int3   
ffffffff80013d2a:	cc                   	int3   
ffffffff80013d2b:	cc                   	int3   
ffffffff80013d2c:	cc                   	int3   
ffffffff80013d2d:	cc                   	int3   
ffffffff80013d2e:	cc                   	int3   
ffffffff80013d2f:	cc                   	int3   

ffffffff80013d30 <unlock_scheduler>:
ffffffff80013d30:	55                   	push   %rbp
ffffffff80013d31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013d34:	48 c7 c7 58 d2 21 80 	mov    $0xffffffff8021d258,%rdi
ffffffff80013d3b:	e8 00 ce fe ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff80013d40:	5d                   	pop    %rbp
ffffffff80013d41:	c3                   	ret    
ffffffff80013d42:	cc                   	int3   
ffffffff80013d43:	cc                   	int3   
ffffffff80013d44:	cc                   	int3   
ffffffff80013d45:	cc                   	int3   
ffffffff80013d46:	cc                   	int3   
ffffffff80013d47:	cc                   	int3   
ffffffff80013d48:	cc                   	int3   
ffffffff80013d49:	cc                   	int3   
ffffffff80013d4a:	cc                   	int3   
ffffffff80013d4b:	cc                   	int3   
ffffffff80013d4c:	cc                   	int3   
ffffffff80013d4d:	cc                   	int3   
ffffffff80013d4e:	cc                   	int3   
ffffffff80013d4f:	cc                   	int3   

ffffffff80013d50 <global_run_queue_put_batch>:
ffffffff80013d50:	55                   	push   %rbp
ffffffff80013d51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013d54:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80013d58:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80013d5c:	89 75 f4             	mov    %esi,-0xc(%rbp)
ffffffff80013d5f:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80013d63:	e8 38 00 00 00       	call   ffffffff80013da0 <thread_queue_push_back_all>
ffffffff80013d68:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80013d6b:	8b 0d d7 94 20 00    	mov    0x2094d7(%rip),%ecx        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80013d71:	01 c1                	add    %eax,%ecx
ffffffff80013d73:	89 0d cf 94 20 00    	mov    %ecx,0x2094cf(%rip)        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80013d79:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013d7d:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80013d84:	00 
ffffffff80013d85:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013d89:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80013d90:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80013d94:	5d                   	pop    %rbp
ffffffff80013d95:	c3                   	ret    
ffffffff80013d96:	cc                   	int3   
ffffffff80013d97:	cc                   	int3   
ffffffff80013d98:	cc                   	int3   
ffffffff80013d99:	cc                   	int3   
ffffffff80013d9a:	cc                   	int3   
ffffffff80013d9b:	cc                   	int3   
ffffffff80013d9c:	cc                   	int3   
ffffffff80013d9d:	cc                   	int3   
ffffffff80013d9e:	cc                   	int3   
ffffffff80013d9f:	cc                   	int3   

ffffffff80013da0 <thread_queue_push_back_all>:
ffffffff80013da0:	55                   	push   %rbp
ffffffff80013da1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013da4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80013da8:	48 c7 45 f0 38 d2 21 	movq   $0xffffffff8021d238,-0x10(%rbp)
ffffffff80013daf:	80 
ffffffff80013db0:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80013db4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013db8:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80013dbd:	75 02                	jne    ffffffff80013dc1 <thread_queue_push_back_all+0x21>
ffffffff80013dbf:	eb 54                	jmp    ffffffff80013e15 <thread_queue_push_back_all+0x75>
ffffffff80013dc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013dc5:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80013dc9:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
ffffffff80013dd0:	00 00 00 00 
ffffffff80013dd4:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013dd8:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80013ddd:	74 18                	je     ffffffff80013df7 <thread_queue_push_back_all+0x57>
ffffffff80013ddf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013de3:	48 8b 00             	mov    (%rax),%rax
ffffffff80013de6:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80013dea:	48 8b 49 08          	mov    0x8(%rcx),%rcx
ffffffff80013dee:	48 89 81 e0 02 00 00 	mov    %rax,0x2e0(%rcx)
ffffffff80013df5:	eb 0e                	jmp    ffffffff80013e05 <thread_queue_push_back_all+0x65>
ffffffff80013df7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013dfb:	48 8b 00             	mov    (%rax),%rax
ffffffff80013dfe:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80013e02:	48 89 01             	mov    %rax,(%rcx)
ffffffff80013e05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80013e09:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff80013e0d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80013e11:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80013e15:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80013e19:	5d                   	pop    %rbp
ffffffff80013e1a:	c3                   	ret    
ffffffff80013e1b:	cc                   	int3   
ffffffff80013e1c:	cc                   	int3   
ffffffff80013e1d:	cc                   	int3   
ffffffff80013e1e:	cc                   	int3   
ffffffff80013e1f:	cc                   	int3   

ffffffff80013e20 <scheduler_suspend_thread>:
ffffffff80013e20:	55                   	push   %rbp
ffffffff80013e21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013e24:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80013e28:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80013e2c:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80013e30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
ffffffff80013e37:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80013e3b:	e8 90 16 00 00       	call   ffffffff800154d0 <get_thread_status>
ffffffff80013e40:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80013e43:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80013e46:	ff c8                	dec    %eax
ffffffff80013e48:	89 c1                	mov    %eax,%ecx
ffffffff80013e4a:	83 e9 04             	sub    $0x4,%ecx
ffffffff80013e4d:	77 0a                	ja     ffffffff80013e59 <scheduler_suspend_thread+0x39>
ffffffff80013e4f:	48 8b 04 c5 28 89 01 	mov    -0x7ffe76d8(,%rax,8),%rax
ffffffff80013e56:	80 
ffffffff80013e57:	ff e0                	jmp    *%rax
ffffffff80013e59:	eb 00                	jmp    ffffffff80013e5b <scheduler_suspend_thread+0x3b>
ffffffff80013e5b:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80013e5e:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff80013e63:	83 f8 00             	cmp    $0x0,%eax
ffffffff80013e66:	75 2e                	jne    ffffffff80013e96 <scheduler_suspend_thread+0x76>
ffffffff80013e68:	31 c0                	xor    %eax,%eax
ffffffff80013e6a:	e8 81 5a ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80013e6f:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80013e76:	48 89 c6             	mov    %rax,%rsi
ffffffff80013e79:	48 c7 c2 93 a1 01 80 	mov    $0xffffffff8001a193,%rdx
ffffffff80013e80:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80013e87:	41 b8 1e 02 00 00    	mov    $0x21e,%r8d
ffffffff80013e8d:	31 c0                	xor    %eax,%eax
ffffffff80013e8f:	e8 ac da ff ff       	call   ffffffff80011940 <printf_>
ffffffff80013e94:	0f 0b                	ud2    
ffffffff80013e96:	eb 00                	jmp    ffffffff80013e98 <scheduler_suspend_thread+0x78>
ffffffff80013e98:	e9 ca 00 00 00       	jmp    ffffffff80013f67 <scheduler_suspend_thread+0x147>
ffffffff80013e9d:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff80013ea4:	00 
ffffffff80013ea5:	c6 45 d8 00          	movb   $0x0,-0x28(%rbp)
ffffffff80013ea9:	c6 45 d9 01          	movb   $0x1,-0x27(%rbp)
ffffffff80013ead:	e9 df 00 00 00       	jmp    ffffffff80013f91 <scheduler_suspend_thread+0x171>
ffffffff80013eb2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80013eb6:	e8 e5 00 00 00       	call   ffffffff80013fa0 <cas_from_preempted>
ffffffff80013ebb:	a8 01                	test   $0x1,%al
ffffffff80013ebd:	75 05                	jne    ffffffff80013ec4 <scheduler_suspend_thread+0xa4>
ffffffff80013ebf:	e9 a3 00 00 00       	jmp    ffffffff80013f67 <scheduler_suspend_thread+0x147>
ffffffff80013ec4:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff80013ec8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%rbp)
ffffffff80013ecf:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80013ed3:	8b 75 ec             	mov    -0x14(%rbp),%esi
ffffffff80013ed6:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff80013ed9:	81 ca 00 10 00 00    	or     $0x1000,%edx
ffffffff80013edf:	e8 0c 01 00 00       	call   ffffffff80013ff0 <cas_to_suspend>
ffffffff80013ee4:	a8 01                	test   $0x1,%al
ffffffff80013ee6:	75 02                	jne    ffffffff80013eea <scheduler_suspend_thread+0xca>
ffffffff80013ee8:	eb 7d                	jmp    ffffffff80013f67 <scheduler_suspend_thread+0x147>
ffffffff80013eea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013eee:	c6 80 d9 02 00 00 00 	movb   $0x0,0x2d9(%rax)
ffffffff80013ef5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013ef9:	c6 80 d8 02 00 00 00 	movb   $0x0,0x2d8(%rax)
ffffffff80013f00:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013f04:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80013f08:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80013f0b:	24 01                	and    $0x1,%al
ffffffff80013f0d:	88 45 d8             	mov    %al,-0x28(%rbp)
ffffffff80013f10:	c6 45 d9 00          	movb   $0x0,-0x27(%rbp)
ffffffff80013f14:	eb 7b                	jmp    ffffffff80013f91 <scheduler_suspend_thread+0x171>
ffffffff80013f16:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013f1a:	f6 80 d9 02 00 00 01 	testb  $0x1,0x2d9(%rax)
ffffffff80013f21:	74 02                	je     ffffffff80013f25 <scheduler_suspend_thread+0x105>
ffffffff80013f23:	eb 42                	jmp    ffffffff80013f67 <scheduler_suspend_thread+0x147>
ffffffff80013f25:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80013f29:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80013f2e:	ba 02 10 00 00       	mov    $0x1002,%edx
ffffffff80013f33:	e8 b8 00 00 00       	call   ffffffff80013ff0 <cas_to_suspend>
ffffffff80013f38:	a8 01                	test   $0x1,%al
ffffffff80013f3a:	75 02                	jne    ffffffff80013f3e <scheduler_suspend_thread+0x11e>
ffffffff80013f3c:	eb 29                	jmp    ffffffff80013f67 <scheduler_suspend_thread+0x147>
ffffffff80013f3e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013f42:	c6 80 d9 02 00 00 01 	movb   $0x1,0x2d9(%rax)
ffffffff80013f49:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80013f4d:	c6 80 d8 02 00 00 01 	movb   $0x1,0x2d8(%rax)
ffffffff80013f54:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80013f58:	be 02 10 00 00       	mov    $0x1002,%esi
ffffffff80013f5d:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80013f62:	e8 19 01 00 00       	call   ffffffff80014080 <cas_from_suspend>
ffffffff80013f67:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
ffffffff80013f6e:	83 7d e8 0a          	cmpl   $0xa,-0x18(%rbp)
ffffffff80013f72:	7d 0d                	jge    ffffffff80013f81 <scheduler_suspend_thread+0x161>
ffffffff80013f74:	f3 90                	pause  
ffffffff80013f76:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80013f79:	83 c0 01             	add    $0x1,%eax
ffffffff80013f7c:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff80013f7f:	eb ed                	jmp    ffffffff80013f6e <scheduler_suspend_thread+0x14e>
ffffffff80013f81:	eb 00                	jmp    ffffffff80013f83 <scheduler_suspend_thread+0x163>
ffffffff80013f83:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80013f86:	83 c0 01             	add    $0x1,%eax
ffffffff80013f89:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80013f8c:	e9 a6 fe ff ff       	jmp    ffffffff80013e37 <scheduler_suspend_thread+0x17>
ffffffff80013f91:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80013f95:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
ffffffff80013f99:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80013f9d:	5d                   	pop    %rbp
ffffffff80013f9e:	c3                   	ret    
ffffffff80013f9f:	cc                   	int3   

ffffffff80013fa0 <cas_from_preempted>:
ffffffff80013fa0:	55                   	push   %rbp
ffffffff80013fa1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013fa4:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff80013fa8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80013fac:	c7 45 f8 04 00 00 00 	movl   $0x4,-0x8(%rbp)
ffffffff80013fb3:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80013fb7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%rbp)
ffffffff80013fbe:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80013fc1:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff80013fc4:	f0 0f b1 91 dc 02 00 	lock cmpxchg %edx,0x2dc(%rcx)
ffffffff80013fcb:	00 
ffffffff80013fcc:	0f 94 c1             	sete   %cl
ffffffff80013fcf:	f6 c1 01             	test   $0x1,%cl
ffffffff80013fd2:	75 03                	jne    ffffffff80013fd7 <cas_from_preempted+0x37>
ffffffff80013fd4:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80013fd7:	80 e1 01             	and    $0x1,%cl
ffffffff80013fda:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff80013fdd:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80013fe0:	24 01                	and    $0x1,%al
ffffffff80013fe2:	0f b6 c0             	movzbl %al,%eax
ffffffff80013fe5:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80013fe9:	5d                   	pop    %rbp
ffffffff80013fea:	c3                   	ret    
ffffffff80013feb:	cc                   	int3   
ffffffff80013fec:	cc                   	int3   
ffffffff80013fed:	cc                   	int3   
ffffffff80013fee:	cc                   	int3   
ffffffff80013fef:	cc                   	int3   

ffffffff80013ff0 <cas_to_suspend>:
ffffffff80013ff0:	55                   	push   %rbp
ffffffff80013ff1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80013ff4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80013ff8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80013ffc:	89 75 f8             	mov    %esi,-0x8(%rbp)
ffffffff80013fff:	89 55 f4             	mov    %edx,-0xc(%rbp)
ffffffff80014002:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014005:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff80014008:	81 c9 00 10 00 00    	or     $0x1000,%ecx
ffffffff8001400e:	39 c8                	cmp    %ecx,%eax
ffffffff80014010:	74 2e                	je     ffffffff80014040 <cas_to_suspend+0x50>
ffffffff80014012:	31 c0                	xor    %eax,%eax
ffffffff80014014:	e8 d7 58 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014019:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80014020:	48 89 c6             	mov    %rax,%rsi
ffffffff80014023:	48 c7 c2 f5 8a 01 80 	mov    $0xffffffff80018af5,%rdx
ffffffff8001402a:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80014031:	41 b8 08 02 00 00    	mov    $0x208,%r8d
ffffffff80014037:	31 c0                	xor    %eax,%eax
ffffffff80014039:	e8 02 d9 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001403e:	0f 0b                	ud2    
ffffffff80014040:	eb 00                	jmp    ffffffff80014042 <cas_to_suspend+0x52>
ffffffff80014042:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80014046:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014049:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff8001404c:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8001404f:	8b 55 f0             	mov    -0x10(%rbp),%edx
ffffffff80014052:	f0 0f b1 91 dc 02 00 	lock cmpxchg %edx,0x2dc(%rcx)
ffffffff80014059:	00 
ffffffff8001405a:	0f 94 c1             	sete   %cl
ffffffff8001405d:	f6 c1 01             	test   $0x1,%cl
ffffffff80014060:	75 03                	jne    ffffffff80014065 <cas_to_suspend+0x75>
ffffffff80014062:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80014065:	80 e1 01             	and    $0x1,%cl
ffffffff80014068:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff8001406b:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff8001406e:	24 01                	and    $0x1,%al
ffffffff80014070:	0f b6 c0             	movzbl %al,%eax
ffffffff80014073:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80014077:	5d                   	pop    %rbp
ffffffff80014078:	c3                   	ret    
ffffffff80014079:	cc                   	int3   
ffffffff8001407a:	cc                   	int3   
ffffffff8001407b:	cc                   	int3   
ffffffff8001407c:	cc                   	int3   
ffffffff8001407d:	cc                   	int3   
ffffffff8001407e:	cc                   	int3   
ffffffff8001407f:	cc                   	int3   

ffffffff80014080 <cas_from_suspend>:
ffffffff80014080:	55                   	push   %rbp
ffffffff80014081:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014084:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014088:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001408c:	89 75 f8             	mov    %esi,-0x8(%rbp)
ffffffff8001408f:	89 55 f4             	mov    %edx,-0xc(%rbp)
ffffffff80014092:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80014096:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014099:	8b 4d f8             	mov    -0x8(%rbp),%ecx
ffffffff8001409c:	81 e1 ff ef ff ff    	and    $0xffffefff,%ecx
ffffffff800140a2:	39 c8                	cmp    %ecx,%eax
ffffffff800140a4:	75 35                	jne    ffffffff800140db <cas_from_suspend+0x5b>
ffffffff800140a6:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff800140aa:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800140ad:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff800140b0:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800140b3:	8b 55 f0             	mov    -0x10(%rbp),%edx
ffffffff800140b6:	f0 0f b1 91 dc 02 00 	lock cmpxchg %edx,0x2dc(%rcx)
ffffffff800140bd:	00 
ffffffff800140be:	0f 94 c1             	sete   %cl
ffffffff800140c1:	f6 c1 01             	test   $0x1,%cl
ffffffff800140c4:	75 03                	jne    ffffffff800140c9 <cas_from_suspend+0x49>
ffffffff800140c6:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800140c9:	80 e1 01             	and    $0x1,%cl
ffffffff800140cc:	88 4d fe             	mov    %cl,-0x2(%rbp)
ffffffff800140cf:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff800140d3:	74 04                	je     ffffffff800140d9 <cas_from_suspend+0x59>
ffffffff800140d5:	c6 45 ff 01          	movb   $0x1,-0x1(%rbp)
ffffffff800140d9:	eb 00                	jmp    ffffffff800140db <cas_from_suspend+0x5b>
ffffffff800140db:	eb 00                	jmp    ffffffff800140dd <cas_from_suspend+0x5d>
ffffffff800140dd:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff800140e1:	75 2e                	jne    ffffffff80014111 <cas_from_suspend+0x91>
ffffffff800140e3:	31 c0                	xor    %eax,%eax
ffffffff800140e5:	e8 06 58 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff800140ea:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff800140f1:	48 89 c6             	mov    %rax,%rsi
ffffffff800140f4:	48 c7 c2 46 8a 01 80 	mov    $0xffffffff80018a46,%rdx
ffffffff800140fb:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80014102:	41 b8 13 02 00 00    	mov    $0x213,%r8d
ffffffff80014108:	31 c0                	xor    %eax,%eax
ffffffff8001410a:	e8 31 d8 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001410f:	0f 0b                	ud2    
ffffffff80014111:	eb 00                	jmp    ffffffff80014113 <cas_from_suspend+0x93>
ffffffff80014113:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80014117:	5d                   	pop    %rbp
ffffffff80014118:	c3                   	ret    
ffffffff80014119:	cc                   	int3   
ffffffff8001411a:	cc                   	int3   
ffffffff8001411b:	cc                   	int3   
ffffffff8001411c:	cc                   	int3   
ffffffff8001411d:	cc                   	int3   
ffffffff8001411e:	cc                   	int3   
ffffffff8001411f:	cc                   	int3   

ffffffff80014120 <scheduler_resume_thread>:
ffffffff80014120:	55                   	push   %rbp
ffffffff80014121:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014124:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014128:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001412c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80014130:	f6 45 f1 01          	testb  $0x1,-0xf(%rbp)
ffffffff80014134:	74 02                	je     ffffffff80014138 <scheduler_resume_thread+0x18>
ffffffff80014136:	eb 30                	jmp    ffffffff80014168 <scheduler_resume_thread+0x48>
ffffffff80014138:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff8001413c:	e8 8f 13 00 00       	call   ffffffff800154d0 <get_thread_status>
ffffffff80014141:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80014144:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80014148:	8b 75 fc             	mov    -0x4(%rbp),%esi
ffffffff8001414b:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8001414e:	81 e2 ff ef ff ff    	and    $0xffffefff,%edx
ffffffff80014154:	e8 27 ff ff ff       	call   ffffffff80014080 <cas_from_suspend>
ffffffff80014159:	f6 45 f0 01          	testb  $0x1,-0x10(%rbp)
ffffffff8001415d:	74 09                	je     ffffffff80014168 <scheduler_resume_thread+0x48>
ffffffff8001415f:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80014163:	e8 c8 f7 ff ff       	call   ffffffff80013930 <scheduler_ready_thread>
ffffffff80014168:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8001416c:	5d                   	pop    %rbp
ffffffff8001416d:	c3                   	ret    
ffffffff8001416e:	cc                   	int3   
ffffffff8001416f:	cc                   	int3   

ffffffff80014170 <mul64>:
ffffffff80014170:	55                   	push   %rbp
ffffffff80014171:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014174:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014178:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8001417c:	48 89 75 e8          	mov    %rsi,-0x18(%rbp)
ffffffff80014180:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014184:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80014188:	48 f7 e1             	mul    %rcx
ffffffff8001418b:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff8001418f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80014193:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014197:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
ffffffff8001419b:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8001419f:	5d                   	pop    %rbp
ffffffff800141a0:	c3                   	ret    
ffffffff800141a1:	cc                   	int3   
ffffffff800141a2:	cc                   	int3   
ffffffff800141a3:	cc                   	int3   
ffffffff800141a4:	cc                   	int3   
ffffffff800141a5:	cc                   	int3   
ffffffff800141a6:	cc                   	int3   
ffffffff800141a7:	cc                   	int3   
ffffffff800141a8:	cc                   	int3   
ffffffff800141a9:	cc                   	int3   
ffffffff800141aa:	cc                   	int3   
ffffffff800141ab:	cc                   	int3   
ffffffff800141ac:	cc                   	int3   
ffffffff800141ad:	cc                   	int3   
ffffffff800141ae:	cc                   	int3   
ffffffff800141af:	cc                   	int3   

ffffffff800141b0 <fastrandom>:
ffffffff800141b0:	55                   	push   %rbp
ffffffff800141b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800141b4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff800141b8:	65 48 8b 05 48 be fe 	mov    %gs:0x7ffebe48(%rip),%rax        # 8 <m_fast_rand>
ffffffff800141bf:	7f 
ffffffff800141c0:	48 b9 2f 64 bd 78 64 	movabs $0xa0761d6478bd642f,%rcx
ffffffff800141c7:	1d 76 a0 
ffffffff800141ca:	48 01 c8             	add    %rcx,%rax
ffffffff800141cd:	65 48 89 05 33 be fe 	mov    %rax,%gs:0x7ffebe33(%rip)        # 8 <m_fast_rand>
ffffffff800141d4:	7f 
ffffffff800141d5:	65 48 8b 3d 2b be fe 	mov    %gs:0x7ffebe2b(%rip),%rdi        # 8 <m_fast_rand>
ffffffff800141dc:	7f 
ffffffff800141dd:	48 b8 db 28 b4 a0 d1 	movabs $0xe7037ed1a0b428db,%rax
ffffffff800141e4:	7e 03 e7 
ffffffff800141e7:	48 89 fe             	mov    %rdi,%rsi
ffffffff800141ea:	48 31 c6             	xor    %rax,%rsi
ffffffff800141ed:	e8 7e ff ff ff       	call   ffffffff80014170 <mul64>
ffffffff800141f2:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800141f6:	48 89 55 f8          	mov    %rdx,-0x8(%rbp)
ffffffff800141fa:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800141fe:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80014202:	48 89 4d e8          	mov    %rcx,-0x18(%rbp)
ffffffff80014206:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001420a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001420e:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80014212:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014216:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8001421a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001421e:	48 33 45 d8          	xor    -0x28(%rbp),%rax
ffffffff80014222:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80014226:	5d                   	pop    %rbp
ffffffff80014227:	c3                   	ret    
ffffffff80014228:	cc                   	int3   
ffffffff80014229:	cc                   	int3   
ffffffff8001422a:	cc                   	int3   
ffffffff8001422b:	cc                   	int3   
ffffffff8001422c:	cc                   	int3   
ffffffff8001422d:	cc                   	int3   
ffffffff8001422e:	cc                   	int3   
ffffffff8001422f:	cc                   	int3   

ffffffff80014230 <scheduler_on_schedule>:
ffffffff80014230:	55                   	push   %rbp
ffffffff80014231:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014234:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014238:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001423c:	40 80 e6 01          	and    $0x1,%sil
ffffffff80014240:	40 88 75 ff          	mov    %sil,-0x1(%rbp)
ffffffff80014244:	e8 c7 00 00 00       	call   ffffffff80014310 <get_current_thread>
ffffffff80014249:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001424d:	65 48 c7 05 b7 bd fe 	movq   $0x0,%gs:0x7ffebdb7(%rip)        # 10 <m_current_thread>
ffffffff80014254:	7f 00 00 00 00 
ffffffff80014259:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff8001425d:	74 0c                	je     ffffffff8001426b <scheduler_on_schedule+0x3b>
ffffffff8001425f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80014264:	75 05                	jne    ffffffff8001426b <scheduler_on_schedule+0x3b>
ffffffff80014266:	e9 9f 00 00 00       	jmp    ffffffff8001430a <scheduler_on_schedule+0xda>
ffffffff8001426b:	eb 00                	jmp    ffffffff8001426d <scheduler_on_schedule+0x3d>
ffffffff8001426d:	44 0f 20 c0          	mov    %cr8,%rax
ffffffff80014271:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80014275:	48 83 7d e0 06       	cmpq   $0x6,-0x20(%rbp)
ffffffff8001427a:	72 2e                	jb     ffffffff800142aa <scheduler_on_schedule+0x7a>
ffffffff8001427c:	31 c0                	xor    %eax,%eax
ffffffff8001427e:	e8 6d 56 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014283:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8001428a:	48 89 c6             	mov    %rax,%rsi
ffffffff8001428d:	48 c7 c2 49 95 01 80 	mov    $0xffffffff80019549,%rdx
ffffffff80014294:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff8001429b:	41 b8 9a 03 00 00    	mov    $0x39a,%r8d
ffffffff800142a1:	31 c0                	xor    %eax,%eax
ffffffff800142a3:	e8 98 d6 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800142a8:	0f 0b                	ud2    
ffffffff800142aa:	eb 00                	jmp    ffffffff800142ac <scheduler_on_schedule+0x7c>
ffffffff800142ac:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800142b0:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff800142b4:	e8 e7 13 00 00       	call   ffffffff800156a0 <save_thread_context>
ffffffff800142b9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800142bd:	f6 80 d9 02 00 00 01 	testb  $0x1,0x2d9(%rax)
ffffffff800142c4:	74 15                	je     ffffffff800142db <scheduler_on_schedule+0xab>
ffffffff800142c6:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800142ca:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff800142cf:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff800142d4:	e8 27 12 00 00       	call   ffffffff80015500 <cas_thread_state>
ffffffff800142d9:	eb 26                	jmp    ffffffff80014301 <scheduler_on_schedule+0xd1>
ffffffff800142db:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800142df:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff800142e4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800142e9:	e8 12 12 00 00       	call   ffffffff80015500 <cas_thread_state>
ffffffff800142ee:	e8 1d fa ff ff       	call   ffffffff80013d10 <lock_scheduler>
ffffffff800142f3:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800142f7:	e8 24 00 00 00       	call   ffffffff80014320 <global_run_queue_put>
ffffffff800142fc:	e8 2f fa ff ff       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff80014301:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff80014305:	e8 46 00 00 00       	call   ffffffff80014350 <schedule>
ffffffff8001430a:	48 83 c4 20          	add    $0x20,%rsp
ffffffff8001430e:	5d                   	pop    %rbp
ffffffff8001430f:	c3                   	ret    

ffffffff80014310 <get_current_thread>:
ffffffff80014310:	55                   	push   %rbp
ffffffff80014311:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014314:	65 48 8b 05 f4 bc fe 	mov    %gs:0x7ffebcf4(%rip),%rax        # 10 <m_current_thread>
ffffffff8001431b:	7f 
ffffffff8001431c:	5d                   	pop    %rbp
ffffffff8001431d:	c3                   	ret    
ffffffff8001431e:	cc                   	int3   
ffffffff8001431f:	cc                   	int3   

ffffffff80014320 <global_run_queue_put>:
ffffffff80014320:	55                   	push   %rbp
ffffffff80014321:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014324:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80014328:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8001432c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80014330:	e8 fb 09 00 00       	call   ffffffff80014d30 <thread_queue_push_back>
ffffffff80014335:	8b 05 0d 8f 20 00    	mov    0x208f0d(%rip),%eax        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff8001433b:	ff c0                	inc    %eax
ffffffff8001433d:	89 05 05 8f 20 00    	mov    %eax,0x208f05(%rip)        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80014343:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80014347:	5d                   	pop    %rbp
ffffffff80014348:	c3                   	ret    
ffffffff80014349:	cc                   	int3   
ffffffff8001434a:	cc                   	int3   
ffffffff8001434b:	cc                   	int3   
ffffffff8001434c:	cc                   	int3   
ffffffff8001434d:	cc                   	int3   
ffffffff8001434e:	cc                   	int3   
ffffffff8001434f:	cc                   	int3   

ffffffff80014350 <schedule>:
ffffffff80014350:	55                   	push   %rbp
ffffffff80014351:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014354:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014358:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001435c:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80014363:	00 
ffffffff80014364:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff80014368:	65 8b 05 a9 bc fe 7f 	mov    %gs:0x7ffebca9(%rip),%eax        # 18 <m_scheduler_tick>
ffffffff8001436f:	b9 3d 00 00 00       	mov    $0x3d,%ecx
ffffffff80014374:	99                   	cltd   
ffffffff80014375:	f7 f9                	idiv   %ecx
ffffffff80014377:	83 fa 00             	cmp    $0x0,%edx
ffffffff8001437a:	75 23                	jne    ffffffff8001439f <schedule+0x4f>
ffffffff8001437c:	8b 05 c6 8e 20 00    	mov    0x208ec6(%rip),%eax        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80014382:	83 f8 00             	cmp    $0x0,%eax
ffffffff80014385:	7e 18                	jle    ffffffff8001439f <schedule+0x4f>
ffffffff80014387:	e8 84 f9 ff ff       	call   ffffffff80013d10 <lock_scheduler>
ffffffff8001438c:	bf 01 00 00 00       	mov    $0x1,%edi
ffffffff80014391:	e8 5a 00 00 00       	call   ffffffff800143f0 <global_run_queue_get>
ffffffff80014396:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001439a:	e8 91 f9 ff ff       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff8001439f:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff800143a4:	75 0d                	jne    ffffffff800143b3 <schedule+0x63>
ffffffff800143a6:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
ffffffff800143aa:	e8 21 01 00 00       	call   ffffffff800144d0 <run_queue_get>
ffffffff800143af:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800143b3:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff800143b8:	75 0d                	jne    ffffffff800143c7 <schedule+0x77>
ffffffff800143ba:	48 8d 7d ff          	lea    -0x1(%rbp),%rdi
ffffffff800143be:	e8 1d 02 00 00       	call   ffffffff800145e0 <find_runnable>
ffffffff800143c3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800143c7:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff800143cb:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff800143cf:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff800143d2:	0f b6 d0             	movzbl %al,%edx
ffffffff800143d5:	83 e2 01             	and    $0x1,%edx
ffffffff800143d8:	e8 a3 03 00 00       	call   ffffffff80014780 <execute>
ffffffff800143dd:	48 83 c4 20          	add    $0x20,%rsp
ffffffff800143e1:	5d                   	pop    %rbp
ffffffff800143e2:	c3                   	ret    
ffffffff800143e3:	cc                   	int3   
ffffffff800143e4:	cc                   	int3   
ffffffff800143e5:	cc                   	int3   
ffffffff800143e6:	cc                   	int3   
ffffffff800143e7:	cc                   	int3   
ffffffff800143e8:	cc                   	int3   
ffffffff800143e9:	cc                   	int3   
ffffffff800143ea:	cc                   	int3   
ffffffff800143eb:	cc                   	int3   
ffffffff800143ec:	cc                   	int3   
ffffffff800143ed:	cc                   	int3   
ffffffff800143ee:	cc                   	int3   
ffffffff800143ef:	cc                   	int3   

ffffffff800143f0 <global_run_queue_get>:
ffffffff800143f0:	55                   	push   %rbp
ffffffff800143f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800143f4:	53                   	push   %rbx
ffffffff800143f5:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff800143f9:	89 7d f0             	mov    %edi,-0x10(%rbp)
ffffffff800143fc:	8b 05 46 8e 20 00    	mov    0x208e46(%rip),%eax        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80014402:	83 f8 00             	cmp    $0x0,%eax
ffffffff80014405:	75 0d                	jne    ffffffff80014414 <global_run_queue_get+0x24>
ffffffff80014407:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff8001440e:	00 
ffffffff8001440f:	e9 aa 00 00 00       	jmp    ffffffff800144be <global_run_queue_get+0xce>
ffffffff80014414:	48 63 1d 2d 8e 20 00 	movslq 0x208e2d(%rip),%rbx        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff8001441b:	31 c0                	xor    %eax,%eax
ffffffff8001441d:	e8 ee c8 fe ff       	call   ffffffff80000d10 <get_cpu_count>
ffffffff80014422:	48 89 c1             	mov    %rax,%rcx
ffffffff80014425:	48 89 d8             	mov    %rbx,%rax
ffffffff80014428:	31 d2                	xor    %edx,%edx
ffffffff8001442a:	48 f7 f1             	div    %rcx
ffffffff8001442d:	ff c0                	inc    %eax
ffffffff8001442f:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80014432:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014435:	8b 0d 0d 8e 20 00    	mov    0x208e0d(%rip),%ecx        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff8001443b:	39 c8                	cmp    %ecx,%eax
ffffffff8001443d:	7e 09                	jle    ffffffff80014448 <global_run_queue_get+0x58>
ffffffff8001443f:	8b 05 03 8e 20 00    	mov    0x208e03(%rip),%eax        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80014445:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80014448:	83 7d f0 00          	cmpl   $0x0,-0x10(%rbp)
ffffffff8001444c:	7e 0e                	jle    ffffffff8001445c <global_run_queue_get+0x6c>
ffffffff8001444e:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014451:	3b 45 f0             	cmp    -0x10(%rbp),%eax
ffffffff80014454:	7e 06                	jle    ffffffff8001445c <global_run_queue_get+0x6c>
ffffffff80014456:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80014459:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8001445c:	81 7d f4 80 00 00 00 	cmpl   $0x80,-0xc(%rbp)
ffffffff80014463:	7e 07                	jle    ffffffff8001446c <global_run_queue_get+0x7c>
ffffffff80014465:	c7 45 f4 80 00 00 00 	movl   $0x80,-0xc(%rbp)
ffffffff8001446c:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff8001446f:	8b 0d d3 8d 20 00    	mov    0x208dd3(%rip),%ecx        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80014475:	29 c1                	sub    %eax,%ecx
ffffffff80014477:	89 0d cb 8d 20 00    	mov    %ecx,0x208dcb(%rip)        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff8001447d:	e8 4e 08 00 00       	call   ffffffff80014cd0 <thread_queue_pop>
ffffffff80014482:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80014486:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014489:	83 c0 ff             	add    $0xffffffff,%eax
ffffffff8001448c:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8001448f:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
ffffffff80014493:	7e 21                	jle    ffffffff800144b6 <global_run_queue_get+0xc6>
ffffffff80014495:	e8 36 08 00 00       	call   ffffffff80014cd0 <thread_queue_pop>
ffffffff8001449a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001449e:	48 8b 7d e0          	mov    -0x20(%rbp),%rdi
ffffffff800144a2:	31 c0                	xor    %eax,%eax
ffffffff800144a4:	31 f6                	xor    %esi,%esi
ffffffff800144a6:	e8 55 f5 ff ff       	call   ffffffff80013a00 <run_queue_put>
ffffffff800144ab:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff800144ae:	83 c0 ff             	add    $0xffffffff,%eax
ffffffff800144b1:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800144b4:	eb d9                	jmp    ffffffff8001448f <global_run_queue_get+0x9f>
ffffffff800144b6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800144ba:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800144be:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800144c2:	48 83 c4 28          	add    $0x28,%rsp
ffffffff800144c6:	5b                   	pop    %rbx
ffffffff800144c7:	5d                   	pop    %rbp
ffffffff800144c8:	c3                   	ret    
ffffffff800144c9:	cc                   	int3   
ffffffff800144ca:	cc                   	int3   
ffffffff800144cb:	cc                   	int3   
ffffffff800144cc:	cc                   	int3   
ffffffff800144cd:	cc                   	int3   
ffffffff800144ce:	cc                   	int3   
ffffffff800144cf:	cc                   	int3   

ffffffff800144d0 <run_queue_get>:
ffffffff800144d0:	55                   	push   %rbp
ffffffff800144d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800144d4:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff800144d8:	48 89 7d c0          	mov    %rdi,-0x40(%rbp)
ffffffff800144dc:	e8 1f f4 ff ff       	call   ffffffff80013900 <get_run_queue>
ffffffff800144e1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800144e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800144e9:	48 8b 80 08 08 00 00 	mov    0x808(%rax),%rax
ffffffff800144f0:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800144f4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800144f8:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff800144fc:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80014501:	74 49                	je     ffffffff8001454c <run_queue_get+0x7c>
ffffffff80014503:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80014507:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
ffffffff8001450e:	00 
ffffffff8001450f:	48 8d 4d c8          	lea    -0x38(%rbp),%rcx
ffffffff80014513:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80014517:	48 8b 75 b0          	mov    -0x50(%rbp),%rsi
ffffffff8001451b:	f0 48 0f b1 b2 08 08 	lock cmpxchg %rsi,0x808(%rdx)
ffffffff80014522:	00 00 
ffffffff80014524:	0f 94 c2             	sete   %dl
ffffffff80014527:	f6 c2 01             	test   $0x1,%dl
ffffffff8001452a:	75 03                	jne    ffffffff8001452f <run_queue_get+0x5f>
ffffffff8001452c:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001452f:	80 e2 01             	and    $0x1,%dl
ffffffff80014532:	88 55 fe             	mov    %dl,-0x2(%rbp)
ffffffff80014535:	f6 45 fe 01          	testb  $0x1,-0x2(%rbp)
ffffffff80014539:	74 11                	je     ffffffff8001454c <run_queue_get+0x7c>
ffffffff8001453b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8001453f:	c6 00 01             	movb   $0x1,(%rax)
ffffffff80014542:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80014546:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001454a:	eb 7e                	jmp    ffffffff800145ca <run_queue_get+0xfa>
ffffffff8001454c:	eb 00                	jmp    ffffffff8001454e <run_queue_get+0x7e>
ffffffff8001454e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014552:	8b 00                	mov    (%rax),%eax
ffffffff80014554:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80014557:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff8001455a:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8001455d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014561:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80014564:	89 45 d8             	mov    %eax,-0x28(%rbp)
ffffffff80014567:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff8001456a:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff8001456d:	75 0a                	jne    ffffffff80014579 <run_queue_get+0xa9>
ffffffff8001456f:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80014576:	00 
ffffffff80014577:	eb 51                	jmp    ffffffff800145ca <run_queue_get+0xfa>
ffffffff80014579:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001457d:	0f b6 4d f8          	movzbl -0x8(%rbp),%ecx
ffffffff80014581:	48 8b 44 c8 08       	mov    0x8(%rax,%rcx,8),%rax
ffffffff80014586:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff8001458a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001458e:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80014591:	ff c0                	inc    %eax
ffffffff80014593:	89 45 dc             	mov    %eax,-0x24(%rbp)
ffffffff80014596:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80014599:	8b 55 dc             	mov    -0x24(%rbp),%edx
ffffffff8001459c:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff800145a0:	0f 94 c1             	sete   %cl
ffffffff800145a3:	f6 c1 01             	test   $0x1,%cl
ffffffff800145a6:	75 03                	jne    ffffffff800145ab <run_queue_get+0xdb>
ffffffff800145a8:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800145ab:	80 e1 01             	and    $0x1,%cl
ffffffff800145ae:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff800145b1:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff800145b5:	74 11                	je     ffffffff800145c8 <run_queue_get+0xf8>
ffffffff800145b7:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff800145bb:	c6 00 00             	movb   $0x0,(%rax)
ffffffff800145be:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800145c2:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800145c6:	eb 02                	jmp    ffffffff800145ca <run_queue_get+0xfa>
ffffffff800145c8:	eb 84                	jmp    ffffffff8001454e <run_queue_get+0x7e>
ffffffff800145ca:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800145ce:	48 83 c4 50          	add    $0x50,%rsp
ffffffff800145d2:	5d                   	pop    %rbp
ffffffff800145d3:	c3                   	ret    
ffffffff800145d4:	cc                   	int3   
ffffffff800145d5:	cc                   	int3   
ffffffff800145d6:	cc                   	int3   
ffffffff800145d7:	cc                   	int3   
ffffffff800145d8:	cc                   	int3   
ffffffff800145d9:	cc                   	int3   
ffffffff800145da:	cc                   	int3   
ffffffff800145db:	cc                   	int3   
ffffffff800145dc:	cc                   	int3   
ffffffff800145dd:	cc                   	int3   
ffffffff800145de:	cc                   	int3   
ffffffff800145df:	cc                   	int3   

ffffffff800145e0 <find_runnable>:
ffffffff800145e0:	55                   	push   %rbp
ffffffff800145e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800145e4:	53                   	push   %rbx
ffffffff800145e5:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff800145e9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800145ed:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff800145f4:	00 
ffffffff800145f5:	48 8b 7d e8          	mov    -0x18(%rbp),%rdi
ffffffff800145f9:	e8 d2 fe ff ff       	call   ffffffff800144d0 <run_queue_get>
ffffffff800145fe:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80014602:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80014607:	74 15                	je     ffffffff8001461e <find_runnable+0x3e>
ffffffff80014609:	65 c6 05 0b ba fe 7f 	movb   $0x0,%gs:0x7ffeba0b(%rip)        # 1c <m_spinning>
ffffffff80014610:	00 
ffffffff80014611:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014615:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80014619:	e9 4e 01 00 00       	jmp    ffffffff8001476c <find_runnable+0x18c>
ffffffff8001461e:	8b 05 24 8c 20 00    	mov    0x208c24(%rip),%eax        # ffffffff8021d248 <m_global_run_queue_size>
ffffffff80014624:	83 f8 00             	cmp    $0x0,%eax
ffffffff80014627:	74 3c                	je     ffffffff80014665 <find_runnable+0x85>
ffffffff80014629:	e8 e2 f6 ff ff       	call   ffffffff80013d10 <lock_scheduler>
ffffffff8001462e:	31 c0                	xor    %eax,%eax
ffffffff80014630:	31 ff                	xor    %edi,%edi
ffffffff80014632:	e8 b9 fd ff ff       	call   ffffffff800143f0 <global_run_queue_get>
ffffffff80014637:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001463b:	e8 f0 f6 ff ff       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff80014640:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80014645:	74 1c                	je     ffffffff80014663 <find_runnable+0x83>
ffffffff80014647:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001464b:	c6 00 00             	movb   $0x0,(%rax)
ffffffff8001464e:	65 c6 05 c6 b9 fe 7f 	movb   $0x0,%gs:0x7ffeb9c6(%rip)        # 1c <m_spinning>
ffffffff80014655:	00 
ffffffff80014656:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001465a:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff8001465e:	e9 09 01 00 00       	jmp    ffffffff8001476c <find_runnable+0x18c>
ffffffff80014663:	eb 00                	jmp    ffffffff80014665 <find_runnable+0x85>
ffffffff80014665:	e8 a6 f6 ff ff       	call   ffffffff80013d10 <lock_scheduler>
ffffffff8001466a:	31 c0                	xor    %eax,%eax
ffffffff8001466c:	e8 df 0b 00 00       	call   ffffffff80015250 <get_cpu_id>
ffffffff80014671:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80014676:	88 c1                	mov    %al,%cl
ffffffff80014678:	d3 e2                	shl    %cl,%edx
ffffffff8001467a:	48 63 c2             	movslq %edx,%rax
ffffffff8001467d:	48 8b 0d cc 8b 20 00 	mov    0x208bcc(%rip),%rcx        # ffffffff8021d250 <m_idle_cpus>
ffffffff80014684:	48 09 c1             	or     %rax,%rcx
ffffffff80014687:	48 89 0d c2 8b 20 00 	mov    %rcx,0x208bc2(%rip)        # ffffffff8021d250 <m_idle_cpus>
ffffffff8001468e:	f0 ff 05 97 8b 20 00 	lock incl 0x208b97(%rip)        # ffffffff8021d22c <m_idle_cpus_count>
ffffffff80014695:	e8 96 f6 ff ff       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff8001469a:	65 8a 05 7b b9 fe 7f 	mov    %gs:0x7ffeb97b(%rip),%al        # 1c <m_spinning>
ffffffff800146a1:	24 01                	and    $0x1,%al
ffffffff800146a3:	a8 01                	test   $0x1,%al
ffffffff800146a5:	75 29                	jne    ffffffff800146d0 <find_runnable+0xf0>
ffffffff800146a7:	8b 05 af 8b 20 00    	mov    0x208baf(%rip),%eax        # ffffffff8021d25c <m_number_spinning>
ffffffff800146ad:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff800146b0:	8b 5d d4             	mov    -0x2c(%rbp),%ebx
ffffffff800146b3:	01 db                	add    %ebx,%ebx
ffffffff800146b5:	31 c0                	xor    %eax,%eax
ffffffff800146b7:	e8 54 c6 fe ff       	call   ffffffff80000d10 <get_cpu_count>
ffffffff800146bc:	8b 0d 6a 8b 20 00    	mov    0x208b6a(%rip),%ecx        # ffffffff8021d22c <m_idle_cpus_count>
ffffffff800146c2:	89 4d d8             	mov    %ecx,-0x28(%rbp)
ffffffff800146c5:	8b 4d d8             	mov    -0x28(%rbp),%ecx
ffffffff800146c8:	48 29 c8             	sub    %rcx,%rax
ffffffff800146cb:	48 39 c3             	cmp    %rax,%rbx
ffffffff800146ce:	73 55                	jae    ffffffff80014725 <find_runnable+0x145>
ffffffff800146d0:	65 8a 05 45 b9 fe 7f 	mov    %gs:0x7ffeb945(%rip),%al        # 1c <m_spinning>
ffffffff800146d7:	24 01                	and    $0x1,%al
ffffffff800146d9:	a8 01                	test   $0x1,%al
ffffffff800146db:	75 1d                	jne    ffffffff800146fa <find_runnable+0x11a>
ffffffff800146dd:	65 c6 05 37 b9 fe 7f 	movb   $0x1,%gs:0x7ffeb937(%rip)        # 1c <m_spinning>
ffffffff800146e4:	01 
ffffffff800146e5:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%rbp)
ffffffff800146ec:	8b 45 dc             	mov    -0x24(%rbp),%eax
ffffffff800146ef:	f0 0f c1 05 65 8b 20 	lock xadd %eax,0x208b65(%rip)        # ffffffff8021d25c <m_number_spinning>
ffffffff800146f6:	00 
ffffffff800146f7:	89 45 d0             	mov    %eax,-0x30(%rbp)
ffffffff800146fa:	e8 11 01 00 00       	call   ffffffff80014810 <steal_work>
ffffffff800146ff:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80014703:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80014708:	74 19                	je     ffffffff80014723 <find_runnable+0x143>
ffffffff8001470a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001470e:	c6 00 00             	movb   $0x0,(%rax)
ffffffff80014711:	65 c6 05 03 b9 fe 7f 	movb   $0x0,%gs:0x7ffeb903(%rip)        # 1c <m_spinning>
ffffffff80014718:	00 
ffffffff80014719:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001471d:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80014721:	eb 49                	jmp    ffffffff8001476c <find_runnable+0x18c>
ffffffff80014723:	eb 00                	jmp    ffffffff80014725 <find_runnable+0x145>
ffffffff80014725:	bf 40 42 0f 00       	mov    $0xf4240,%edi
ffffffff8001472a:	e8 c1 55 ff ff       	call   ffffffff80009cf0 <lapic_set_deadline>
ffffffff8001472f:	fa                   	cli    
ffffffff80014730:	f4                   	hlt    
ffffffff80014731:	fb                   	sti    
ffffffff80014732:	e8 d9 f5 ff ff       	call   ffffffff80013d10 <lock_scheduler>
ffffffff80014737:	31 c0                	xor    %eax,%eax
ffffffff80014739:	e8 12 0b 00 00       	call   ffffffff80015250 <get_cpu_id>
ffffffff8001473e:	ba fe ff ff ff       	mov    $0xfffffffe,%edx
ffffffff80014743:	88 c1                	mov    %al,%cl
ffffffff80014745:	d3 c2                	rol    %cl,%edx
ffffffff80014747:	48 63 c2             	movslq %edx,%rax
ffffffff8001474a:	48 8b 0d ff 8a 20 00 	mov    0x208aff(%rip),%rcx        # ffffffff8021d250 <m_idle_cpus>
ffffffff80014751:	48 21 c1             	and    %rax,%rcx
ffffffff80014754:	48 89 0d f5 8a 20 00 	mov    %rcx,0x208af5(%rip)        # ffffffff8021d250 <m_idle_cpus>
ffffffff8001475b:	f0 ff 0d ca 8a 20 00 	lock decl 0x208aca(%rip)        # ffffffff8021d22c <m_idle_cpus_count>
ffffffff80014762:	e8 c9 f5 ff ff       	call   ffffffff80013d30 <unlock_scheduler>
ffffffff80014767:	e9 89 fe ff ff       	jmp    ffffffff800145f5 <find_runnable+0x15>
ffffffff8001476c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014770:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80014774:	5b                   	pop    %rbx
ffffffff80014775:	5d                   	pop    %rbp
ffffffff80014776:	c3                   	ret    
ffffffff80014777:	cc                   	int3   
ffffffff80014778:	cc                   	int3   
ffffffff80014779:	cc                   	int3   
ffffffff8001477a:	cc                   	int3   
ffffffff8001477b:	cc                   	int3   
ffffffff8001477c:	cc                   	int3   
ffffffff8001477d:	cc                   	int3   
ffffffff8001477e:	cc                   	int3   
ffffffff8001477f:	cc                   	int3   

ffffffff80014780 <execute>:
ffffffff80014780:	55                   	push   %rbp
ffffffff80014781:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014784:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014788:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001478c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80014790:	80 e2 01             	and    $0x1,%dl
ffffffff80014793:	88 55 ff             	mov    %dl,-0x1(%rbp)
ffffffff80014796:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001479a:	65 48 89 05 6e b8 fe 	mov    %rax,%gs:0x7ffeb86e(%rip)        # 10 <m_current_thread>
ffffffff800147a1:	7f 
ffffffff800147a2:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800147a6:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff800147ab:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff800147b0:	e8 4b 0d 00 00       	call   ffffffff80015500 <cas_thread_state>
ffffffff800147b5:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff800147b9:	75 1c                	jne    ffffffff800147d7 <execute+0x57>
ffffffff800147bb:	65 8b 05 56 b8 fe 7f 	mov    %gs:0x7ffeb856(%rip),%eax        # 18 <m_scheduler_tick>
ffffffff800147c2:	ff c0                	inc    %eax
ffffffff800147c4:	65 89 05 4d b8 fe 7f 	mov    %eax,%gs:0x7ffeb84d(%rip)        # 18 <m_scheduler_tick>
ffffffff800147cb:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff800147d0:	e8 1b 55 ff ff       	call   ffffffff80009cf0 <lapic_set_deadline>
ffffffff800147d5:	eb 18                	jmp    ffffffff800147ef <execute+0x6f>
ffffffff800147d7:	65 8b 05 3a b8 fe 7f 	mov    %gs:0x7ffeb83a(%rip),%eax        # 18 <m_scheduler_tick>
ffffffff800147de:	83 f8 00             	cmp    $0x0,%eax
ffffffff800147e1:	75 0a                	jne    ffffffff800147ed <execute+0x6d>
ffffffff800147e3:	bf 10 27 00 00       	mov    $0x2710,%edi
ffffffff800147e8:	e8 03 55 ff ff       	call   ffffffff80009cf0 <lapic_set_deadline>
ffffffff800147ed:	eb 00                	jmp    ffffffff800147ef <execute+0x6f>
ffffffff800147ef:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff800147f3:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff800147f7:	e8 64 10 00 00       	call   ffffffff80015860 <restore_thread_context>
ffffffff800147fc:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80014800:	5d                   	pop    %rbp
ffffffff80014801:	c3                   	ret    
ffffffff80014802:	cc                   	int3   
ffffffff80014803:	cc                   	int3   
ffffffff80014804:	cc                   	int3   
ffffffff80014805:	cc                   	int3   
ffffffff80014806:	cc                   	int3   
ffffffff80014807:	cc                   	int3   
ffffffff80014808:	cc                   	int3   
ffffffff80014809:	cc                   	int3   
ffffffff8001480a:	cc                   	int3   
ffffffff8001480b:	cc                   	int3   
ffffffff8001480c:	cc                   	int3   
ffffffff8001480d:	cc                   	int3   
ffffffff8001480e:	cc                   	int3   
ffffffff8001480f:	cc                   	int3   

ffffffff80014810 <steal_work>:
ffffffff80014810:	55                   	push   %rbp
ffffffff80014811:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014814:	53                   	push   %rbx
ffffffff80014815:	48 83 ec 38          	sub    $0x38,%rsp
ffffffff80014819:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%rbp)
ffffffff80014820:	83 7d f0 04          	cmpl   $0x4,-0x10(%rbp)
ffffffff80014824:	0f 8d a6 00 00 00    	jge    ffffffff800148d0 <steal_work+0xc0>
ffffffff8001482a:	83 7d f0 03          	cmpl   $0x3,-0x10(%rbp)
ffffffff8001482e:	0f 94 c0             	sete   %al
ffffffff80014831:	24 01                	and    $0x1,%al
ffffffff80014833:	88 45 f7             	mov    %al,-0x9(%rbp)
ffffffff80014836:	e8 75 f9 ff ff       	call   ffffffff800141b0 <fastrandom>
ffffffff8001483b:	89 c7                	mov    %eax,%edi
ffffffff8001483d:	e8 ae 00 00 00       	call   ffffffff800148f0 <random_order_start>
ffffffff80014842:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80014846:	48 89 55 d0          	mov    %rdx,-0x30(%rbp)
ffffffff8001484a:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
ffffffff8001484e:	e8 0d 01 00 00       	call   ffffffff80014960 <random_enum_done>
ffffffff80014853:	34 ff                	xor    $0xff,%al
ffffffff80014855:	a8 01                	test   $0x1,%al
ffffffff80014857:	75 02                	jne    ffffffff8001485b <steal_work+0x4b>
ffffffff80014859:	eb 65                	jmp    ffffffff800148c0 <steal_work+0xb0>
ffffffff8001485b:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
ffffffff8001485f:	e8 2c 01 00 00       	call   ffffffff80014990 <random_enum_position>
ffffffff80014864:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80014867:	8b 5d ec             	mov    -0x14(%rbp),%ebx
ffffffff8001486a:	31 c0                	xor    %eax,%eax
ffffffff8001486c:	e8 df 09 00 00       	call   ffffffff80015250 <get_cpu_id>
ffffffff80014871:	39 c3                	cmp    %eax,%ebx
ffffffff80014873:	75 02                	jne    ffffffff80014877 <steal_work+0x67>
ffffffff80014875:	eb 3e                	jmp    ffffffff800148b5 <steal_work+0xa5>
ffffffff80014877:	48 8b 05 d2 89 20 00 	mov    0x2089d2(%rip),%rax        # ffffffff8021d250 <m_idle_cpus>
ffffffff8001487e:	48 63 4d ec          	movslq -0x14(%rbp),%rcx
ffffffff80014882:	48 21 c8             	and    %rcx,%rax
ffffffff80014885:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80014889:	74 02                	je     ffffffff8001488d <steal_work+0x7d>
ffffffff8001488b:	eb 28                	jmp    ffffffff800148b5 <steal_work+0xa5>
ffffffff8001488d:	8b 7d ec             	mov    -0x14(%rbp),%edi
ffffffff80014890:	8a 45 f7             	mov    -0x9(%rbp),%al
ffffffff80014893:	0f b6 f0             	movzbl %al,%esi
ffffffff80014896:	83 e6 01             	and    $0x1,%esi
ffffffff80014899:	e8 12 01 00 00       	call   ffffffff800149b0 <run_queue_steal>
ffffffff8001489e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800148a2:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff800148a7:	74 0a                	je     ffffffff800148b3 <steal_work+0xa3>
ffffffff800148a9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800148ad:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800148b1:	eb 25                	jmp    ffffffff800148d8 <steal_work+0xc8>
ffffffff800148b3:	eb 00                	jmp    ffffffff800148b5 <steal_work+0xa5>
ffffffff800148b5:	48 8d 7d c8          	lea    -0x38(%rbp),%rdi
ffffffff800148b9:	e8 02 02 00 00       	call   ffffffff80014ac0 <random_enum_next>
ffffffff800148be:	eb 8a                	jmp    ffffffff8001484a <steal_work+0x3a>
ffffffff800148c0:	eb 00                	jmp    ffffffff800148c2 <steal_work+0xb2>
ffffffff800148c2:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff800148c5:	83 c0 01             	add    $0x1,%eax
ffffffff800148c8:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff800148cb:	e9 50 ff ff ff       	jmp    ffffffff80014820 <steal_work+0x10>
ffffffff800148d0:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff800148d7:	00 
ffffffff800148d8:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800148dc:	48 83 c4 38          	add    $0x38,%rsp
ffffffff800148e0:	5b                   	pop    %rbx
ffffffff800148e1:	5d                   	pop    %rbp
ffffffff800148e2:	c3                   	ret    
ffffffff800148e3:	cc                   	int3   
ffffffff800148e4:	cc                   	int3   
ffffffff800148e5:	cc                   	int3   
ffffffff800148e6:	cc                   	int3   
ffffffff800148e7:	cc                   	int3   
ffffffff800148e8:	cc                   	int3   
ffffffff800148e9:	cc                   	int3   
ffffffff800148ea:	cc                   	int3   
ffffffff800148eb:	cc                   	int3   
ffffffff800148ec:	cc                   	int3   
ffffffff800148ed:	cc                   	int3   
ffffffff800148ee:	cc                   	int3   
ffffffff800148ef:	cc                   	int3   

ffffffff800148f0 <random_order_start>:
ffffffff800148f0:	55                   	push   %rbp
ffffffff800148f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800148f4:	48 83 ec 18          	sub    $0x18,%rsp
ffffffff800148f8:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff800148fb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
ffffffff80014902:	8b 05 58 89 20 00    	mov    0x208958(%rip),%eax        # ffffffff8021d260 <m_random_order_count>
ffffffff80014908:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff8001490b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001490e:	8b 0d 4c 89 20 00    	mov    0x20894c(%rip),%ecx        # ffffffff8021d260 <m_random_order_count>
ffffffff80014914:	31 d2                	xor    %edx,%edx
ffffffff80014916:	f7 f1                	div    %ecx
ffffffff80014918:	89 55 f0             	mov    %edx,-0x10(%rbp)
ffffffff8001491b:	48 8d 4d f4          	lea    -0xc(%rbp),%rcx
ffffffff8001491f:	48 8b 35 42 89 20 00 	mov    0x208942(%rip),%rsi        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff80014926:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80014929:	48 83 fe 00          	cmp    $0x0,%rsi
ffffffff8001492d:	74 0d                	je     ffffffff8001493c <random_order_start+0x4c>
ffffffff8001492f:	48 8b 15 32 89 20 00 	mov    0x208932(%rip),%rdx        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff80014936:	48 8b 7a e0          	mov    -0x20(%rdx),%rdi
ffffffff8001493a:	eb 04                	jmp    ffffffff80014940 <random_order_start+0x50>
ffffffff8001493c:	31 ff                	xor    %edi,%edi
ffffffff8001493e:	eb 00                	jmp    ffffffff80014940 <random_order_start+0x50>
ffffffff80014940:	48 99                	cqto   
ffffffff80014942:	48 f7 ff             	idiv   %rdi
ffffffff80014945:	8b 04 96             	mov    (%rsi,%rdx,4),%eax
ffffffff80014948:	89 01                	mov    %eax,(%rcx)
ffffffff8001494a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001494e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80014952:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80014956:	5d                   	pop    %rbp
ffffffff80014957:	c3                   	ret    
ffffffff80014958:	cc                   	int3   
ffffffff80014959:	cc                   	int3   
ffffffff8001495a:	cc                   	int3   
ffffffff8001495b:	cc                   	int3   
ffffffff8001495c:	cc                   	int3   
ffffffff8001495d:	cc                   	int3   
ffffffff8001495e:	cc                   	int3   
ffffffff8001495f:	cc                   	int3   

ffffffff80014960 <random_enum_done>:
ffffffff80014960:	55                   	push   %rbp
ffffffff80014961:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014964:	50                   	push   %rax
ffffffff80014965:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80014969:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001496d:	8b 00                	mov    (%rax),%eax
ffffffff8001496f:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80014973:	3b 41 04             	cmp    0x4(%rcx),%eax
ffffffff80014976:	0f 94 c0             	sete   %al
ffffffff80014979:	24 01                	and    $0x1,%al
ffffffff8001497b:	0f b6 c0             	movzbl %al,%eax
ffffffff8001497e:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80014982:	5d                   	pop    %rbp
ffffffff80014983:	c3                   	ret    
ffffffff80014984:	cc                   	int3   
ffffffff80014985:	cc                   	int3   
ffffffff80014986:	cc                   	int3   
ffffffff80014987:	cc                   	int3   
ffffffff80014988:	cc                   	int3   
ffffffff80014989:	cc                   	int3   
ffffffff8001498a:	cc                   	int3   
ffffffff8001498b:	cc                   	int3   
ffffffff8001498c:	cc                   	int3   
ffffffff8001498d:	cc                   	int3   
ffffffff8001498e:	cc                   	int3   
ffffffff8001498f:	cc                   	int3   

ffffffff80014990 <random_enum_position>:
ffffffff80014990:	55                   	push   %rbp
ffffffff80014991:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014994:	50                   	push   %rax
ffffffff80014995:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80014999:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001499d:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff800149a0:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800149a4:	5d                   	pop    %rbp
ffffffff800149a5:	c3                   	ret    
ffffffff800149a6:	cc                   	int3   
ffffffff800149a7:	cc                   	int3   
ffffffff800149a8:	cc                   	int3   
ffffffff800149a9:	cc                   	int3   
ffffffff800149aa:	cc                   	int3   
ffffffff800149ab:	cc                   	int3   
ffffffff800149ac:	cc                   	int3   
ffffffff800149ad:	cc                   	int3   
ffffffff800149ae:	cc                   	int3   
ffffffff800149af:	cc                   	int3   

ffffffff800149b0 <run_queue_steal>:
ffffffff800149b0:	55                   	push   %rbp
ffffffff800149b1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800149b4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff800149b8:	89 7d d0             	mov    %edi,-0x30(%rbp)
ffffffff800149bb:	40 80 e6 01          	and    $0x1,%sil
ffffffff800149bf:	40 88 75 fb          	mov    %sil,-0x5(%rbp)
ffffffff800149c3:	e8 38 ef ff ff       	call   ffffffff80013900 <get_run_queue>
ffffffff800149c8:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800149cc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800149d0:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff800149d3:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff800149d6:	8b 7d d0             	mov    -0x30(%rbp),%edi
ffffffff800149d9:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff800149dd:	48 83 c6 08          	add    $0x8,%rsi
ffffffff800149e1:	8b 55 f4             	mov    -0xc(%rbp),%edx
ffffffff800149e4:	8a 45 fb             	mov    -0x5(%rbp),%al
ffffffff800149e7:	0f b6 c8             	movzbl %al,%ecx
ffffffff800149ea:	83 e1 01             	and    $0x1,%ecx
ffffffff800149ed:	e8 0e 01 00 00       	call   ffffffff80014b00 <run_queue_grab>
ffffffff800149f2:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800149f5:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff800149f9:	75 0d                	jne    ffffffff80014a08 <run_queue_steal+0x58>
ffffffff800149fb:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff80014a02:	00 
ffffffff80014a03:	e9 a0 00 00 00       	jmp    ffffffff80014aa8 <run_queue_steal+0xf8>
ffffffff80014a08:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80014a0b:	83 c0 ff             	add    $0xffffffff,%eax
ffffffff80014a0e:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80014a11:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80014a15:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80014a18:	03 4d fc             	add    -0x4(%rbp),%ecx
ffffffff80014a1b:	81 e1 ff 00 00 00    	and    $0xff,%ecx
ffffffff80014a21:	89 c9                	mov    %ecx,%ecx
ffffffff80014a23:	48 8b 44 c8 08       	mov    0x8(%rax,%rcx,8),%rax
ffffffff80014a28:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80014a2c:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80014a30:	75 0a                	jne    ffffffff80014a3c <run_queue_steal+0x8c>
ffffffff80014a32:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80014a36:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80014a3a:	eb 6c                	jmp    ffffffff80014aa8 <run_queue_steal+0xf8>
ffffffff80014a3c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80014a40:	8b 00                	mov    (%rax),%eax
ffffffff80014a42:	89 45 d8             	mov    %eax,-0x28(%rbp)
ffffffff80014a45:	8b 45 d8             	mov    -0x28(%rbp),%eax
ffffffff80014a48:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80014a4b:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014a4e:	2b 45 d4             	sub    -0x2c(%rbp),%eax
ffffffff80014a51:	03 45 fc             	add    -0x4(%rbp),%eax
ffffffff80014a54:	3d 00 01 00 00       	cmp    $0x100,%eax
ffffffff80014a59:	72 2e                	jb     ffffffff80014a89 <run_queue_steal+0xd9>
ffffffff80014a5b:	31 c0                	xor    %eax,%eax
ffffffff80014a5d:	e8 8e 4e ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014a62:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80014a69:	48 89 c6             	mov    %rax,%rsi
ffffffff80014a6c:	48 c7 c2 da 97 01 80 	mov    $0xffffffff800197da,%rdx
ffffffff80014a73:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80014a7a:	41 b8 d8 01 00 00    	mov    $0x1d8,%r8d
ffffffff80014a80:	31 c0                	xor    %eax,%eax
ffffffff80014a82:	e8 b9 ce ff ff       	call   ffffffff80011940 <printf_>
ffffffff80014a87:	0f 0b                	ud2    
ffffffff80014a89:	eb 00                	jmp    ffffffff80014a8b <run_queue_steal+0xdb>
ffffffff80014a8b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80014a8f:	8b 4d f4             	mov    -0xc(%rbp),%ecx
ffffffff80014a92:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80014a95:	01 d1                	add    %edx,%ecx
ffffffff80014a97:	89 4d dc             	mov    %ecx,-0x24(%rbp)
ffffffff80014a9a:	8b 4d dc             	mov    -0x24(%rbp),%ecx
ffffffff80014a9d:	89 48 04             	mov    %ecx,0x4(%rax)
ffffffff80014aa0:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80014aa4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80014aa8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014aac:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80014ab0:	5d                   	pop    %rbp
ffffffff80014ab1:	c3                   	ret    
ffffffff80014ab2:	cc                   	int3   
ffffffff80014ab3:	cc                   	int3   
ffffffff80014ab4:	cc                   	int3   
ffffffff80014ab5:	cc                   	int3   
ffffffff80014ab6:	cc                   	int3   
ffffffff80014ab7:	cc                   	int3   
ffffffff80014ab8:	cc                   	int3   
ffffffff80014ab9:	cc                   	int3   
ffffffff80014aba:	cc                   	int3   
ffffffff80014abb:	cc                   	int3   
ffffffff80014abc:	cc                   	int3   
ffffffff80014abd:	cc                   	int3   
ffffffff80014abe:	cc                   	int3   
ffffffff80014abf:	cc                   	int3   

ffffffff80014ac0 <random_enum_next>:
ffffffff80014ac0:	55                   	push   %rbp
ffffffff80014ac1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014ac4:	50                   	push   %rax
ffffffff80014ac5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80014ac9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014acd:	8b 08                	mov    (%rax),%ecx
ffffffff80014acf:	83 c1 01             	add    $0x1,%ecx
ffffffff80014ad2:	89 08                	mov    %ecx,(%rax)
ffffffff80014ad4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014ad8:	8b 40 08             	mov    0x8(%rax),%eax
ffffffff80014adb:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80014adf:	03 41 0c             	add    0xc(%rcx),%eax
ffffffff80014ae2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80014ae6:	31 d2                	xor    %edx,%edx
ffffffff80014ae8:	f7 71 04             	divl   0x4(%rcx)
ffffffff80014aeb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014aef:	89 50 08             	mov    %edx,0x8(%rax)
ffffffff80014af2:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80014af6:	5d                   	pop    %rbp
ffffffff80014af7:	c3                   	ret    
ffffffff80014af8:	cc                   	int3   
ffffffff80014af9:	cc                   	int3   
ffffffff80014afa:	cc                   	int3   
ffffffff80014afb:	cc                   	int3   
ffffffff80014afc:	cc                   	int3   
ffffffff80014afd:	cc                   	int3   
ffffffff80014afe:	cc                   	int3   
ffffffff80014aff:	cc                   	int3   

ffffffff80014b00 <run_queue_grab>:
ffffffff80014b00:	55                   	push   %rbp
ffffffff80014b01:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014b04:	48 83 ec 60          	sub    $0x60,%rsp
ffffffff80014b08:	89 7d bc             	mov    %edi,-0x44(%rbp)
ffffffff80014b0b:	48 89 75 b0          	mov    %rsi,-0x50(%rbp)
ffffffff80014b0f:	89 55 dc             	mov    %edx,-0x24(%rbp)
ffffffff80014b12:	80 e1 01             	and    $0x1,%cl
ffffffff80014b15:	88 4d f9             	mov    %cl,-0x7(%rbp)
ffffffff80014b18:	8b 7d bc             	mov    -0x44(%rbp),%edi
ffffffff80014b1b:	e8 80 01 00 00       	call   ffffffff80014ca0 <get_run_queue_of>
ffffffff80014b20:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80014b24:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014b28:	8b 00                	mov    (%rax),%eax
ffffffff80014b2a:	89 45 c0             	mov    %eax,-0x40(%rbp)
ffffffff80014b2d:	8b 45 c0             	mov    -0x40(%rbp),%eax
ffffffff80014b30:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80014b33:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014b37:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80014b3a:	89 45 c8             	mov    %eax,-0x38(%rbp)
ffffffff80014b3d:	8b 45 c8             	mov    -0x38(%rbp),%eax
ffffffff80014b40:	89 45 c4             	mov    %eax,-0x3c(%rbp)
ffffffff80014b43:	8b 45 c4             	mov    -0x3c(%rbp),%eax
ffffffff80014b46:	2b 45 f0             	sub    -0x10(%rbp),%eax
ffffffff80014b49:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80014b4c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80014b4f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff80014b52:	c1 e9 01             	shr    $0x1,%ecx
ffffffff80014b55:	29 c8                	sub    %ecx,%eax
ffffffff80014b57:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80014b5a:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80014b5e:	0f 85 8e 00 00 00    	jne    ffffffff80014bf2 <run_queue_grab+0xf2>
ffffffff80014b64:	f6 45 f9 01          	testb  $0x1,-0x7(%rbp)
ffffffff80014b68:	74 7a                	je     ffffffff80014be4 <run_queue_grab+0xe4>
ffffffff80014b6a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014b6e:	48 8b 80 08 08 00 00 	mov    0x808(%rax),%rax
ffffffff80014b75:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80014b79:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80014b7e:	74 62                	je     ffffffff80014be2 <run_queue_grab+0xe2>
ffffffff80014b80:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff80014b84:	48 c7 45 a0 00 00 00 	movq   $0x0,-0x60(%rbp)
ffffffff80014b8b:	00 
ffffffff80014b8c:	48 8d 4d d0          	lea    -0x30(%rbp),%rcx
ffffffff80014b90:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80014b94:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
ffffffff80014b98:	f0 48 0f b1 b2 08 08 	lock cmpxchg %rsi,0x808(%rdx)
ffffffff80014b9f:	00 00 
ffffffff80014ba1:	0f 94 c2             	sete   %dl
ffffffff80014ba4:	f6 c2 01             	test   $0x1,%dl
ffffffff80014ba7:	75 03                	jne    ffffffff80014bac <run_queue_grab+0xac>
ffffffff80014ba9:	48 89 01             	mov    %rax,(%rcx)
ffffffff80014bac:	80 e2 01             	and    $0x1,%dl
ffffffff80014baf:	88 55 fa             	mov    %dl,-0x6(%rbp)
ffffffff80014bb2:	f6 45 fa 01          	testb  $0x1,-0x6(%rbp)
ffffffff80014bb6:	75 07                	jne    ffffffff80014bbf <run_queue_grab+0xbf>
ffffffff80014bb8:	eb 00                	jmp    ffffffff80014bba <run_queue_grab+0xba>
ffffffff80014bba:	e9 65 ff ff ff       	jmp    ffffffff80014b24 <run_queue_grab+0x24>
ffffffff80014bbf:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff80014bc3:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80014bc7:	8b 55 dc             	mov    -0x24(%rbp),%edx
ffffffff80014bca:	81 e2 ff 00 00 00    	and    $0xff,%edx
ffffffff80014bd0:	89 d2                	mov    %edx,%edx
ffffffff80014bd2:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80014bd6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80014bdd:	e9 a7 00 00 00       	jmp    ffffffff80014c89 <run_queue_grab+0x189>
ffffffff80014be2:	eb 02                	jmp    ffffffff80014be6 <run_queue_grab+0xe6>
ffffffff80014be4:	eb 00                	jmp    ffffffff80014be6 <run_queue_grab+0xe6>
ffffffff80014be6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff80014bed:	e9 97 00 00 00       	jmp    ffffffff80014c89 <run_queue_grab+0x189>
ffffffff80014bf2:	81 7d fc 80 00 00 00 	cmpl   $0x80,-0x4(%rbp)
ffffffff80014bf9:	76 02                	jbe    ffffffff80014bfd <run_queue_grab+0xfd>
ffffffff80014bfb:	eb bd                	jmp    ffffffff80014bba <run_queue_grab+0xba>
ffffffff80014bfd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80014c04:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014c07:	3b 45 fc             	cmp    -0x4(%rbp),%eax
ffffffff80014c0a:	73 40                	jae    ffffffff80014c4c <run_queue_grab+0x14c>
ffffffff80014c0c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80014c10:	8b 4d f0             	mov    -0x10(%rbp),%ecx
ffffffff80014c13:	03 4d f4             	add    -0xc(%rbp),%ecx
ffffffff80014c16:	81 e1 ff 00 00 00    	and    $0xff,%ecx
ffffffff80014c1c:	89 c9                	mov    %ecx,%ecx
ffffffff80014c1e:	48 8b 44 c8 08       	mov    0x8(%rax,%rcx,8),%rax
ffffffff80014c23:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
ffffffff80014c27:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
ffffffff80014c2b:	48 8b 4d b0          	mov    -0x50(%rbp),%rcx
ffffffff80014c2f:	8b 55 dc             	mov    -0x24(%rbp),%edx
ffffffff80014c32:	03 55 f4             	add    -0xc(%rbp),%edx
ffffffff80014c35:	81 e2 ff 00 00 00    	and    $0xff,%edx
ffffffff80014c3b:	89 d2                	mov    %edx,%edx
ffffffff80014c3d:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80014c41:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80014c44:	83 c0 01             	add    $0x1,%eax
ffffffff80014c47:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80014c4a:	eb b8                	jmp    ffffffff80014c04 <run_queue_grab+0x104>
ffffffff80014c4c:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80014c50:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80014c53:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80014c56:	01 d0                	add    %edx,%eax
ffffffff80014c58:	89 45 cc             	mov    %eax,-0x34(%rbp)
ffffffff80014c5b:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff80014c5e:	8b 55 cc             	mov    -0x34(%rbp),%edx
ffffffff80014c61:	f0 0f b1 11          	lock cmpxchg %edx,(%rcx)
ffffffff80014c65:	0f 94 c1             	sete   %cl
ffffffff80014c68:	f6 c1 01             	test   $0x1,%cl
ffffffff80014c6b:	75 03                	jne    ffffffff80014c70 <run_queue_grab+0x170>
ffffffff80014c6d:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80014c70:	80 e1 01             	and    $0x1,%cl
ffffffff80014c73:	88 4d fb             	mov    %cl,-0x5(%rbp)
ffffffff80014c76:	f6 45 fb 01          	testb  $0x1,-0x5(%rbp)
ffffffff80014c7a:	74 08                	je     ffffffff80014c84 <run_queue_grab+0x184>
ffffffff80014c7c:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80014c7f:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80014c82:	eb 05                	jmp    ffffffff80014c89 <run_queue_grab+0x189>
ffffffff80014c84:	e9 31 ff ff ff       	jmp    ffffffff80014bba <run_queue_grab+0xba>
ffffffff80014c89:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80014c8c:	48 83 c4 60          	add    $0x60,%rsp
ffffffff80014c90:	5d                   	pop    %rbp
ffffffff80014c91:	c3                   	ret    
ffffffff80014c92:	cc                   	int3   
ffffffff80014c93:	cc                   	int3   
ffffffff80014c94:	cc                   	int3   
ffffffff80014c95:	cc                   	int3   
ffffffff80014c96:	cc                   	int3   
ffffffff80014c97:	cc                   	int3   
ffffffff80014c98:	cc                   	int3   
ffffffff80014c99:	cc                   	int3   
ffffffff80014c9a:	cc                   	int3   
ffffffff80014c9b:	cc                   	int3   
ffffffff80014c9c:	cc                   	int3   
ffffffff80014c9d:	cc                   	int3   
ffffffff80014c9e:	cc                   	int3   
ffffffff80014c9f:	cc                   	int3   

ffffffff80014ca0 <get_run_queue_of>:
ffffffff80014ca0:	55                   	push   %rbp
ffffffff80014ca1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014ca4:	48 83 ec 04          	sub    $0x4,%rsp
ffffffff80014ca8:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff80014cab:	48 8b 05 7e 85 20 00 	mov    0x20857e(%rip),%rax        # ffffffff8021d230 <m_run_queues>
ffffffff80014cb2:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80014cb6:	48 69 c9 10 08 00 00 	imul   $0x810,%rcx,%rcx
ffffffff80014cbd:	48 01 c8             	add    %rcx,%rax
ffffffff80014cc0:	48 83 c4 04          	add    $0x4,%rsp
ffffffff80014cc4:	5d                   	pop    %rbp
ffffffff80014cc5:	c3                   	ret    
ffffffff80014cc6:	cc                   	int3   
ffffffff80014cc7:	cc                   	int3   
ffffffff80014cc8:	cc                   	int3   
ffffffff80014cc9:	cc                   	int3   
ffffffff80014cca:	cc                   	int3   
ffffffff80014ccb:	cc                   	int3   
ffffffff80014ccc:	cc                   	int3   
ffffffff80014ccd:	cc                   	int3   
ffffffff80014cce:	cc                   	int3   
ffffffff80014ccf:	cc                   	int3   

ffffffff80014cd0 <thread_queue_pop>:
ffffffff80014cd0:	55                   	push   %rbp
ffffffff80014cd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014cd4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80014cd8:	48 c7 45 f8 38 d2 21 	movq   $0xffffffff8021d238,-0x8(%rbp)
ffffffff80014cdf:	80 
ffffffff80014ce0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014ce4:	48 8b 00             	mov    (%rax),%rax
ffffffff80014ce7:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80014ceb:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80014cf0:	74 2a                	je     ffffffff80014d1c <thread_queue_pop+0x4c>
ffffffff80014cf2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014cf6:	48 8b 80 e0 02 00 00 	mov    0x2e0(%rax),%rax
ffffffff80014cfd:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80014d01:	48 89 01             	mov    %rax,(%rcx)
ffffffff80014d04:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014d08:	48 83 38 00          	cmpq   $0x0,(%rax)
ffffffff80014d0c:	75 0c                	jne    ffffffff80014d1a <thread_queue_pop+0x4a>
ffffffff80014d0e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014d12:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80014d19:	00 
ffffffff80014d1a:	eb 00                	jmp    ffffffff80014d1c <thread_queue_pop+0x4c>
ffffffff80014d1c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014d20:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80014d24:	5d                   	pop    %rbp
ffffffff80014d25:	c3                   	ret    
ffffffff80014d26:	cc                   	int3   
ffffffff80014d27:	cc                   	int3   
ffffffff80014d28:	cc                   	int3   
ffffffff80014d29:	cc                   	int3   
ffffffff80014d2a:	cc                   	int3   
ffffffff80014d2b:	cc                   	int3   
ffffffff80014d2c:	cc                   	int3   
ffffffff80014d2d:	cc                   	int3   
ffffffff80014d2e:	cc                   	int3   
ffffffff80014d2f:	cc                   	int3   

ffffffff80014d30 <thread_queue_push_back>:
ffffffff80014d30:	55                   	push   %rbp
ffffffff80014d31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014d34:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80014d38:	48 c7 45 f0 38 d2 21 	movq   $0xffffffff8021d238,-0x10(%rbp)
ffffffff80014d3f:	80 
ffffffff80014d40:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80014d44:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014d48:	48 c7 80 e0 02 00 00 	movq   $0x0,0x2e0(%rax)
ffffffff80014d4f:	00 00 00 00 
ffffffff80014d53:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80014d57:	48 83 78 08 00       	cmpq   $0x0,0x8(%rax)
ffffffff80014d5c:	74 15                	je     ffffffff80014d73 <thread_queue_push_back+0x43>
ffffffff80014d5e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014d62:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80014d66:	48 8b 49 08          	mov    0x8(%rcx),%rcx
ffffffff80014d6a:	48 89 81 e0 02 00 00 	mov    %rax,0x2e0(%rcx)
ffffffff80014d71:	eb 0b                	jmp    ffffffff80014d7e <thread_queue_push_back+0x4e>
ffffffff80014d73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014d77:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80014d7b:	48 89 01             	mov    %rax,(%rcx)
ffffffff80014d7e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014d82:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80014d86:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80014d8a:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80014d8e:	5d                   	pop    %rbp
ffffffff80014d8f:	c3                   	ret    

ffffffff80014d90 <scheduler_on_yield>:
ffffffff80014d90:	55                   	push   %rbp
ffffffff80014d91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014d94:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014d98:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80014d9c:	e8 6f f5 ff ff       	call   ffffffff80014310 <get_current_thread>
ffffffff80014da1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80014da5:	65 48 c7 05 5f b2 fe 	movq   $0x0,%gs:0x7ffeb25f(%rip)        # 10 <m_current_thread>
ffffffff80014dac:	7f 00 00 00 00 
ffffffff80014db1:	44 0f 20 c0          	mov    %cr8,%rax
ffffffff80014db5:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80014db9:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff80014dbe:	72 2e                	jb     ffffffff80014dee <scheduler_on_yield+0x5e>
ffffffff80014dc0:	31 c0                	xor    %eax,%eax
ffffffff80014dc2:	e8 29 4b ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014dc7:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80014dce:	48 89 c6             	mov    %rax,%rsi
ffffffff80014dd1:	48 c7 c2 88 8d 01 80 	mov    $0xffffffff80018d88,%rdx
ffffffff80014dd8:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80014ddf:	41 b8 b6 03 00 00    	mov    $0x3b6,%r8d
ffffffff80014de5:	31 c0                	xor    %eax,%eax
ffffffff80014de7:	e8 54 cb ff ff       	call   ffffffff80011940 <printf_>
ffffffff80014dec:	0f 0b                	ud2    
ffffffff80014dee:	eb 00                	jmp    ffffffff80014df0 <scheduler_on_yield+0x60>
ffffffff80014df0:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80014df4:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80014df8:	e8 a3 08 00 00       	call   ffffffff800156a0 <save_thread_context>
ffffffff80014dfd:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80014e01:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80014e06:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80014e0b:	e8 f0 06 00 00       	call   ffffffff80015500 <cas_thread_state>
ffffffff80014e10:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80014e14:	31 c0                	xor    %eax,%eax
ffffffff80014e16:	31 f6                	xor    %esi,%esi
ffffffff80014e18:	e8 e3 eb ff ff       	call   ffffffff80013a00 <run_queue_put>
ffffffff80014e1d:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80014e21:	e8 2a f5 ff ff       	call   ffffffff80014350 <schedule>
ffffffff80014e26:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80014e2a:	5d                   	pop    %rbp
ffffffff80014e2b:	c3                   	ret    
ffffffff80014e2c:	cc                   	int3   
ffffffff80014e2d:	cc                   	int3   
ffffffff80014e2e:	cc                   	int3   
ffffffff80014e2f:	cc                   	int3   

ffffffff80014e30 <scheduler_on_park>:
ffffffff80014e30:	55                   	push   %rbp
ffffffff80014e31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014e34:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014e38:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80014e3c:	e8 cf f4 ff ff       	call   ffffffff80014310 <get_current_thread>
ffffffff80014e41:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80014e45:	65 48 c7 05 bf b1 fe 	movq   $0x0,%gs:0x7ffeb1bf(%rip)        # 10 <m_current_thread>
ffffffff80014e4c:	7f 00 00 00 00 
ffffffff80014e51:	44 0f 20 c0          	mov    %cr8,%rax
ffffffff80014e55:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80014e59:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff80014e5e:	72 2e                	jb     ffffffff80014e8e <scheduler_on_park+0x5e>
ffffffff80014e60:	31 c0                	xor    %eax,%eax
ffffffff80014e62:	e8 89 4a ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014e67:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80014e6e:	48 89 c6             	mov    %rax,%rsi
ffffffff80014e71:	48 c7 c2 5e 96 01 80 	mov    $0xffffffff8001965e,%rdx
ffffffff80014e78:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80014e7f:	41 b8 c7 03 00 00    	mov    $0x3c7,%r8d
ffffffff80014e85:	31 c0                	xor    %eax,%eax
ffffffff80014e87:	e8 b4 ca ff ff       	call   ffffffff80011940 <printf_>
ffffffff80014e8c:	0f 0b                	ud2    
ffffffff80014e8e:	eb 00                	jmp    ffffffff80014e90 <scheduler_on_park+0x60>
ffffffff80014e90:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80014e94:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80014e98:	e8 03 08 00 00       	call   ffffffff800156a0 <save_thread_context>
ffffffff80014e9d:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80014ea1:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80014ea6:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80014eab:	e8 50 06 00 00       	call   ffffffff80015500 <cas_thread_state>
ffffffff80014eb0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014eb4:	48 83 b8 e8 02 00 00 	cmpq   $0x0,0x2e8(%rax)
ffffffff80014ebb:	00 
ffffffff80014ebc:	74 1f                	je     ffffffff80014edd <scheduler_on_park+0xad>
ffffffff80014ebe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014ec2:	48 8b b8 e8 02 00 00 	mov    0x2e8(%rax),%rdi
ffffffff80014ec9:	e8 72 bc fe ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff80014ece:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80014ed2:	48 c7 80 e8 02 00 00 	movq   $0x0,0x2e8(%rax)
ffffffff80014ed9:	00 00 00 00 
ffffffff80014edd:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80014ee1:	e8 6a f4 ff ff       	call   ffffffff80014350 <schedule>
ffffffff80014ee6:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80014eea:	5d                   	pop    %rbp
ffffffff80014eeb:	c3                   	ret    
ffffffff80014eec:	cc                   	int3   
ffffffff80014eed:	cc                   	int3   
ffffffff80014eee:	cc                   	int3   
ffffffff80014eef:	cc                   	int3   

ffffffff80014ef0 <scheduler_on_drop>:
ffffffff80014ef0:	55                   	push   %rbp
ffffffff80014ef1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014ef4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80014ef8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff80014efc:	e8 0f f4 ff ff       	call   ffffffff80014310 <get_current_thread>
ffffffff80014f01:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80014f05:	65 48 c7 05 ff b0 fe 	movq   $0x0,%gs:0x7ffeb0ff(%rip)        # 10 <m_current_thread>
ffffffff80014f0c:	7f 00 00 00 00 
ffffffff80014f11:	44 0f 20 c0          	mov    %cr8,%rax
ffffffff80014f15:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80014f19:	48 83 7d e8 06       	cmpq   $0x6,-0x18(%rbp)
ffffffff80014f1e:	72 2e                	jb     ffffffff80014f4e <scheduler_on_drop+0x5e>
ffffffff80014f20:	31 c0                	xor    %eax,%eax
ffffffff80014f22:	e8 c9 49 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014f27:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80014f2e:	48 89 c6             	mov    %rax,%rsi
ffffffff80014f31:	48 c7 c2 03 9a 01 80 	mov    $0xffffffff80019a03,%rdx
ffffffff80014f38:	48 c7 c1 cd a1 01 80 	mov    $0xffffffff8001a1cd,%rcx
ffffffff80014f3f:	41 b8 dd 03 00 00    	mov    $0x3dd,%r8d
ffffffff80014f45:	31 c0                	xor    %eax,%eax
ffffffff80014f47:	e8 f4 c9 ff ff       	call   ffffffff80011940 <printf_>
ffffffff80014f4c:	0f 0b                	ud2    
ffffffff80014f4e:	eb 00                	jmp    ffffffff80014f50 <scheduler_on_drop+0x60>
ffffffff80014f50:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80014f55:	74 18                	je     ffffffff80014f6f <scheduler_on_drop+0x7f>
ffffffff80014f57:	31 c0                	xor    %eax,%eax
ffffffff80014f59:	e8 92 49 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80014f5e:	48 c7 c7 d4 a0 01 80 	mov    $0xffffffff8001a0d4,%rdi
ffffffff80014f65:	48 89 c6             	mov    %rax,%rsi
ffffffff80014f68:	31 c0                	xor    %eax,%eax
ffffffff80014f6a:	e8 d1 c9 ff ff       	call   ffffffff80011940 <printf_>
ffffffff80014f6f:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80014f73:	e8 d8 f3 ff ff       	call   ffffffff80014350 <schedule>
ffffffff80014f78:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80014f7c:	5d                   	pop    %rbp
ffffffff80014f7d:	c3                   	ret    
ffffffff80014f7e:	cc                   	int3   
ffffffff80014f7f:	cc                   	int3   

ffffffff80014f80 <scheduler_yield>:
ffffffff80014f80:	55                   	push   %rbp
ffffffff80014f81:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014f84:	cd f1                	int    $0xf1
ffffffff80014f86:	5d                   	pop    %rbp
ffffffff80014f87:	c3                   	ret    
ffffffff80014f88:	cc                   	int3   
ffffffff80014f89:	cc                   	int3   
ffffffff80014f8a:	cc                   	int3   
ffffffff80014f8b:	cc                   	int3   
ffffffff80014f8c:	cc                   	int3   
ffffffff80014f8d:	cc                   	int3   
ffffffff80014f8e:	cc                   	int3   
ffffffff80014f8f:	cc                   	int3   

ffffffff80014f90 <scheduler_park>:
ffffffff80014f90:	55                   	push   %rbp
ffffffff80014f91:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014f94:	cd f2                	int    $0xf2
ffffffff80014f96:	5d                   	pop    %rbp
ffffffff80014f97:	c3                   	ret    
ffffffff80014f98:	cc                   	int3   
ffffffff80014f99:	cc                   	int3   
ffffffff80014f9a:	cc                   	int3   
ffffffff80014f9b:	cc                   	int3   
ffffffff80014f9c:	cc                   	int3   
ffffffff80014f9d:	cc                   	int3   
ffffffff80014f9e:	cc                   	int3   
ffffffff80014f9f:	cc                   	int3   

ffffffff80014fa0 <scheduler_drop_current>:
ffffffff80014fa0:	55                   	push   %rbp
ffffffff80014fa1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014fa4:	cd f3                	int    $0xf3
ffffffff80014fa6:	5d                   	pop    %rbp
ffffffff80014fa7:	c3                   	ret    
ffffffff80014fa8:	cc                   	int3   
ffffffff80014fa9:	cc                   	int3   
ffffffff80014faa:	cc                   	int3   
ffffffff80014fab:	cc                   	int3   
ffffffff80014fac:	cc                   	int3   
ffffffff80014fad:	cc                   	int3   
ffffffff80014fae:	cc                   	int3   
ffffffff80014faf:	cc                   	int3   

ffffffff80014fb0 <scheduler_startup>:
ffffffff80014fb0:	55                   	push   %rbp
ffffffff80014fb1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014fb4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80014fb8:	48 c7 45 f8 05 00 00 	movq   $0x5,-0x8(%rbp)
ffffffff80014fbf:	00 
ffffffff80014fc0:	48 b8 ff ff ff ff 00 	movabs $0xffffffff,%rax
ffffffff80014fc7:	00 00 00 
ffffffff80014fca:	48 23 45 f8          	and    -0x8(%rbp),%rax
ffffffff80014fce:	44 0f 22 c0          	mov    %rax,%cr8
ffffffff80014fd2:	fb                   	sti    
ffffffff80014fd3:	e8 c8 ff ff ff       	call   ffffffff80014fa0 <scheduler_drop_current>
ffffffff80014fd8:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80014fdc:	5d                   	pop    %rbp
ffffffff80014fdd:	c3                   	ret    
ffffffff80014fde:	cc                   	int3   
ffffffff80014fdf:	cc                   	int3   

ffffffff80014fe0 <init_scheduler>:
ffffffff80014fe0:	55                   	push   %rbp
ffffffff80014fe1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80014fe4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80014fe8:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80014fef:	31 c0                	xor    %eax,%eax
ffffffff80014ff1:	e8 1a bd fe ff       	call   ffffffff80000d10 <get_cpu_count>
ffffffff80014ff6:	89 c7                	mov    %eax,%edi
ffffffff80014ff8:	e8 73 00 00 00       	call   ffffffff80015070 <random_order_init>
ffffffff80014ffd:	31 c0                	xor    %eax,%eax
ffffffff80014fff:	e8 0c bd fe ff       	call   ffffffff80000d10 <get_cpu_count>
ffffffff80015004:	48 69 f8 10 08 00 00 	imul   $0x810,%rax,%rdi
ffffffff8001500b:	e8 60 81 ff ff       	call   ffffffff8000d170 <malloc>
ffffffff80015010:	48 89 05 19 82 20 00 	mov    %rax,0x208219(%rip)        # ffffffff8021d230 <m_run_queues>
ffffffff80015017:	48 8b 05 12 82 20 00 	mov    0x208212(%rip),%rax        # ffffffff8021d230 <m_run_queues>
ffffffff8001501e:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff80015022:	75 38                	jne    ffffffff8001505c <init_scheduler+0x7c>
ffffffff80015024:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8001502b:	31 c0                	xor    %eax,%eax
ffffffff8001502d:	e8 be 48 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015032:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80015035:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8001503c:	48 89 c6             	mov    %rax,%rsi
ffffffff8001503f:	48 c7 c1 81 8b 01 80 	mov    $0xffffffff80018b81,%rcx
ffffffff80015046:	49 c7 c0 cd a1 01 80 	mov    $0xffffffff8001a1cd,%r8
ffffffff8001504d:	41 b9 21 04 00 00    	mov    $0x421,%r9d
ffffffff80015053:	31 c0                	xor    %eax,%eax
ffffffff80015055:	e8 e6 c8 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001505a:	eb 04                	jmp    ffffffff80015060 <init_scheduler+0x80>
ffffffff8001505c:	eb 00                	jmp    ffffffff8001505e <init_scheduler+0x7e>
ffffffff8001505e:	eb 00                	jmp    ffffffff80015060 <init_scheduler+0x80>
ffffffff80015060:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80015063:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80015067:	5d                   	pop    %rbp
ffffffff80015068:	c3                   	ret    
ffffffff80015069:	cc                   	int3   
ffffffff8001506a:	cc                   	int3   
ffffffff8001506b:	cc                   	int3   
ffffffff8001506c:	cc                   	int3   
ffffffff8001506d:	cc                   	int3   
ffffffff8001506e:	cc                   	int3   
ffffffff8001506f:	cc                   	int3   

ffffffff80015070 <random_order_init>:
ffffffff80015070:	55                   	push   %rbp
ffffffff80015071:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015074:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80015078:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff8001507b:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8001507e:	89 05 dc 81 20 00    	mov    %eax,0x2081dc(%rip)        # ffffffff8021d260 <m_random_order_count>
ffffffff80015084:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8001508b:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001508e:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff80015091:	0f 8f 80 00 00 00    	jg     ffffffff80015117 <random_order_init+0xa7>
ffffffff80015097:	8b 7d fc             	mov    -0x4(%rbp),%edi
ffffffff8001509a:	8b 75 f8             	mov    -0x8(%rbp),%esi
ffffffff8001509d:	e8 7e 00 00 00       	call   ffffffff80015120 <gcd>
ffffffff800150a2:	83 f8 01             	cmp    $0x1,%eax
ffffffff800150a5:	75 60                	jne    ffffffff80015107 <random_order_init+0x97>
ffffffff800150a7:	48 8b 05 ba 81 20 00 	mov    0x2081ba(%rip),%rax        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff800150ae:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800150b2:	74 14                	je     ffffffff800150c8 <random_order_init+0x58>
ffffffff800150b4:	48 8b 05 ad 81 20 00 	mov    0x2081ad(%rip),%rax        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff800150bb:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff800150bf:	48 ff c1             	inc    %rcx
ffffffff800150c2:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
ffffffff800150c6:	76 21                	jbe    ffffffff800150e9 <random_order_init+0x79>
ffffffff800150c8:	48 8b 3d 99 81 20 00 	mov    0x208199(%rip),%rdi        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff800150cf:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff800150d4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800150d9:	31 c9                	xor    %ecx,%ecx
ffffffff800150db:	e8 a0 ae ff ff       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff800150e0:	48 89 05 81 81 20 00 	mov    %rax,0x208181(%rip)        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff800150e7:	eb 02                	jmp    ffffffff800150eb <random_order_init+0x7b>
ffffffff800150e9:	eb 00                	jmp    ffffffff800150eb <random_order_init+0x7b>
ffffffff800150eb:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800150ee:	48 8b 0d 73 81 20 00 	mov    0x208173(%rip),%rcx        # ffffffff8021d268 <m_random_order_coprimes>
ffffffff800150f5:	48 8b 51 e0          	mov    -0x20(%rcx),%rdx
ffffffff800150f9:	48 89 d6             	mov    %rdx,%rsi
ffffffff800150fc:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80015100:	48 89 71 e0          	mov    %rsi,-0x20(%rcx)
ffffffff80015104:	89 04 91             	mov    %eax,(%rcx,%rdx,4)
ffffffff80015107:	eb 00                	jmp    ffffffff80015109 <random_order_init+0x99>
ffffffff80015109:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff8001510c:	83 c0 01             	add    $0x1,%eax
ffffffff8001510f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80015112:	e9 74 ff ff ff       	jmp    ffffffff8001508b <random_order_init+0x1b>
ffffffff80015117:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8001511b:	5d                   	pop    %rbp
ffffffff8001511c:	c3                   	ret    
ffffffff8001511d:	cc                   	int3   
ffffffff8001511e:	cc                   	int3   
ffffffff8001511f:	cc                   	int3   

ffffffff80015120 <gcd>:
ffffffff80015120:	55                   	push   %rbp
ffffffff80015121:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015124:	48 83 ec 0c          	sub    $0xc,%rsp
ffffffff80015128:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff8001512b:	89 75 fc             	mov    %esi,-0x4(%rbp)
ffffffff8001512e:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80015132:	74 19                	je     ffffffff8001514d <gcd+0x2d>
ffffffff80015134:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80015137:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8001513a:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8001513d:	31 d2                	xor    %edx,%edx
ffffffff8001513f:	f7 75 fc             	divl   -0x4(%rbp)
ffffffff80015142:	89 55 fc             	mov    %edx,-0x4(%rbp)
ffffffff80015145:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80015148:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff8001514b:	eb e1                	jmp    ffffffff8001512e <gcd+0xe>
ffffffff8001514d:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80015150:	48 83 c4 0c          	add    $0xc,%rsp
ffffffff80015154:	5d                   	pop    %rbp
ffffffff80015155:	c3                   	ret    
ffffffff80015156:	cc                   	int3   
ffffffff80015157:	cc                   	int3   
ffffffff80015158:	cc                   	int3   
ffffffff80015159:	cc                   	int3   
ffffffff8001515a:	cc                   	int3   
ffffffff8001515b:	cc                   	int3   
ffffffff8001515c:	cc                   	int3   
ffffffff8001515d:	cc                   	int3   
ffffffff8001515e:	cc                   	int3   
ffffffff8001515f:	cc                   	int3   

ffffffff80015160 <init_cpu_locals>:
ffffffff80015160:	55                   	push   %rbp
ffffffff80015161:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015164:	41 56                	push   %r14
ffffffff80015166:	53                   	push   %rbx
ffffffff80015167:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff8001516b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
ffffffff80015172:	48 c7 c7 3c 04 00 00 	mov    $0x43c,%rdi
ffffffff80015179:	e8 f2 7f ff ff       	call   ffffffff8000d170 <malloc>
ffffffff8001517e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80015182:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80015187:	75 38                	jne    ffffffff800151c1 <init_cpu_locals+0x61>
ffffffff80015189:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%rbp)
ffffffff80015190:	31 c0                	xor    %eax,%eax
ffffffff80015192:	e8 59 47 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015197:	8b 55 ec             	mov    -0x14(%rbp),%edx
ffffffff8001519a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800151a1:	48 89 c6             	mov    %rax,%rsi
ffffffff800151a4:	48 c7 c1 bc 9e 01 80 	mov    $0xffffffff80019ebc,%rcx
ffffffff800151ab:	49 c7 c0 70 96 01 80 	mov    $0xffffffff80019670,%r8
ffffffff800151b2:	41 b9 18 00 00 00    	mov    $0x18,%r9d
ffffffff800151b8:	31 c0                	xor    %eax,%eax
ffffffff800151ba:	e8 81 c7 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800151bf:	eb 7b                	jmp    ffffffff8001523c <init_cpu_locals+0xdc>
ffffffff800151c1:	eb 00                	jmp    ffffffff800151c3 <init_cpu_locals+0x63>
ffffffff800151c3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800151c7:	b9 01 01 00 c0       	mov    $0xc0000101,%ecx
ffffffff800151cc:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff800151d0:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800151d4:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800151d8:	48 89 c2             	mov    %rax,%rdx
ffffffff800151db:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff800151df:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff800151e3:	0f 30                	wrmsr  
ffffffff800151e5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800151e9:	65 48 89 05 2f ae fe 	mov    %rax,%gs:0x7ffeae2f(%rip)        # 20 <m_per_cpu_base>
ffffffff800151f0:	7f 
ffffffff800151f1:	48 8b 05 78 80 20 00 	mov    0x208078(%rip),%rax        # ffffffff8021d270 <m_per_cpu_base_list>
ffffffff800151f8:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800151fc:	75 1a                	jne    ffffffff80015218 <init_cpu_locals+0xb8>
ffffffff800151fe:	31 c0                	xor    %eax,%eax
ffffffff80015200:	e8 0b bb fe ff       	call   ffffffff80000d10 <get_cpu_count>
ffffffff80015205:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff80015209:	48 89 c7             	mov    %rax,%rdi
ffffffff8001520c:	e8 5f 7f ff ff       	call   ffffffff8000d170 <malloc>
ffffffff80015211:	48 89 05 58 80 20 00 	mov    %rax,0x208058(%rip)        # ffffffff8021d270 <m_per_cpu_base_list>
ffffffff80015218:	31 c0                	xor    %eax,%eax
ffffffff8001521a:	e8 d1 46 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001521f:	65 89 05 02 ae fe 7f 	mov    %eax,%gs:0x7ffeae02(%rip)        # 28 <m_cpu_id>
ffffffff80015226:	4c 8b 75 e0          	mov    -0x20(%rbp),%r14
ffffffff8001522a:	48 8b 1d 3f 80 20 00 	mov    0x20803f(%rip),%rbx        # ffffffff8021d270 <m_per_cpu_base_list>
ffffffff80015231:	e8 1a 00 00 00       	call   ffffffff80015250 <get_cpu_id>
ffffffff80015236:	48 98                	cltq   
ffffffff80015238:	4c 89 34 c3          	mov    %r14,(%rbx,%rax,8)
ffffffff8001523c:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff8001523f:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80015243:	5b                   	pop    %rbx
ffffffff80015244:	41 5e                	pop    %r14
ffffffff80015246:	5d                   	pop    %rbp
ffffffff80015247:	c3                   	ret    
ffffffff80015248:	cc                   	int3   
ffffffff80015249:	cc                   	int3   
ffffffff8001524a:	cc                   	int3   
ffffffff8001524b:	cc                   	int3   
ffffffff8001524c:	cc                   	int3   
ffffffff8001524d:	cc                   	int3   
ffffffff8001524e:	cc                   	int3   
ffffffff8001524f:	cc                   	int3   

ffffffff80015250 <get_cpu_id>:
ffffffff80015250:	55                   	push   %rbp
ffffffff80015251:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015254:	65 8b 05 cd ad fe 7f 	mov    %gs:0x7ffeadcd(%rip),%eax        # 28 <m_cpu_id>
ffffffff8001525b:	5d                   	pop    %rbp
ffffffff8001525c:	c3                   	ret    
ffffffff8001525d:	cc                   	int3   
ffffffff8001525e:	cc                   	int3   
ffffffff8001525f:	cc                   	int3   

ffffffff80015260 <get_cpu_local_base>:
ffffffff80015260:	55                   	push   %rbp
ffffffff80015261:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015264:	50                   	push   %rax
ffffffff80015265:	48 c7 45 f8 30 04 00 	movq   $0x430,-0x8(%rbp)
ffffffff8001526c:	00 
ffffffff8001526d:	65 48 8b 05 ab ad fe 	mov    %gs:0x7ffeadab(%rip),%rax        # 20 <m_per_cpu_base>
ffffffff80015274:	7f 
ffffffff80015275:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015279:	48 01 c8             	add    %rcx,%rax
ffffffff8001527c:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80015280:	5d                   	pop    %rbp
ffffffff80015281:	c3                   	ret    
ffffffff80015282:	cc                   	int3   
ffffffff80015283:	cc                   	int3   
ffffffff80015284:	cc                   	int3   
ffffffff80015285:	cc                   	int3   
ffffffff80015286:	cc                   	int3   
ffffffff80015287:	cc                   	int3   
ffffffff80015288:	cc                   	int3   
ffffffff80015289:	cc                   	int3   
ffffffff8001528a:	cc                   	int3   
ffffffff8001528b:	cc                   	int3   
ffffffff8001528c:	cc                   	int3   
ffffffff8001528d:	cc                   	int3   
ffffffff8001528e:	cc                   	int3   
ffffffff8001528f:	cc                   	int3   

ffffffff80015290 <acquire_waiting_thread>:
ffffffff80015290:	55                   	push   %rbp
ffffffff80015291:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015294:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80015298:	e8 13 e7 ff ff       	call   ffffffff800139b0 <scheduler_preempt_disable>
ffffffff8001529d:	65 8a 05 88 ad fe 7f 	mov    %gs:0x7ffead88(%rip),%al        # 2c <m_wt_cache_len>
ffffffff800152a4:	0f b6 c0             	movzbl %al,%eax
ffffffff800152a7:	83 f8 00             	cmp    $0x0,%eax
ffffffff800152aa:	0f 85 bd 00 00 00    	jne    ffffffff8001536d <acquire_waiting_thread+0xdd>
ffffffff800152b0:	48 c7 c7 78 d2 21 80 	mov    $0xffffffff8021d278,%rdi
ffffffff800152b7:	e8 94 b7 fe ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff800152bc:	65 8a 05 69 ad fe 7f 	mov    %gs:0x7ffead69(%rip),%al        # 2c <m_wt_cache_len>
ffffffff800152c3:	0f b6 c8             	movzbl %al,%ecx
ffffffff800152c6:	31 c0                	xor    %eax,%eax
ffffffff800152c8:	48 83 f9 40          	cmp    $0x40,%rcx
ffffffff800152cc:	73 0e                	jae    ffffffff800152dc <acquire_waiting_thread+0x4c>
ffffffff800152ce:	48 8b 05 ab 7f 20 00 	mov    0x207fab(%rip),%rax        # ffffffff8021d280 <m_global_wt_cache>
ffffffff800152d5:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff800152d9:	0f 95 c0             	setne  %al
ffffffff800152dc:	a8 01                	test   $0x1,%al
ffffffff800152de:	75 02                	jne    ffffffff800152e2 <acquire_waiting_thread+0x52>
ffffffff800152e0:	eb 48                	jmp    ffffffff8001532a <acquire_waiting_thread+0x9a>
ffffffff800152e2:	48 8b 05 97 7f 20 00 	mov    0x207f97(%rip),%rax        # ffffffff8021d280 <m_global_wt_cache>
ffffffff800152e9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800152ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800152f1:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff800152f5:	48 89 05 84 7f 20 00 	mov    %rax,0x207f84(%rip)        # ffffffff8021d280 <m_global_wt_cache>
ffffffff800152fc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015300:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80015307:	00 
ffffffff80015308:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001530c:	65 0f b6 0d 18 ad fe 	movzbl %gs:0x7ffead18(%rip),%ecx        # 2c <m_wt_cache_len>
ffffffff80015313:	7f 
ffffffff80015314:	88 ca                	mov    %cl,%dl
ffffffff80015316:	fe c2                	inc    %dl
ffffffff80015318:	65 88 15 0d ad fe 7f 	mov    %dl,%gs:0x7ffead0d(%rip)        # 2c <m_wt_cache_len>
ffffffff8001531f:	65 48 89 04 cd 30 00 	mov    %rax,%gs:0x30(,%rcx,8)
ffffffff80015326:	00 00 
ffffffff80015328:	eb 92                	jmp    ffffffff800152bc <acquire_waiting_thread+0x2c>
ffffffff8001532a:	48 c7 c7 78 d2 21 80 	mov    $0xffffffff8021d278,%rdi
ffffffff80015331:	e8 0a b8 fe ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff80015336:	65 8a 05 ef ac fe 7f 	mov    %gs:0x7ffeacef(%rip),%al        # 2c <m_wt_cache_len>
ffffffff8001533d:	0f b6 c0             	movzbl %al,%eax
ffffffff80015340:	83 f8 00             	cmp    $0x0,%eax
ffffffff80015343:	75 26                	jne    ffffffff8001536b <acquire_waiting_thread+0xdb>
ffffffff80015345:	bf 28 00 00 00       	mov    $0x28,%edi
ffffffff8001534a:	e8 21 7e ff ff       	call   ffffffff8000d170 <malloc>
ffffffff8001534f:	65 0f b6 0d d5 ac fe 	movzbl %gs:0x7ffeacd5(%rip),%ecx        # 2c <m_wt_cache_len>
ffffffff80015356:	7f 
ffffffff80015357:	88 ca                	mov    %cl,%dl
ffffffff80015359:	fe c2                	inc    %dl
ffffffff8001535b:	65 88 15 ca ac fe 7f 	mov    %dl,%gs:0x7ffeacca(%rip)        # 2c <m_wt_cache_len>
ffffffff80015362:	65 48 89 04 cd 30 00 	mov    %rax,%gs:0x30(,%rcx,8)
ffffffff80015369:	00 00 
ffffffff8001536b:	eb 00                	jmp    ffffffff8001536d <acquire_waiting_thread+0xdd>
ffffffff8001536d:	65 8a 05 b8 ac fe 7f 	mov    %gs:0x7ffeacb8(%rip),%al        # 2c <m_wt_cache_len>
ffffffff80015374:	fe c8                	dec    %al
ffffffff80015376:	65 88 05 af ac fe 7f 	mov    %al,%gs:0x7ffeacaf(%rip)        # 2c <m_wt_cache_len>
ffffffff8001537d:	0f b6 c0             	movzbl %al,%eax
ffffffff80015380:	65 48 8b 04 c5 30 00 	mov    %gs:0x30(,%rax,8),%rax
ffffffff80015387:	00 00 
ffffffff80015389:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001538d:	65 0f b6 05 97 ac fe 	movzbl %gs:0x7ffeac97(%rip),%eax        # 2c <m_wt_cache_len>
ffffffff80015394:	7f 
ffffffff80015395:	65 48 c7 04 c5 30 00 	movq   $0x0,%gs:0x30(,%rax,8)
ffffffff8001539c:	00 00 00 00 00 00 
ffffffff800153a2:	e8 79 e7 ff ff       	call   ffffffff80013b20 <scheduler_preempt_enable>
ffffffff800153a7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800153ab:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800153af:	5d                   	pop    %rbp
ffffffff800153b0:	c3                   	ret    
ffffffff800153b1:	cc                   	int3   
ffffffff800153b2:	cc                   	int3   
ffffffff800153b3:	cc                   	int3   
ffffffff800153b4:	cc                   	int3   
ffffffff800153b5:	cc                   	int3   
ffffffff800153b6:	cc                   	int3   
ffffffff800153b7:	cc                   	int3   
ffffffff800153b8:	cc                   	int3   
ffffffff800153b9:	cc                   	int3   
ffffffff800153ba:	cc                   	int3   
ffffffff800153bb:	cc                   	int3   
ffffffff800153bc:	cc                   	int3   
ffffffff800153bd:	cc                   	int3   
ffffffff800153be:	cc                   	int3   
ffffffff800153bf:	cc                   	int3   

ffffffff800153c0 <release_waiting_thread>:
ffffffff800153c0:	55                   	push   %rbp
ffffffff800153c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800153c4:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff800153c8:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
ffffffff800153cc:	9c                   	pushf  
ffffffff800153cd:	58                   	pop    %rax
ffffffff800153ce:	c1 e8 09             	shr    $0x9,%eax
ffffffff800153d1:	83 e0 01             	and    $0x1,%eax
ffffffff800153d4:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff800153d7:	fa                   	cli    
ffffffff800153d8:	65 8a 05 4d ac fe 7f 	mov    %gs:0x7ffeac4d(%rip),%al        # 2c <m_wt_cache_len>
ffffffff800153df:	0f b6 c0             	movzbl %al,%eax
ffffffff800153e2:	48 3d 80 00 00 00    	cmp    $0x80,%rax
ffffffff800153e8:	0f 85 ae 00 00 00    	jne    ffffffff8001549c <release_waiting_thread+0xdc>
ffffffff800153ee:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff800153f5:	00 
ffffffff800153f6:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff800153fd:	00 
ffffffff800153fe:	65 8a 05 27 ac fe 7f 	mov    %gs:0x7ffeac27(%rip),%al        # 2c <m_wt_cache_len>
ffffffff80015405:	0f b6 c0             	movzbl %al,%eax
ffffffff80015408:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff8001540c:	76 5c                	jbe    ffffffff8001546a <release_waiting_thread+0xaa>
ffffffff8001540e:	65 8a 05 17 ac fe 7f 	mov    %gs:0x7ffeac17(%rip),%al        # 2c <m_wt_cache_len>
ffffffff80015415:	fe c8                	dec    %al
ffffffff80015417:	65 88 05 0e ac fe 7f 	mov    %al,%gs:0x7ffeac0e(%rip)        # 2c <m_wt_cache_len>
ffffffff8001541e:	0f b6 c0             	movzbl %al,%eax
ffffffff80015421:	65 48 8b 04 c5 30 00 	mov    %gs:0x30(,%rax,8),%rax
ffffffff80015428:	00 00 
ffffffff8001542a:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001542e:	65 0f b6 05 f6 ab fe 	movzbl %gs:0x7ffeabf6(%rip),%eax        # 2c <m_wt_cache_len>
ffffffff80015435:	7f 
ffffffff80015436:	65 48 c7 04 c5 30 00 	movq   $0x0,%gs:0x30(,%rax,8)
ffffffff8001543d:	00 00 00 00 00 00 
ffffffff80015443:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80015448:	75 0a                	jne    ffffffff80015454 <release_waiting_thread+0x94>
ffffffff8001544a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001544e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80015452:	eb 0c                	jmp    ffffffff80015460 <release_waiting_thread+0xa0>
ffffffff80015454:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80015458:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001545c:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80015460:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80015464:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80015468:	eb 94                	jmp    ffffffff800153fe <release_waiting_thread+0x3e>
ffffffff8001546a:	48 c7 c7 78 d2 21 80 	mov    $0xffffffff8021d278,%rdi
ffffffff80015471:	e8 da b5 fe ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff80015476:	48 8b 05 03 7e 20 00 	mov    0x207e03(%rip),%rax        # ffffffff8021d280 <m_global_wt_cache>
ffffffff8001547d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015481:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff80015485:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015489:	48 89 05 f0 7d 20 00 	mov    %rax,0x207df0(%rip)        # ffffffff8021d280 <m_global_wt_cache>
ffffffff80015490:	48 c7 c7 78 d2 21 80 	mov    $0xffffffff8021d278,%rdi
ffffffff80015497:	e8 a4 b6 fe ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff8001549c:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800154a0:	65 0f b6 0d 84 ab fe 	movzbl %gs:0x7ffeab84(%rip),%ecx        # 2c <m_wt_cache_len>
ffffffff800154a7:	7f 
ffffffff800154a8:	88 ca                	mov    %cl,%dl
ffffffff800154aa:	fe c2                	inc    %dl
ffffffff800154ac:	65 88 15 79 ab fe 7f 	mov    %dl,%gs:0x7ffeab79(%rip)        # 2c <m_wt_cache_len>
ffffffff800154b3:	65 48 89 04 cd 30 00 	mov    %rax,%gs:0x30(,%rcx,8)
ffffffff800154ba:	00 00 
ffffffff800154bc:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff800154c0:	74 01                	je     ffffffff800154c3 <release_waiting_thread+0x103>
ffffffff800154c2:	fb                   	sti    
ffffffff800154c3:	48 83 c4 30          	add    $0x30,%rsp
ffffffff800154c7:	5d                   	pop    %rbp
ffffffff800154c8:	c3                   	ret    
ffffffff800154c9:	cc                   	int3   
ffffffff800154ca:	cc                   	int3   
ffffffff800154cb:	cc                   	int3   
ffffffff800154cc:	cc                   	int3   
ffffffff800154cd:	cc                   	int3   
ffffffff800154ce:	cc                   	int3   
ffffffff800154cf:	cc                   	int3   

ffffffff800154d0 <get_thread_status>:
ffffffff800154d0:	55                   	push   %rbp
ffffffff800154d1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800154d4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800154d8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff800154dc:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800154e0:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff800154e6:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800154e9:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800154ec:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800154f0:	5d                   	pop    %rbp
ffffffff800154f1:	c3                   	ret    
ffffffff800154f2:	cc                   	int3   
ffffffff800154f3:	cc                   	int3   
ffffffff800154f4:	cc                   	int3   
ffffffff800154f5:	cc                   	int3   
ffffffff800154f6:	cc                   	int3   
ffffffff800154f7:	cc                   	int3   
ffffffff800154f8:	cc                   	int3   
ffffffff800154f9:	cc                   	int3   
ffffffff800154fa:	cc                   	int3   
ffffffff800154fb:	cc                   	int3   
ffffffff800154fc:	cc                   	int3   
ffffffff800154fd:	cc                   	int3   
ffffffff800154fe:	cc                   	int3   
ffffffff800154ff:	cc                   	int3   

ffffffff80015500 <cas_thread_state>:
ffffffff80015500:	55                   	push   %rbp
ffffffff80015501:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015504:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80015508:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8001550c:	89 75 f8             	mov    %esi,-0x8(%rbp)
ffffffff8001550f:	89 55 ec             	mov    %edx,-0x14(%rbp)
ffffffff80015512:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80015515:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff8001551a:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001551d:	74 2e                	je     ffffffff8001554d <cas_thread_state+0x4d>
ffffffff8001551f:	31 c0                	xor    %eax,%eax
ffffffff80015521:	e8 ca 43 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015526:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8001552d:	48 89 c6             	mov    %rax,%rsi
ffffffff80015530:	48 c7 c2 c4 9a 01 80 	mov    $0xffffffff80019ac4,%rdx
ffffffff80015537:	48 c7 c1 c6 8c 01 80 	mov    $0xffffffff80018cc6,%rcx
ffffffff8001553e:	41 b8 8e 00 00 00    	mov    $0x8e,%r8d
ffffffff80015544:	31 c0                	xor    %eax,%eax
ffffffff80015546:	e8 f5 c3 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001554b:	0f 0b                	ud2    
ffffffff8001554d:	eb 00                	jmp    ffffffff8001554f <cas_thread_state+0x4f>
ffffffff8001554f:	eb 00                	jmp    ffffffff80015551 <cas_thread_state+0x51>
ffffffff80015551:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80015554:	25 00 10 00 00       	and    $0x1000,%eax
ffffffff80015559:	83 f8 00             	cmp    $0x0,%eax
ffffffff8001555c:	74 2e                	je     ffffffff8001558c <cas_thread_state+0x8c>
ffffffff8001555e:	31 c0                	xor    %eax,%eax
ffffffff80015560:	e8 8b 43 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015565:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8001556c:	48 89 c6             	mov    %rax,%rsi
ffffffff8001556f:	48 c7 c2 c4 9a 01 80 	mov    $0xffffffff80019ac4,%rdx
ffffffff80015576:	48 c7 c1 c6 8c 01 80 	mov    $0xffffffff80018cc6,%rcx
ffffffff8001557d:	41 b8 8f 00 00 00    	mov    $0x8f,%r8d
ffffffff80015583:	31 c0                	xor    %eax,%eax
ffffffff80015585:	e8 b6 c3 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001558a:	0f 0b                	ud2    
ffffffff8001558c:	eb 00                	jmp    ffffffff8001558e <cas_thread_state+0x8e>
ffffffff8001558e:	eb 00                	jmp    ffffffff80015590 <cas_thread_state+0x90>
ffffffff80015590:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80015593:	3b 45 ec             	cmp    -0x14(%rbp),%eax
ffffffff80015596:	75 2e                	jne    ffffffff800155c6 <cas_thread_state+0xc6>
ffffffff80015598:	31 c0                	xor    %eax,%eax
ffffffff8001559a:	e8 51 43 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001559f:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff800155a6:	48 89 c6             	mov    %rax,%rsi
ffffffff800155a9:	48 c7 c2 c4 9a 01 80 	mov    $0xffffffff80019ac4,%rdx
ffffffff800155b0:	48 c7 c1 c6 8c 01 80 	mov    $0xffffffff80018cc6,%rcx
ffffffff800155b7:	41 b8 90 00 00 00    	mov    $0x90,%r8d
ffffffff800155bd:	31 c0                	xor    %eax,%eax
ffffffff800155bf:	e8 7c c3 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800155c4:	0f 0b                	ud2    
ffffffff800155c6:	eb 00                	jmp    ffffffff800155c8 <cas_thread_state+0xc8>
ffffffff800155c8:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800155cb:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff800155ce:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
ffffffff800155d5:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff800155d9:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff800155dc:	89 45 dc             	mov    %eax,-0x24(%rbp)
ffffffff800155df:	8b 45 f0             	mov    -0x10(%rbp),%eax
ffffffff800155e2:	8b 55 dc             	mov    -0x24(%rbp),%edx
ffffffff800155e5:	f0 0f b1 91 dc 02 00 	lock cmpxchg %edx,0x2dc(%rcx)
ffffffff800155ec:	00 
ffffffff800155ed:	0f 94 c1             	sete   %cl
ffffffff800155f0:	f6 c1 01             	test   $0x1,%cl
ffffffff800155f3:	75 03                	jne    ffffffff800155f8 <cas_thread_state+0xf8>
ffffffff800155f5:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff800155f8:	80 e1 01             	and    $0x1,%cl
ffffffff800155fb:	88 4d ff             	mov    %cl,-0x1(%rbp)
ffffffff800155fe:	8a 45 ff             	mov    -0x1(%rbp),%al
ffffffff80015601:	34 ff                	xor    $0xff,%al
ffffffff80015603:	a8 01                	test   $0x1,%al
ffffffff80015605:	75 05                	jne    ffffffff8001560c <cas_thread_state+0x10c>
ffffffff80015607:	e9 8b 00 00 00       	jmp    ffffffff80015697 <cas_thread_state+0x197>
ffffffff8001560c:	83 7d f8 03          	cmpl   $0x3,-0x8(%rbp)
ffffffff80015610:	75 3d                	jne    ffffffff8001564f <cas_thread_state+0x14f>
ffffffff80015612:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80015616:	83 b8 dc 02 00 00 01 	cmpl   $0x1,0x2dc(%rax)
ffffffff8001561d:	75 30                	jne    ffffffff8001564f <cas_thread_state+0x14f>
ffffffff8001561f:	eb 00                	jmp    ffffffff80015621 <cas_thread_state+0x121>
ffffffff80015621:	31 c0                	xor    %eax,%eax
ffffffff80015623:	e8 c8 42 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015628:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8001562f:	48 89 c6             	mov    %rax,%rsi
ffffffff80015632:	48 c7 c2 c4 9a 01 80 	mov    $0xffffffff80019ac4,%rdx
ffffffff80015639:	48 c7 c1 c6 8c 01 80 	mov    $0xffffffff80018cc6,%rcx
ffffffff80015640:	41 b8 97 00 00 00    	mov    $0x97,%r8d
ffffffff80015646:	31 c0                	xor    %eax,%eax
ffffffff80015648:	e8 f3 c2 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001564d:	0f 0b                	ud2    
ffffffff8001564f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%rbp)
ffffffff80015656:	31 c0                	xor    %eax,%eax
ffffffff80015658:	83 7d f4 0a          	cmpl   $0xa,-0xc(%rbp)
ffffffff8001565c:	7d 10                	jge    ffffffff8001566e <cas_thread_state+0x16e>
ffffffff8001565e:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80015662:	8b 80 dc 02 00 00    	mov    0x2dc(%rax),%eax
ffffffff80015668:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff8001566b:	0f 95 c0             	setne  %al
ffffffff8001566e:	a8 01                	test   $0x1,%al
ffffffff80015670:	75 02                	jne    ffffffff80015674 <cas_thread_state+0x174>
ffffffff80015672:	eb 0d                	jmp    ffffffff80015681 <cas_thread_state+0x181>
ffffffff80015674:	f3 90                	pause  
ffffffff80015676:	8b 45 f4             	mov    -0xc(%rbp),%eax
ffffffff80015679:	83 c0 01             	add    $0x1,%eax
ffffffff8001567c:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff8001567f:	eb d5                	jmp    ffffffff80015656 <cas_thread_state+0x156>
ffffffff80015681:	eb 00                	jmp    ffffffff80015683 <cas_thread_state+0x183>
ffffffff80015683:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff80015686:	83 c0 01             	add    $0x1,%eax
ffffffff80015689:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff8001568c:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8001568f:	89 45 f0             	mov    %eax,-0x10(%rbp)
ffffffff80015692:	e9 3e ff ff ff       	jmp    ffffffff800155d5 <cas_thread_state+0xd5>
ffffffff80015697:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8001569b:	5d                   	pop    %rbp
ffffffff8001569c:	c3                   	ret    
ffffffff8001569d:	cc                   	int3   
ffffffff8001569e:	cc                   	int3   
ffffffff8001569f:	cc                   	int3   

ffffffff800156a0 <save_thread_context>:
ffffffff800156a0:	55                   	push   %rbp
ffffffff800156a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800156a4:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff800156a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff800156ac:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff800156b0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800156b4:	48 83 c0 40          	add    $0x40,%rax
ffffffff800156b8:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800156bc:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800156c0:	e8 6b 01 00 00       	call   ffffffff80015830 <save_fx_state>
ffffffff800156c5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800156c9:	48 8b 00             	mov    (%rax),%rax
ffffffff800156cc:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800156d0:	48 89 81 00 02 00 00 	mov    %rax,0x200(%rcx)
ffffffff800156d7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800156db:	48 8b 40 08          	mov    0x8(%rax),%rax
ffffffff800156df:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800156e3:	48 89 81 08 02 00 00 	mov    %rax,0x208(%rcx)
ffffffff800156ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800156ee:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800156f2:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800156f6:	48 89 81 10 02 00 00 	mov    %rax,0x210(%rcx)
ffffffff800156fd:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015701:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80015705:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015709:	48 89 81 18 02 00 00 	mov    %rax,0x218(%rcx)
ffffffff80015710:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015714:	48 8b 40 20          	mov    0x20(%rax),%rax
ffffffff80015718:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001571c:	48 89 81 20 02 00 00 	mov    %rax,0x220(%rcx)
ffffffff80015723:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015727:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff8001572b:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001572f:	48 89 81 28 02 00 00 	mov    %rax,0x228(%rcx)
ffffffff80015736:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001573a:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff8001573e:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015742:	48 89 81 30 02 00 00 	mov    %rax,0x230(%rcx)
ffffffff80015749:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001574d:	48 8b 40 38          	mov    0x38(%rax),%rax
ffffffff80015751:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015755:	48 89 81 38 02 00 00 	mov    %rax,0x238(%rcx)
ffffffff8001575c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015760:	48 8b 40 40          	mov    0x40(%rax),%rax
ffffffff80015764:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015768:	48 89 81 40 02 00 00 	mov    %rax,0x240(%rcx)
ffffffff8001576f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015773:	48 8b 40 48          	mov    0x48(%rax),%rax
ffffffff80015777:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001577b:	48 89 81 48 02 00 00 	mov    %rax,0x248(%rcx)
ffffffff80015782:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015786:	48 8b 40 50          	mov    0x50(%rax),%rax
ffffffff8001578a:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001578e:	48 89 81 50 02 00 00 	mov    %rax,0x250(%rcx)
ffffffff80015795:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015799:	48 8b 40 58          	mov    0x58(%rax),%rax
ffffffff8001579d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800157a1:	48 89 81 58 02 00 00 	mov    %rax,0x258(%rcx)
ffffffff800157a8:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800157ac:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff800157b0:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800157b4:	48 89 81 60 02 00 00 	mov    %rax,0x260(%rcx)
ffffffff800157bb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800157bf:	48 8b 40 68          	mov    0x68(%rax),%rax
ffffffff800157c3:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800157c7:	48 89 81 68 02 00 00 	mov    %rax,0x268(%rcx)
ffffffff800157ce:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800157d2:	48 8b 40 70          	mov    0x70(%rax),%rax
ffffffff800157d6:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800157da:	48 89 81 70 02 00 00 	mov    %rax,0x270(%rcx)
ffffffff800157e1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800157e5:	48 8b 80 80 00 00 00 	mov    0x80(%rax),%rax
ffffffff800157ec:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff800157f0:	48 89 81 78 02 00 00 	mov    %rax,0x278(%rcx)
ffffffff800157f7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800157fb:	48 8b 80 90 00 00 00 	mov    0x90(%rax),%rax
ffffffff80015802:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015806:	48 89 81 80 02 00 00 	mov    %rax,0x280(%rcx)
ffffffff8001580d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015811:	48 8b 80 98 00 00 00 	mov    0x98(%rax),%rax
ffffffff80015818:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001581c:	48 89 81 88 02 00 00 	mov    %rax,0x288(%rcx)
ffffffff80015823:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80015827:	5d                   	pop    %rbp
ffffffff80015828:	c3                   	ret    
ffffffff80015829:	cc                   	int3   
ffffffff8001582a:	cc                   	int3   
ffffffff8001582b:	cc                   	int3   
ffffffff8001582c:	cc                   	int3   
ffffffff8001582d:	cc                   	int3   
ffffffff8001582e:	cc                   	int3   
ffffffff8001582f:	cc                   	int3   

ffffffff80015830 <save_fx_state>:
ffffffff80015830:	55                   	push   %rbp
ffffffff80015831:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015834:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80015838:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff8001583c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015840:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80015844:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015848:	48 0f ae 00          	fxsave64 (%rax)
ffffffff8001584c:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80015850:	5d                   	pop    %rbp
ffffffff80015851:	c3                   	ret    
ffffffff80015852:	cc                   	int3   
ffffffff80015853:	cc                   	int3   
ffffffff80015854:	cc                   	int3   
ffffffff80015855:	cc                   	int3   
ffffffff80015856:	cc                   	int3   
ffffffff80015857:	cc                   	int3   
ffffffff80015858:	cc                   	int3   
ffffffff80015859:	cc                   	int3   
ffffffff8001585a:	cc                   	int3   
ffffffff8001585b:	cc                   	int3   
ffffffff8001585c:	cc                   	int3   
ffffffff8001585d:	cc                   	int3   
ffffffff8001585e:	cc                   	int3   
ffffffff8001585f:	cc                   	int3   

ffffffff80015860 <restore_thread_context>:
ffffffff80015860:	55                   	push   %rbp
ffffffff80015861:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015864:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80015868:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff8001586c:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
ffffffff80015870:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80015874:	48 83 c0 40          	add    $0x40,%rax
ffffffff80015878:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001587c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015880:	48 8b 80 00 02 00 00 	mov    0x200(%rax),%rax
ffffffff80015887:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001588b:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001588e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015892:	48 8b 80 08 02 00 00 	mov    0x208(%rax),%rax
ffffffff80015899:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001589d:	48 89 41 08          	mov    %rax,0x8(%rcx)
ffffffff800158a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800158a5:	48 8b 80 10 02 00 00 	mov    0x210(%rax),%rax
ffffffff800158ac:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800158b0:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff800158b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800158b8:	48 8b 80 18 02 00 00 	mov    0x218(%rax),%rax
ffffffff800158bf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800158c3:	48 89 41 18          	mov    %rax,0x18(%rcx)
ffffffff800158c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800158cb:	48 8b 80 20 02 00 00 	mov    0x220(%rax),%rax
ffffffff800158d2:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800158d6:	48 89 41 20          	mov    %rax,0x20(%rcx)
ffffffff800158da:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800158de:	48 8b 80 28 02 00 00 	mov    0x228(%rax),%rax
ffffffff800158e5:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800158e9:	48 89 41 28          	mov    %rax,0x28(%rcx)
ffffffff800158ed:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800158f1:	48 8b 80 30 02 00 00 	mov    0x230(%rax),%rax
ffffffff800158f8:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800158fc:	48 89 41 30          	mov    %rax,0x30(%rcx)
ffffffff80015900:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015904:	48 8b 80 38 02 00 00 	mov    0x238(%rax),%rax
ffffffff8001590b:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001590f:	48 89 41 38          	mov    %rax,0x38(%rcx)
ffffffff80015913:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015917:	48 8b 80 40 02 00 00 	mov    0x240(%rax),%rax
ffffffff8001591e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015922:	48 89 41 40          	mov    %rax,0x40(%rcx)
ffffffff80015926:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001592a:	48 8b 80 48 02 00 00 	mov    0x248(%rax),%rax
ffffffff80015931:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015935:	48 89 41 48          	mov    %rax,0x48(%rcx)
ffffffff80015939:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001593d:	48 8b 80 50 02 00 00 	mov    0x250(%rax),%rax
ffffffff80015944:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015948:	48 89 41 50          	mov    %rax,0x50(%rcx)
ffffffff8001594c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015950:	48 8b 80 58 02 00 00 	mov    0x258(%rax),%rax
ffffffff80015957:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001595b:	48 89 41 58          	mov    %rax,0x58(%rcx)
ffffffff8001595f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015963:	48 8b 80 60 02 00 00 	mov    0x260(%rax),%rax
ffffffff8001596a:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001596e:	48 89 41 60          	mov    %rax,0x60(%rcx)
ffffffff80015972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015976:	48 8b 80 68 02 00 00 	mov    0x268(%rax),%rax
ffffffff8001597d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015981:	48 89 41 68          	mov    %rax,0x68(%rcx)
ffffffff80015985:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015989:	48 8b 80 70 02 00 00 	mov    0x270(%rax),%rax
ffffffff80015990:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015994:	48 89 41 70          	mov    %rax,0x70(%rcx)
ffffffff80015998:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001599c:	48 8b 80 78 02 00 00 	mov    0x278(%rax),%rax
ffffffff800159a3:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800159a7:	48 89 81 80 00 00 00 	mov    %rax,0x80(%rcx)
ffffffff800159ae:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800159b2:	48 8b 80 80 02 00 00 	mov    0x280(%rax),%rax
ffffffff800159b9:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800159bd:	48 89 81 90 00 00 00 	mov    %rax,0x90(%rcx)
ffffffff800159c4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800159c8:	48 8b 80 88 02 00 00 	mov    0x288(%rax),%rax
ffffffff800159cf:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800159d3:	48 89 81 98 00 00 00 	mov    %rax,0x98(%rcx)
ffffffff800159da:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff800159de:	e8 3d 00 00 00       	call   ffffffff80015a20 <restore_fx_state>
ffffffff800159e3:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800159e7:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff800159ee:	b9 00 01 00 c0       	mov    $0xc0000100,%ecx
ffffffff800159f3:	48 89 4d d8          	mov    %rcx,-0x28(%rbp)
ffffffff800159f7:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800159fb:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
ffffffff800159ff:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80015a03:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80015a07:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80015a0b:	0f 30                	wrmsr  
ffffffff80015a0d:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80015a11:	5d                   	pop    %rbp
ffffffff80015a12:	c3                   	ret    
ffffffff80015a13:	cc                   	int3   
ffffffff80015a14:	cc                   	int3   
ffffffff80015a15:	cc                   	int3   
ffffffff80015a16:	cc                   	int3   
ffffffff80015a17:	cc                   	int3   
ffffffff80015a18:	cc                   	int3   
ffffffff80015a19:	cc                   	int3   
ffffffff80015a1a:	cc                   	int3   
ffffffff80015a1b:	cc                   	int3   
ffffffff80015a1c:	cc                   	int3   
ffffffff80015a1d:	cc                   	int3   
ffffffff80015a1e:	cc                   	int3   
ffffffff80015a1f:	cc                   	int3   

ffffffff80015a20 <restore_fx_state>:
ffffffff80015a20:	55                   	push   %rbp
ffffffff80015a21:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015a24:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80015a28:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80015a2c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015a30:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80015a34:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015a38:	48 0f ae 08          	fxrstor64 (%rax)
ffffffff80015a3c:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80015a40:	5d                   	pop    %rbp
ffffffff80015a41:	c3                   	ret    
ffffffff80015a42:	cc                   	int3   
ffffffff80015a43:	cc                   	int3   
ffffffff80015a44:	cc                   	int3   
ffffffff80015a45:	cc                   	int3   
ffffffff80015a46:	cc                   	int3   
ffffffff80015a47:	cc                   	int3   
ffffffff80015a48:	cc                   	int3   
ffffffff80015a49:	cc                   	int3   
ffffffff80015a4a:	cc                   	int3   
ffffffff80015a4b:	cc                   	int3   
ffffffff80015a4c:	cc                   	int3   
ffffffff80015a4d:	cc                   	int3   
ffffffff80015a4e:	cc                   	int3   
ffffffff80015a4f:	cc                   	int3   

ffffffff80015a50 <init_tls>:
ffffffff80015a50:	55                   	push   %rbp
ffffffff80015a51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015a54:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80015a58:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff80015a5c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80015a63:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80015a67:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80015a6b:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80015a6f:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
ffffffff80015a74:	75 3b                	jne    ffffffff80015ab1 <init_tls+0x61>
ffffffff80015a76:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80015a7d:	31 c0                	xor    %eax,%eax
ffffffff80015a7f:	e8 6c 3e ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015a84:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80015a87:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80015a8e:	48 89 c6             	mov    %rax,%rsi
ffffffff80015a91:	48 c7 c1 22 9c 01 80 	mov    $0xffffffff80019c22,%rcx
ffffffff80015a98:	49 c7 c0 c6 8c 01 80 	mov    $0xffffffff80018cc6,%r8
ffffffff80015a9f:	41 b9 eb 00 00 00    	mov    $0xeb,%r9d
ffffffff80015aa5:	31 c0                	xor    %eax,%eax
ffffffff80015aa7:	e8 94 be ff ff       	call   ffffffff80011940 <printf_>
ffffffff80015aac:	e9 15 01 00 00       	jmp    ffffffff80015bc6 <init_tls+0x176>
ffffffff80015ab1:	eb 00                	jmp    ffffffff80015ab3 <init_tls+0x63>
ffffffff80015ab3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff80015ab7:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80015abb:	48 03 41 20          	add    0x20(%rcx),%rax
ffffffff80015abf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80015ac3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%rbp)
ffffffff80015aca:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80015acd:	48 8b 4d e8          	mov    -0x18(%rbp),%rcx
ffffffff80015ad1:	0f b7 49 38          	movzwl 0x38(%rcx),%ecx
ffffffff80015ad5:	39 c8                	cmp    %ecx,%eax
ffffffff80015ad7:	0f 8d e5 00 00 00    	jge    ffffffff80015bc2 <init_tls+0x172>
ffffffff80015add:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80015ae1:	48 63 4d f8          	movslq -0x8(%rbp),%rcx
ffffffff80015ae5:	48 6b c9 38          	imul   $0x38,%rcx,%rcx
ffffffff80015ae9:	48 01 c8             	add    %rcx,%rax
ffffffff80015aec:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80015af0:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015af4:	83 38 07             	cmpl   $0x7,(%rax)
ffffffff80015af7:	0f 85 b5 00 00 00    	jne    ffffffff80015bb2 <init_tls+0x162>
ffffffff80015afd:	eb 00                	jmp    ffffffff80015aff <init_tls+0xaf>
ffffffff80015aff:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015b03:	48 83 78 20 00       	cmpq   $0x0,0x20(%rax)
ffffffff80015b08:	74 3b                	je     ffffffff80015b45 <init_tls+0xf5>
ffffffff80015b0a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80015b11:	31 c0                	xor    %eax,%eax
ffffffff80015b13:	e8 d8 3d ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015b18:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80015b1b:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80015b22:	48 89 c6             	mov    %rax,%rsi
ffffffff80015b25:	48 c7 c1 22 9c 01 80 	mov    $0xffffffff80019c22,%rcx
ffffffff80015b2c:	49 c7 c0 c6 8c 01 80 	mov    $0xffffffff80018cc6,%r8
ffffffff80015b33:	41 b9 f0 00 00 00    	mov    $0xf0,%r9d
ffffffff80015b39:	31 c0                	xor    %eax,%eax
ffffffff80015b3b:	e8 00 be ff ff       	call   ffffffff80011940 <printf_>
ffffffff80015b40:	e9 81 00 00 00       	jmp    ffffffff80015bc6 <init_tls+0x176>
ffffffff80015b45:	eb 00                	jmp    ffffffff80015b47 <init_tls+0xf7>
ffffffff80015b47:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015b4b:	48 8b 40 28          	mov    0x28(%rax),%rax
ffffffff80015b4f:	48 89 05 32 77 20 00 	mov    %rax,0x207732(%rip)        # ffffffff8021d288 <m_tls_size>
ffffffff80015b56:	48 8b 05 2b 77 20 00 	mov    0x20772b(%rip),%rax        # ffffffff8021d288 <m_tls_size>
ffffffff80015b5d:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015b61:	48 8b 51 10          	mov    0x10(%rcx),%rdx
ffffffff80015b65:	48 8b 49 30          	mov    0x30(%rcx),%rcx
ffffffff80015b69:	48 89 c6             	mov    %rax,%rsi
ffffffff80015b6c:	48 01 d6             	add    %rdx,%rsi
ffffffff80015b6f:	48 f7 de             	neg    %rsi
ffffffff80015b72:	48 ff c9             	dec    %rcx
ffffffff80015b75:	48 21 ce             	and    %rcx,%rsi
ffffffff80015b78:	48 01 f0             	add    %rsi,%rax
ffffffff80015b7b:	48 89 05 06 77 20 00 	mov    %rax,0x207706(%rip)        # ffffffff8021d288 <m_tls_size>
ffffffff80015b82:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015b86:	48 8b 40 30          	mov    0x30(%rax),%rax
ffffffff80015b8a:	48 89 05 ff 76 20 00 	mov    %rax,0x2076ff(%rip)        # ffffffff8021d290 <m_tls_align>
ffffffff80015b91:	31 c0                	xor    %eax,%eax
ffffffff80015b93:	e8 58 3d ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015b98:	48 8b 15 e9 76 20 00 	mov    0x2076e9(%rip),%rdx        # ffffffff8021d288 <m_tls_size>
ffffffff80015b9f:	48 c7 c7 d1 98 01 80 	mov    $0xffffffff800198d1,%rdi
ffffffff80015ba6:	48 89 c6             	mov    %rax,%rsi
ffffffff80015ba9:	31 c0                	xor    %eax,%eax
ffffffff80015bab:	e8 90 bd ff ff       	call   ffffffff80011940 <printf_>
ffffffff80015bb0:	eb 12                	jmp    ffffffff80015bc4 <init_tls+0x174>
ffffffff80015bb2:	eb 00                	jmp    ffffffff80015bb4 <init_tls+0x164>
ffffffff80015bb4:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80015bb7:	83 c0 01             	add    $0x1,%eax
ffffffff80015bba:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80015bbd:	e9 08 ff ff ff       	jmp    ffffffff80015aca <init_tls+0x7a>
ffffffff80015bc2:	eb 00                	jmp    ffffffff80015bc4 <init_tls+0x174>
ffffffff80015bc4:	eb 00                	jmp    ffffffff80015bc6 <init_tls+0x176>
ffffffff80015bc6:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80015bc9:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80015bcd:	5d                   	pop    %rbp
ffffffff80015bce:	c3                   	ret    
ffffffff80015bcf:	cc                   	int3   

ffffffff80015bd0 <create_thread>:
ffffffff80015bd0:	55                   	push   %rbp
ffffffff80015bd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015bd4:	48 81 ec 00 01 00 00 	sub    $0x100,%rsp
ffffffff80015bdb:	84 c0                	test   %al,%al
ffffffff80015bdd:	74 2f                	je     ffffffff80015c0e <create_thread+0x3e>
ffffffff80015bdf:	0f 29 85 30 ff ff ff 	movaps %xmm0,-0xd0(%rbp)
ffffffff80015be6:	0f 29 8d 40 ff ff ff 	movaps %xmm1,-0xc0(%rbp)
ffffffff80015bed:	0f 29 95 50 ff ff ff 	movaps %xmm2,-0xb0(%rbp)
ffffffff80015bf4:	0f 29 9d 60 ff ff ff 	movaps %xmm3,-0xa0(%rbp)
ffffffff80015bfb:	0f 29 a5 70 ff ff ff 	movaps %xmm4,-0x90(%rbp)
ffffffff80015c02:	0f 29 6d 80          	movaps %xmm5,-0x80(%rbp)
ffffffff80015c06:	0f 29 75 90          	movaps %xmm6,-0x70(%rbp)
ffffffff80015c0a:	0f 29 7d a0          	movaps %xmm7,-0x60(%rbp)
ffffffff80015c0e:	4c 89 8d 28 ff ff ff 	mov    %r9,-0xd8(%rbp)
ffffffff80015c15:	4c 89 85 20 ff ff ff 	mov    %r8,-0xe0(%rbp)
ffffffff80015c1c:	48 89 8d 18 ff ff ff 	mov    %rcx,-0xe8(%rbp)
ffffffff80015c23:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
ffffffff80015c27:	48 c7 45 b0 00 00 00 	movq   $0x0,-0x50(%rbp)
ffffffff80015c2e:	00 
ffffffff80015c2f:	48 89 55 f0          	mov    %rdx,-0x10(%rbp)
ffffffff80015c33:	e8 48 01 00 00       	call   ffffffff80015d80 <get_free_thread>
ffffffff80015c38:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80015c3c:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80015c41:	75 24                	jne    ffffffff80015c67 <create_thread+0x97>
ffffffff80015c43:	e8 38 02 00 00       	call   ffffffff80015e80 <alloc_thread>
ffffffff80015c48:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80015c4c:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80015c50:	31 c0                	xor    %eax,%eax
ffffffff80015c52:	31 f6                	xor    %esi,%esi
ffffffff80015c54:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80015c59:	e8 a2 f8 ff ff       	call   ffffffff80015500 <cas_thread_state>
ffffffff80015c5e:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80015c62:	e8 69 03 00 00       	call   ffffffff80015fd0 <add_to_all_threads>
ffffffff80015c67:	48 8d 85 00 ff ff ff 	lea    -0x100(%rbp),%rax
ffffffff80015c6e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80015c72:	48 8d 45 10          	lea    0x10(%rbp),%rax
ffffffff80015c76:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80015c7a:	c7 45 d4 30 00 00 00 	movl   $0x30,-0x2c(%rbp)
ffffffff80015c81:	c7 45 d0 18 00 00 00 	movl   $0x18,-0x30(%rbp)
ffffffff80015c88:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80015c8c:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff80015c90:	48 8d 55 d0          	lea    -0x30(%rbp),%rdx
ffffffff80015c94:	e8 07 db ff ff       	call   ffffffff800137a0 <vsnprintf_>
ffffffff80015c99:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80015c9d:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015ca1:	48 89 81 b8 02 00 00 	mov    %rax,0x2b8(%rcx)
ffffffff80015ca8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015cac:	48 c7 80 c0 02 00 00 	movq   $0x200202,0x2c0(%rax)
ffffffff80015cb3:	02 02 20 00 
ffffffff80015cb7:	31 c0                	xor    %eax,%eax
ffffffff80015cb9:	e8 e2 58 ff ff       	call   ffffffff8000b5a0 <alloc_stack>
ffffffff80015cbe:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80015cc2:	48 89 81 c8 02 00 00 	mov    %rax,0x2c8(%rcx)
ffffffff80015cc9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015ccd:	48 8b 88 c8 02 00 00 	mov    0x2c8(%rax),%rcx
ffffffff80015cd4:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
ffffffff80015cd8:	48 89 88 c8 02 00 00 	mov    %rcx,0x2c8(%rax)
ffffffff80015cdf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015ce3:	48 8b 80 c8 02 00 00 	mov    0x2c8(%rax),%rax
ffffffff80015cea:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80015cf1:	48 c7 45 b8 00 00 00 	movq   $0x0,-0x48(%rbp)
ffffffff80015cf8:	00 
ffffffff80015cf9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015cfd:	48 8b 88 c8 02 00 00 	mov    0x2c8(%rax),%rcx
ffffffff80015d04:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
ffffffff80015d08:	48 89 88 c8 02 00 00 	mov    %rcx,0x2c8(%rax)
ffffffff80015d0f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015d13:	48 8b 80 c8 02 00 00 	mov    0x2c8(%rax),%rax
ffffffff80015d1a:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80015d21:	48 c7 45 c0 00 00 00 	movq   $0x0,-0x40(%rbp)
ffffffff80015d28:	00 
ffffffff80015d29:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015d2d:	48 8b 88 c8 02 00 00 	mov    0x2c8(%rax),%rcx
ffffffff80015d34:	48 83 c1 f8          	add    $0xfffffffffffffff8,%rcx
ffffffff80015d38:	48 89 88 c8 02 00 00 	mov    %rcx,0x2c8(%rax)
ffffffff80015d3f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015d43:	48 8b 80 c8 02 00 00 	mov    0x2c8(%rax),%rax
ffffffff80015d4a:	48 c7 00 70 60 01 80 	movq   $0xffffffff80016070,(%rax)
ffffffff80015d51:	48 c7 45 c8 70 60 01 	movq   $0xffffffff80016070,-0x38(%rbp)
ffffffff80015d58:	80 
ffffffff80015d59:	48 8b 7d f8          	mov    -0x8(%rbp),%rdi
ffffffff80015d5d:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff80015d62:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80015d67:	e8 94 f7 ff ff       	call   ffffffff80015500 <cas_thread_state>
ffffffff80015d6c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015d70:	48 81 c4 00 01 00 00 	add    $0x100,%rsp
ffffffff80015d77:	5d                   	pop    %rbp
ffffffff80015d78:	c3                   	ret    
ffffffff80015d79:	cc                   	int3   
ffffffff80015d7a:	cc                   	int3   
ffffffff80015d7b:	cc                   	int3   
ffffffff80015d7c:	cc                   	int3   
ffffffff80015d7d:	cc                   	int3   
ffffffff80015d7e:	cc                   	int3   
ffffffff80015d7f:	cc                   	int3   

ffffffff80015d80 <get_free_thread>:
ffffffff80015d80:	55                   	push   %rbp
ffffffff80015d81:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015d84:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80015d88:	e8 d3 f4 ff ff       	call   ffffffff80015260 <get_cpu_local_base>
ffffffff80015d8d:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80015d91:	e8 1a dc ff ff       	call   ffffffff800139b0 <scheduler_preempt_disable>
ffffffff80015d96:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80015d9a:	e8 21 03 00 00       	call   ffffffff800160c0 <thread_list_empty>
ffffffff80015d9f:	a8 01                	test   $0x1,%al
ffffffff80015da1:	75 05                	jne    ffffffff80015da8 <get_free_thread+0x28>
ffffffff80015da3:	e9 81 00 00 00       	jmp    ffffffff80015e29 <get_free_thread+0xa9>
ffffffff80015da8:	48 c7 c7 c0 d2 21 80 	mov    $0xffffffff8021d2c0,%rdi
ffffffff80015daf:	e8 0c 03 00 00       	call   ffffffff800160c0 <thread_list_empty>
ffffffff80015db4:	a8 01                	test   $0x1,%al
ffffffff80015db6:	75 71                	jne    ffffffff80015e29 <get_free_thread+0xa9>
ffffffff80015db8:	48 c7 c7 c8 d2 21 80 	mov    $0xffffffff8021d2c8,%rdi
ffffffff80015dbf:	e8 8c ac fe ff       	call   ffffffff80000a50 <spinlock_lock>
ffffffff80015dc4:	65 8b 05 6d a6 fe 7f 	mov    %gs:0x7ffea66d(%rip),%eax        # 438 <m_free_threads_count>
ffffffff80015dcb:	83 f8 20             	cmp    $0x20,%eax
ffffffff80015dce:	7d 46                	jge    ffffffff80015e16 <get_free_thread+0x96>
ffffffff80015dd0:	48 c7 c7 c0 d2 21 80 	mov    $0xffffffff8021d2c0,%rdi
ffffffff80015dd7:	e8 04 03 00 00       	call   ffffffff800160e0 <thread_list_pop>
ffffffff80015ddc:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80015de0:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80015de5:	75 02                	jne    ffffffff80015de9 <get_free_thread+0x69>
ffffffff80015de7:	eb 2f                	jmp    ffffffff80015e18 <get_free_thread+0x98>
ffffffff80015de9:	8b 05 dd 74 20 00    	mov    0x2074dd(%rip),%eax        # ffffffff8021d2cc <m_global_free_threads_count>
ffffffff80015def:	ff c8                	dec    %eax
ffffffff80015df1:	89 05 d5 74 20 00    	mov    %eax,0x2074d5(%rip)        # ffffffff8021d2cc <m_global_free_threads_count>
ffffffff80015df7:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80015dfb:	48 8b 75 e8          	mov    -0x18(%rbp),%rsi
ffffffff80015dff:	e8 1c 03 00 00       	call   ffffffff80016120 <thread_list_push>
ffffffff80015e04:	65 8b 05 2d a6 fe 7f 	mov    %gs:0x7ffea62d(%rip),%eax        # 438 <m_free_threads_count>
ffffffff80015e0b:	ff c0                	inc    %eax
ffffffff80015e0d:	65 89 05 24 a6 fe 7f 	mov    %eax,%gs:0x7ffea624(%rip)        # 438 <m_free_threads_count>
ffffffff80015e14:	eb ae                	jmp    ffffffff80015dc4 <get_free_thread+0x44>
ffffffff80015e16:	eb 00                	jmp    ffffffff80015e18 <get_free_thread+0x98>
ffffffff80015e18:	48 c7 c7 c8 d2 21 80 	mov    $0xffffffff8021d2c8,%rdi
ffffffff80015e1f:	e8 1c ad fe ff       	call   ffffffff80000b40 <spinlock_unlock>
ffffffff80015e24:	e9 6d ff ff ff       	jmp    ffffffff80015d96 <get_free_thread+0x16>
ffffffff80015e29:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80015e2d:	e8 ae 02 00 00       	call   ffffffff800160e0 <thread_list_pop>
ffffffff80015e32:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff80015e36:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff80015e3b:	75 02                	jne    ffffffff80015e3f <get_free_thread+0xbf>
ffffffff80015e3d:	eb 2e                	jmp    ffffffff80015e6d <get_free_thread+0xed>
ffffffff80015e3f:	65 8b 05 f2 a5 fe 7f 	mov    %gs:0x7ffea5f2(%rip),%eax        # 438 <m_free_threads_count>
ffffffff80015e46:	ff c8                	dec    %eax
ffffffff80015e48:	65 89 05 e9 a5 fe 7f 	mov    %eax,%gs:0x7ffea5e9(%rip)        # 438 <m_free_threads_count>
ffffffff80015e4f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015e53:	48 8b b8 d0 02 00 00 	mov    0x2d0(%rax),%rdi
ffffffff80015e5a:	48 8b 15 27 74 20 00 	mov    0x207427(%rip),%rdx        # ffffffff8021d288 <m_tls_size>
ffffffff80015e61:	48 29 d7             	sub    %rdx,%rdi
ffffffff80015e64:	31 c0                	xor    %eax,%eax
ffffffff80015e66:	31 f6                	xor    %esi,%esi
ffffffff80015e68:	e8 b3 9a ff ff       	call   ffffffff8000f920 <memset>
ffffffff80015e6d:	e8 ae dc ff ff       	call   ffffffff80013b20 <scheduler_preempt_enable>
ffffffff80015e72:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015e76:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80015e7a:	5d                   	pop    %rbp
ffffffff80015e7b:	c3                   	ret    
ffffffff80015e7c:	cc                   	int3   
ffffffff80015e7d:	cc                   	int3   
ffffffff80015e7e:	cc                   	int3   
ffffffff80015e7f:	cc                   	int3   

ffffffff80015e80 <alloc_thread>:
ffffffff80015e80:	55                   	push   %rbp
ffffffff80015e81:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015e84:	48 83 ec 20          	sub    $0x20,%rsp
ffffffff80015e88:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff80015e8f:	bf f0 02 00 00       	mov    $0x2f0,%edi
ffffffff80015e94:	be 10 00 00 00       	mov    $0x10,%esi
ffffffff80015e99:	e8 32 73 ff ff       	call   ffffffff8000d1d0 <malloc_aligned>
ffffffff80015e9e:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80015ea2:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80015ea7:	75 3b                	jne    ffffffff80015ee4 <alloc_thread+0x64>
ffffffff80015ea9:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80015eb0:	31 c0                	xor    %eax,%eax
ffffffff80015eb2:	e8 39 3a ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015eb7:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80015eba:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80015ec1:	48 89 c6             	mov    %rax,%rsi
ffffffff80015ec4:	48 c7 c1 8d 96 01 80 	mov    $0xffffffff8001968d,%rcx
ffffffff80015ecb:	49 c7 c0 c6 8c 01 80 	mov    $0xffffffff80018cc6,%r8
ffffffff80015ed2:	41 b9 5d 01 00 00    	mov    $0x15d,%r9d
ffffffff80015ed8:	31 c0                	xor    %eax,%eax
ffffffff80015eda:	e8 61 ba ff ff       	call   ffffffff80011940 <printf_>
ffffffff80015edf:	e9 90 00 00 00       	jmp    ffffffff80015f74 <alloc_thread+0xf4>
ffffffff80015ee4:	eb 00                	jmp    ffffffff80015ee6 <alloc_thread+0x66>
ffffffff80015ee6:	48 8b 3d 9b 73 20 00 	mov    0x20739b(%rip),%rdi        # ffffffff8021d288 <m_tls_size>
ffffffff80015eed:	48 83 c7 20          	add    $0x20,%rdi
ffffffff80015ef1:	48 8b 35 98 73 20 00 	mov    0x207398(%rip),%rsi        # ffffffff8021d290 <m_tls_align>
ffffffff80015ef8:	e8 d3 72 ff ff       	call   ffffffff8000d1d0 <malloc_aligned>
ffffffff80015efd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff80015f01:	48 83 7d e8 00       	cmpq   $0x0,-0x18(%rbp)
ffffffff80015f06:	75 38                	jne    ffffffff80015f40 <alloc_thread+0xc0>
ffffffff80015f08:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80015f0f:	31 c0                	xor    %eax,%eax
ffffffff80015f11:	e8 da 39 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80015f16:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80015f19:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80015f20:	48 89 c6             	mov    %rax,%rsi
ffffffff80015f23:	48 c7 c1 8d 96 01 80 	mov    $0xffffffff8001968d,%rcx
ffffffff80015f2a:	49 c7 c0 c6 8c 01 80 	mov    $0xffffffff80018cc6,%r8
ffffffff80015f31:	41 b9 61 01 00 00    	mov    $0x161,%r9d
ffffffff80015f37:	31 c0                	xor    %eax,%eax
ffffffff80015f39:	e8 02 ba ff ff       	call   ffffffff80011940 <printf_>
ffffffff80015f3e:	eb 34                	jmp    ffffffff80015f74 <alloc_thread+0xf4>
ffffffff80015f40:	eb 00                	jmp    ffffffff80015f42 <alloc_thread+0xc2>
ffffffff80015f42:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80015f46:	48 8b 0d 3b 73 20 00 	mov    0x20733b(%rip),%rcx        # ffffffff8021d288 <m_tls_size>
ffffffff80015f4d:	48 01 c8             	add    %rcx,%rax
ffffffff80015f50:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015f54:	48 89 81 d0 02 00 00 	mov    %rax,0x2d0(%rcx)
ffffffff80015f5b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015f5f:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80015f66:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80015f6a:	48 8b 89 d0 02 00 00 	mov    0x2d0(%rcx),%rcx
ffffffff80015f71:	48 89 01             	mov    %rax,(%rcx)
ffffffff80015f74:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
ffffffff80015f78:	74 47                	je     ffffffff80015fc1 <alloc_thread+0x141>
ffffffff80015f7a:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff80015f7f:	74 3e                	je     ffffffff80015fbf <alloc_thread+0x13f>
ffffffff80015f81:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015f85:	48 83 b8 d0 02 00 00 	cmpq   $0x0,0x2d0(%rax)
ffffffff80015f8c:	00 
ffffffff80015f8d:	74 1f                	je     ffffffff80015fae <alloc_thread+0x12e>
ffffffff80015f8f:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015f93:	48 8b b8 d0 02 00 00 	mov    0x2d0(%rax),%rdi
ffffffff80015f9a:	48 8b 05 e7 72 20 00 	mov    0x2072e7(%rip),%rax        # ffffffff8021d288 <m_tls_size>
ffffffff80015fa1:	31 c9                	xor    %ecx,%ecx
ffffffff80015fa3:	48 29 c1             	sub    %rax,%rcx
ffffffff80015fa6:	48 01 cf             	add    %rcx,%rdi
ffffffff80015fa9:	e8 e2 72 ff ff       	call   ffffffff8000d290 <free>
ffffffff80015fae:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80015fb2:	e8 d9 72 ff ff       	call   ffffffff8000d290 <free>
ffffffff80015fb7:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
ffffffff80015fbe:	00 
ffffffff80015fbf:	eb 00                	jmp    ffffffff80015fc1 <alloc_thread+0x141>
ffffffff80015fc1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80015fc5:	48 83 c4 20          	add    $0x20,%rsp
ffffffff80015fc9:	5d                   	pop    %rbp
ffffffff80015fca:	c3                   	ret    
ffffffff80015fcb:	cc                   	int3   
ffffffff80015fcc:	cc                   	int3   
ffffffff80015fcd:	cc                   	int3   
ffffffff80015fce:	cc                   	int3   
ffffffff80015fcf:	cc                   	int3   

ffffffff80015fd0 <add_to_all_threads>:
ffffffff80015fd0:	55                   	push   %rbp
ffffffff80015fd1:	48 89 e5             	mov    %rsp,%rbp
ffffffff80015fd4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80015fd8:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff80015fdc:	e8 9f 00 00 00       	call   ffffffff80016080 <lock_all_threads>
ffffffff80015fe1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80015fe5:	48 8b 80 d0 02 00 00 	mov    0x2d0(%rax),%rax
ffffffff80015fec:	48 8b 0d ed 72 20 00 	mov    0x2072ed(%rip),%rcx        # ffffffff8021d2e0 <m_default_gc_thread_data+0x10>
ffffffff80015ff3:	48 89 48 18          	mov    %rcx,0x18(%rax)
ffffffff80015ff7:	0f 10 05 d2 72 20 00 	movups 0x2072d2(%rip),%xmm0        # ffffffff8021d2d0 <m_default_gc_thread_data>
ffffffff80015ffe:	0f 11 40 08          	movups %xmm0,0x8(%rax)
ffffffff80016002:	48 8b 05 8f 72 20 00 	mov    0x20728f(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff80016009:	48 83 f8 00          	cmp    $0x0,%rax
ffffffff8001600d:	74 14                	je     ffffffff80016023 <add_to_all_threads+0x53>
ffffffff8001600f:	48 8b 05 82 72 20 00 	mov    0x207282(%rip),%rax        # ffffffff8021d298 <g_all_threads>
ffffffff80016016:	48 8b 48 e0          	mov    -0x20(%rax),%rcx
ffffffff8001601a:	48 ff c1             	inc    %rcx
ffffffff8001601d:	48 3b 48 e8          	cmp    -0x18(%rax),%rcx
ffffffff80016021:	76 21                	jbe    ffffffff80016044 <add_to_all_threads+0x74>
ffffffff80016023:	48 8b 3d 6e 72 20 00 	mov    0x20726e(%rip),%rdi        # ffffffff8021d298 <g_all_threads>
ffffffff8001602a:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff8001602f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80016034:	31 c9                	xor    %ecx,%ecx
ffffffff80016036:	e8 45 9f ff ff       	call   ffffffff8000ff80 <stbds_arrgrowf>
ffffffff8001603b:	48 89 05 56 72 20 00 	mov    %rax,0x207256(%rip)        # ffffffff8021d298 <g_all_threads>
ffffffff80016042:	eb 02                	jmp    ffffffff80016046 <add_to_all_threads+0x76>
ffffffff80016044:	eb 00                	jmp    ffffffff80016046 <add_to_all_threads+0x76>
ffffffff80016046:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff8001604a:	48 8b 0d 47 72 20 00 	mov    0x207247(%rip),%rcx        # ffffffff8021d298 <g_all_threads>
ffffffff80016051:	48 8b 51 e0          	mov    -0x20(%rcx),%rdx
ffffffff80016055:	48 89 d6             	mov    %rdx,%rsi
ffffffff80016058:	48 83 c6 01          	add    $0x1,%rsi
ffffffff8001605c:	48 89 71 e0          	mov    %rsi,-0x20(%rcx)
ffffffff80016060:	48 89 04 d1          	mov    %rax,(%rcx,%rdx,8)
ffffffff80016064:	e8 37 00 00 00       	call   ffffffff800160a0 <unlock_all_threads>
ffffffff80016069:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8001606d:	5d                   	pop    %rbp
ffffffff8001606e:	c3                   	ret    
ffffffff8001606f:	cc                   	int3   

ffffffff80016070 <thread_exit>:
ffffffff80016070:	55                   	push   %rbp
ffffffff80016071:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016074:	31 c0                	xor    %eax,%eax
ffffffff80016076:	e8 25 ef ff ff       	call   ffffffff80014fa0 <scheduler_drop_current>
ffffffff8001607b:	5d                   	pop    %rbp
ffffffff8001607c:	c3                   	ret    
ffffffff8001607d:	cc                   	int3   
ffffffff8001607e:	cc                   	int3   
ffffffff8001607f:	cc                   	int3   

ffffffff80016080 <lock_all_threads>:
ffffffff80016080:	55                   	push   %rbp
ffffffff80016081:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016084:	48 c7 c7 a0 d2 21 80 	mov    $0xffffffff8021d2a0,%rdi
ffffffff8001608b:	e8 30 a6 fe ff       	call   ffffffff800006c0 <mutex_lock>
ffffffff80016090:	5d                   	pop    %rbp
ffffffff80016091:	c3                   	ret    
ffffffff80016092:	cc                   	int3   
ffffffff80016093:	cc                   	int3   
ffffffff80016094:	cc                   	int3   
ffffffff80016095:	cc                   	int3   
ffffffff80016096:	cc                   	int3   
ffffffff80016097:	cc                   	int3   
ffffffff80016098:	cc                   	int3   
ffffffff80016099:	cc                   	int3   
ffffffff8001609a:	cc                   	int3   
ffffffff8001609b:	cc                   	int3   
ffffffff8001609c:	cc                   	int3   
ffffffff8001609d:	cc                   	int3   
ffffffff8001609e:	cc                   	int3   
ffffffff8001609f:	cc                   	int3   

ffffffff800160a0 <unlock_all_threads>:
ffffffff800160a0:	55                   	push   %rbp
ffffffff800160a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800160a4:	48 c7 c7 a0 d2 21 80 	mov    $0xffffffff8021d2a0,%rdi
ffffffff800160ab:	e8 70 a8 fe ff       	call   ffffffff80000920 <mutex_unlock>
ffffffff800160b0:	5d                   	pop    %rbp
ffffffff800160b1:	c3                   	ret    
ffffffff800160b2:	cc                   	int3   
ffffffff800160b3:	cc                   	int3   
ffffffff800160b4:	cc                   	int3   
ffffffff800160b5:	cc                   	int3   
ffffffff800160b6:	cc                   	int3   
ffffffff800160b7:	cc                   	int3   
ffffffff800160b8:	cc                   	int3   
ffffffff800160b9:	cc                   	int3   
ffffffff800160ba:	cc                   	int3   
ffffffff800160bb:	cc                   	int3   
ffffffff800160bc:	cc                   	int3   
ffffffff800160bd:	cc                   	int3   
ffffffff800160be:	cc                   	int3   
ffffffff800160bf:	cc                   	int3   

ffffffff800160c0 <thread_list_empty>:
ffffffff800160c0:	55                   	push   %rbp
ffffffff800160c1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800160c4:	50                   	push   %rax
ffffffff800160c5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
ffffffff800160c9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800160cd:	48 83 38 00          	cmpq   $0x0,(%rax)
ffffffff800160d1:	0f 94 c0             	sete   %al
ffffffff800160d4:	24 01                	and    $0x1,%al
ffffffff800160d6:	0f b6 c0             	movzbl %al,%eax
ffffffff800160d9:	48 83 c4 08          	add    $0x8,%rsp
ffffffff800160dd:	5d                   	pop    %rbp
ffffffff800160de:	c3                   	ret    
ffffffff800160df:	cc                   	int3   

ffffffff800160e0 <thread_list_pop>:
ffffffff800160e0:	55                   	push   %rbp
ffffffff800160e1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800160e4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800160e8:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff800160ec:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800160f0:	48 8b 00             	mov    (%rax),%rax
ffffffff800160f3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800160f7:	48 83 7d f8 00       	cmpq   $0x0,-0x8(%rbp)
ffffffff800160fc:	74 12                	je     ffffffff80016110 <thread_list_pop+0x30>
ffffffff800160fe:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80016102:	48 8b 80 e0 02 00 00 	mov    0x2e0(%rax),%rax
ffffffff80016109:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001610d:	48 89 01             	mov    %rax,(%rcx)
ffffffff80016110:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80016114:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80016118:	5d                   	pop    %rbp
ffffffff80016119:	c3                   	ret    
ffffffff8001611a:	cc                   	int3   
ffffffff8001611b:	cc                   	int3   
ffffffff8001611c:	cc                   	int3   
ffffffff8001611d:	cc                   	int3   
ffffffff8001611e:	cc                   	int3   
ffffffff8001611f:	cc                   	int3   

ffffffff80016120 <thread_list_push>:
ffffffff80016120:	55                   	push   %rbp
ffffffff80016121:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016124:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80016128:	48 89 7d f0          	mov    %rdi,-0x10(%rbp)
ffffffff8001612c:	48 89 75 f8          	mov    %rsi,-0x8(%rbp)
ffffffff80016130:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80016134:	48 8b 00             	mov    (%rax),%rax
ffffffff80016137:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff8001613b:	48 89 81 e0 02 00 00 	mov    %rax,0x2e0(%rcx)
ffffffff80016142:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80016146:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff8001614a:	48 89 01             	mov    %rax,(%rcx)
ffffffff8001614d:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80016151:	5d                   	pop    %rbp
ffffffff80016152:	c3                   	ret    
ffffffff80016153:	cc                   	int3   
ffffffff80016154:	cc                   	int3   
ffffffff80016155:	cc                   	int3   
ffffffff80016156:	cc                   	int3   
ffffffff80016157:	cc                   	int3   
ffffffff80016158:	cc                   	int3   
ffffffff80016159:	cc                   	int3   
ffffffff8001615a:	cc                   	int3   
ffffffff8001615b:	cc                   	int3   
ffffffff8001615c:	cc                   	int3   
ffffffff8001615d:	cc                   	int3   
ffffffff8001615e:	cc                   	int3   
ffffffff8001615f:	cc                   	int3   

ffffffff80016160 <init_timer>:
ffffffff80016160:	55                   	push   %rbp
ffffffff80016161:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016164:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80016168:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8001616f:	48 8d 7d f8          	lea    -0x8(%rbp),%rdi
ffffffff80016173:	e8 78 00 00 00       	call   ffffffff800161f0 <cpuid.386>
ffffffff80016178:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8001617b:	c1 e8 08             	shr    $0x8,%eax
ffffffff8001617e:	83 e0 01             	and    $0x1,%eax
ffffffff80016181:	83 f8 00             	cmp    $0x0,%eax
ffffffff80016184:	75 38                	jne    ffffffff800161be <init_timer+0x5e>
ffffffff80016186:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff8001618d:	31 c0                	xor    %eax,%eax
ffffffff8001618f:	e8 5c 37 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80016194:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80016197:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8001619e:	48 89 c6             	mov    %rax,%rsi
ffffffff800161a1:	48 c7 c1 9b 8d 01 80 	mov    $0xffffffff80018d9b,%rcx
ffffffff800161a8:	49 c7 c0 e6 91 01 80 	mov    $0xffffffff800191e6,%r8
ffffffff800161af:	41 b9 23 00 00 00    	mov    $0x23,%r9d
ffffffff800161b5:	31 c0                	xor    %eax,%eax
ffffffff800161b7:	e8 84 b7 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800161bc:	eb 26                	jmp    ffffffff800161e4 <init_timer+0x84>
ffffffff800161be:	eb 00                	jmp    ffffffff800161c0 <init_timer+0x60>
ffffffff800161c0:	e8 db 00 00 00       	call   ffffffff800162a0 <calibrate_tsc>
ffffffff800161c5:	31 c0                	xor    %eax,%eax
ffffffff800161c7:	e8 24 37 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff800161cc:	48 8b 15 15 71 20 00 	mov    0x207115(%rip),%rdx        # ffffffff8021d2e8 <m_tsc_micro_freq>
ffffffff800161d3:	48 c7 c7 b1 9f 01 80 	mov    $0xffffffff80019fb1,%rdi
ffffffff800161da:	48 89 c6             	mov    %rax,%rsi
ffffffff800161dd:	31 c0                	xor    %eax,%eax
ffffffff800161df:	e8 5c b7 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800161e4:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800161e7:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800161eb:	5d                   	pop    %rbp
ffffffff800161ec:	c3                   	ret    
ffffffff800161ed:	cc                   	int3   
ffffffff800161ee:	cc                   	int3   
ffffffff800161ef:	cc                   	int3   

ffffffff800161f0 <cpuid.386>:
ffffffff800161f0:	55                   	push   %rbp
ffffffff800161f1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800161f4:	53                   	push   %rbx
ffffffff800161f5:	48 83 ec 48          	sub    $0x48,%rsp
ffffffff800161f9:	c7 45 ec 07 00 00 80 	movl   $0x80000007,-0x14(%rbp)
ffffffff80016200:	48 c7 45 c8 00 00 00 	movq   $0x0,-0x38(%rbp)
ffffffff80016207:	00 
ffffffff80016208:	48 c7 45 d0 00 00 00 	movq   $0x0,-0x30(%rbp)
ffffffff8001620f:	00 
ffffffff80016210:	48 c7 45 d8 00 00 00 	movq   $0x0,-0x28(%rbp)
ffffffff80016217:	00 
ffffffff80016218:	48 89 7d e0          	mov    %rdi,-0x20(%rbp)
ffffffff8001621c:	48 8d 45 b0          	lea    -0x50(%rbp),%rax
ffffffff80016220:	8b 4d ec             	mov    -0x14(%rbp),%ecx
ffffffff80016223:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80016227:	89 4d e8             	mov    %ecx,-0x18(%rbp)
ffffffff8001622a:	48 8b 75 f0          	mov    -0x10(%rbp),%rsi
ffffffff8001622e:	48 8b 7d f0          	mov    -0x10(%rbp),%rdi
ffffffff80016232:	4c 8b 45 f0          	mov    -0x10(%rbp),%r8
ffffffff80016236:	4c 8b 4d f0          	mov    -0x10(%rbp),%r9
ffffffff8001623a:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff8001623d:	0f a2                	cpuid  
ffffffff8001623f:	89 06                	mov    %eax,(%rsi)
ffffffff80016241:	89 5f 04             	mov    %ebx,0x4(%rdi)
ffffffff80016244:	41 89 48 08          	mov    %ecx,0x8(%r8)
ffffffff80016248:	41 89 51 0c          	mov    %edx,0xc(%r9)
ffffffff8001624c:	48 83 7d c8 00       	cmpq   $0x0,-0x38(%rbp)
ffffffff80016251:	74 09                	je     ffffffff8001625c <cpuid.386+0x6c>
ffffffff80016253:	8b 45 b0             	mov    -0x50(%rbp),%eax
ffffffff80016256:	48 8b 4d c8          	mov    -0x38(%rbp),%rcx
ffffffff8001625a:	89 01                	mov    %eax,(%rcx)
ffffffff8001625c:	48 83 7d d0 00       	cmpq   $0x0,-0x30(%rbp)
ffffffff80016261:	74 09                	je     ffffffff8001626c <cpuid.386+0x7c>
ffffffff80016263:	8b 45 b4             	mov    -0x4c(%rbp),%eax
ffffffff80016266:	48 8b 4d d0          	mov    -0x30(%rbp),%rcx
ffffffff8001626a:	89 01                	mov    %eax,(%rcx)
ffffffff8001626c:	48 83 7d d8 00       	cmpq   $0x0,-0x28(%rbp)
ffffffff80016271:	74 09                	je     ffffffff8001627c <cpuid.386+0x8c>
ffffffff80016273:	8b 45 b8             	mov    -0x48(%rbp),%eax
ffffffff80016276:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff8001627a:	89 01                	mov    %eax,(%rcx)
ffffffff8001627c:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80016281:	74 09                	je     ffffffff8001628c <cpuid.386+0x9c>
ffffffff80016283:	8b 45 bc             	mov    -0x44(%rbp),%eax
ffffffff80016286:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff8001628a:	89 01                	mov    %eax,(%rcx)
ffffffff8001628c:	48 83 c4 48          	add    $0x48,%rsp
ffffffff80016290:	5b                   	pop    %rbx
ffffffff80016291:	5d                   	pop    %rbp
ffffffff80016292:	c3                   	ret    
ffffffff80016293:	cc                   	int3   
ffffffff80016294:	cc                   	int3   
ffffffff80016295:	cc                   	int3   
ffffffff80016296:	cc                   	int3   
ffffffff80016297:	cc                   	int3   
ffffffff80016298:	cc                   	int3   
ffffffff80016299:	cc                   	int3   
ffffffff8001629a:	cc                   	int3   
ffffffff8001629b:	cc                   	int3   
ffffffff8001629c:	cc                   	int3   
ffffffff8001629d:	cc                   	int3   
ffffffff8001629e:	cc                   	int3   
ffffffff8001629f:	cc                   	int3   

ffffffff800162a0 <calibrate_tsc>:
ffffffff800162a0:	55                   	push   %rbp
ffffffff800162a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800162a4:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff800162a8:	0f 31                	rdtsc  
ffffffff800162aa:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff800162ae:	48 09 d0             	or     %rdx,%rax
ffffffff800162b1:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800162b5:	0f ae e8             	lfence 
ffffffff800162b8:	e8 d3 01 00 00       	call   ffffffff80016490 <microdelay>
ffffffff800162bd:	0f 31                	rdtsc  
ffffffff800162bf:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff800162c3:	48 09 d0             	or     %rdx,%rax
ffffffff800162c6:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff800162ca:	0f ae e8             	lfence 
ffffffff800162cd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff800162d1:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff800162d5:	48 29 c8             	sub    %rcx,%rax
ffffffff800162d8:	48 b9 cf f7 53 e3 a5 	movabs $0x20c49ba5e353f7cf,%rcx
ffffffff800162df:	9b c4 20 
ffffffff800162e2:	48 f7 e9             	imul   %rcx
ffffffff800162e5:	48 89 d0             	mov    %rdx,%rax
ffffffff800162e8:	48 c1 e8 3f          	shr    $0x3f,%rax
ffffffff800162ec:	48 c1 fa 07          	sar    $0x7,%rdx
ffffffff800162f0:	48 01 c2             	add    %rax,%rdx
ffffffff800162f3:	48 89 15 ee 6f 20 00 	mov    %rdx,0x206fee(%rip)        # ffffffff8021d2e8 <m_tsc_micro_freq>
ffffffff800162fa:	48 83 c4 10          	add    $0x10,%rsp
ffffffff800162fe:	5d                   	pop    %rbp
ffffffff800162ff:	c3                   	ret    

ffffffff80016300 <get_tsc_freq>:
ffffffff80016300:	55                   	push   %rbp
ffffffff80016301:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016304:	48 8b 05 dd 6f 20 00 	mov    0x206fdd(%rip),%rax        # ffffffff8021d2e8 <m_tsc_micro_freq>
ffffffff8001630b:	5d                   	pop    %rbp
ffffffff8001630c:	c3                   	ret    
ffffffff8001630d:	cc                   	int3   
ffffffff8001630e:	cc                   	int3   
ffffffff8001630f:	cc                   	int3   

ffffffff80016310 <microtime>:
ffffffff80016310:	55                   	push   %rbp
ffffffff80016311:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016314:	50                   	push   %rax
ffffffff80016315:	0f 31                	rdtsc  
ffffffff80016317:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8001631b:	48 09 d0             	or     %rdx,%rax
ffffffff8001631e:	48 8b 0d c3 6f 20 00 	mov    0x206fc3(%rip),%rcx        # ffffffff8021d2e8 <m_tsc_micro_freq>
ffffffff80016325:	31 d2                	xor    %edx,%edx
ffffffff80016327:	48 f7 f1             	div    %rcx
ffffffff8001632a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001632e:	0f ae e8             	lfence 
ffffffff80016331:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80016335:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80016339:	5d                   	pop    %rbp
ffffffff8001633a:	c3                   	ret    
ffffffff8001633b:	cc                   	int3   
ffffffff8001633c:	cc                   	int3   
ffffffff8001633d:	cc                   	int3   
ffffffff8001633e:	cc                   	int3   
ffffffff8001633f:	cc                   	int3   

ffffffff80016340 <init_delay>:
ffffffff80016340:	55                   	push   %rbp
ffffffff80016341:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016344:	48 83 ec 10          	sub    $0x10,%rsp
ffffffff80016348:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8001634f:	e8 bc 04 00 00       	call   ffffffff80016810 <acpi_get_table>
ffffffff80016354:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80016358:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff8001635d:	75 3b                	jne    ffffffff8001639a <init_delay+0x5a>
ffffffff8001635f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80016366:	31 c0                	xor    %eax,%eax
ffffffff80016368:	e8 83 35 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001636d:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80016370:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80016377:	48 89 c6             	mov    %rax,%rsi
ffffffff8001637a:	48 c7 c1 7b 8c 01 80 	mov    $0xffffffff80018c7b,%rcx
ffffffff80016381:	49 c7 c0 5f 95 01 80 	mov    $0xffffffff8001955f,%r8
ffffffff80016388:	41 b9 17 00 00 00    	mov    $0x17,%r9d
ffffffff8001638e:	31 c0                	xor    %eax,%eax
ffffffff80016390:	e8 ab b5 ff ff       	call   ffffffff80011940 <printf_>
ffffffff80016395:	e9 e3 00 00 00       	jmp    ffffffff8001647d <init_delay+0x13d>
ffffffff8001639a:	eb 00                	jmp    ffffffff8001639c <init_delay+0x5c>
ffffffff8001639c:	eb 00                	jmp    ffffffff8001639e <init_delay+0x5e>
ffffffff8001639e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800163a2:	0f be 40 5b          	movsbl 0x5b(%rax),%eax
ffffffff800163a6:	83 f8 04             	cmp    $0x4,%eax
ffffffff800163a9:	74 3b                	je     ffffffff800163e6 <init_delay+0xa6>
ffffffff800163ab:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800163b2:	31 c0                	xor    %eax,%eax
ffffffff800163b4:	e8 37 35 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff800163b9:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800163bc:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800163c3:	48 89 c6             	mov    %rax,%rsi
ffffffff800163c6:	48 c7 c1 7b 8c 01 80 	mov    $0xffffffff80018c7b,%rcx
ffffffff800163cd:	49 c7 c0 5f 95 01 80 	mov    $0xffffffff8001955f,%r8
ffffffff800163d4:	41 b9 1a 00 00 00    	mov    $0x1a,%r9d
ffffffff800163da:	31 c0                	xor    %eax,%eax
ffffffff800163dc:	e8 5f b5 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800163e1:	e9 97 00 00 00       	jmp    ffffffff8001647d <init_delay+0x13d>
ffffffff800163e6:	eb 00                	jmp    ffffffff800163e8 <init_delay+0xa8>
ffffffff800163e8:	eb 00                	jmp    ffffffff800163ea <init_delay+0xaa>
ffffffff800163ea:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800163ee:	83 78 4c 00          	cmpl   $0x0,0x4c(%rax)
ffffffff800163f2:	75 38                	jne    ffffffff8001642c <init_delay+0xec>
ffffffff800163f4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800163fb:	31 c0                	xor    %eax,%eax
ffffffff800163fd:	e8 ee 34 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80016402:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff80016405:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff8001640c:	48 89 c6             	mov    %rax,%rsi
ffffffff8001640f:	48 c7 c1 7b 8c 01 80 	mov    $0xffffffff80018c7b,%rcx
ffffffff80016416:	49 c7 c0 5f 95 01 80 	mov    $0xffffffff8001955f,%r8
ffffffff8001641d:	41 b9 1b 00 00 00    	mov    $0x1b,%r9d
ffffffff80016423:	31 c0                	xor    %eax,%eax
ffffffff80016425:	e8 16 b5 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001642a:	eb 51                	jmp    ffffffff8001647d <init_delay+0x13d>
ffffffff8001642c:	eb 00                	jmp    ffffffff8001642e <init_delay+0xee>
ffffffff8001642e:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80016432:	66 8b 40 4c          	mov    0x4c(%rax),%ax
ffffffff80016436:	66 89 05 b3 6e 20 00 	mov    %ax,0x206eb3(%rip)        # ffffffff8021d2f0 <m_pm_timer>
ffffffff8001643d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80016441:	8b 40 70             	mov    0x70(%rax),%eax
ffffffff80016444:	c1 e8 08             	shr    $0x8,%eax
ffffffff80016447:	83 e0 01             	and    $0x1,%eax
ffffffff8001644a:	c0 e0 03             	shl    $0x3,%al
ffffffff8001644d:	04 18                	add    $0x18,%al
ffffffff8001644f:	88 05 9d 6e 20 00    	mov    %al,0x206e9d(%rip)        # ffffffff8021d2f2 <m_pm_timer_bits>
ffffffff80016455:	31 c0                	xor    %eax,%eax
ffffffff80016457:	e8 94 34 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001645c:	0f b7 15 8d 6e 20 00 	movzwl 0x206e8d(%rip),%edx        # ffffffff8021d2f0 <m_pm_timer>
ffffffff80016463:	8a 0d 89 6e 20 00    	mov    0x206e89(%rip),%cl        # ffffffff8021d2f2 <m_pm_timer_bits>
ffffffff80016469:	0f b6 c9             	movzbl %cl,%ecx
ffffffff8001646c:	48 c7 c7 ea 97 01 80 	mov    $0xffffffff800197ea,%rdi
ffffffff80016473:	48 89 c6             	mov    %rax,%rsi
ffffffff80016476:	31 c0                	xor    %eax,%eax
ffffffff80016478:	e8 c3 b4 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001647d:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016480:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80016484:	5d                   	pop    %rbp
ffffffff80016485:	c3                   	ret    
ffffffff80016486:	cc                   	int3   
ffffffff80016487:	cc                   	int3   
ffffffff80016488:	cc                   	int3   
ffffffff80016489:	cc                   	int3   
ffffffff8001648a:	cc                   	int3   
ffffffff8001648b:	cc                   	int3   
ffffffff8001648c:	cc                   	int3   
ffffffff8001648d:	cc                   	int3   
ffffffff8001648e:	cc                   	int3   
ffffffff8001648f:	cc                   	int3   

ffffffff80016490 <microdelay>:
ffffffff80016490:	55                   	push   %rbp
ffffffff80016491:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016494:	48 83 ec 50          	sub    $0x50,%rsp
ffffffff80016498:	48 c7 45 d0 e8 03 00 	movq   $0x3e8,-0x30(%rbp)
ffffffff8001649f:	00 
ffffffff800164a0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800164a4:	48 8d 04 40          	lea    (%rax,%rax,2),%rax
ffffffff800164a8:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800164ac:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800164b0:	48 8d 04 80          	lea    (%rax,%rax,4),%rax
ffffffff800164b4:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
ffffffff800164bb:	cc cc cc 
ffffffff800164be:	48 f7 e1             	mul    %rcx
ffffffff800164c1:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff800164c5:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800164c9:	48 01 d0             	add    %rdx,%rax
ffffffff800164cc:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800164d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff800164d4:	48 c1 e0 03          	shl    $0x3,%rax
ffffffff800164d8:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff800164dc:	48 b9 c3 f5 28 5c 8f 	movabs $0x28f5c28f5c28f5c3,%rcx
ffffffff800164e3:	c2 f5 28 
ffffffff800164e6:	48 f7 e1             	mul    %rcx
ffffffff800164e9:	48 c1 ea 02          	shr    $0x2,%rdx
ffffffff800164ed:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800164f1:	48 01 d0             	add    %rdx,%rax
ffffffff800164f4:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800164f8:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800164fc:	8a 0d f0 6d 20 00    	mov    0x206df0(%rip),%cl        # ffffffff8021d2f2 <m_pm_timer_bits>
ffffffff80016502:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80016507:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8001650c:	d3 e2                	shl    %cl,%edx
ffffffff8001650e:	48 63 ca             	movslq %edx,%rcx
ffffffff80016511:	31 d2                	xor    %edx,%edx
ffffffff80016513:	48 f7 f1             	div    %rcx
ffffffff80016516:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001651a:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff8001651e:	8a 0d ce 6d 20 00    	mov    0x206dce(%rip),%cl        # ffffffff8021d2f2 <m_pm_timer_bits>
ffffffff80016524:	d3 e6                	shl    %cl,%esi
ffffffff80016526:	48 63 ce             	movslq %esi,%rcx
ffffffff80016529:	31 d2                	xor    %edx,%edx
ffffffff8001652b:	48 f7 f1             	div    %rcx
ffffffff8001652e:	48 89 55 c8          	mov    %rdx,-0x38(%rbp)
ffffffff80016532:	66 8b 05 b7 6d 20 00 	mov    0x206db7(%rip),%ax        # ffffffff8021d2f0 <m_pm_timer>
ffffffff80016539:	66 89 45 ea          	mov    %ax,-0x16(%rbp)
ffffffff8001653d:	66 8b 55 ea          	mov    -0x16(%rbp),%dx
ffffffff80016541:	ed                   	in     (%dx),%eax
ffffffff80016542:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
ffffffff80016546:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
ffffffff8001654a:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff8001654d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80016551:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff80016554:	48 01 c8             	add    %rcx,%rax
ffffffff80016557:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff8001655b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8001655f:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff80016562:	48 39 c8             	cmp    %rcx,%rax
ffffffff80016565:	73 0e                	jae    ffffffff80016575 <microdelay+0xe5>
ffffffff80016567:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff8001656b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8001656f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80016573:	eb 44                	jmp    ffffffff800165b9 <microdelay+0x129>
ffffffff80016575:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80016579:	8a 0d 73 6d 20 00    	mov    0x206d73(%rip),%cl        # ffffffff8021d2f2 <m_pm_timer_bits>
ffffffff8001657f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80016584:	d3 e2                	shl    %cl,%edx
ffffffff80016586:	48 63 ca             	movslq %edx,%rcx
ffffffff80016589:	31 d2                	xor    %edx,%edx
ffffffff8001658b:	48 f7 f1             	div    %rcx
ffffffff8001658e:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
ffffffff80016592:	48 01 c1             	add    %rax,%rcx
ffffffff80016595:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80016599:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff8001659d:	8a 0d 4f 6d 20 00    	mov    0x206d4f(%rip),%cl        # ffffffff8021d2f2 <m_pm_timer_bits>
ffffffff800165a3:	0f b6 c9             	movzbl %cl,%ecx
ffffffff800165a6:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff800165ab:	d3 e2                	shl    %cl,%edx
ffffffff800165ad:	48 63 ca             	movslq %edx,%rcx
ffffffff800165b0:	31 d2                	xor    %edx,%edx
ffffffff800165b2:	48 f7 f1             	div    %rcx
ffffffff800165b5:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff800165b9:	eb 00                	jmp    ffffffff800165bb <microdelay+0x12b>
ffffffff800165bb:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
ffffffff800165c0:	76 37                	jbe    ffffffff800165f9 <microdelay+0x169>
ffffffff800165c2:	66 8b 05 27 6d 20 00 	mov    0x206d27(%rip),%ax        # ffffffff8021d2f0 <m_pm_timer>
ffffffff800165c9:	66 89 45 ec          	mov    %ax,-0x14(%rbp)
ffffffff800165cd:	66 8b 55 ec          	mov    -0x14(%rbp),%dx
ffffffff800165d1:	ed                   	in     (%dx),%eax
ffffffff800165d2:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
ffffffff800165d6:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
ffffffff800165da:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff800165dd:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800165e0:	3b 45 fc             	cmp    -0x4(%rbp),%eax
ffffffff800165e3:	73 0c                	jae    ffffffff800165f1 <microdelay+0x161>
ffffffff800165e5:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff800165e9:	48 83 c0 ff          	add    $0xffffffffffffffff,%rax
ffffffff800165ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff800165f1:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff800165f4:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800165f7:	eb c2                	jmp    ffffffff800165bb <microdelay+0x12b>
ffffffff800165f9:	eb 00                	jmp    ffffffff800165fb <microdelay+0x16b>
ffffffff800165fb:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800165ff:	8b 4d fc             	mov    -0x4(%rbp),%ecx
ffffffff80016602:	48 39 c8             	cmp    %rcx,%rax
ffffffff80016605:	76 2d                	jbe    ffffffff80016634 <microdelay+0x1a4>
ffffffff80016607:	66 8b 05 e2 6c 20 00 	mov    0x206ce2(%rip),%ax        # ffffffff8021d2f0 <m_pm_timer>
ffffffff8001660e:	66 89 45 ee          	mov    %ax,-0x12(%rbp)
ffffffff80016612:	66 8b 55 ee          	mov    -0x12(%rbp),%dx
ffffffff80016616:	ed                   	in     (%dx),%eax
ffffffff80016617:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
ffffffff8001661b:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
ffffffff8001661f:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80016622:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80016625:	3b 45 fc             	cmp    -0x4(%rbp),%eax
ffffffff80016628:	73 02                	jae    ffffffff8001662c <microdelay+0x19c>
ffffffff8001662a:	eb 0a                	jmp    ffffffff80016636 <microdelay+0x1a6>
ffffffff8001662c:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff8001662f:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80016632:	eb c7                	jmp    ffffffff800165fb <microdelay+0x16b>
ffffffff80016634:	eb 00                	jmp    ffffffff80016636 <microdelay+0x1a6>
ffffffff80016636:	48 83 c4 50          	add    $0x50,%rsp
ffffffff8001663a:	5d                   	pop    %rbp
ffffffff8001663b:	c3                   	ret    
ffffffff8001663c:	cc                   	int3   
ffffffff8001663d:	cc                   	int3   
ffffffff8001663e:	cc                   	int3   
ffffffff8001663f:	cc                   	int3   

ffffffff80016640 <init_acpi>:
ffffffff80016640:	55                   	push   %rbp
ffffffff80016641:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016644:	48 83 ec 30          	sub    $0x30,%rsp
ffffffff80016648:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8001664f:	48 bf 78 5e 37 0a 93 	movabs $0x9e1786930a375e78,%rdi
ffffffff80016656:	86 17 9e 
ffffffff80016659:	e8 12 a5 fe ff       	call   ffffffff80000b70 <get_stivale2_tag>
ffffffff8001665e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff80016662:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff80016667:	75 3b                	jne    ffffffff800166a4 <init_acpi+0x64>
ffffffff80016669:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80016670:	31 c0                	xor    %eax,%eax
ffffffff80016672:	e8 79 32 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80016677:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8001667a:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80016681:	48 89 c6             	mov    %rax,%rsi
ffffffff80016684:	48 c7 c1 04 8b 01 80 	mov    $0xffffffff80018b04,%rcx
ffffffff8001668b:	49 c7 c0 2b 9c 01 80 	mov    $0xffffffff80019c2b,%r8
ffffffff80016692:	41 b9 0f 00 00 00    	mov    $0xf,%r9d
ffffffff80016698:	31 c0                	xor    %eax,%eax
ffffffff8001669a:	e8 a1 b2 ff ff       	call   ffffffff80011940 <printf_>
ffffffff8001669f:	e9 60 01 00 00       	jmp    ffffffff80016804 <init_acpi+0x1c4>
ffffffff800166a4:	eb 00                	jmp    ffffffff800166a6 <init_acpi+0x66>
ffffffff800166a6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800166aa:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff800166ae:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800166b2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800166b6:	48 b9 52 53 44 20 50 	movabs $0x2052545020445352,%rcx
ffffffff800166bd:	54 52 20 
ffffffff800166c0:	48 39 08             	cmp    %rcx,(%rax)
ffffffff800166c3:	74 3b                	je     ffffffff80016700 <init_acpi+0xc0>
ffffffff800166c5:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800166cc:	31 c0                	xor    %eax,%eax
ffffffff800166ce:	e8 1d 32 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff800166d3:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800166d6:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800166dd:	48 89 c6             	mov    %rax,%rsi
ffffffff800166e0:	48 c7 c1 04 8b 01 80 	mov    $0xffffffff80018b04,%rcx
ffffffff800166e7:	49 c7 c0 2b 9c 01 80 	mov    $0xffffffff80019c2b,%r8
ffffffff800166ee:	41 b9 14 00 00 00    	mov    $0x14,%r9d
ffffffff800166f4:	31 c0                	xor    %eax,%eax
ffffffff800166f6:	e8 45 b2 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800166fb:	e9 04 01 00 00       	jmp    ffffffff80016804 <init_acpi+0x1c4>
ffffffff80016700:	eb 00                	jmp    ffffffff80016702 <init_acpi+0xc2>
ffffffff80016702:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80016706:	8b 40 10             	mov    0x10(%rax),%eax
ffffffff80016709:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff8001670d:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff80016714:	00 00 00 
ffffffff80016717:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff8001671b:	76 2e                	jbe    ffffffff8001674b <init_acpi+0x10b>
ffffffff8001671d:	31 c0                	xor    %eax,%eax
ffffffff8001671f:	e8 cc 31 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff80016724:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff8001672b:	48 89 c6             	mov    %rax,%rsi
ffffffff8001672e:	48 c7 c2 04 8b 01 80 	mov    $0xffffffff80018b04,%rdx
ffffffff80016735:	48 c7 c1 2b 9c 01 80 	mov    $0xffffffff80019c2b,%rcx
ffffffff8001673c:	41 b8 17 00 00 00    	mov    $0x17,%r8d
ffffffff80016742:	31 c0                	xor    %eax,%eax
ffffffff80016744:	e8 f7 b1 ff ff       	call   ffffffff80011940 <printf_>
ffffffff80016749:	0f 0b                	ud2    
ffffffff8001674b:	eb 00                	jmp    ffffffff8001674d <init_acpi+0x10d>
ffffffff8001674d:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80016751:	48 b9 00 00 00 00 00 	movabs $0xffff800000000000,%rcx
ffffffff80016758:	80 ff ff 
ffffffff8001675b:	48 01 c8             	add    %rcx,%rax
ffffffff8001675e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff80016762:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80016766:	48 89 05 8b 6b 20 00 	mov    %rax,0x206b8b(%rip)        # ffffffff8021d2f8 <m_rsdt>
ffffffff8001676d:	48 8b 05 84 6b 20 00 	mov    0x206b84(%rip),%rax        # ffffffff8021d2f8 <m_rsdt>
ffffffff80016774:	81 38 52 53 44 54    	cmpl   $0x54445352,(%rax)
ffffffff8001677a:	74 38                	je     ffffffff800167b4 <init_acpi+0x174>
ffffffff8001677c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80016783:	31 c0                	xor    %eax,%eax
ffffffff80016785:	e8 66 31 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001678a:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff8001678d:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff80016794:	48 89 c6             	mov    %rax,%rsi
ffffffff80016797:	48 c7 c1 04 8b 01 80 	mov    $0xffffffff80018b04,%rcx
ffffffff8001679e:	49 c7 c0 2b 9c 01 80 	mov    $0xffffffff80019c2b,%r8
ffffffff800167a5:	41 b9 18 00 00 00    	mov    $0x18,%r9d
ffffffff800167ab:	31 c0                	xor    %eax,%eax
ffffffff800167ad:	e8 8e b1 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800167b2:	eb 50                	jmp    ffffffff80016804 <init_acpi+0x1c4>
ffffffff800167b4:	eb 00                	jmp    ffffffff800167b6 <init_acpi+0x176>
ffffffff800167b6:	eb 00                	jmp    ffffffff800167b8 <init_acpi+0x178>
ffffffff800167b8:	48 8b 05 39 6b 20 00 	mov    0x206b39(%rip),%rax        # ffffffff8021d2f8 <m_rsdt>
ffffffff800167bf:	0f b6 40 08          	movzbl 0x8(%rax),%eax
ffffffff800167c3:	83 f8 01             	cmp    $0x1,%eax
ffffffff800167c6:	7d 38                	jge    ffffffff80016800 <init_acpi+0x1c0>
ffffffff800167c8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff800167cf:	31 c0                	xor    %eax,%eax
ffffffff800167d1:	e8 1a 31 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff800167d6:	8b 55 fc             	mov    -0x4(%rbp),%edx
ffffffff800167d9:	48 c7 c7 7f 92 01 80 	mov    $0xffffffff8001927f,%rdi
ffffffff800167e0:	48 89 c6             	mov    %rax,%rsi
ffffffff800167e3:	48 c7 c1 04 8b 01 80 	mov    $0xffffffff80018b04,%rcx
ffffffff800167ea:	49 c7 c0 2b 9c 01 80 	mov    $0xffffffff80019c2b,%r8
ffffffff800167f1:	41 b9 19 00 00 00    	mov    $0x19,%r9d
ffffffff800167f7:	31 c0                	xor    %eax,%eax
ffffffff800167f9:	e8 42 b1 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800167fe:	eb 04                	jmp    ffffffff80016804 <init_acpi+0x1c4>
ffffffff80016800:	eb 00                	jmp    ffffffff80016802 <init_acpi+0x1c2>
ffffffff80016802:	eb 00                	jmp    ffffffff80016804 <init_acpi+0x1c4>
ffffffff80016804:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016807:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8001680b:	5d                   	pop    %rbp
ffffffff8001680c:	c3                   	ret    
ffffffff8001680d:	cc                   	int3   
ffffffff8001680e:	cc                   	int3   
ffffffff8001680f:	cc                   	int3   

ffffffff80016810 <acpi_get_table>:
ffffffff80016810:	55                   	push   %rbp
ffffffff80016811:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016814:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80016818:	c7 45 f8 46 41 43 50 	movl   $0x50434146,-0x8(%rbp)
ffffffff8001681f:	48 8b 05 d2 6a 20 00 	mov    0x206ad2(%rip),%rax        # ffffffff8021d2f8 <m_rsdt>
ffffffff80016826:	8b 40 04             	mov    0x4(%rax),%eax
ffffffff80016829:	48 83 c0 dc          	add    $0xffffffffffffffdc,%rax
ffffffff8001682d:	48 c1 e8 02          	shr    $0x2,%rax
ffffffff80016831:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
ffffffff80016835:	48 8b 05 bc 6a 20 00 	mov    0x206abc(%rip),%rax        # ffffffff8021d2f8 <m_rsdt>
ffffffff8001683c:	48 83 c0 24          	add    $0x24,%rax
ffffffff80016840:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
ffffffff80016844:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
ffffffff8001684b:	48 63 45 fc          	movslq -0x4(%rbp),%rax
ffffffff8001684f:	48 3b 45 c8          	cmp    -0x38(%rbp),%rax
ffffffff80016853:	0f 83 8e 00 00 00    	jae    ffffffff800168e7 <acpi_get_table+0xd7>
ffffffff80016859:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
ffffffff8001685d:	48 63 4d fc          	movslq -0x4(%rbp),%rcx
ffffffff80016861:	8b 04 88             	mov    (%rax,%rcx,4),%eax
ffffffff80016864:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
ffffffff80016868:	48 b8 00 00 00 00 80 	movabs $0x8000000000,%rax
ffffffff8001686f:	00 00 00 
ffffffff80016872:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
ffffffff80016876:	76 2e                	jbe    ffffffff800168a6 <acpi_get_table+0x96>
ffffffff80016878:	31 c0                	xor    %eax,%eax
ffffffff8001687a:	e8 71 30 ff ff       	call   ffffffff800098f0 <get_apic_id>
ffffffff8001687f:	48 c7 c7 ea a1 01 80 	mov    $0xffffffff8001a1ea,%rdi
ffffffff80016886:	48 89 c6             	mov    %rax,%rsi
ffffffff80016889:	48 c7 c2 57 8a 01 80 	mov    $0xffffffff80018a57,%rdx
ffffffff80016890:	48 c7 c1 2b 9c 01 80 	mov    $0xffffffff80019c2b,%rcx
ffffffff80016897:	41 b8 23 00 00 00    	mov    $0x23,%r8d
ffffffff8001689d:	31 c0                	xor    %eax,%eax
ffffffff8001689f:	e8 9c b0 ff ff       	call   ffffffff80011940 <printf_>
ffffffff800168a4:	0f 0b                	ud2    
ffffffff800168a6:	eb 00                	jmp    ffffffff800168a8 <acpi_get_table+0x98>
ffffffff800168a8:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff800168af:	80 ff ff 
ffffffff800168b2:	48 03 45 f0          	add    -0x10(%rbp),%rax
ffffffff800168b6:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
ffffffff800168ba:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff800168be:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff800168c2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800168c6:	8b 00                	mov    (%rax),%eax
ffffffff800168c8:	3b 45 f8             	cmp    -0x8(%rbp),%eax
ffffffff800168cb:	75 0a                	jne    ffffffff800168d7 <acpi_get_table+0xc7>
ffffffff800168cd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff800168d1:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
ffffffff800168d5:	eb 18                	jmp    ffffffff800168ef <acpi_get_table+0xdf>
ffffffff800168d7:	eb 00                	jmp    ffffffff800168d9 <acpi_get_table+0xc9>
ffffffff800168d9:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff800168dc:	83 c0 01             	add    $0x1,%eax
ffffffff800168df:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff800168e2:	e9 64 ff ff ff       	jmp    ffffffff8001684b <acpi_get_table+0x3b>
ffffffff800168e7:	48 c7 45 e0 00 00 00 	movq   $0x0,-0x20(%rbp)
ffffffff800168ee:	00 
ffffffff800168ef:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
ffffffff800168f3:	48 83 c4 40          	add    $0x40,%rsp
ffffffff800168f7:	5d                   	pop    %rbp
ffffffff800168f8:	c3                   	ret    
ffffffff800168f9:	cc                   	int3   
ffffffff800168fa:	cc                   	int3   
ffffffff800168fb:	cc                   	int3   
ffffffff800168fc:	cc                   	int3   
ffffffff800168fd:	cc                   	int3   
ffffffff800168fe:	cc                   	int3   
ffffffff800168ff:	cc                   	int3   

ffffffff80016900 <utf8_to_utf16>:
ffffffff80016900:	55                   	push   %rbp
ffffffff80016901:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016904:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff80016908:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff8001690c:	48 89 75 d8          	mov    %rsi,-0x28(%rbp)
ffffffff80016910:	48 89 55 e0          	mov    %rdx,-0x20(%rbp)
ffffffff80016914:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
ffffffff80016918:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
ffffffff8001691f:	00 
ffffffff80016920:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80016927:	00 
ffffffff80016928:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff8001692c:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80016930:	73 5b                	jae    ffffffff8001698d <utf8_to_utf16+0x8d>
ffffffff80016932:	48 8b 7d c8          	mov    -0x38(%rbp),%rdi
ffffffff80016936:	48 8b 75 d8          	mov    -0x28(%rbp),%rsi
ffffffff8001693a:	48 8d 55 e8          	lea    -0x18(%rbp),%rdx
ffffffff8001693e:	e8 5d 00 00 00       	call   ffffffff800169a0 <decode_utf8>
ffffffff80016943:	89 45 f4             	mov    %eax,-0xc(%rbp)
ffffffff80016946:	48 83 7d e0 00       	cmpq   $0x0,-0x20(%rbp)
ffffffff8001694b:	75 14                	jne    ffffffff80016961 <utf8_to_utf16+0x61>
ffffffff8001694d:	8b 7d f4             	mov    -0xc(%rbp),%edi
ffffffff80016950:	e8 db 01 00 00       	call   ffffffff80016b30 <calculate_utf16_len>
ffffffff80016955:	48 98                	cltq   
ffffffff80016957:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff8001695b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001695f:	eb 1c                	jmp    ffffffff8001697d <utf8_to_utf16+0x7d>
ffffffff80016961:	8b 7d f4             	mov    -0xc(%rbp),%edi
ffffffff80016964:	48 8b 75 e0          	mov    -0x20(%rbp),%rsi
ffffffff80016968:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
ffffffff8001696c:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
ffffffff80016970:	e8 eb 01 00 00       	call   ffffffff80016b60 <encode_utf16>
ffffffff80016975:	48 03 45 f8          	add    -0x8(%rbp),%rax
ffffffff80016979:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
ffffffff8001697d:	eb 00                	jmp    ffffffff8001697f <utf8_to_utf16+0x7f>
ffffffff8001697f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80016983:	48 83 c0 01          	add    $0x1,%rax
ffffffff80016987:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
ffffffff8001698b:	eb 9b                	jmp    ffffffff80016928 <utf8_to_utf16+0x28>
ffffffff8001698d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
ffffffff80016991:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80016995:	5d                   	pop    %rbp
ffffffff80016996:	c3                   	ret    
ffffffff80016997:	cc                   	int3   
ffffffff80016998:	cc                   	int3   
ffffffff80016999:	cc                   	int3   
ffffffff8001699a:	cc                   	int3   
ffffffff8001699b:	cc                   	int3   
ffffffff8001699c:	cc                   	int3   
ffffffff8001699d:	cc                   	int3   
ffffffff8001699e:	cc                   	int3   
ffffffff8001699f:	cc                   	int3   

ffffffff800169a0 <decode_utf8>:
ffffffff800169a0:	55                   	push   %rbp
ffffffff800169a1:	48 89 e5             	mov    %rsp,%rbp
ffffffff800169a4:	48 83 ec 40          	sub    $0x40,%rsp
ffffffff800169a8:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
ffffffff800169ac:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
ffffffff800169b0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff800169b4:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff800169b8:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff800169bc:	48 8b 09             	mov    (%rcx),%rcx
ffffffff800169bf:	8a 04 08             	mov    (%rax,%rcx,1),%al
ffffffff800169c2:	88 45 fd             	mov    %al,-0x3(%rbp)
ffffffff800169c5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%rbp)
ffffffff800169cc:	c6 45 ff 00          	movb   $0x0,-0x1(%rbp)
ffffffff800169d0:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800169d3:	ff c0                	inc    %eax
ffffffff800169d5:	89 45 e8             	mov    %eax,-0x18(%rbp)
ffffffff800169d8:	8b 45 e8             	mov    -0x18(%rbp),%eax
ffffffff800169db:	ff c8                	dec    %eax
ffffffff800169dd:	48 98                	cltq   
ffffffff800169df:	48 8d 84 00 70 a5 01 	lea    -0x7ffe5a90(%rax,%rax,1),%rax
ffffffff800169e6:	80 
ffffffff800169e7:	66 8b 00             	mov    (%rax),%ax
ffffffff800169ea:	66 89 45 f0          	mov    %ax,-0x10(%rbp)
ffffffff800169ee:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
ffffffff800169f2:	0f b6 4d f0          	movzbl -0x10(%rbp),%ecx
ffffffff800169f6:	21 c8                	and    %ecx,%eax
ffffffff800169f8:	0f b6 4d f1          	movzbl -0xf(%rbp),%ecx
ffffffff800169fc:	39 c8                	cmp    %ecx,%eax
ffffffff800169fe:	0f 94 c0             	sete   %al
ffffffff80016a01:	24 01                	and    $0x1,%al
ffffffff80016a03:	88 45 ff             	mov    %al,-0x1(%rbp)
ffffffff80016a06:	31 c0                	xor    %eax,%eax
ffffffff80016a08:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80016a0c:	75 07                	jne    ffffffff80016a15 <decode_utf8+0x75>
ffffffff80016a0e:	83 7d e8 04          	cmpl   $0x4,-0x18(%rbp)
ffffffff80016a12:	0f 9c c0             	setl   %al
ffffffff80016a15:	a8 01                	test   $0x1,%al
ffffffff80016a17:	75 b7                	jne    ffffffff800169d0 <decode_utf8+0x30>
ffffffff80016a19:	f6 45 ff 01          	testb  $0x1,-0x1(%rbp)
ffffffff80016a1d:	75 0c                	jne    ffffffff80016a2b <decode_utf8+0x8b>
ffffffff80016a1f:	c7 45 ec fd ff 00 00 	movl   $0xfffd,-0x14(%rbp)
ffffffff80016a26:	e9 f8 00 00 00       	jmp    ffffffff80016b23 <decode_utf8+0x183>
ffffffff80016a2b:	0f b6 45 fd          	movzbl -0x3(%rbp),%eax
ffffffff80016a2f:	0f b6 4d f0          	movzbl -0x10(%rbp),%ecx
ffffffff80016a33:	83 f1 ff             	xor    $0xffffffff,%ecx
ffffffff80016a36:	21 c8                	and    %ecx,%eax
ffffffff80016a38:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80016a3b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
ffffffff80016a42:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80016a45:	8b 4d e8             	mov    -0x18(%rbp),%ecx
ffffffff80016a48:	83 e9 01             	sub    $0x1,%ecx
ffffffff80016a4b:	39 c8                	cmp    %ecx,%eax
ffffffff80016a4d:	7d 7f                	jge    ffffffff80016ace <decode_utf8+0x12e>
ffffffff80016a4f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80016a53:	48 8b 00             	mov    (%rax),%rax
ffffffff80016a56:	48 83 c0 01          	add    $0x1,%rax
ffffffff80016a5a:	48 3b 45 c0          	cmp    -0x40(%rbp),%rax
ffffffff80016a5e:	72 0c                	jb     ffffffff80016a6c <decode_utf8+0xcc>
ffffffff80016a60:	c7 45 ec fd ff 00 00 	movl   $0xfffd,-0x14(%rbp)
ffffffff80016a67:	e9 b7 00 00 00       	jmp    ffffffff80016b23 <decode_utf8+0x183>
ffffffff80016a6c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
ffffffff80016a70:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
ffffffff80016a74:	48 8b 09             	mov    (%rcx),%rcx
ffffffff80016a77:	8a 44 08 01          	mov    0x1(%rax,%rcx,1),%al
ffffffff80016a7b:	88 45 fe             	mov    %al,-0x2(%rbp)
ffffffff80016a7e:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff80016a82:	25 c0 00 00 00       	and    $0xc0,%eax
ffffffff80016a87:	3d 80 00 00 00       	cmp    $0x80,%eax
ffffffff80016a8c:	74 0c                	je     ffffffff80016a9a <decode_utf8+0xfa>
ffffffff80016a8e:	c7 45 ec fd ff 00 00 	movl   $0xfffd,-0x14(%rbp)
ffffffff80016a95:	e9 89 00 00 00       	jmp    ffffffff80016b23 <decode_utf8+0x183>
ffffffff80016a9a:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80016a9d:	c1 e0 06             	shl    $0x6,%eax
ffffffff80016aa0:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80016aa3:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
ffffffff80016aa7:	25 3f ff ff ff       	and    $0xffffff3f,%eax
ffffffff80016aac:	0b 45 f8             	or     -0x8(%rbp),%eax
ffffffff80016aaf:	89 45 f8             	mov    %eax,-0x8(%rbp)
ffffffff80016ab2:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
ffffffff80016ab6:	48 8b 08             	mov    (%rax),%rcx
ffffffff80016ab9:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80016abd:	48 89 08             	mov    %rcx,(%rax)
ffffffff80016ac0:	8b 45 e4             	mov    -0x1c(%rbp),%eax
ffffffff80016ac3:	83 c0 01             	add    $0x1,%eax
ffffffff80016ac6:	89 45 e4             	mov    %eax,-0x1c(%rbp)
ffffffff80016ac9:	e9 74 ff ff ff       	jmp    ffffffff80016a42 <decode_utf8+0xa2>
ffffffff80016ace:	8b 7d f8             	mov    -0x8(%rbp),%edi
ffffffff80016ad1:	e8 7a 01 00 00       	call   ffffffff80016c50 <calculate_utf8_len>
ffffffff80016ad6:	89 45 d4             	mov    %eax,-0x2c(%rbp)
ffffffff80016ad9:	8b 45 d4             	mov    -0x2c(%rbp),%eax
ffffffff80016adc:	3b 45 e8             	cmp    -0x18(%rbp),%eax
ffffffff80016adf:	74 09                	je     ffffffff80016aea <decode_utf8+0x14a>
ffffffff80016ae1:	c7 45 ec fd ff 00 00 	movl   $0xfffd,-0x14(%rbp)
ffffffff80016ae8:	eb 39                	jmp    ffffffff80016b23 <decode_utf8+0x183>
ffffffff80016aea:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
ffffffff80016af1:	73 18                	jae    ffffffff80016b0b <decode_utf8+0x16b>
ffffffff80016af3:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80016af6:	25 00 f8 00 00       	and    $0xf800,%eax
ffffffff80016afb:	3d 00 d8 00 00       	cmp    $0xd800,%eax
ffffffff80016b00:	75 09                	jne    ffffffff80016b0b <decode_utf8+0x16b>
ffffffff80016b02:	c7 45 ec fd ff 00 00 	movl   $0xfffd,-0x14(%rbp)
ffffffff80016b09:	eb 18                	jmp    ffffffff80016b23 <decode_utf8+0x183>
ffffffff80016b0b:	81 7d f8 ff ff 10 00 	cmpl   $0x10ffff,-0x8(%rbp)
ffffffff80016b12:	76 09                	jbe    ffffffff80016b1d <decode_utf8+0x17d>
ffffffff80016b14:	c7 45 ec fd ff 00 00 	movl   $0xfffd,-0x14(%rbp)
ffffffff80016b1b:	eb 06                	jmp    ffffffff80016b23 <decode_utf8+0x183>
ffffffff80016b1d:	8b 45 f8             	mov    -0x8(%rbp),%eax
ffffffff80016b20:	89 45 ec             	mov    %eax,-0x14(%rbp)
ffffffff80016b23:	8b 45 ec             	mov    -0x14(%rbp),%eax
ffffffff80016b26:	48 83 c4 40          	add    $0x40,%rsp
ffffffff80016b2a:	5d                   	pop    %rbp
ffffffff80016b2b:	c3                   	ret    
ffffffff80016b2c:	cc                   	int3   
ffffffff80016b2d:	cc                   	int3   
ffffffff80016b2e:	cc                   	int3   
ffffffff80016b2f:	cc                   	int3   

ffffffff80016b30 <calculate_utf16_len>:
ffffffff80016b30:	55                   	push   %rbp
ffffffff80016b31:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016b34:	50                   	push   %rax
ffffffff80016b35:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff80016b38:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
ffffffff80016b3f:	77 09                	ja     ffffffff80016b4a <calculate_utf16_len+0x1a>
ffffffff80016b41:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80016b48:	eb 07                	jmp    ffffffff80016b51 <calculate_utf16_len+0x21>
ffffffff80016b4a:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
ffffffff80016b51:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016b54:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80016b58:	5d                   	pop    %rbp
ffffffff80016b59:	c3                   	ret    
ffffffff80016b5a:	cc                   	int3   
ffffffff80016b5b:	cc                   	int3   
ffffffff80016b5c:	cc                   	int3   
ffffffff80016b5d:	cc                   	int3   
ffffffff80016b5e:	cc                   	int3   
ffffffff80016b5f:	cc                   	int3   

ffffffff80016b60 <encode_utf16>:
ffffffff80016b60:	55                   	push   %rbp
ffffffff80016b61:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016b64:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80016b68:	89 7d fc             	mov    %edi,-0x4(%rbp)
ffffffff80016b6b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
ffffffff80016b6f:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
ffffffff80016b73:	48 89 4d f0          	mov    %rcx,-0x10(%rbp)
ffffffff80016b77:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80016b7b:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80016b7f:	72 0d                	jb     ffffffff80016b8e <encode_utf16+0x2e>
ffffffff80016b81:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80016b88:	00 
ffffffff80016b89:	e9 aa 00 00 00       	jmp    ffffffff80016c38 <encode_utf16+0xd8>
ffffffff80016b8e:	81 7d fc ff ff 00 00 	cmpl   $0xffff,-0x4(%rbp)
ffffffff80016b95:	77 1c                	ja     ffffffff80016bb3 <encode_utf16+0x53>
ffffffff80016b97:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016b9a:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80016b9e:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80016ba2:	66 89 04 51          	mov    %ax,(%rcx,%rdx,2)
ffffffff80016ba6:	48 c7 45 e8 01 00 00 	movq   $0x1,-0x18(%rbp)
ffffffff80016bad:	00 
ffffffff80016bae:	e9 85 00 00 00       	jmp    ffffffff80016c38 <encode_utf16+0xd8>
ffffffff80016bb3:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
ffffffff80016bb7:	48 83 c0 01          	add    $0x1,%rax
ffffffff80016bbb:	48 3b 45 d8          	cmp    -0x28(%rbp),%rax
ffffffff80016bbf:	72 0a                	jb     ffffffff80016bcb <encode_utf16+0x6b>
ffffffff80016bc1:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
ffffffff80016bc8:	00 
ffffffff80016bc9:	eb 6d                	jmp    ffffffff80016c38 <encode_utf16+0xd8>
ffffffff80016bcb:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016bce:	2d 00 00 01 00       	sub    $0x10000,%eax
ffffffff80016bd3:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80016bd6:	66 c7 45 f8 00 dc    	movw   $0xdc00,-0x8(%rbp)
ffffffff80016bdc:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016bdf:	25 ff 03 00 00       	and    $0x3ff,%eax
ffffffff80016be4:	0f b7 4d f8          	movzwl -0x8(%rbp),%ecx
ffffffff80016be8:	09 c1                	or     %eax,%ecx
ffffffff80016bea:	66 89 4d f8          	mov    %cx,-0x8(%rbp)
ffffffff80016bee:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016bf1:	c1 e8 0a             	shr    $0xa,%eax
ffffffff80016bf4:	89 45 fc             	mov    %eax,-0x4(%rbp)
ffffffff80016bf7:	66 c7 45 fa 00 d8    	movw   $0xd800,-0x6(%rbp)
ffffffff80016bfd:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016c00:	25 ff 03 00 00       	and    $0x3ff,%eax
ffffffff80016c05:	0f b7 4d fa          	movzwl -0x6(%rbp),%ecx
ffffffff80016c09:	09 c1                	or     %eax,%ecx
ffffffff80016c0b:	66 89 4d fa          	mov    %cx,-0x6(%rbp)
ffffffff80016c0f:	66 8b 45 fa          	mov    -0x6(%rbp),%ax
ffffffff80016c13:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80016c17:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80016c1b:	66 89 04 51          	mov    %ax,(%rcx,%rdx,2)
ffffffff80016c1f:	66 8b 45 f8          	mov    -0x8(%rbp),%ax
ffffffff80016c23:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
ffffffff80016c27:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
ffffffff80016c2b:	66 89 44 51 02       	mov    %ax,0x2(%rcx,%rdx,2)
ffffffff80016c30:	48 c7 45 e8 02 00 00 	movq   $0x2,-0x18(%rbp)
ffffffff80016c37:	00 
ffffffff80016c38:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
ffffffff80016c3c:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80016c40:	5d                   	pop    %rbp
ffffffff80016c41:	c3                   	ret    
ffffffff80016c42:	cc                   	int3   
ffffffff80016c43:	cc                   	int3   
ffffffff80016c44:	cc                   	int3   
ffffffff80016c45:	cc                   	int3   
ffffffff80016c46:	cc                   	int3   
ffffffff80016c47:	cc                   	int3   
ffffffff80016c48:	cc                   	int3   
ffffffff80016c49:	cc                   	int3   
ffffffff80016c4a:	cc                   	int3   
ffffffff80016c4b:	cc                   	int3   
ffffffff80016c4c:	cc                   	int3   
ffffffff80016c4d:	cc                   	int3   
ffffffff80016c4e:	cc                   	int3   
ffffffff80016c4f:	cc                   	int3   

ffffffff80016c50 <calculate_utf8_len>:
ffffffff80016c50:	55                   	push   %rbp
ffffffff80016c51:	48 89 e5             	mov    %rsp,%rbp
ffffffff80016c54:	50                   	push   %rax
ffffffff80016c55:	89 7d f8             	mov    %edi,-0x8(%rbp)
ffffffff80016c58:	83 7d f8 7f          	cmpl   $0x7f,-0x8(%rbp)
ffffffff80016c5c:	77 09                	ja     ffffffff80016c67 <calculate_utf8_len+0x17>
ffffffff80016c5e:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%rbp)
ffffffff80016c65:	eb 2b                	jmp    ffffffff80016c92 <calculate_utf8_len+0x42>
ffffffff80016c67:	81 7d f8 ff 07 00 00 	cmpl   $0x7ff,-0x8(%rbp)
ffffffff80016c6e:	77 09                	ja     ffffffff80016c79 <calculate_utf8_len+0x29>
ffffffff80016c70:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%rbp)
ffffffff80016c77:	eb 19                	jmp    ffffffff80016c92 <calculate_utf8_len+0x42>
ffffffff80016c79:	81 7d f8 ff ff 00 00 	cmpl   $0xffff,-0x8(%rbp)
ffffffff80016c80:	77 09                	ja     ffffffff80016c8b <calculate_utf8_len+0x3b>
ffffffff80016c82:	c7 45 fc 03 00 00 00 	movl   $0x3,-0x4(%rbp)
ffffffff80016c89:	eb 07                	jmp    ffffffff80016c92 <calculate_utf8_len+0x42>
ffffffff80016c8b:	c7 45 fc 04 00 00 00 	movl   $0x4,-0x4(%rbp)
ffffffff80016c92:	8b 45 fc             	mov    -0x4(%rbp),%eax
ffffffff80016c95:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80016c99:	5d                   	pop    %rbp
ffffffff80016c9a:	c3                   	ret    
